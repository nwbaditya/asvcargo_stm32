
asvcargo_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea34  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  0800ebd8  0800ebd8  0001ebd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f01c  0800f01c  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f01c  0800f01c  0001f01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f024  0800f024  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f024  0800f024  0001f024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f028  0800f028  0001f028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800f02c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002068  200002cc  0800f2f8  000202cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002334  0800f2f8  00022334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed87  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048d6  00000000  00000000  0003f083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e8  00000000  00000000  00043960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e0  00000000  00000000  00045248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d23d  00000000  00000000  00046928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020be6  00000000  00000000  00063b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a095b  00000000  00000000  0008474b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001250a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007930  00000000  00000000  001250f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ebbc 	.word	0x0800ebbc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	0800ebbc 	.word	0x0800ebbc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f62:	463b      	mov	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f6e:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000f70:	4a21      	ldr	r2, [pc, #132]	; (8000ff8 <MX_ADC1_Init+0x9c>)
 8000f72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f74:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f80:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f86:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000f9c:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <MX_ADC1_Init+0xa0>)
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fba:	480e      	ldr	r0, [pc, #56]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000fbc:	f001 fd0e 	bl	80029dc <HAL_ADC_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fc6:	f000 fc05 	bl	80017d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <MX_ADC1_Init+0x98>)
 8000fdc:	f001 ff32 	bl	8002e44 <HAL_ADC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000fe6:	f000 fbf5 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200002e8 	.word	0x200002e8
 8000ff8:	40012000 	.word	0x40012000
 8000ffc:	0f000001 	.word	0x0f000001

08001000 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a1b      	ldr	r2, [pc, #108]	; (800108c <HAL_ADC_MspInit+0x8c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d12f      	bne.n	8001082 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <HAL_ADC_MspInit+0x90>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a19      	ldr	r2, [pc, #100]	; (8001090 <HAL_ADC_MspInit+0x90>)
 800102c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <HAL_ADC_MspInit+0x90>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b13      	ldr	r3, [pc, #76]	; (8001090 <HAL_ADC_MspInit+0x90>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a12      	ldr	r2, [pc, #72]	; (8001090 <HAL_ADC_MspInit+0x90>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <HAL_ADC_MspInit+0x90>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800105a:	2302      	movs	r3, #2
 800105c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800105e:	2303      	movs	r3, #3
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	4809      	ldr	r0, [pc, #36]	; (8001094 <HAL_ADC_MspInit+0x94>)
 800106e:	f002 fd93 	bl	8003b98 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2101      	movs	r1, #1
 8001076:	2012      	movs	r0, #18
 8001078:	f002 f9e7 	bl	800344a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800107c:	2012      	movs	r0, #18
 800107e:	f002 fa00 	bl	8003482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	; 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40012000 	.word	0x40012000
 8001090:	40023800 	.word	0x40023800
 8001094:	40020000 	.word	0x40020000

08001098 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_DMA_Init+0x3c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <MX_DMA_Init+0x3c>)
 80010a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_DMA_Init+0x3c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	203a      	movs	r0, #58	; 0x3a
 80010c0:	f002 f9c3 	bl	800344a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80010c4:	203a      	movs	r0, #58	; 0x3a
 80010c6:	f002 f9dc 	bl	8003482 <HAL_NVIC_EnableIRQ>

}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800

080010d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <MX_GPIO_Init+0xec>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a33      	ldr	r2, [pc, #204]	; (80011c4 <MX_GPIO_Init+0xec>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b31      	ldr	r3, [pc, #196]	; (80011c4 <MX_GPIO_Init+0xec>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <MX_GPIO_Init+0xec>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a2c      	ldr	r2, [pc, #176]	; (80011c4 <MX_GPIO_Init+0xec>)
 8001114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <MX_GPIO_Init+0xec>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <MX_GPIO_Init+0xec>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a25      	ldr	r2, [pc, #148]	; (80011c4 <MX_GPIO_Init+0xec>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <MX_GPIO_Init+0xec>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <MX_GPIO_Init+0xec>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a1e      	ldr	r2, [pc, #120]	; (80011c4 <MX_GPIO_Init+0xec>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <MX_GPIO_Init+0xec>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15
 800115e:	2200      	movs	r2, #0
 8001160:	f24c 2126 	movw	r1, #49702	; 0xc226
 8001164:	4818      	ldr	r0, [pc, #96]	; (80011c8 <MX_GPIO_Init+0xf0>)
 8001166:	f002 fe9b 	bl	8003ea0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800116a:	2301      	movs	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800116e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4619      	mov	r1, r3
 800117e:	4812      	ldr	r0, [pc, #72]	; (80011c8 <MX_GPIO_Init+0xf0>)
 8001180:	f002 fd0a 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB15
                           PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15
 8001184:	f24c 2326 	movw	r3, #49702	; 0xc226
 8001188:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	2301      	movs	r3, #1
 800118c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	480a      	ldr	r0, [pc, #40]	; (80011c8 <MX_GPIO_Init+0xf0>)
 800119e:	f002 fcfb 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011a2:	2308      	movs	r3, #8
 80011a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <MX_GPIO_Init+0xf0>)
 80011b6:	f002 fcef 	bl	8003b98 <HAL_GPIO_Init>

}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	; 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020400 	.word	0x40020400

080011cc <RCUpdate>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void RCUpdate(){
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
	if(rc_data.rawdata[7] < 1000)	rc.autonomous_mode = ASV_AUTO;
 80011d0:	4b4c      	ldr	r3, [pc, #304]	; (8001304 <RCUpdate+0x138>)
 80011d2:	89db      	ldrh	r3, [r3, #14]
 80011d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011d8:	d202      	bcs.n	80011e0 <RCUpdate+0x14>
 80011da:	4b4b      	ldr	r3, [pc, #300]	; (8001308 <RCUpdate+0x13c>)
 80011dc:	2201      	movs	r2, #1
 80011de:	701a      	strb	r2, [r3, #0]
	if(rc_data.rawdata[7] > 1000)	rc.autonomous_mode = ASV_MANUAL;
 80011e0:	4b48      	ldr	r3, [pc, #288]	; (8001304 <RCUpdate+0x138>)
 80011e2:	89db      	ldrh	r3, [r3, #14]
 80011e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011e8:	d902      	bls.n	80011f0 <RCUpdate+0x24>
 80011ea:	4b47      	ldr	r3, [pc, #284]	; (8001308 <RCUpdate+0x13c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
	if(rc_data.rawdata[6] < 1000)	rc.fan_mode = FAN_ON;
 80011f0:	4b44      	ldr	r3, [pc, #272]	; (8001304 <RCUpdate+0x138>)
 80011f2:	899b      	ldrh	r3, [r3, #12]
 80011f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011f8:	d202      	bcs.n	8001200 <RCUpdate+0x34>
 80011fa:	4b43      	ldr	r3, [pc, #268]	; (8001308 <RCUpdate+0x13c>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	709a      	strb	r2, [r3, #2]
	if(rc_data.rawdata[6] > 1000)	rc.fan_mode = FAN_OFF;
 8001200:	4b40      	ldr	r3, [pc, #256]	; (8001304 <RCUpdate+0x138>)
 8001202:	899b      	ldrh	r3, [r3, #12]
 8001204:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001208:	d902      	bls.n	8001210 <RCUpdate+0x44>
 800120a:	4b3f      	ldr	r3, [pc, #252]	; (8001308 <RCUpdate+0x13c>)
 800120c:	2200      	movs	r2, #0
 800120e:	709a      	strb	r2, [r3, #2]
	if(rc_data.rawdata[5] < 1000)	rc.actuator_mode = ACTUATOR_ENABLE;
 8001210:	4b3c      	ldr	r3, [pc, #240]	; (8001304 <RCUpdate+0x138>)
 8001212:	895b      	ldrh	r3, [r3, #10]
 8001214:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001218:	d202      	bcs.n	8001220 <RCUpdate+0x54>
 800121a:	4b3b      	ldr	r3, [pc, #236]	; (8001308 <RCUpdate+0x13c>)
 800121c:	2201      	movs	r2, #1
 800121e:	705a      	strb	r2, [r3, #1]
	if(rc_data.rawdata[5] > 1000)	rc.actuator_mode = ACTUATOR_DISABLE;
 8001220:	4b38      	ldr	r3, [pc, #224]	; (8001304 <RCUpdate+0x138>)
 8001222:	895b      	ldrh	r3, [r3, #10]
 8001224:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001228:	d902      	bls.n	8001230 <RCUpdate+0x64>
 800122a:	4b37      	ldr	r3, [pc, #220]	; (8001308 <RCUpdate+0x13c>)
 800122c:	2200      	movs	r2, #0
 800122e:	705a      	strb	r2, [r3, #1]

	rc.stk_y = rc_data.rawdata[1];
 8001230:	4b34      	ldr	r3, [pc, #208]	; (8001304 <RCUpdate+0x138>)
 8001232:	885b      	ldrh	r3, [r3, #2]
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800123c:	4b32      	ldr	r3, [pc, #200]	; (8001308 <RCUpdate+0x13c>)
 800123e:	edc3 7a02 	vstr	s15, [r3, #8]
	rc.stk_x = rc_data.rawdata[0];
 8001242:	4b30      	ldr	r3, [pc, #192]	; (8001304 <RCUpdate+0x138>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	ee07 3a90 	vmov	s15, r3
 800124a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800124e:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <RCUpdate+0x13c>)
 8001250:	edc3 7a01 	vstr	s15, [r3, #4]

	rc.stk_y = (1035 - rc.stk_y)/ 695.0;
 8001254:	4b2c      	ldr	r3, [pc, #176]	; (8001308 <RCUpdate+0x13c>)
 8001256:	edd3 7a02 	vldr	s15, [r3, #8]
 800125a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800130c <RCUpdate+0x140>
 800125e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001262:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8001310 <RCUpdate+0x144>
 8001266:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800126a:	4b27      	ldr	r3, [pc, #156]	; (8001308 <RCUpdate+0x13c>)
 800126c:	edc3 7a02 	vstr	s15, [r3, #8]
	rc.stk_x = (1000 - rc.stk_x)/ 693.0;
 8001270:	4b25      	ldr	r3, [pc, #148]	; (8001308 <RCUpdate+0x13c>)
 8001272:	edd3 7a01 	vldr	s15, [r3, #4]
 8001276:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001314 <RCUpdate+0x148>
 800127a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800127e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001318 <RCUpdate+0x14c>
 8001282:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001286:	4b20      	ldr	r3, [pc, #128]	; (8001308 <RCUpdate+0x13c>)
 8001288:	edc3 7a01 	vstr	s15, [r3, #4]

	if(rc.stk_y > 1) rc.stk_y = 1;
 800128c:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <RCUpdate+0x13c>)
 800128e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001292:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	dd03      	ble.n	80012a8 <RCUpdate+0xdc>
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <RCUpdate+0x13c>)
 80012a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80012a6:	609a      	str	r2, [r3, #8]
	if(rc.stk_y < -1) rc.stk_y = -1;
 80012a8:	4b17      	ldr	r3, [pc, #92]	; (8001308 <RCUpdate+0x13c>)
 80012aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80012ae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80012b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	d502      	bpl.n	80012c2 <RCUpdate+0xf6>
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <RCUpdate+0x13c>)
 80012be:	4a17      	ldr	r2, [pc, #92]	; (800131c <RCUpdate+0x150>)
 80012c0:	609a      	str	r2, [r3, #8]
	if(rc.stk_x > 1) rc.stk_x = 1;
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <RCUpdate+0x13c>)
 80012c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <RCUpdate+0x112>
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <RCUpdate+0x13c>)
 80012d8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80012dc:	605a      	str	r2, [r3, #4]
	if(rc.stk_x < -1) rc.stk_x = -1;
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <RCUpdate+0x13c>)
 80012e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80012e4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80012e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f0:	d400      	bmi.n	80012f4 <RCUpdate+0x128>
}
 80012f2:	e002      	b.n	80012fa <RCUpdate+0x12e>
	if(rc.stk_x < -1) rc.stk_x = -1;
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <RCUpdate+0x13c>)
 80012f6:	4a09      	ldr	r2, [pc, #36]	; (800131c <RCUpdate+0x150>)
 80012f8:	605a      	str	r2, [r3, #4]
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	20000418 	.word	0x20000418
 8001308:	20000404 	.word	0x20000404
 800130c:	44816000 	.word	0x44816000
 8001310:	442dc000 	.word	0x442dc000
 8001314:	447a0000 	.word	0x447a0000
 8001318:	442d4000 	.word	0x442d4000
 800131c:	bf800000 	.word	0xbf800000

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001324:	f001 fac4 	bl	80028b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001328:	f000 f84c 	bl	80013c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132c:	f7ff fed4 	bl	80010d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001330:	f7ff feb2 	bl	8001098 <MX_DMA_Init>
  MX_SPI1_Init();
 8001334:	f000 fc5c 	bl	8001bf0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001338:	f000 fe72 	bl	8002020 <MX_TIM1_Init>
  MX_TIM3_Init();
 800133c:	f000 ff20 	bl	8002180 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001340:	f000 ff78 	bl	8002234 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001344:	f001 f982 	bl	800264c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001348:	f001 f9ac 	bl	80026a4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800134c:	f7ff fe06 	bl	8000f5c <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8001350:	f009 ff6a 	bl	800b228 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001354:	f000 febc 	bl	80020d0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001358:	f000 ffc6 	bl	80022e8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 800135c:	4812      	ldr	r0, [pc, #72]	; (80013a8 <main+0x88>)
 800135e:	f004 fd65 	bl	8005e2c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart1, sbus_buf, sizeof(sbus_buf));
 8001362:	2219      	movs	r2, #25
 8001364:	4911      	ldr	r1, [pc, #68]	; (80013ac <main+0x8c>)
 8001366:	4812      	ldr	r0, [pc, #72]	; (80013b0 <main+0x90>)
 8001368:	f005 fe61 	bl	800702e <HAL_UART_Receive_DMA>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //STEER
 800136c:	2100      	movs	r1, #0
 800136e:	4811      	ldr	r0, [pc, #68]	; (80013b4 <main+0x94>)
 8001370:	f004 fe0e 	bl	8005f90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //THRUST
 8001374:	2108      	movs	r1, #8
 8001376:	4810      	ldr	r0, [pc, #64]	; (80013b8 <main+0x98>)
 8001378:	f004 fe0a 	bl	8005f90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //THRUST
 800137c:	2100      	movs	r1, #0
 800137e:	480f      	ldr	r0, [pc, #60]	; (80013bc <main+0x9c>)
 8001380:	f004 fe06 	bl	8005f90 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8001384:	213c      	movs	r1, #60	; 0x3c
 8001386:	480e      	ldr	r0, [pc, #56]	; (80013c0 <main+0xa0>)
 8001388:	f004 ff58 	bl	800623c <HAL_TIM_Encoder_Start_IT>

  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500);
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <main+0x94>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(2000);
 8001396:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800139a:	f001 fafb 	bl	8002994 <HAL_Delay>
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <main+0xa0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2200      	movs	r2, #0
 80013a4:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <main+0x86>
 80013a8:	200005e4 	.word	0x200005e4
 80013ac:	200003d0 	.word	0x200003d0
 80013b0:	2000062c 	.word	0x2000062c
 80013b4:	20000554 	.word	0x20000554
 80013b8:	2000059c 	.word	0x2000059c
 80013bc:	2000050c 	.word	0x2000050c
 80013c0:	200004c4 	.word	0x200004c4

080013c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b094      	sub	sp, #80	; 0x50
 80013c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ca:	f107 0320 	add.w	r3, r7, #32
 80013ce:	2230      	movs	r2, #48	; 0x30
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f00a fc88 	bl	800bce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <SystemClock_Config+0xd4>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	4a29      	ldr	r2, [pc, #164]	; (8001498 <SystemClock_Config+0xd4>)
 80013f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f6:	6413      	str	r3, [r2, #64]	; 0x40
 80013f8:	4b27      	ldr	r3, [pc, #156]	; (8001498 <SystemClock_Config+0xd4>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	4b24      	ldr	r3, [pc, #144]	; (800149c <SystemClock_Config+0xd8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001410:	4a22      	ldr	r2, [pc, #136]	; (800149c <SystemClock_Config+0xd8>)
 8001412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4b20      	ldr	r3, [pc, #128]	; (800149c <SystemClock_Config+0xd8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001424:	2303      	movs	r3, #3
 8001426:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001428:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800142e:	2301      	movs	r3, #1
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001432:	2310      	movs	r3, #16
 8001434:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001436:	2302      	movs	r3, #2
 8001438:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800143a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800143e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001440:	230f      	movs	r3, #15
 8001442:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001444:	2390      	movs	r3, #144	; 0x90
 8001446:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001448:	2302      	movs	r3, #2
 800144a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800144c:	2305      	movs	r3, #5
 800144e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001450:	f107 0320 	add.w	r3, r7, #32
 8001454:	4618      	mov	r0, r3
 8001456:	f003 ffb9 	bl	80053cc <HAL_RCC_OscConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001460:	f000 f9b8 	bl	80017d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001464:	230f      	movs	r3, #15
 8001466:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f004 fa1c 	bl	80058bc <HAL_RCC_ClockConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800148a:	f000 f9a3 	bl	80017d4 <Error_Handler>
  }
}
 800148e:	bf00      	nop
 8001490:	3750      	adds	r7, #80	; 0x50
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40007000 	.word	0x40007000

080014a0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <HAL_UART_RxCpltCallback+0x24>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d103      	bne.n	80014ba <HAL_UART_RxCpltCallback+0x1a>
		sbus_decoder_get_buf(sbus_buf, sizeof(sbus_buf));
 80014b2:	2119      	movs	r1, #25
 80014b4:	4804      	ldr	r0, [pc, #16]	; (80014c8 <HAL_UART_RxCpltCallback+0x28>)
 80014b6:	f000 fb7f 	bl	8001bb8 <sbus_decoder_get_buf>
	}
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40011000 	.word	0x40011000
 80014c8:	200003d0 	.word	0x200003d0

080014cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM5){
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a68      	ldr	r2, [pc, #416]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	f040 80c9 	bne.w	8001672 <HAL_TIM_PeriodElapsedCallback+0x1a6>
		RCUpdate();
 80014e0:	f7ff fe74 	bl	80011cc <RCUpdate>
		HAL_ADC_Start_IT(&hadc1);
 80014e4:	4866      	ldr	r0, [pc, #408]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80014e6:	f001 fabd 	bl	8002a64 <HAL_ADC_Start_IT>
//		counter = __HAL_TIM_GET_COUNTER(&htim1);
		if(rc.autonomous_mode == ASV_AUTO){
 80014ea:	4b66      	ldr	r3, [pc, #408]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d145      	bne.n	800157e <HAL_TIM_PeriodElapsedCallback+0xb2>
			if(hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED){
 80014f2:	4b65      	ldr	r3, [pc, #404]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80014f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d132      	bne.n	8001564 <HAL_TIM_PeriodElapsedCallback+0x98>
				if(usbd_buf_recv[0] == 'A' && usbd_buf_recv[1] == 'B' && usbd_buf_recv[11] == 'B' && usbd_buf_recv[12] == 'A'){
 80014fe:	4b63      	ldr	r3, [pc, #396]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b41      	cmp	r3, #65	; 0x41
 8001504:	d15d      	bne.n	80015c2 <HAL_TIM_PeriodElapsedCallback+0xf6>
 8001506:	4b61      	ldr	r3, [pc, #388]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001508:	785b      	ldrb	r3, [r3, #1]
 800150a:	2b42      	cmp	r3, #66	; 0x42
 800150c:	d159      	bne.n	80015c2 <HAL_TIM_PeriodElapsedCallback+0xf6>
 800150e:	4b5f      	ldr	r3, [pc, #380]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001510:	7adb      	ldrb	r3, [r3, #11]
 8001512:	2b42      	cmp	r3, #66	; 0x42
 8001514:	d155      	bne.n	80015c2 <HAL_TIM_PeriodElapsedCallback+0xf6>
 8001516:	4b5d      	ldr	r3, [pc, #372]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001518:	7b1b      	ldrb	r3, [r3, #12]
 800151a:	2b41      	cmp	r3, #65	; 0x41
 800151c:	d151      	bne.n	80015c2 <HAL_TIM_PeriodElapsedCallback+0xf6>
					memcpy(pc_rudder, usbd_buf_recv + 2, 4);
 800151e:	4b5c      	ldr	r3, [pc, #368]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	4b5b      	ldr	r3, [pc, #364]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001526:	601a      	str	r2, [r3, #0]
					pc_rudder[4] = 0;
 8001528:	4b5a      	ldr	r3, [pc, #360]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800152a:	2200      	movs	r2, #0
 800152c:	711a      	strb	r2, [r3, #4]
					memcpy(pc_thrust, usbd_buf_recv + 7, 4);
 800152e:	4b5a      	ldr	r3, [pc, #360]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	4b59      	ldr	r3, [pc, #356]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001536:	601a      	str	r2, [r3, #0]
					pc_thrust[4] = 0;
 8001538:	4b58      	ldr	r3, [pc, #352]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800153a:	2200      	movs	r2, #0
 800153c:	711a      	strb	r2, [r3, #4]
					asv.thrust = atoi(pc_thrust);
 800153e:	4857      	ldr	r0, [pc, #348]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001540:	f00a fb96 	bl	800bc70 <atoi>
 8001544:	4603      	mov	r3, r0
 8001546:	4a56      	ldr	r2, [pc, #344]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001548:	6013      	str	r3, [r2, #0]
					asv.thrust = asv.thrust - 1500;
 800154a:	4b55      	ldr	r3, [pc, #340]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001552:	4a53      	ldr	r2, [pc, #332]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001554:	6013      	str	r3, [r2, #0]
					asv.steer = atoi(pc_rudder);
 8001556:	484f      	ldr	r0, [pc, #316]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001558:	f00a fb8a 	bl	800bc70 <atoi>
 800155c:	4603      	mov	r3, r0
 800155e:	4a50      	ldr	r2, [pc, #320]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001560:	6053      	str	r3, [r2, #4]
 8001562:	e02e      	b.n	80015c2 <HAL_TIM_PeriodElapsedCallback+0xf6>
				}
		//		memset(usbd_buf_recv, NULL, sizeof(usbd_buf_recv));
			}else{
				memset(usbd_buf_recv, NULL, sizeof(usbd_buf_recv));
 8001564:	220d      	movs	r2, #13
 8001566:	2100      	movs	r1, #0
 8001568:	4848      	ldr	r0, [pc, #288]	; (800168c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800156a:	f00a fbbd 	bl	800bce8 <memset>
				asv.thrust = 0;
 800156e:	4b4c      	ldr	r3, [pc, #304]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
				asv.steer = 1500;
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001576:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	e021      	b.n	80015c2 <HAL_TIM_PeriodElapsedCallback+0xf6>
			}

		}else if(rc.autonomous_mode == ASV_MANUAL){
 800157e:	4b41      	ldr	r3, [pc, #260]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d11d      	bne.n	80015c2 <HAL_TIM_PeriodElapsedCallback+0xf6>
			asv.thrust = rc.stk_y * 500;
 8001586:	4b3f      	ldr	r3, [pc, #252]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001588:	edd3 7a02 	vldr	s15, [r3, #8]
 800158c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80016a4 <HAL_TIM_PeriodElapsedCallback+0x1d8>
 8001590:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001594:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001598:	ee17 2a90 	vmov	r2, s15
 800159c:	4b40      	ldr	r3, [pc, #256]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800159e:	601a      	str	r2, [r3, #0]
			asv.steer = (rc.stk_x * 500) + 1500;
 80015a0:	4b38      	ldr	r3, [pc, #224]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80015a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80015a6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80016a4 <HAL_TIM_PeriodElapsedCallback+0x1d8>
 80015aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ae:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80016a8 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 80015b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ba:	ee17 2a90 	vmov	r2, s15
 80015be:	4b38      	ldr	r3, [pc, #224]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80015c0:	605a      	str	r2, [r3, #4]
		}

		if(rc.fan_mode == FAN_ON){
 80015c2:	4b30      	ldr	r3, [pc, #192]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80015c4:	789b      	ldrb	r3, [r3, #2]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d106      	bne.n	80015d8 <HAL_TIM_PeriodElapsedCallback+0x10c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80015ca:	2201      	movs	r2, #1
 80015cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015d0:	4836      	ldr	r0, [pc, #216]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80015d2:	f002 fc65 	bl	8003ea0 <HAL_GPIO_WritePin>
 80015d6:	e009      	b.n	80015ec <HAL_TIM_PeriodElapsedCallback+0x120>
		}else if(rc.fan_mode == FAN_OFF){
 80015d8:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80015da:	789b      	ldrb	r3, [r3, #2]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d105      	bne.n	80015ec <HAL_TIM_PeriodElapsedCallback+0x120>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80015e0:	2200      	movs	r2, #0
 80015e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015e6:	4831      	ldr	r0, [pc, #196]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80015e8:	f002 fc5a 	bl	8003ea0 <HAL_GPIO_WritePin>
		}

		if(rc.actuator_mode == ACTUATOR_ENABLE){
 80015ec:	4b25      	ldr	r3, [pc, #148]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80015ee:	785b      	ldrb	r3, [r3, #1]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d105      	bne.n	8001600 <HAL_TIM_PeriodElapsedCallback+0x134>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80015f4:	2201      	movs	r2, #1
 80015f6:	2102      	movs	r1, #2
 80015f8:	482c      	ldr	r0, [pc, #176]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80015fa:	f002 fc51 	bl	8003ea0 <HAL_GPIO_WritePin>
 80015fe:	e008      	b.n	8001612 <HAL_TIM_PeriodElapsedCallback+0x146>
		}else if(rc.actuator_mode == ACTUATOR_DISABLE){
 8001600:	4b20      	ldr	r3, [pc, #128]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001602:	785b      	ldrb	r3, [r3, #1]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d104      	bne.n	8001612 <HAL_TIM_PeriodElapsedCallback+0x146>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	2102      	movs	r1, #2
 800160c:	4827      	ldr	r0, [pc, #156]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800160e:	f002 fc47 	bl	8003ea0 <HAL_GPIO_WritePin>
		}

		if(asv.thrust >= 0){
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	db09      	blt.n	800162e <HAL_TIM_PeriodElapsedCallback+0x162>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, asv.thrust);
 800161a:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2200      	movs	r2, #0
 800162a:	63da      	str	r2, [r3, #60]	; 0x3c
 800162c:	e011      	b.n	8001652 <HAL_TIM_PeriodElapsedCallback+0x186>
		}else if(asv.thrust < 0){
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	da0d      	bge.n	8001652 <HAL_TIM_PeriodElapsedCallback+0x186>
			asv.thrust = asv.thrust * (-1);
 8001636:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	425b      	negs	r3, r3
 800163c:	4a18      	ldr	r2, [pc, #96]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800163e:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, asv.thrust);
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800164a:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2200      	movs	r2, #0
 8001650:	635a      	str	r2, [r3, #52]	; 0x34
		}
		sprintf(usbd_buf_send, "%d", rudder_angle_to_send);
 8001652:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	4918      	ldr	r1, [pc, #96]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800165a:	4819      	ldr	r0, [pc, #100]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800165c:	f00a ffb6 	bl	800c5cc <siprintf>
//		*usbd_buf_send = ["Hello wrld"];
		CDC_Transmit_FS((uint8_t*)usbd_buf_send, 7);
 8001660:	2107      	movs	r1, #7
 8001662:	4817      	ldr	r0, [pc, #92]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001664:	f009 fea8 	bl	800b3b8 <CDC_Transmit_FS>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, asv.steer);
 8001668:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40000c00 	.word	0x40000c00
 8001680:	200002e8 	.word	0x200002e8
 8001684:	20000404 	.word	0x20000404
 8001688:	2000071c 	.word	0x2000071c
 800168c:	20000330 	.word	0x20000330
 8001690:	20000332 	.word	0x20000332
 8001694:	200003c8 	.word	0x200003c8
 8001698:	20000337 	.word	0x20000337
 800169c:	200003c0 	.word	0x200003c0
 80016a0:	20000410 	.word	0x20000410
 80016a4:	43fa0000 	.word	0x43fa0000
 80016a8:	44bb8000 	.word	0x44bb8000
 80016ac:	40020400 	.word	0x40020400
 80016b0:	2000050c 	.word	0x2000050c
 80016b4:	2000059c 	.word	0x2000059c
 80016b8:	200003f8 	.word	0x200003f8
 80016bc:	0800ebd8 	.word	0x0800ebd8
 80016c0:	20000340 	.word	0x20000340
 80016c4:	20000554 	.word	0x20000554

080016c8 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a1f      	ldr	r2, [pc, #124]	; (8001754 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d138      	bne.n	800174c <HAL_TIM_IC_CaptureCallback+0x84>
		counter = __HAL_TIM_GET_COUNTER(&htim1);
 80016da:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <HAL_TIM_IC_CaptureCallback+0x90>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	4a1e      	ldr	r2, [pc, #120]	; (800175c <HAL_TIM_IC_CaptureCallback+0x94>)
 80016e2:	6013      	str	r3, [r2, #0]
		enc_count = (int16_t)counter / 4;
 80016e4:	4b1d      	ldr	r3, [pc, #116]	; (800175c <HAL_TIM_IC_CaptureCallback+0x94>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	da00      	bge.n	80016f0 <HAL_TIM_IC_CaptureCallback+0x28>
 80016ee:	3303      	adds	r3, #3
 80016f0:	109b      	asrs	r3, r3, #2
 80016f2:	b21a      	sxth	r2, r3
 80016f4:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <HAL_TIM_IC_CaptureCallback+0x98>)
 80016f6:	801a      	strh	r2, [r3, #0]
		rudder_angle = (enc_count / 600.00 * 360.00);
 80016f8:	4b19      	ldr	r3, [pc, #100]	; (8001760 <HAL_TIM_IC_CaptureCallback+0x98>)
 80016fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe ff18 	bl	8000534 <__aeabi_i2d>
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	4b16      	ldr	r3, [pc, #88]	; (8001764 <HAL_TIM_IC_CaptureCallback+0x9c>)
 800170a:	f7ff f8a7 	bl	800085c <__aeabi_ddiv>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <HAL_TIM_IC_CaptureCallback+0xa0>)
 800171c:	f7fe ff74 	bl	8000608 <__aeabi_dmul>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	f7ff fa46 	bl	8000bb8 <__aeabi_d2f>
 800172c:	4603      	mov	r3, r0
 800172e:	4a0f      	ldr	r2, [pc, #60]	; (800176c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001730:	6013      	str	r3, [r2, #0]
		rudder_angle_to_send = rudder_angle * 100;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001734:	edd3 7a00 	vldr	s15, [r3]
 8001738:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001770 <HAL_TIM_IC_CaptureCallback+0xa8>
 800173c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001740:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001744:	ee17 2a90 	vmov	r2, s15
 8001748:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <HAL_TIM_IC_CaptureCallback+0xac>)
 800174a:	601a      	str	r2, [r3, #0]
	}
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40010000 	.word	0x40010000
 8001758:	200004c4 	.word	0x200004c4
 800175c:	200003ec 	.word	0x200003ec
 8001760:	200003f0 	.word	0x200003f0
 8001764:	4082c000 	.word	0x4082c000
 8001768:	40768000 	.word	0x40768000
 800176c:	200003f4 	.word	0x200003f4
 8001770:	42c80000 	.word	0x42c80000
 8001774:	200003f8 	.word	0x200003f8

08001778 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	adc_val = HAL_ADC_GetValue(&hadc1);
 8001780:	4811      	ldr	r0, [pc, #68]	; (80017c8 <HAL_ADC_ConvCpltCallback+0x50>)
 8001782:	f001 fb3d 	bl	8002e00 <HAL_ADC_GetValue>
 8001786:	4603      	mov	r3, r0
 8001788:	b29a      	uxth	r2, r3
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <HAL_ADC_ConvCpltCallback+0x54>)
 800178c:	801a      	strh	r2, [r3, #0]
	batt_mv = adc_val * 0.0075;
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <HAL_ADC_ConvCpltCallback+0x54>)
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fece 	bl	8000534 <__aeabi_i2d>
 8001798:	a309      	add	r3, pc, #36	; (adr r3, 80017c0 <HAL_ADC_ConvCpltCallback+0x48>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7fe ff33 	bl	8000608 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f7ff fa05 	bl	8000bb8 <__aeabi_d2f>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <HAL_ADC_ConvCpltCallback+0x58>)
 80017b2:	6013      	str	r3, [r2, #0]
  /*If continuousconversion mode is DISABLED uncomment below*/
//  HAL_ADC_Start_IT (&hadc1);
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	f3af 8000 	nop.w
 80017c0:	eb851eb8 	.word	0xeb851eb8
 80017c4:	3f7eb851 	.word	0x3f7eb851
 80017c8:	200002e8 	.word	0x200002e8
 80017cc:	200003fc 	.word	0x200003fc
 80017d0:	20000400 	.word	0x20000400

080017d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d8:	b672      	cpsid	i
}
 80017da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017dc:	e7fe      	b.n	80017dc <Error_Handler+0x8>
	...

080017e0 <sbus_decoder_get_frame>:
#include <stdio.h>

rc_data_t rc_data;

static void sbus_decoder_get_frame(uint8_t* buf)        //传入一帧数据，解析成各个通道数据，一帧长度必然是25字节
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
    rc_data.rawdata[0]  = ((buf[1]| buf[2]<<8)                 & 0x07FF);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3301      	adds	r3, #1
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	b21a      	sxth	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3302      	adds	r3, #2
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	b21b      	sxth	r3, r3
 80017fa:	4313      	orrs	r3, r2
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	b29b      	uxth	r3, r3
 8001800:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001804:	b29a      	uxth	r2, r3
 8001806:	4b9c      	ldr	r3, [pc, #624]	; (8001a78 <sbus_decoder_get_frame+0x298>)
 8001808:	801a      	strh	r2, [r3, #0]
    rc_data.rawdata[1]  = ((buf[2]>>3 |buf[3]<<5)              & 0x07FF);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3302      	adds	r3, #2
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	08db      	lsrs	r3, r3, #3
 8001812:	b2db      	uxtb	r3, r3
 8001814:	b21a      	sxth	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3303      	adds	r3, #3
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	015b      	lsls	r3, r3, #5
 800181e:	b21b      	sxth	r3, r3
 8001820:	4313      	orrs	r3, r2
 8001822:	b21b      	sxth	r3, r3
 8001824:	b29b      	uxth	r3, r3
 8001826:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800182a:	b29a      	uxth	r2, r3
 800182c:	4b92      	ldr	r3, [pc, #584]	; (8001a78 <sbus_decoder_get_frame+0x298>)
 800182e:	805a      	strh	r2, [r3, #2]
    rc_data.rawdata[2]  = ((buf[3]>>6 |buf[4]<<2 |buf[5]<<10)  & 0x07FF);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3303      	adds	r3, #3
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	099b      	lsrs	r3, r3, #6
 8001838:	b2db      	uxtb	r3, r3
 800183a:	b21a      	sxth	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3304      	adds	r3, #4
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	b21b      	sxth	r3, r3
 8001846:	4313      	orrs	r3, r2
 8001848:	b21a      	sxth	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3305      	adds	r3, #5
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	029b      	lsls	r3, r3, #10
 8001852:	b21b      	sxth	r3, r3
 8001854:	4313      	orrs	r3, r2
 8001856:	b21b      	sxth	r3, r3
 8001858:	b29b      	uxth	r3, r3
 800185a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800185e:	b29a      	uxth	r2, r3
 8001860:	4b85      	ldr	r3, [pc, #532]	; (8001a78 <sbus_decoder_get_frame+0x298>)
 8001862:	809a      	strh	r2, [r3, #4]
    rc_data.rawdata[3]  = ((buf[5]>>1 |buf[6]<<7)              & 0x07FF);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3305      	adds	r3, #5
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	085b      	lsrs	r3, r3, #1
 800186c:	b2db      	uxtb	r3, r3
 800186e:	b21a      	sxth	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3306      	adds	r3, #6
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	01db      	lsls	r3, r3, #7
 8001878:	b21b      	sxth	r3, r3
 800187a:	4313      	orrs	r3, r2
 800187c:	b21b      	sxth	r3, r3
 800187e:	b29b      	uxth	r3, r3
 8001880:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001884:	b29a      	uxth	r2, r3
 8001886:	4b7c      	ldr	r3, [pc, #496]	; (8001a78 <sbus_decoder_get_frame+0x298>)
 8001888:	80da      	strh	r2, [r3, #6]
    rc_data.rawdata[4]  = ((buf[6]>>4 |buf[7]<<4)              & 0x07FF);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3306      	adds	r3, #6
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	b2db      	uxtb	r3, r3
 8001894:	b21a      	sxth	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3307      	adds	r3, #7
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	b21b      	sxth	r3, r3
 80018a0:	4313      	orrs	r3, r2
 80018a2:	b21b      	sxth	r3, r3
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	4b72      	ldr	r3, [pc, #456]	; (8001a78 <sbus_decoder_get_frame+0x298>)
 80018ae:	811a      	strh	r2, [r3, #8]
    rc_data.rawdata[5]  = ((buf[7]>>7 |buf[8]<<1 |buf[9]<<9)   & 0x07FF);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3307      	adds	r3, #7
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	09db      	lsrs	r3, r3, #7
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	b21a      	sxth	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3308      	adds	r3, #8
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	b21b      	sxth	r3, r3
 80018c6:	4313      	orrs	r3, r2
 80018c8:	b21a      	sxth	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3309      	adds	r3, #9
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	025b      	lsls	r3, r3, #9
 80018d2:	b21b      	sxth	r3, r3
 80018d4:	4313      	orrs	r3, r2
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	b29b      	uxth	r3, r3
 80018da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018de:	b29a      	uxth	r2, r3
 80018e0:	4b65      	ldr	r3, [pc, #404]	; (8001a78 <sbus_decoder_get_frame+0x298>)
 80018e2:	815a      	strh	r2, [r3, #10]
    rc_data.rawdata[6]  = ((buf[9]>>2 |buf[10]<<6)             & 0x07FF);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3309      	adds	r3, #9
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	089b      	lsrs	r3, r3, #2
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	b21a      	sxth	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	330a      	adds	r3, #10
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	019b      	lsls	r3, r3, #6
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	4313      	orrs	r3, r2
 80018fc:	b21b      	sxth	r3, r3
 80018fe:	b29b      	uxth	r3, r3
 8001900:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001904:	b29a      	uxth	r2, r3
 8001906:	4b5c      	ldr	r3, [pc, #368]	; (8001a78 <sbus_decoder_get_frame+0x298>)
 8001908:	819a      	strh	r2, [r3, #12]
    rc_data.rawdata[7]  = ((buf[10]>>5|buf[11]<<3)             & 0x07FF);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	330a      	adds	r3, #10
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	095b      	lsrs	r3, r3, #5
 8001912:	b2db      	uxtb	r3, r3
 8001914:	b21a      	sxth	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	330b      	adds	r3, #11
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	b21b      	sxth	r3, r3
 8001920:	4313      	orrs	r3, r2
 8001922:	b21b      	sxth	r3, r3
 8001924:	b29b      	uxth	r3, r3
 8001926:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800192a:	b29a      	uxth	r2, r3
 800192c:	4b52      	ldr	r3, [pc, #328]	; (8001a78 <sbus_decoder_get_frame+0x298>)
 800192e:	81da      	strh	r2, [r3, #14]
    rc_data.rawdata[8]  = ((buf[12]   |buf[13]<<8)             & 0x07FF);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	330c      	adds	r3, #12
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b21a      	sxth	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	330d      	adds	r3, #13
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	b21b      	sxth	r3, r3
 8001942:	4313      	orrs	r3, r2
 8001944:	b21b      	sxth	r3, r3
 8001946:	b29b      	uxth	r3, r3
 8001948:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800194c:	b29a      	uxth	r2, r3
 800194e:	4b4a      	ldr	r3, [pc, #296]	; (8001a78 <sbus_decoder_get_frame+0x298>)
 8001950:	821a      	strh	r2, [r3, #16]
    rc_data.rawdata[9]  = ((buf[13]>>3|buf[14]<<5)             & 0x07FF);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	330d      	adds	r3, #13
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	08db      	lsrs	r3, r3, #3
 800195a:	b2db      	uxtb	r3, r3
 800195c:	b21a      	sxth	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	330e      	adds	r3, #14
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	015b      	lsls	r3, r3, #5
 8001966:	b21b      	sxth	r3, r3
 8001968:	4313      	orrs	r3, r2
 800196a:	b21b      	sxth	r3, r3
 800196c:	b29b      	uxth	r3, r3
 800196e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001972:	b29a      	uxth	r2, r3
 8001974:	4b40      	ldr	r3, [pc, #256]	; (8001a78 <sbus_decoder_get_frame+0x298>)
 8001976:	825a      	strh	r2, [r3, #18]
    rc_data.rawdata[10] = ((buf[14]>>6|buf[15]<<2|buf[16]<<10) & 0x07FF);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	330e      	adds	r3, #14
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	099b      	lsrs	r3, r3, #6
 8001980:	b2db      	uxtb	r3, r3
 8001982:	b21a      	sxth	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	330f      	adds	r3, #15
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	b21b      	sxth	r3, r3
 800198e:	4313      	orrs	r3, r2
 8001990:	b21a      	sxth	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3310      	adds	r3, #16
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	029b      	lsls	r3, r3, #10
 800199a:	b21b      	sxth	r3, r3
 800199c:	4313      	orrs	r3, r2
 800199e:	b21b      	sxth	r3, r3
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	4b33      	ldr	r3, [pc, #204]	; (8001a78 <sbus_decoder_get_frame+0x298>)
 80019aa:	829a      	strh	r2, [r3, #20]
    rc_data.rawdata[11] = ((buf[16]>>1|buf[17]<<7)             & 0x07FF);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3310      	adds	r3, #16
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	085b      	lsrs	r3, r3, #1
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	b21a      	sxth	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3311      	adds	r3, #17
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	01db      	lsls	r3, r3, #7
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	4313      	orrs	r3, r2
 80019c4:	b21b      	sxth	r3, r3
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <sbus_decoder_get_frame+0x298>)
 80019d0:	82da      	strh	r2, [r3, #22]
    rc_data.rawdata[12] = ((buf[17]>>4|buf[18]<<4)             & 0x07FF);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3311      	adds	r3, #17
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	091b      	lsrs	r3, r3, #4
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	b21a      	sxth	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3312      	adds	r3, #18
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	011b      	lsls	r3, r3, #4
 80019e6:	b21b      	sxth	r3, r3
 80019e8:	4313      	orrs	r3, r2
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <sbus_decoder_get_frame+0x298>)
 80019f6:	831a      	strh	r2, [r3, #24]
    rc_data.rawdata[13] = ((buf[18]>>7|buf[19]<<1|buf[20]<<9)  & 0x07FF);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3312      	adds	r3, #18
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	09db      	lsrs	r3, r3, #7
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	b21a      	sxth	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3313      	adds	r3, #19
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	b21a      	sxth	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3314      	adds	r3, #20
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	025b      	lsls	r3, r3, #9
 8001a1a:	b21b      	sxth	r3, r3
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	b21b      	sxth	r3, r3
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <sbus_decoder_get_frame+0x298>)
 8001a2a:	835a      	strh	r2, [r3, #26]
    rc_data.rawdata[14] = ((buf[20]>>2|buf[21]<<6)             & 0x07FF);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3314      	adds	r3, #20
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	089b      	lsrs	r3, r3, #2
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	b21a      	sxth	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3315      	adds	r3, #21
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	019b      	lsls	r3, r3, #6
 8001a40:	b21b      	sxth	r3, r3
 8001a42:	4313      	orrs	r3, r2
 8001a44:	b21b      	sxth	r3, r3
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <sbus_decoder_get_frame+0x298>)
 8001a50:	839a      	strh	r2, [r3, #28]
    rc_data.rawdata[15] = ((buf[21]>>5|buf[22]<<3)             & 0x07FF);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3315      	adds	r3, #21
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	095b      	lsrs	r3, r3, #5
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	b21a      	sxth	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3316      	adds	r3, #22
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	b21b      	sxth	r3, r3
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	b21b      	sxth	r3, r3
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	e002      	b.n	8001a7c <sbus_decoder_get_frame+0x29c>
 8001a76:	bf00      	nop
 8001a78:	20000418 	.word	0x20000418
 8001a7c:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <sbus_decoder_get_frame+0x2f4>)
 8001a7e:	83da      	strh	r2, [r3, #30]
    uint8_t i;
    for(i=0;i<16;i++) {
 8001a80:	2300      	movs	r3, #0
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	e018      	b.n	8001ab8 <sbus_decoder_get_frame+0x2d8>
        rc_data.percent[i] = (rc_data.rawdata[i]-340)*100/(1704-340);
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <sbus_decoder_get_frame+0x2f4>)
 8001a8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a8e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001a92:	2264      	movs	r2, #100	; 0x64
 8001a94:	fb02 f303 	mul.w	r3, r2, r3
 8001a98:	4a0f      	ldr	r2, [pc, #60]	; (8001ad8 <sbus_decoder_get_frame+0x2f8>)
 8001a9a:	fb82 1203 	smull	r1, r2, r2, r3
 8001a9e:	1212      	asrs	r2, r2, #8
 8001aa0:	17db      	asrs	r3, r3, #31
 8001aa2:	1ad2      	subs	r2, r2, r3
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	b2d1      	uxtb	r1, r2
 8001aa8:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <sbus_decoder_get_frame+0x2f4>)
 8001aaa:	4413      	add	r3, r2
 8001aac:	460a      	mov	r2, r1
 8001aae:	f883 2020 	strb.w	r2, [r3, #32]
    for(i=0;i<16;i++) {
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	2b0f      	cmp	r3, #15
 8001abc:	d9e3      	bls.n	8001a86 <sbus_decoder_get_frame+0x2a6>
    }
    rc_data.flag_refresh = 1;
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <sbus_decoder_get_frame+0x2f4>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8001ac6:	bf00      	nop
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000418 	.word	0x20000418
 8001ad8:	300c0301 	.word	0x300c0301

08001adc <sbus_decoder_get_byte>:

static uint8_t buf[25]={0}; //保存一帧数据
static int8_t p = 0;   //指向下个字节将要保存的位置
void sbus_decoder_get_byte(uint8_t data)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	; 0x28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
    int8_t q;
    buf[p] = data;
 8001ae6:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <sbus_decoder_get_byte+0xd4>)
 8001ae8:	f993 3000 	ldrsb.w	r3, [r3]
 8001aec:	4619      	mov	r1, r3
 8001aee:	4a31      	ldr	r2, [pc, #196]	; (8001bb4 <sbus_decoder_get_byte+0xd8>)
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	5453      	strb	r3, [r2, r1]
    //判断当前缓存是否满足一帧的格式
    q = p+1;
 8001af4:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <sbus_decoder_get_byte+0xd4>)
 8001af6:	f993 3000 	ldrsb.w	r3, [r3]
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	3301      	adds	r3, #1
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(q == 25) {
 8001b04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001b08:	2b19      	cmp	r3, #25
 8001b0a:	d102      	bne.n	8001b12 <sbus_decoder_get_byte+0x36>
        q = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    if(buf[p] == 0x00 && buf[q] == 0x0f) {      //当前缓存数据满足0x0f开头且0x00结尾
 8001b12:	4b27      	ldr	r3, [pc, #156]	; (8001bb0 <sbus_decoder_get_byte+0xd4>)
 8001b14:	f993 3000 	ldrsb.w	r3, [r3]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b26      	ldr	r3, [pc, #152]	; (8001bb4 <sbus_decoder_get_byte+0xd8>)
 8001b1c:	5c9b      	ldrb	r3, [r3, r2]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d130      	bne.n	8001b84 <sbus_decoder_get_byte+0xa8>
 8001b22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001b26:	4a23      	ldr	r2, [pc, #140]	; (8001bb4 <sbus_decoder_get_byte+0xd8>)
 8001b28:	5cd3      	ldrb	r3, [r2, r3]
 8001b2a:	2b0f      	cmp	r3, #15
 8001b2c:	d12a      	bne.n	8001b84 <sbus_decoder_get_byte+0xa8>
        uint8_t buf_frame[25] = {0};
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	f107 0310 	add.w	r3, r7, #16
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	611a      	str	r2, [r3, #16]
 8001b42:	751a      	strb	r2, [r3, #20]
        memcpy(buf_frame, buf+q, 25-q);
 8001b44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001b48:	4a1a      	ldr	r2, [pc, #104]	; (8001bb4 <sbus_decoder_get_byte+0xd8>)
 8001b4a:	1899      	adds	r1, r3, r2
 8001b4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001b50:	f1c3 0319 	rsb	r3, r3, #25
 8001b54:	461a      	mov	r2, r3
 8001b56:	f107 030c 	add.w	r3, r7, #12
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f00a f8b6 	bl	800bccc <memcpy>
        memcpy(buf_frame+25-q, buf, q);
 8001b60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001b64:	f1c3 0319 	rsb	r3, r3, #25
 8001b68:	f107 020c 	add.w	r2, r7, #12
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 8001b72:	4910      	ldr	r1, [pc, #64]	; (8001bb4 <sbus_decoder_get_byte+0xd8>)
 8001b74:	4618      	mov	r0, r3
 8001b76:	f00a f8a9 	bl	800bccc <memcpy>
        sbus_decoder_get_frame(buf_frame);
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fe2e 	bl	80017e0 <sbus_decoder_get_frame>
    }

    p++;
 8001b84:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <sbus_decoder_get_byte+0xd4>)
 8001b86:	f993 3000 	ldrsb.w	r3, [r3]
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	b25a      	sxtb	r2, r3
 8001b92:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <sbus_decoder_get_byte+0xd4>)
 8001b94:	701a      	strb	r2, [r3, #0]
    if(p == 25) {
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <sbus_decoder_get_byte+0xd4>)
 8001b98:	f993 3000 	ldrsb.w	r3, [r3]
 8001b9c:	2b19      	cmp	r3, #25
 8001b9e:	d102      	bne.n	8001ba6 <sbus_decoder_get_byte+0xca>
        p = 0;
 8001ba0:	4b03      	ldr	r3, [pc, #12]	; (8001bb0 <sbus_decoder_get_byte+0xd4>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	701a      	strb	r2, [r3, #0]
    }
}
 8001ba6:	bf00      	nop
 8001ba8:	3728      	adds	r7, #40	; 0x28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000465 	.word	0x20000465
 8001bb4:	2000044c 	.word	0x2000044c

08001bb8 <sbus_decoder_get_buf>:

void sbus_decoder_get_buf(uint8_t* buf, uint16_t len)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	807b      	strh	r3, [r7, #2]
    uint16_t i;
    for(i=0;i<len;i++) {
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	81fb      	strh	r3, [r7, #14]
 8001bc8:	e009      	b.n	8001bde <sbus_decoder_get_buf+0x26>
        sbus_decoder_get_byte(buf[i]);
 8001bca:	89fb      	ldrh	r3, [r7, #14]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	4413      	add	r3, r2
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff ff82 	bl	8001adc <sbus_decoder_get_byte>
    for(i=0;i<len;i++) {
 8001bd8:	89fb      	ldrh	r3, [r7, #14]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	81fb      	strh	r3, [r7, #14]
 8001bde:	89fa      	ldrh	r2, [r7, #14]
 8001be0:	887b      	ldrh	r3, [r7, #2]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d3f1      	bcc.n	8001bca <sbus_decoder_get_buf+0x12>
    }
}
 8001be6:	bf00      	nop
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001bf4:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001bf6:	4a18      	ldr	r2, [pc, #96]	; (8001c58 <MX_SPI1_Init+0x68>)
 8001bf8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bfa:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001bfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c02:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c34:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001c3c:	220a      	movs	r2, #10
 8001c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c40:	4804      	ldr	r0, [pc, #16]	; (8001c54 <MX_SPI1_Init+0x64>)
 8001c42:	f004 f81b 	bl	8005c7c <HAL_SPI_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c4c:	f7ff fdc2 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000468 	.word	0x20000468
 8001c58:	40013000 	.word	0x40013000

08001c5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a28      	ldr	r2, [pc, #160]	; (8001d1c <HAL_SPI_MspInit+0xc0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d149      	bne.n	8001d12 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <HAL_SPI_MspInit+0xc4>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	4a26      	ldr	r2, [pc, #152]	; (8001d20 <HAL_SPI_MspInit+0xc4>)
 8001c88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8e:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <HAL_SPI_MspInit+0xc4>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <HAL_SPI_MspInit+0xc4>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a1f      	ldr	r2, [pc, #124]	; (8001d20 <HAL_SPI_MspInit+0xc4>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <HAL_SPI_MspInit+0xc4>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <HAL_SPI_MspInit+0xc4>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a18      	ldr	r2, [pc, #96]	; (8001d20 <HAL_SPI_MspInit+0xc4>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <HAL_SPI_MspInit+0xc4>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001cd2:	23a0      	movs	r3, #160	; 0xa0
 8001cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ce2:	2305      	movs	r3, #5
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	480d      	ldr	r0, [pc, #52]	; (8001d24 <HAL_SPI_MspInit+0xc8>)
 8001cee:	f001 ff53 	bl	8003b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cf2:	2310      	movs	r3, #16
 8001cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d02:	2305      	movs	r3, #5
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d06:	f107 0314 	add.w	r3, r7, #20
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4806      	ldr	r0, [pc, #24]	; (8001d28 <HAL_SPI_MspInit+0xcc>)
 8001d0e:	f001 ff43 	bl	8003b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d12:	bf00      	nop
 8001d14:	3728      	adds	r7, #40	; 0x28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40013000 	.word	0x40013000
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40020000 	.word	0x40020000
 8001d28:	40020400 	.word	0x40020400

08001d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <HAL_MspInit+0x4c>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	4a0f      	ldr	r2, [pc, #60]	; (8001d78 <HAL_MspInit+0x4c>)
 8001d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d40:	6453      	str	r3, [r2, #68]	; 0x44
 8001d42:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <HAL_MspInit+0x4c>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	603b      	str	r3, [r7, #0]
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_MspInit+0x4c>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <HAL_MspInit+0x4c>)
 8001d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_MspInit+0x4c>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800

08001d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <NMI_Handler+0x4>

08001d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <HardFault_Handler+0x4>

08001d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <MemManage_Handler+0x4>

08001d8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d92:	e7fe      	b.n	8001d92 <BusFault_Handler+0x4>

08001d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <UsageFault_Handler+0x4>

08001d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc8:	f000 fdc4 	bl	8002954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001dd4:	4802      	ldr	r0, [pc, #8]	; (8001de0 <ADC_IRQHandler+0x10>)
 8001dd6:	f000 ff03 	bl	8002be0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200002e8 	.word	0x200002e8

08001de4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001de8:	4802      	ldr	r0, [pc, #8]	; (8001df4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001dea:	f004 fad5 	bl	8006398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200004c4 	.word	0x200004c4

08001df8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dfc:	4802      	ldr	r0, [pc, #8]	; (8001e08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001dfe:	f004 facb 	bl	8006398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200004c4 	.word	0x200004c4

08001e0c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001e12:	f004 fac1 	bl	8006398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200004c4 	.word	0x200004c4

08001e20 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <TIM1_CC_IRQHandler+0x10>)
 8001e26:	f004 fab7 	bl	8006398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200004c4 	.word	0x200004c4

08001e34 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <TIM5_IRQHandler+0x10>)
 8001e3a:	f004 faad 	bl	8006398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200005e4 	.word	0x200005e4

08001e48 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <DMA2_Stream2_IRQHandler+0x10>)
 8001e4e:	f001 fc39 	bl	80036c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200006b4 	.word	0x200006b4

08001e5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e60:	4802      	ldr	r0, [pc, #8]	; (8001e6c <OTG_FS_IRQHandler+0x10>)
 8001e62:	f002 f986 	bl	8004172 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20001bf8 	.word	0x20001bf8

08001e70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
	return 1;
 8001e74:	2301      	movs	r3, #1
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <_kill>:

int _kill(int pid, int sig)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e8a:	f009 fef5 	bl	800bc78 <__errno>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2216      	movs	r2, #22
 8001e92:	601a      	str	r2, [r3, #0]
	return -1;
 8001e94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_exit>:

void _exit (int status)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ffe7 	bl	8001e80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001eb2:	e7fe      	b.n	8001eb2 <_exit+0x12>

08001eb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	e00a      	b.n	8001edc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ec6:	f3af 8000 	nop.w
 8001eca:	4601      	mov	r1, r0
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	60ba      	str	r2, [r7, #8]
 8001ed2:	b2ca      	uxtb	r2, r1
 8001ed4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	dbf0      	blt.n	8001ec6 <_read+0x12>
	}

return len;
 8001ee4:	687b      	ldr	r3, [r7, #4]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	e009      	b.n	8001f14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	1c5a      	adds	r2, r3, #1
 8001f04:	60ba      	str	r2, [r7, #8]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	3301      	adds	r3, #1
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	dbf1      	blt.n	8001f00 <_write+0x12>
	}
	return len;
 8001f1c:	687b      	ldr	r3, [r7, #4]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <_close>:

int _close(int file)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
	return -1;
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f4e:	605a      	str	r2, [r3, #4]
	return 0;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <_isatty>:

int _isatty(int file)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
	return 1;
 8001f66:	2301      	movs	r3, #1
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
	return 0;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f98:	4a14      	ldr	r2, [pc, #80]	; (8001fec <_sbrk+0x5c>)
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <_sbrk+0x60>)
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fa4:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <_sbrk+0x64>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d102      	bne.n	8001fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <_sbrk+0x64>)
 8001fae:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <_sbrk+0x68>)
 8001fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fb2:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <_sbrk+0x64>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d207      	bcs.n	8001fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fc0:	f009 fe5a 	bl	800bc78 <__errno>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fca:	f04f 33ff 	mov.w	r3, #4294967295
 8001fce:	e009      	b.n	8001fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fd0:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <_sbrk+0x64>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fd6:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <_sbrk+0x64>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	4a05      	ldr	r2, [pc, #20]	; (8001ff4 <_sbrk+0x64>)
 8001fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20018000 	.word	0x20018000
 8001ff0:	00000400 	.word	0x00000400
 8001ff4:	200004c0 	.word	0x200004c0
 8001ff8:	20002338 	.word	0x20002338

08001ffc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <SystemInit+0x20>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002006:	4a05      	ldr	r2, [pc, #20]	; (800201c <SystemInit+0x20>)
 8002008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800200c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08c      	sub	sp, #48	; 0x30
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002026:	f107 030c 	add.w	r3, r7, #12
 800202a:	2224      	movs	r2, #36	; 0x24
 800202c:	2100      	movs	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f009 fe5a 	bl	800bce8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002034:	1d3b      	adds	r3, r7, #4
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800203c:	4b22      	ldr	r3, [pc, #136]	; (80020c8 <MX_TIM1_Init+0xa8>)
 800203e:	4a23      	ldr	r2, [pc, #140]	; (80020cc <MX_TIM1_Init+0xac>)
 8002040:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002042:	4b21      	ldr	r3, [pc, #132]	; (80020c8 <MX_TIM1_Init+0xa8>)
 8002044:	2200      	movs	r2, #0
 8002046:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002048:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <MX_TIM1_Init+0xa8>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800204e:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <MX_TIM1_Init+0xa8>)
 8002050:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002054:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <MX_TIM1_Init+0xa8>)
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800205c:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <MX_TIM1_Init+0xa8>)
 800205e:	2200      	movs	r2, #0
 8002060:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002062:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <MX_TIM1_Init+0xa8>)
 8002064:	2200      	movs	r2, #0
 8002066:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002068:	2303      	movs	r3, #3
 800206a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800206c:	2300      	movs	r3, #0
 800206e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002070:	2301      	movs	r3, #1
 8002072:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV8;
 8002074:	230c      	movs	r3, #12
 8002076:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002080:	2301      	movs	r3, #1
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV8;
 8002084:	230c      	movs	r3, #12
 8002086:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	4619      	mov	r1, r3
 8002092:	480d      	ldr	r0, [pc, #52]	; (80020c8 <MX_TIM1_Init+0xa8>)
 8002094:	f004 f82c 	bl	80060f0 <HAL_TIM_Encoder_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800209e:	f7ff fb99 	bl	80017d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	4619      	mov	r1, r3
 80020ae:	4806      	ldr	r0, [pc, #24]	; (80020c8 <MX_TIM1_Init+0xa8>)
 80020b0:	f004 feee 	bl	8006e90 <HAL_TIMEx_MasterConfigSynchronization>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80020ba:	f7ff fb8b 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020be:	bf00      	nop
 80020c0:	3730      	adds	r7, #48	; 0x30
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200004c4 	.word	0x200004c4
 80020cc:	40010000 	.word	0x40010000

080020d0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d6:	f107 0320 	add.w	r3, r7, #32
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	60da      	str	r2, [r3, #12]
 80020ec:	611a      	str	r2, [r3, #16]
 80020ee:	615a      	str	r2, [r3, #20]
 80020f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020f2:	4b22      	ldr	r3, [pc, #136]	; (800217c <MX_TIM2_Init+0xac>)
 80020f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020fa:	4b20      	ldr	r3, [pc, #128]	; (800217c <MX_TIM2_Init+0xac>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002100:	4b1e      	ldr	r3, [pc, #120]	; (800217c <MX_TIM2_Init+0xac>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8002106:	4b1d      	ldr	r3, [pc, #116]	; (800217c <MX_TIM2_Init+0xac>)
 8002108:	f240 12f3 	movw	r2, #499	; 0x1f3
 800210c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800210e:	4b1b      	ldr	r3, [pc, #108]	; (800217c <MX_TIM2_Init+0xac>)
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002114:	4b19      	ldr	r3, [pc, #100]	; (800217c <MX_TIM2_Init+0xac>)
 8002116:	2200      	movs	r2, #0
 8002118:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800211a:	4818      	ldr	r0, [pc, #96]	; (800217c <MX_TIM2_Init+0xac>)
 800211c:	f003 fee8 	bl	8005ef0 <HAL_TIM_PWM_Init>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002126:	f7ff fb55 	bl	80017d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800212e:	2300      	movs	r3, #0
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002132:	f107 0320 	add.w	r3, r7, #32
 8002136:	4619      	mov	r1, r3
 8002138:	4810      	ldr	r0, [pc, #64]	; (800217c <MX_TIM2_Init+0xac>)
 800213a:	f004 fea9 	bl	8006e90 <HAL_TIMEx_MasterConfigSynchronization>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002144:	f7ff fb46 	bl	80017d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002148:	2360      	movs	r3, #96	; 0x60
 800214a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	2200      	movs	r2, #0
 800215c:	4619      	mov	r1, r3
 800215e:	4807      	ldr	r0, [pc, #28]	; (800217c <MX_TIM2_Init+0xac>)
 8002160:	f004 fa22 	bl	80065a8 <HAL_TIM_PWM_ConfigChannel>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800216a:	f7ff fb33 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800216e:	4803      	ldr	r0, [pc, #12]	; (800217c <MX_TIM2_Init+0xac>)
 8002170:	f000 f9e4 	bl	800253c <HAL_TIM_MspPostInit>

}
 8002174:	bf00      	nop
 8002176:	3728      	adds	r7, #40	; 0x28
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	2000050c 	.word	0x2000050c

08002180 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08a      	sub	sp, #40	; 0x28
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002186:	f107 0320 	add.w	r3, r7, #32
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002190:	1d3b      	adds	r3, r7, #4
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	60da      	str	r2, [r3, #12]
 800219c:	611a      	str	r2, [r3, #16]
 800219e:	615a      	str	r2, [r3, #20]
 80021a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021a2:	4b22      	ldr	r3, [pc, #136]	; (800222c <MX_TIM3_Init+0xac>)
 80021a4:	4a22      	ldr	r2, [pc, #136]	; (8002230 <MX_TIM3_Init+0xb0>)
 80021a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 80021a8:	4b20      	ldr	r3, [pc, #128]	; (800222c <MX_TIM3_Init+0xac>)
 80021aa:	220f      	movs	r2, #15
 80021ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ae:	4b1f      	ldr	r3, [pc, #124]	; (800222c <MX_TIM3_Init+0xac>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 80021b4:	4b1d      	ldr	r3, [pc, #116]	; (800222c <MX_TIM3_Init+0xac>)
 80021b6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80021ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021bc:	4b1b      	ldr	r3, [pc, #108]	; (800222c <MX_TIM3_Init+0xac>)
 80021be:	2200      	movs	r2, #0
 80021c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c2:	4b1a      	ldr	r3, [pc, #104]	; (800222c <MX_TIM3_Init+0xac>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80021c8:	4818      	ldr	r0, [pc, #96]	; (800222c <MX_TIM3_Init+0xac>)
 80021ca:	f003 fe91 	bl	8005ef0 <HAL_TIM_PWM_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80021d4:	f7ff fafe 	bl	80017d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d8:	2300      	movs	r3, #0
 80021da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021dc:	2300      	movs	r3, #0
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021e0:	f107 0320 	add.w	r3, r7, #32
 80021e4:	4619      	mov	r1, r3
 80021e6:	4811      	ldr	r0, [pc, #68]	; (800222c <MX_TIM3_Init+0xac>)
 80021e8:	f004 fe52 	bl	8006e90 <HAL_TIMEx_MasterConfigSynchronization>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80021f2:	f7ff faef 	bl	80017d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021f6:	2360      	movs	r3, #96	; 0x60
 80021f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 80021fa:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80021fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002208:	1d3b      	adds	r3, r7, #4
 800220a:	2200      	movs	r2, #0
 800220c:	4619      	mov	r1, r3
 800220e:	4807      	ldr	r0, [pc, #28]	; (800222c <MX_TIM3_Init+0xac>)
 8002210:	f004 f9ca 	bl	80065a8 <HAL_TIM_PWM_ConfigChannel>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800221a:	f7ff fadb 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800221e:	4803      	ldr	r0, [pc, #12]	; (800222c <MX_TIM3_Init+0xac>)
 8002220:	f000 f98c 	bl	800253c <HAL_TIM_MspPostInit>

}
 8002224:	bf00      	nop
 8002226:	3728      	adds	r7, #40	; 0x28
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000554 	.word	0x20000554
 8002230:	40000400 	.word	0x40000400

08002234 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	; 0x28
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800223a:	f107 0320 	add.w	r3, r7, #32
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	605a      	str	r2, [r3, #4]
 800224c:	609a      	str	r2, [r3, #8]
 800224e:	60da      	str	r2, [r3, #12]
 8002250:	611a      	str	r2, [r3, #16]
 8002252:	615a      	str	r2, [r3, #20]
 8002254:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002256:	4b22      	ldr	r3, [pc, #136]	; (80022e0 <MX_TIM4_Init+0xac>)
 8002258:	4a22      	ldr	r2, [pc, #136]	; (80022e4 <MX_TIM4_Init+0xb0>)
 800225a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800225c:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <MX_TIM4_Init+0xac>)
 800225e:	2200      	movs	r2, #0
 8002260:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002262:	4b1f      	ldr	r3, [pc, #124]	; (80022e0 <MX_TIM4_Init+0xac>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500-1;
 8002268:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <MX_TIM4_Init+0xac>)
 800226a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800226e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002270:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <MX_TIM4_Init+0xac>)
 8002272:	2200      	movs	r2, #0
 8002274:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002276:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <MX_TIM4_Init+0xac>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800227c:	4818      	ldr	r0, [pc, #96]	; (80022e0 <MX_TIM4_Init+0xac>)
 800227e:	f003 fe37 	bl	8005ef0 <HAL_TIM_PWM_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002288:	f7ff faa4 	bl	80017d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800228c:	2300      	movs	r3, #0
 800228e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002294:	f107 0320 	add.w	r3, r7, #32
 8002298:	4619      	mov	r1, r3
 800229a:	4811      	ldr	r0, [pc, #68]	; (80022e0 <MX_TIM4_Init+0xac>)
 800229c:	f004 fdf8 	bl	8006e90 <HAL_TIMEx_MasterConfigSynchronization>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80022a6:	f7ff fa95 	bl	80017d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022aa:	2360      	movs	r3, #96	; 0x60
 80022ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	2208      	movs	r2, #8
 80022be:	4619      	mov	r1, r3
 80022c0:	4807      	ldr	r0, [pc, #28]	; (80022e0 <MX_TIM4_Init+0xac>)
 80022c2:	f004 f971 	bl	80065a8 <HAL_TIM_PWM_ConfigChannel>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80022cc:	f7ff fa82 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80022d0:	4803      	ldr	r0, [pc, #12]	; (80022e0 <MX_TIM4_Init+0xac>)
 80022d2:	f000 f933 	bl	800253c <HAL_TIM_MspPostInit>

}
 80022d6:	bf00      	nop
 80022d8:	3728      	adds	r7, #40	; 0x28
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	2000059c 	.word	0x2000059c
 80022e4:	40000800 	.word	0x40000800

080022e8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ee:	f107 0308 	add.w	r3, r7, #8
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022fc:	463b      	mov	r3, r7
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002304:	4b1d      	ldr	r3, [pc, #116]	; (800237c <MX_TIM5_Init+0x94>)
 8002306:	4a1e      	ldr	r2, [pc, #120]	; (8002380 <MX_TIM5_Init+0x98>)
 8002308:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16-1;
 800230a:	4b1c      	ldr	r3, [pc, #112]	; (800237c <MX_TIM5_Init+0x94>)
 800230c:	220f      	movs	r2, #15
 800230e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002310:	4b1a      	ldr	r3, [pc, #104]	; (800237c <MX_TIM5_Init+0x94>)
 8002312:	2200      	movs	r2, #0
 8002314:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 8002316:	4b19      	ldr	r3, [pc, #100]	; (800237c <MX_TIM5_Init+0x94>)
 8002318:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800231c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800231e:	4b17      	ldr	r3, [pc, #92]	; (800237c <MX_TIM5_Init+0x94>)
 8002320:	2200      	movs	r2, #0
 8002322:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002324:	4b15      	ldr	r3, [pc, #84]	; (800237c <MX_TIM5_Init+0x94>)
 8002326:	2200      	movs	r2, #0
 8002328:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800232a:	4814      	ldr	r0, [pc, #80]	; (800237c <MX_TIM5_Init+0x94>)
 800232c:	f003 fd2f 	bl	8005d8e <HAL_TIM_Base_Init>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002336:	f7ff fa4d 	bl	80017d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800233a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800233e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002340:	f107 0308 	add.w	r3, r7, #8
 8002344:	4619      	mov	r1, r3
 8002346:	480d      	ldr	r0, [pc, #52]	; (800237c <MX_TIM5_Init+0x94>)
 8002348:	f004 f9f0 	bl	800672c <HAL_TIM_ConfigClockSource>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002352:	f7ff fa3f 	bl	80017d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002356:	2300      	movs	r3, #0
 8002358:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800235e:	463b      	mov	r3, r7
 8002360:	4619      	mov	r1, r3
 8002362:	4806      	ldr	r0, [pc, #24]	; (800237c <MX_TIM5_Init+0x94>)
 8002364:	f004 fd94 	bl	8006e90 <HAL_TIMEx_MasterConfigSynchronization>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800236e:	f7ff fa31 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002372:	bf00      	nop
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	200005e4 	.word	0x200005e4
 8002380:	40000c00 	.word	0x40000c00

08002384 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08a      	sub	sp, #40	; 0x28
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a29      	ldr	r2, [pc, #164]	; (8002448 <HAL_TIM_Encoder_MspInit+0xc4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d14c      	bne.n	8002440 <HAL_TIM_Encoder_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	4b28      	ldr	r3, [pc, #160]	; (800244c <HAL_TIM_Encoder_MspInit+0xc8>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	4a27      	ldr	r2, [pc, #156]	; (800244c <HAL_TIM_Encoder_MspInit+0xc8>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	6453      	str	r3, [r2, #68]	; 0x44
 80023b6:	4b25      	ldr	r3, [pc, #148]	; (800244c <HAL_TIM_Encoder_MspInit+0xc8>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	4b21      	ldr	r3, [pc, #132]	; (800244c <HAL_TIM_Encoder_MspInit+0xc8>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	4a20      	ldr	r2, [pc, #128]	; (800244c <HAL_TIM_Encoder_MspInit+0xc8>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
 80023d2:	4b1e      	ldr	r3, [pc, #120]	; (800244c <HAL_TIM_Encoder_MspInit+0xc8>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023e8:	2301      	movs	r3, #1
 80023ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ec:	2300      	movs	r3, #0
 80023ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023f0:	2301      	movs	r3, #1
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	4619      	mov	r1, r3
 80023fa:	4815      	ldr	r0, [pc, #84]	; (8002450 <HAL_TIM_Encoder_MspInit+0xcc>)
 80023fc:	f001 fbcc 	bl	8003b98 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 1, 0);
 8002400:	2200      	movs	r2, #0
 8002402:	2101      	movs	r1, #1
 8002404:	2018      	movs	r0, #24
 8002406:	f001 f820 	bl	800344a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800240a:	2018      	movs	r0, #24
 800240c:	f001 f839 	bl	8003482 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8002410:	2200      	movs	r2, #0
 8002412:	2101      	movs	r1, #1
 8002414:	2019      	movs	r0, #25
 8002416:	f001 f818 	bl	800344a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800241a:	2019      	movs	r0, #25
 800241c:	f001 f831 	bl	8003482 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 8002420:	2200      	movs	r2, #0
 8002422:	2101      	movs	r1, #1
 8002424:	201a      	movs	r0, #26
 8002426:	f001 f810 	bl	800344a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800242a:	201a      	movs	r0, #26
 800242c:	f001 f829 	bl	8003482 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8002430:	2200      	movs	r2, #0
 8002432:	2101      	movs	r1, #1
 8002434:	201b      	movs	r0, #27
 8002436:	f001 f808 	bl	800344a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800243a:	201b      	movs	r0, #27
 800243c:	f001 f821 	bl	8003482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002440:	bf00      	nop
 8002442:	3728      	adds	r7, #40	; 0x28
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40010000 	.word	0x40010000
 800244c:	40023800 	.word	0x40023800
 8002450:	40020000 	.word	0x40020000

08002454 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002464:	d10e      	bne.n	8002484 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	4b1d      	ldr	r3, [pc, #116]	; (80024e0 <HAL_TIM_PWM_MspInit+0x8c>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <HAL_TIM_PWM_MspInit+0x8c>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
 8002476:	4b1a      	ldr	r3, [pc, #104]	; (80024e0 <HAL_TIM_PWM_MspInit+0x8c>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002482:	e026      	b.n	80024d2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM3)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a16      	ldr	r2, [pc, #88]	; (80024e4 <HAL_TIM_PWM_MspInit+0x90>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d10e      	bne.n	80024ac <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	4b13      	ldr	r3, [pc, #76]	; (80024e0 <HAL_TIM_PWM_MspInit+0x8c>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	4a12      	ldr	r2, [pc, #72]	; (80024e0 <HAL_TIM_PWM_MspInit+0x8c>)
 8002498:	f043 0302 	orr.w	r3, r3, #2
 800249c:	6413      	str	r3, [r2, #64]	; 0x40
 800249e:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <HAL_TIM_PWM_MspInit+0x8c>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	693b      	ldr	r3, [r7, #16]
}
 80024aa:	e012      	b.n	80024d2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM4)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a0d      	ldr	r2, [pc, #52]	; (80024e8 <HAL_TIM_PWM_MspInit+0x94>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d10d      	bne.n	80024d2 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <HAL_TIM_PWM_MspInit+0x8c>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	4a08      	ldr	r2, [pc, #32]	; (80024e0 <HAL_TIM_PWM_MspInit+0x8c>)
 80024c0:	f043 0304 	orr.w	r3, r3, #4
 80024c4:	6413      	str	r3, [r2, #64]	; 0x40
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_TIM_PWM_MspInit+0x8c>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
}
 80024d2:	bf00      	nop
 80024d4:	371c      	adds	r7, #28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40000400 	.word	0x40000400
 80024e8:	40000800 	.word	0x40000800

080024ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a0e      	ldr	r2, [pc, #56]	; (8002534 <HAL_TIM_Base_MspInit+0x48>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d115      	bne.n	800252a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <HAL_TIM_Base_MspInit+0x4c>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	4a0c      	ldr	r2, [pc, #48]	; (8002538 <HAL_TIM_Base_MspInit+0x4c>)
 8002508:	f043 0308 	orr.w	r3, r3, #8
 800250c:	6413      	str	r3, [r2, #64]	; 0x40
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <HAL_TIM_Base_MspInit+0x4c>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 800251a:	2200      	movs	r2, #0
 800251c:	2101      	movs	r1, #1
 800251e:	2032      	movs	r0, #50	; 0x32
 8002520:	f000 ff93 	bl	800344a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002524:	2032      	movs	r0, #50	; 0x32
 8002526:	f000 ffac 	bl	8003482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40000c00 	.word	0x40000c00
 8002538:	40023800 	.word	0x40023800

0800253c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08a      	sub	sp, #40	; 0x28
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800255c:	d11f      	bne.n	800259e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	4b35      	ldr	r3, [pc, #212]	; (8002638 <HAL_TIM_MspPostInit+0xfc>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a34      	ldr	r2, [pc, #208]	; (8002638 <HAL_TIM_MspPostInit+0xfc>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b32      	ldr	r3, [pc, #200]	; (8002638 <HAL_TIM_MspPostInit+0xfc>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800257a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800257e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002580:	2302      	movs	r3, #2
 8002582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002588:	2300      	movs	r3, #0
 800258a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800258c:	2301      	movs	r3, #1
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002590:	f107 0314 	add.w	r3, r7, #20
 8002594:	4619      	mov	r1, r3
 8002596:	4829      	ldr	r0, [pc, #164]	; (800263c <HAL_TIM_MspPostInit+0x100>)
 8002598:	f001 fafe 	bl	8003b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800259c:	e047      	b.n	800262e <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a27      	ldr	r2, [pc, #156]	; (8002640 <HAL_TIM_MspPostInit+0x104>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d11e      	bne.n	80025e6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	4b22      	ldr	r3, [pc, #136]	; (8002638 <HAL_TIM_MspPostInit+0xfc>)
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	4a21      	ldr	r2, [pc, #132]	; (8002638 <HAL_TIM_MspPostInit+0xfc>)
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	6313      	str	r3, [r2, #48]	; 0x30
 80025b8:	4b1f      	ldr	r3, [pc, #124]	; (8002638 <HAL_TIM_MspPostInit+0xfc>)
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025c4:	2340      	movs	r3, #64	; 0x40
 80025c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c8:	2302      	movs	r3, #2
 80025ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d0:	2300      	movs	r3, #0
 80025d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025d4:	2302      	movs	r3, #2
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d8:	f107 0314 	add.w	r3, r7, #20
 80025dc:	4619      	mov	r1, r3
 80025de:	4817      	ldr	r0, [pc, #92]	; (800263c <HAL_TIM_MspPostInit+0x100>)
 80025e0:	f001 fada 	bl	8003b98 <HAL_GPIO_Init>
}
 80025e4:	e023      	b.n	800262e <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM4)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a16      	ldr	r2, [pc, #88]	; (8002644 <HAL_TIM_MspPostInit+0x108>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d11e      	bne.n	800262e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f0:	2300      	movs	r3, #0
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	4b10      	ldr	r3, [pc, #64]	; (8002638 <HAL_TIM_MspPostInit+0xfc>)
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	4a0f      	ldr	r2, [pc, #60]	; (8002638 <HAL_TIM_MspPostInit+0xfc>)
 80025fa:	f043 0302 	orr.w	r3, r3, #2
 80025fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002600:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <HAL_TIM_MspPostInit+0xfc>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800260c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002612:	2302      	movs	r3, #2
 8002614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261a:	2300      	movs	r3, #0
 800261c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800261e:	2302      	movs	r3, #2
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002622:	f107 0314 	add.w	r3, r7, #20
 8002626:	4619      	mov	r1, r3
 8002628:	4807      	ldr	r0, [pc, #28]	; (8002648 <HAL_TIM_MspPostInit+0x10c>)
 800262a:	f001 fab5 	bl	8003b98 <HAL_GPIO_Init>
}
 800262e:	bf00      	nop
 8002630:	3728      	adds	r7, #40	; 0x28
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40023800 	.word	0x40023800
 800263c:	40020000 	.word	0x40020000
 8002640:	40000400 	.word	0x40000400
 8002644:	40000800 	.word	0x40000800
 8002648:	40020400 	.word	0x40020400

0800264c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <MX_USART1_UART_Init+0x4c>)
 8002652:	4a12      	ldr	r2, [pc, #72]	; (800269c <MX_USART1_UART_Init+0x50>)
 8002654:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <MX_USART1_UART_Init+0x4c>)
 8002658:	4a11      	ldr	r2, [pc, #68]	; (80026a0 <MX_USART1_UART_Init+0x54>)
 800265a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800265c:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <MX_USART1_UART_Init+0x4c>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8002662:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <MX_USART1_UART_Init+0x4c>)
 8002664:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002668:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800266a:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <MX_USART1_UART_Init+0x4c>)
 800266c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002670:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002672:	4b09      	ldr	r3, [pc, #36]	; (8002698 <MX_USART1_UART_Init+0x4c>)
 8002674:	220c      	movs	r2, #12
 8002676:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002678:	4b07      	ldr	r3, [pc, #28]	; (8002698 <MX_USART1_UART_Init+0x4c>)
 800267a:	2200      	movs	r2, #0
 800267c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <MX_USART1_UART_Init+0x4c>)
 8002680:	2200      	movs	r2, #0
 8002682:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002684:	4804      	ldr	r0, [pc, #16]	; (8002698 <MX_USART1_UART_Init+0x4c>)
 8002686:	f004 fc85 	bl	8006f94 <HAL_UART_Init>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8002690:	f7ff f8a0 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002694:	bf00      	nop
 8002696:	bd80      	pop	{r7, pc}
 8002698:	2000062c 	.word	0x2000062c
 800269c:	40011000 	.word	0x40011000
 80026a0:	000186a0 	.word	0x000186a0

080026a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <MX_USART2_UART_Init+0x4c>)
 80026aa:	4a12      	ldr	r2, [pc, #72]	; (80026f4 <MX_USART2_UART_Init+0x50>)
 80026ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <MX_USART2_UART_Init+0x4c>)
 80026b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026b6:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <MX_USART2_UART_Init+0x4c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026bc:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <MX_USART2_UART_Init+0x4c>)
 80026be:	2200      	movs	r2, #0
 80026c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <MX_USART2_UART_Init+0x4c>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026c8:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <MX_USART2_UART_Init+0x4c>)
 80026ca:	220c      	movs	r2, #12
 80026cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ce:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <MX_USART2_UART_Init+0x4c>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <MX_USART2_UART_Init+0x4c>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026da:	4805      	ldr	r0, [pc, #20]	; (80026f0 <MX_USART2_UART_Init+0x4c>)
 80026dc:	f004 fc5a 	bl	8006f94 <HAL_UART_Init>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026e6:	f7ff f875 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000670 	.word	0x20000670
 80026f4:	40004400 	.word	0x40004400

080026f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08c      	sub	sp, #48	; 0x30
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002700:	f107 031c 	add.w	r3, r7, #28
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a4a      	ldr	r2, [pc, #296]	; (8002840 <HAL_UART_MspInit+0x148>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d15c      	bne.n	80027d4 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	4b49      	ldr	r3, [pc, #292]	; (8002844 <HAL_UART_MspInit+0x14c>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	4a48      	ldr	r2, [pc, #288]	; (8002844 <HAL_UART_MspInit+0x14c>)
 8002724:	f043 0310 	orr.w	r3, r3, #16
 8002728:	6453      	str	r3, [r2, #68]	; 0x44
 800272a:	4b46      	ldr	r3, [pc, #280]	; (8002844 <HAL_UART_MspInit+0x14c>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	f003 0310 	and.w	r3, r3, #16
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	4b42      	ldr	r3, [pc, #264]	; (8002844 <HAL_UART_MspInit+0x14c>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	4a41      	ldr	r2, [pc, #260]	; (8002844 <HAL_UART_MspInit+0x14c>)
 8002740:	f043 0302 	orr.w	r3, r3, #2
 8002744:	6313      	str	r3, [r2, #48]	; 0x30
 8002746:	4b3f      	ldr	r3, [pc, #252]	; (8002844 <HAL_UART_MspInit+0x14c>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002752:	23c0      	movs	r3, #192	; 0xc0
 8002754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002756:	2302      	movs	r3, #2
 8002758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275e:	2303      	movs	r3, #3
 8002760:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002762:	2307      	movs	r3, #7
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002766:	f107 031c 	add.w	r3, r7, #28
 800276a:	4619      	mov	r1, r3
 800276c:	4836      	ldr	r0, [pc, #216]	; (8002848 <HAL_UART_MspInit+0x150>)
 800276e:	f001 fa13 	bl	8003b98 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002772:	4b36      	ldr	r3, [pc, #216]	; (800284c <HAL_UART_MspInit+0x154>)
 8002774:	4a36      	ldr	r2, [pc, #216]	; (8002850 <HAL_UART_MspInit+0x158>)
 8002776:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002778:	4b34      	ldr	r3, [pc, #208]	; (800284c <HAL_UART_MspInit+0x154>)
 800277a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800277e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002780:	4b32      	ldr	r3, [pc, #200]	; (800284c <HAL_UART_MspInit+0x154>)
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002786:	4b31      	ldr	r3, [pc, #196]	; (800284c <HAL_UART_MspInit+0x154>)
 8002788:	2200      	movs	r2, #0
 800278a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800278c:	4b2f      	ldr	r3, [pc, #188]	; (800284c <HAL_UART_MspInit+0x154>)
 800278e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002792:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002794:	4b2d      	ldr	r3, [pc, #180]	; (800284c <HAL_UART_MspInit+0x154>)
 8002796:	2200      	movs	r2, #0
 8002798:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800279a:	4b2c      	ldr	r3, [pc, #176]	; (800284c <HAL_UART_MspInit+0x154>)
 800279c:	2200      	movs	r2, #0
 800279e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80027a0:	4b2a      	ldr	r3, [pc, #168]	; (800284c <HAL_UART_MspInit+0x154>)
 80027a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027a6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80027a8:	4b28      	ldr	r3, [pc, #160]	; (800284c <HAL_UART_MspInit+0x154>)
 80027aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027ae:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027b0:	4b26      	ldr	r3, [pc, #152]	; (800284c <HAL_UART_MspInit+0x154>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80027b6:	4825      	ldr	r0, [pc, #148]	; (800284c <HAL_UART_MspInit+0x154>)
 80027b8:	f000 fe7e 	bl	80034b8 <HAL_DMA_Init>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80027c2:	f7ff f807 	bl	80017d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a20      	ldr	r2, [pc, #128]	; (800284c <HAL_UART_MspInit+0x154>)
 80027ca:	639a      	str	r2, [r3, #56]	; 0x38
 80027cc:	4a1f      	ldr	r2, [pc, #124]	; (800284c <HAL_UART_MspInit+0x154>)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80027d2:	e030      	b.n	8002836 <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a1e      	ldr	r2, [pc, #120]	; (8002854 <HAL_UART_MspInit+0x15c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d12b      	bne.n	8002836 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	4b18      	ldr	r3, [pc, #96]	; (8002844 <HAL_UART_MspInit+0x14c>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	4a17      	ldr	r2, [pc, #92]	; (8002844 <HAL_UART_MspInit+0x14c>)
 80027e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ec:	6413      	str	r3, [r2, #64]	; 0x40
 80027ee:	4b15      	ldr	r3, [pc, #84]	; (8002844 <HAL_UART_MspInit+0x14c>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	4b11      	ldr	r3, [pc, #68]	; (8002844 <HAL_UART_MspInit+0x14c>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4a10      	ldr	r2, [pc, #64]	; (8002844 <HAL_UART_MspInit+0x14c>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
 800280a:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <HAL_UART_MspInit+0x14c>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002816:	230c      	movs	r3, #12
 8002818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281a:	2302      	movs	r3, #2
 800281c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002822:	2303      	movs	r3, #3
 8002824:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002826:	2307      	movs	r3, #7
 8002828:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282a:	f107 031c 	add.w	r3, r7, #28
 800282e:	4619      	mov	r1, r3
 8002830:	4809      	ldr	r0, [pc, #36]	; (8002858 <HAL_UART_MspInit+0x160>)
 8002832:	f001 f9b1 	bl	8003b98 <HAL_GPIO_Init>
}
 8002836:	bf00      	nop
 8002838:	3730      	adds	r7, #48	; 0x30
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40011000 	.word	0x40011000
 8002844:	40023800 	.word	0x40023800
 8002848:	40020400 	.word	0x40020400
 800284c:	200006b4 	.word	0x200006b4
 8002850:	40026440 	.word	0x40026440
 8002854:	40004400 	.word	0x40004400
 8002858:	40020000 	.word	0x40020000

0800285c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800285c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002894 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002860:	480d      	ldr	r0, [pc, #52]	; (8002898 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002862:	490e      	ldr	r1, [pc, #56]	; (800289c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002864:	4a0e      	ldr	r2, [pc, #56]	; (80028a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002868:	e002      	b.n	8002870 <LoopCopyDataInit>

0800286a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800286a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800286c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800286e:	3304      	adds	r3, #4

08002870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002874:	d3f9      	bcc.n	800286a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002876:	4a0b      	ldr	r2, [pc, #44]	; (80028a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002878:	4c0b      	ldr	r4, [pc, #44]	; (80028a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800287a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800287c:	e001      	b.n	8002882 <LoopFillZerobss>

0800287e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800287e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002880:	3204      	adds	r2, #4

08002882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002884:	d3fb      	bcc.n	800287e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002886:	f7ff fbb9 	bl	8001ffc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800288a:	f009 f9fb 	bl	800bc84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800288e:	f7fe fd47 	bl	8001320 <main>
  bx  lr    
 8002892:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002894:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800289c:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 80028a0:	0800f02c 	.word	0x0800f02c
  ldr r2, =_sbss
 80028a4:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 80028a8:	20002334 	.word	0x20002334

080028ac <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028ac:	e7fe      	b.n	80028ac <DMA1_Stream0_IRQHandler>
	...

080028b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028b4:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <HAL_Init+0x40>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a0d      	ldr	r2, [pc, #52]	; (80028f0 <HAL_Init+0x40>)
 80028ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_Init+0x40>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <HAL_Init+0x40>)
 80028c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <HAL_Init+0x40>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a07      	ldr	r2, [pc, #28]	; (80028f0 <HAL_Init+0x40>)
 80028d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028d8:	2003      	movs	r0, #3
 80028da:	f000 fdab 	bl	8003434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028de:	200f      	movs	r0, #15
 80028e0:	f000 f808 	bl	80028f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028e4:	f7ff fa22 	bl	8001d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40023c00 	.word	0x40023c00

080028f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028fc:	4b12      	ldr	r3, [pc, #72]	; (8002948 <HAL_InitTick+0x54>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_InitTick+0x58>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	4619      	mov	r1, r3
 8002906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800290a:	fbb3 f3f1 	udiv	r3, r3, r1
 800290e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fdc3 	bl	800349e <HAL_SYSTICK_Config>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e00e      	b.n	8002940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b0f      	cmp	r3, #15
 8002926:	d80a      	bhi.n	800293e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002928:	2200      	movs	r2, #0
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	f04f 30ff 	mov.w	r0, #4294967295
 8002930:	f000 fd8b 	bl	800344a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002934:	4a06      	ldr	r2, [pc, #24]	; (8002950 <HAL_InitTick+0x5c>)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	e000      	b.n	8002940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	20000000 	.word	0x20000000
 800294c:	20000008 	.word	0x20000008
 8002950:	20000004 	.word	0x20000004

08002954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <HAL_IncTick+0x20>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_IncTick+0x24>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4413      	add	r3, r2
 8002964:	4a04      	ldr	r2, [pc, #16]	; (8002978 <HAL_IncTick+0x24>)
 8002966:	6013      	str	r3, [r2, #0]
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20000008 	.word	0x20000008
 8002978:	20000714 	.word	0x20000714

0800297c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return uwTick;
 8002980:	4b03      	ldr	r3, [pc, #12]	; (8002990 <HAL_GetTick+0x14>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	20000714 	.word	0x20000714

08002994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800299c:	f7ff ffee 	bl	800297c <HAL_GetTick>
 80029a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ac:	d005      	beq.n	80029ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ae:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <HAL_Delay+0x44>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4413      	add	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029ba:	bf00      	nop
 80029bc:	f7ff ffde 	bl	800297c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d8f7      	bhi.n	80029bc <HAL_Delay+0x28>
  {
  }
}
 80029cc:	bf00      	nop
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000008 	.word	0x20000008

080029dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e033      	b.n	8002a5a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7fe fb00 	bl	8001000 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d118      	bne.n	8002a4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a22:	f023 0302 	bic.w	r3, r3, #2
 8002a26:	f043 0202 	orr.w	r2, r3, #2
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fb2a 	bl	8003088 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f023 0303 	bic.w	r3, r3, #3
 8002a42:	f043 0201 	orr.w	r2, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	641a      	str	r2, [r3, #64]	; 0x40
 8002a4a:	e001      	b.n	8002a50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d101      	bne.n	8002a7e <HAL_ADC_Start_IT+0x1a>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e0a1      	b.n	8002bc2 <HAL_ADC_Start_IT+0x15e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d018      	beq.n	8002ac6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002aa4:	4b4a      	ldr	r3, [pc, #296]	; (8002bd0 <HAL_ADC_Start_IT+0x16c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a4a      	ldr	r2, [pc, #296]	; (8002bd4 <HAL_ADC_Start_IT+0x170>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	0c9a      	lsrs	r2, r3, #18
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4413      	add	r3, r2
 8002ab6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002ab8:	e002      	b.n	8002ac0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	3b01      	subs	r3, #1
 8002abe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f9      	bne.n	8002aba <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d169      	bne.n	8002ba8 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002adc:	f023 0301 	bic.w	r3, r3, #1
 8002ae0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002afe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b12:	d106      	bne.n	8002b22 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b18:	f023 0206 	bic.w	r2, r3, #6
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	645a      	str	r2, [r3, #68]	; 0x44
 8002b20:	e002      	b.n	8002b28 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b30:	4b29      	ldr	r3, [pc, #164]	; (8002bd8 <HAL_ADC_Start_IT+0x174>)
 8002b32:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b3c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b4c:	f043 0320 	orr.w	r3, r3, #32
 8002b50:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 031f 	and.w	r3, r3, #31
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10f      	bne.n	8002b7e <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d129      	bne.n	8002bc0 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	e020      	b.n	8002bc0 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a16      	ldr	r2, [pc, #88]	; (8002bdc <HAL_ADC_Start_IT+0x178>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d11b      	bne.n	8002bc0 <HAL_ADC_Start_IT+0x15c>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d114      	bne.n	8002bc0 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ba4:	609a      	str	r2, [r3, #8]
 8002ba6:	e00b      	b.n	8002bc0 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	f043 0210 	orr.w	r2, r3, #16
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb8:	f043 0201 	orr.w	r2, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	20000000 	.word	0x20000000
 8002bd4:	431bde83 	.word	0x431bde83
 8002bd8:	40012300 	.word	0x40012300
 8002bdc:	40012000 	.word	0x40012000

08002be0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	2300      	movs	r3, #0
 8002bee:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f003 0320 	and.w	r3, r3, #32
 8002c0e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d049      	beq.n	8002caa <HAL_ADC_IRQHandler+0xca>
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d046      	beq.n	8002caa <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	f003 0310 	and.w	r3, r3, #16
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d105      	bne.n	8002c34 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d12b      	bne.n	8002c9a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d127      	bne.n	8002c9a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d006      	beq.n	8002c66 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d119      	bne.n	8002c9a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0220 	bic.w	r2, r2, #32
 8002c74:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d105      	bne.n	8002c9a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f043 0201 	orr.w	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fe fd6c 	bl	8001778 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0212 	mvn.w	r2, #18
 8002ca8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d057      	beq.n	8002d70 <HAL_ADC_IRQHandler+0x190>
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d054      	beq.n	8002d70 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d105      	bne.n	8002cde <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d139      	bne.n	8002d60 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d006      	beq.n	8002d08 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d12b      	bne.n	8002d60 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d124      	bne.n	8002d60 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d11d      	bne.n	8002d60 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d119      	bne.n	8002d60 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d105      	bne.n	8002d60 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	f043 0201 	orr.w	r2, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 fa8d 	bl	8003280 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f06f 020c 	mvn.w	r2, #12
 8002d6e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d017      	beq.n	8002db6 <HAL_ADC_IRQHandler+0x1d6>
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d014      	beq.n	8002db6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d10d      	bne.n	8002db6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f837 	bl	8002e1a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f06f 0201 	mvn.w	r2, #1
 8002db4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dc4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d015      	beq.n	8002df8 <HAL_ADC_IRQHandler+0x218>
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d012      	beq.n	8002df8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	f043 0202 	orr.w	r2, r3, #2
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f06f 0220 	mvn.w	r2, #32
 8002de6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f820 	bl	8002e2e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f06f 0220 	mvn.w	r2, #32
 8002df6:	601a      	str	r2, [r3, #0]
  }
}
 8002df8:	bf00      	nop
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x1c>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e105      	b.n	800306c <HAL_ADC_ConfigChannel+0x228>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b09      	cmp	r3, #9
 8002e6e:	d925      	bls.n	8002ebc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68d9      	ldr	r1, [r3, #12]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4613      	mov	r3, r2
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	4413      	add	r3, r2
 8002e84:	3b1e      	subs	r3, #30
 8002e86:	2207      	movs	r2, #7
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43da      	mvns	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	400a      	ands	r2, r1
 8002e94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68d9      	ldr	r1, [r3, #12]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	4403      	add	r3, r0
 8002eae:	3b1e      	subs	r3, #30
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	e022      	b.n	8002f02 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6919      	ldr	r1, [r3, #16]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4613      	mov	r3, r2
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	4413      	add	r3, r2
 8002ed0:	2207      	movs	r2, #7
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	400a      	ands	r2, r1
 8002ede:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6919      	ldr	r1, [r3, #16]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	4403      	add	r3, r0
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b06      	cmp	r3, #6
 8002f08:	d824      	bhi.n	8002f54 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	3b05      	subs	r3, #5
 8002f1c:	221f      	movs	r2, #31
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43da      	mvns	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	400a      	ands	r2, r1
 8002f2a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	4618      	mov	r0, r3
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	3b05      	subs	r3, #5
 8002f46:	fa00 f203 	lsl.w	r2, r0, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	635a      	str	r2, [r3, #52]	; 0x34
 8002f52:	e04c      	b.n	8002fee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b0c      	cmp	r3, #12
 8002f5a:	d824      	bhi.n	8002fa6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3b23      	subs	r3, #35	; 0x23
 8002f6e:	221f      	movs	r2, #31
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43da      	mvns	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	400a      	ands	r2, r1
 8002f7c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	3b23      	subs	r3, #35	; 0x23
 8002f98:	fa00 f203 	lsl.w	r2, r0, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
 8002fa4:	e023      	b.n	8002fee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3b41      	subs	r3, #65	; 0x41
 8002fb8:	221f      	movs	r2, #31
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	400a      	ands	r2, r1
 8002fc6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	3b41      	subs	r3, #65	; 0x41
 8002fe2:	fa00 f203 	lsl.w	r2, r0, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fee:	4b22      	ldr	r3, [pc, #136]	; (8003078 <HAL_ADC_ConfigChannel+0x234>)
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a21      	ldr	r2, [pc, #132]	; (800307c <HAL_ADC_ConfigChannel+0x238>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d109      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x1cc>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b12      	cmp	r3, #18
 8003002:	d105      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a19      	ldr	r2, [pc, #100]	; (800307c <HAL_ADC_ConfigChannel+0x238>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d123      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x21e>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b10      	cmp	r3, #16
 8003020:	d003      	beq.n	800302a <HAL_ADC_ConfigChannel+0x1e6>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b11      	cmp	r3, #17
 8003028:	d11b      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b10      	cmp	r3, #16
 800303c:	d111      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800303e:	4b10      	ldr	r3, [pc, #64]	; (8003080 <HAL_ADC_ConfigChannel+0x23c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a10      	ldr	r2, [pc, #64]	; (8003084 <HAL_ADC_ConfigChannel+0x240>)
 8003044:	fba2 2303 	umull	r2, r3, r2, r3
 8003048:	0c9a      	lsrs	r2, r3, #18
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003054:	e002      	b.n	800305c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	3b01      	subs	r3, #1
 800305a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f9      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	40012300 	.word	0x40012300
 800307c:	40012000 	.word	0x40012000
 8003080:	20000000 	.word	0x20000000
 8003084:	431bde83 	.word	0x431bde83

08003088 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003090:	4b79      	ldr	r3, [pc, #484]	; (8003278 <ADC_Init+0x1f0>)
 8003092:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	431a      	orrs	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6859      	ldr	r1, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	021a      	lsls	r2, r3, #8
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80030e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003102:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6899      	ldr	r1, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	4a58      	ldr	r2, [pc, #352]	; (800327c <ADC_Init+0x1f4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d022      	beq.n	8003166 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800312e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6899      	ldr	r1, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003150:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6899      	ldr	r1, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	e00f      	b.n	8003186 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003174:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003184:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0202 	bic.w	r2, r2, #2
 8003194:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6899      	ldr	r1, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	7e1b      	ldrb	r3, [r3, #24]
 80031a0:	005a      	lsls	r2, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d01b      	beq.n	80031ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80031d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6859      	ldr	r1, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	3b01      	subs	r3, #1
 80031e0:	035a      	lsls	r2, r3, #13
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	e007      	b.n	80031fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800320a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	3b01      	subs	r3, #1
 8003218:	051a      	lsls	r2, r3, #20
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003230:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6899      	ldr	r1, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800323e:	025a      	lsls	r2, r3, #9
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003256:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6899      	ldr	r1, [r3, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	029a      	lsls	r2, r3, #10
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	609a      	str	r2, [r3, #8]
}
 800326c:	bf00      	nop
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	40012300 	.word	0x40012300
 800327c:	0f000001 	.word	0x0f000001

08003280 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032a4:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <__NVIC_SetPriorityGrouping+0x44>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032b0:	4013      	ands	r3, r2
 80032b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032c6:	4a04      	ldr	r2, [pc, #16]	; (80032d8 <__NVIC_SetPriorityGrouping+0x44>)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	60d3      	str	r3, [r2, #12]
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032e0:	4b04      	ldr	r3, [pc, #16]	; (80032f4 <__NVIC_GetPriorityGrouping+0x18>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	0a1b      	lsrs	r3, r3, #8
 80032e6:	f003 0307 	and.w	r3, r3, #7
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003306:	2b00      	cmp	r3, #0
 8003308:	db0b      	blt.n	8003322 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	f003 021f 	and.w	r2, r3, #31
 8003310:	4907      	ldr	r1, [pc, #28]	; (8003330 <__NVIC_EnableIRQ+0x38>)
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	2001      	movs	r0, #1
 800331a:	fa00 f202 	lsl.w	r2, r0, r2
 800331e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	e000e100 	.word	0xe000e100

08003334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	6039      	str	r1, [r7, #0]
 800333e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003344:	2b00      	cmp	r3, #0
 8003346:	db0a      	blt.n	800335e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	b2da      	uxtb	r2, r3
 800334c:	490c      	ldr	r1, [pc, #48]	; (8003380 <__NVIC_SetPriority+0x4c>)
 800334e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003352:	0112      	lsls	r2, r2, #4
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	440b      	add	r3, r1
 8003358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800335c:	e00a      	b.n	8003374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	b2da      	uxtb	r2, r3
 8003362:	4908      	ldr	r1, [pc, #32]	; (8003384 <__NVIC_SetPriority+0x50>)
 8003364:	79fb      	ldrb	r3, [r7, #7]
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	3b04      	subs	r3, #4
 800336c:	0112      	lsls	r2, r2, #4
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	440b      	add	r3, r1
 8003372:	761a      	strb	r2, [r3, #24]
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000e100 	.word	0xe000e100
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003388:	b480      	push	{r7}
 800338a:	b089      	sub	sp, #36	; 0x24
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f1c3 0307 	rsb	r3, r3, #7
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	bf28      	it	cs
 80033a6:	2304      	movcs	r3, #4
 80033a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	3304      	adds	r3, #4
 80033ae:	2b06      	cmp	r3, #6
 80033b0:	d902      	bls.n	80033b8 <NVIC_EncodePriority+0x30>
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	3b03      	subs	r3, #3
 80033b6:	e000      	b.n	80033ba <NVIC_EncodePriority+0x32>
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033bc:	f04f 32ff 	mov.w	r2, #4294967295
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43da      	mvns	r2, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	401a      	ands	r2, r3
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033d0:	f04f 31ff 	mov.w	r1, #4294967295
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	fa01 f303 	lsl.w	r3, r1, r3
 80033da:	43d9      	mvns	r1, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e0:	4313      	orrs	r3, r2
         );
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3724      	adds	r7, #36	; 0x24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
	...

080033f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003400:	d301      	bcc.n	8003406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003402:	2301      	movs	r3, #1
 8003404:	e00f      	b.n	8003426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003406:	4a0a      	ldr	r2, [pc, #40]	; (8003430 <SysTick_Config+0x40>)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3b01      	subs	r3, #1
 800340c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800340e:	210f      	movs	r1, #15
 8003410:	f04f 30ff 	mov.w	r0, #4294967295
 8003414:	f7ff ff8e 	bl	8003334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003418:	4b05      	ldr	r3, [pc, #20]	; (8003430 <SysTick_Config+0x40>)
 800341a:	2200      	movs	r2, #0
 800341c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800341e:	4b04      	ldr	r3, [pc, #16]	; (8003430 <SysTick_Config+0x40>)
 8003420:	2207      	movs	r2, #7
 8003422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	e000e010 	.word	0xe000e010

08003434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff ff29 	bl	8003294 <__NVIC_SetPriorityGrouping>
}
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800344a:	b580      	push	{r7, lr}
 800344c:	b086      	sub	sp, #24
 800344e:	af00      	add	r7, sp, #0
 8003450:	4603      	mov	r3, r0
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800345c:	f7ff ff3e 	bl	80032dc <__NVIC_GetPriorityGrouping>
 8003460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	6978      	ldr	r0, [r7, #20]
 8003468:	f7ff ff8e 	bl	8003388 <NVIC_EncodePriority>
 800346c:	4602      	mov	r2, r0
 800346e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003472:	4611      	mov	r1, r2
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff ff5d 	bl	8003334 <__NVIC_SetPriority>
}
 800347a:	bf00      	nop
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	4603      	mov	r3, r0
 800348a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800348c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff31 	bl	80032f8 <__NVIC_EnableIRQ>
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff ffa2 	bl	80033f0 <SysTick_Config>
 80034ac:	4603      	mov	r3, r0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034c4:	f7ff fa5a 	bl	800297c <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e099      	b.n	8003608 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034f4:	e00f      	b.n	8003516 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034f6:	f7ff fa41 	bl	800297c <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b05      	cmp	r3, #5
 8003502:	d908      	bls.n	8003516 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2203      	movs	r2, #3
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e078      	b.n	8003608 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1e8      	bne.n	80034f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	4b38      	ldr	r3, [pc, #224]	; (8003610 <HAL_DMA_Init+0x158>)
 8003530:	4013      	ands	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003542:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800354e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800355a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	4313      	orrs	r3, r2
 8003566:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	2b04      	cmp	r3, #4
 800356e:	d107      	bne.n	8003580 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	4313      	orrs	r3, r2
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4313      	orrs	r3, r2
 800357e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f023 0307 	bic.w	r3, r3, #7
 8003596:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d117      	bne.n	80035da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00e      	beq.n	80035da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 fa6f 	bl	8003aa0 <DMA_CheckFifoParam>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2240      	movs	r2, #64	; 0x40
 80035cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035d6:	2301      	movs	r3, #1
 80035d8:	e016      	b.n	8003608 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fa26 	bl	8003a34 <DMA_CalcBaseAndBitshift>
 80035e8:	4603      	mov	r3, r0
 80035ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f0:	223f      	movs	r2, #63	; 0x3f
 80035f2:	409a      	lsls	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	f010803f 	.word	0xf010803f

08003614 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003632:	2b01      	cmp	r3, #1
 8003634:	d101      	bne.n	800363a <HAL_DMA_Start_IT+0x26>
 8003636:	2302      	movs	r3, #2
 8003638:	e040      	b.n	80036bc <HAL_DMA_Start_IT+0xa8>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b01      	cmp	r3, #1
 800364c:	d12f      	bne.n	80036ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2202      	movs	r2, #2
 8003652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	68b9      	ldr	r1, [r7, #8]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f9b8 	bl	80039d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366c:	223f      	movs	r2, #63	; 0x3f
 800366e:	409a      	lsls	r2, r3
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0216 	orr.w	r2, r2, #22
 8003682:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	2b00      	cmp	r3, #0
 800368a:	d007      	beq.n	800369c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0208 	orr.w	r2, r2, #8
 800369a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0201 	orr.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	e005      	b.n	80036ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036b6:	2302      	movs	r3, #2
 80036b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80036d0:	4b8e      	ldr	r3, [pc, #568]	; (800390c <HAL_DMA_IRQHandler+0x248>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a8e      	ldr	r2, [pc, #568]	; (8003910 <HAL_DMA_IRQHandler+0x24c>)
 80036d6:	fba2 2303 	umull	r2, r3, r2, r3
 80036da:	0a9b      	lsrs	r3, r3, #10
 80036dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ee:	2208      	movs	r2, #8
 80036f0:	409a      	lsls	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d01a      	beq.n	8003730 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d013      	beq.n	8003730 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0204 	bic.w	r2, r2, #4
 8003716:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371c:	2208      	movs	r2, #8
 800371e:	409a      	lsls	r2, r3
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003728:	f043 0201 	orr.w	r2, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003734:	2201      	movs	r2, #1
 8003736:	409a      	lsls	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4013      	ands	r3, r2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d012      	beq.n	8003766 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00b      	beq.n	8003766 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003752:	2201      	movs	r2, #1
 8003754:	409a      	lsls	r2, r3
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375e:	f043 0202 	orr.w	r2, r3, #2
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376a:	2204      	movs	r2, #4
 800376c:	409a      	lsls	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4013      	ands	r3, r2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d012      	beq.n	800379c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00b      	beq.n	800379c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003788:	2204      	movs	r2, #4
 800378a:	409a      	lsls	r2, r3
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003794:	f043 0204 	orr.w	r2, r3, #4
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a0:	2210      	movs	r2, #16
 80037a2:	409a      	lsls	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d043      	beq.n	8003834 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d03c      	beq.n	8003834 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037be:	2210      	movs	r2, #16
 80037c0:	409a      	lsls	r2, r3
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d018      	beq.n	8003806 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d108      	bne.n	80037f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d024      	beq.n	8003834 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	4798      	blx	r3
 80037f2:	e01f      	b.n	8003834 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d01b      	beq.n	8003834 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	4798      	blx	r3
 8003804:	e016      	b.n	8003834 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003810:	2b00      	cmp	r3, #0
 8003812:	d107      	bne.n	8003824 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0208 	bic.w	r2, r2, #8
 8003822:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003838:	2220      	movs	r2, #32
 800383a:	409a      	lsls	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4013      	ands	r3, r2
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 808f 	beq.w	8003964 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 8087 	beq.w	8003964 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385a:	2220      	movs	r2, #32
 800385c:	409a      	lsls	r2, r3
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b05      	cmp	r3, #5
 800386c:	d136      	bne.n	80038dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0216 	bic.w	r2, r2, #22
 800387c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695a      	ldr	r2, [r3, #20]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800388c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	2b00      	cmp	r3, #0
 8003894:	d103      	bne.n	800389e <HAL_DMA_IRQHandler+0x1da>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800389a:	2b00      	cmp	r3, #0
 800389c:	d007      	beq.n	80038ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0208 	bic.w	r2, r2, #8
 80038ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b2:	223f      	movs	r2, #63	; 0x3f
 80038b4:	409a      	lsls	r2, r3
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d07e      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	4798      	blx	r3
        }
        return;
 80038da:	e079      	b.n	80039d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d01d      	beq.n	8003926 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10d      	bne.n	8003914 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d031      	beq.n	8003964 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	4798      	blx	r3
 8003908:	e02c      	b.n	8003964 <HAL_DMA_IRQHandler+0x2a0>
 800390a:	bf00      	nop
 800390c:	20000000 	.word	0x20000000
 8003910:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003918:	2b00      	cmp	r3, #0
 800391a:	d023      	beq.n	8003964 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	4798      	blx	r3
 8003924:	e01e      	b.n	8003964 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10f      	bne.n	8003954 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0210 	bic.w	r2, r2, #16
 8003942:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003968:	2b00      	cmp	r3, #0
 800396a:	d032      	beq.n	80039d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d022      	beq.n	80039be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2205      	movs	r2, #5
 800397c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0201 	bic.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	3301      	adds	r3, #1
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	429a      	cmp	r2, r3
 800399a:	d307      	bcc.n	80039ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f2      	bne.n	8003990 <HAL_DMA_IRQHandler+0x2cc>
 80039aa:	e000      	b.n	80039ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80039ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d005      	beq.n	80039d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	4798      	blx	r3
 80039ce:	e000      	b.n	80039d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80039d0:	bf00      	nop
    }
  }
}
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2b40      	cmp	r3, #64	; 0x40
 8003a04:	d108      	bne.n	8003a18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a16:	e007      	b.n	8003a28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	60da      	str	r2, [r3, #12]
}
 8003a28:	bf00      	nop
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	3b10      	subs	r3, #16
 8003a44:	4a14      	ldr	r2, [pc, #80]	; (8003a98 <DMA_CalcBaseAndBitshift+0x64>)
 8003a46:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4a:	091b      	lsrs	r3, r3, #4
 8003a4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a4e:	4a13      	ldr	r2, [pc, #76]	; (8003a9c <DMA_CalcBaseAndBitshift+0x68>)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4413      	add	r3, r2
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d909      	bls.n	8003a76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a6a:	f023 0303 	bic.w	r3, r3, #3
 8003a6e:	1d1a      	adds	r2, r3, #4
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	659a      	str	r2, [r3, #88]	; 0x58
 8003a74:	e007      	b.n	8003a86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a7e:	f023 0303 	bic.w	r3, r3, #3
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	aaaaaaab 	.word	0xaaaaaaab
 8003a9c:	0800ec34 	.word	0x0800ec34

08003aa0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d11f      	bne.n	8003afa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b03      	cmp	r3, #3
 8003abe:	d856      	bhi.n	8003b6e <DMA_CheckFifoParam+0xce>
 8003ac0:	a201      	add	r2, pc, #4	; (adr r2, 8003ac8 <DMA_CheckFifoParam+0x28>)
 8003ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac6:	bf00      	nop
 8003ac8:	08003ad9 	.word	0x08003ad9
 8003acc:	08003aeb 	.word	0x08003aeb
 8003ad0:	08003ad9 	.word	0x08003ad9
 8003ad4:	08003b6f 	.word	0x08003b6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d046      	beq.n	8003b72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae8:	e043      	b.n	8003b72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003af2:	d140      	bne.n	8003b76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af8:	e03d      	b.n	8003b76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b02:	d121      	bne.n	8003b48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d837      	bhi.n	8003b7a <DMA_CheckFifoParam+0xda>
 8003b0a:	a201      	add	r2, pc, #4	; (adr r2, 8003b10 <DMA_CheckFifoParam+0x70>)
 8003b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b10:	08003b21 	.word	0x08003b21
 8003b14:	08003b27 	.word	0x08003b27
 8003b18:	08003b21 	.word	0x08003b21
 8003b1c:	08003b39 	.word	0x08003b39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
      break;
 8003b24:	e030      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d025      	beq.n	8003b7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b36:	e022      	b.n	8003b7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b40:	d11f      	bne.n	8003b82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b46:	e01c      	b.n	8003b82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d903      	bls.n	8003b56 <DMA_CheckFifoParam+0xb6>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b03      	cmp	r3, #3
 8003b52:	d003      	beq.n	8003b5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b54:	e018      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	73fb      	strb	r3, [r7, #15]
      break;
 8003b5a:	e015      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00e      	beq.n	8003b86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b6c:	e00b      	b.n	8003b86 <DMA_CheckFifoParam+0xe6>
      break;
 8003b6e:	bf00      	nop
 8003b70:	e00a      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
      break;
 8003b72:	bf00      	nop
 8003b74:	e008      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
      break;
 8003b76:	bf00      	nop
 8003b78:	e006      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
      break;
 8003b7a:	bf00      	nop
 8003b7c:	e004      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
      break;
 8003b7e:	bf00      	nop
 8003b80:	e002      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b82:	bf00      	nop
 8003b84:	e000      	b.n	8003b88 <DMA_CheckFifoParam+0xe8>
      break;
 8003b86:	bf00      	nop
    }
  } 
  
  return status; 
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop

08003b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b089      	sub	sp, #36	; 0x24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61fb      	str	r3, [r7, #28]
 8003bb2:	e159      	b.n	8003e68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	f040 8148 	bne.w	8003e62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d005      	beq.n	8003bea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d130      	bne.n	8003c4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	2203      	movs	r2, #3
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c20:	2201      	movs	r2, #1
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	f003 0201 	and.w	r2, r3, #1
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 0303 	and.w	r3, r3, #3
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d017      	beq.n	8003c88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	2203      	movs	r2, #3
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 0303 	and.w	r3, r3, #3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d123      	bne.n	8003cdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	08da      	lsrs	r2, r3, #3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3208      	adds	r2, #8
 8003c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	220f      	movs	r2, #15
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	08da      	lsrs	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3208      	adds	r2, #8
 8003cd6:	69b9      	ldr	r1, [r7, #24]
 8003cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 0203 	and.w	r2, r3, #3
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80a2 	beq.w	8003e62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	4b57      	ldr	r3, [pc, #348]	; (8003e80 <HAL_GPIO_Init+0x2e8>)
 8003d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d26:	4a56      	ldr	r2, [pc, #344]	; (8003e80 <HAL_GPIO_Init+0x2e8>)
 8003d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d2e:	4b54      	ldr	r3, [pc, #336]	; (8003e80 <HAL_GPIO_Init+0x2e8>)
 8003d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d3a:	4a52      	ldr	r2, [pc, #328]	; (8003e84 <HAL_GPIO_Init+0x2ec>)
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	089b      	lsrs	r3, r3, #2
 8003d40:	3302      	adds	r3, #2
 8003d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	220f      	movs	r2, #15
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	43db      	mvns	r3, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a49      	ldr	r2, [pc, #292]	; (8003e88 <HAL_GPIO_Init+0x2f0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d019      	beq.n	8003d9a <HAL_GPIO_Init+0x202>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a48      	ldr	r2, [pc, #288]	; (8003e8c <HAL_GPIO_Init+0x2f4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d013      	beq.n	8003d96 <HAL_GPIO_Init+0x1fe>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a47      	ldr	r2, [pc, #284]	; (8003e90 <HAL_GPIO_Init+0x2f8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00d      	beq.n	8003d92 <HAL_GPIO_Init+0x1fa>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a46      	ldr	r2, [pc, #280]	; (8003e94 <HAL_GPIO_Init+0x2fc>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d007      	beq.n	8003d8e <HAL_GPIO_Init+0x1f6>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a45      	ldr	r2, [pc, #276]	; (8003e98 <HAL_GPIO_Init+0x300>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d101      	bne.n	8003d8a <HAL_GPIO_Init+0x1f2>
 8003d86:	2304      	movs	r3, #4
 8003d88:	e008      	b.n	8003d9c <HAL_GPIO_Init+0x204>
 8003d8a:	2307      	movs	r3, #7
 8003d8c:	e006      	b.n	8003d9c <HAL_GPIO_Init+0x204>
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e004      	b.n	8003d9c <HAL_GPIO_Init+0x204>
 8003d92:	2302      	movs	r3, #2
 8003d94:	e002      	b.n	8003d9c <HAL_GPIO_Init+0x204>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <HAL_GPIO_Init+0x204>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	69fa      	ldr	r2, [r7, #28]
 8003d9e:	f002 0203 	and.w	r2, r2, #3
 8003da2:	0092      	lsls	r2, r2, #2
 8003da4:	4093      	lsls	r3, r2
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dac:	4935      	ldr	r1, [pc, #212]	; (8003e84 <HAL_GPIO_Init+0x2ec>)
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	089b      	lsrs	r3, r3, #2
 8003db2:	3302      	adds	r3, #2
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dba:	4b38      	ldr	r3, [pc, #224]	; (8003e9c <HAL_GPIO_Init+0x304>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dde:	4a2f      	ldr	r2, [pc, #188]	; (8003e9c <HAL_GPIO_Init+0x304>)
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003de4:	4b2d      	ldr	r3, [pc, #180]	; (8003e9c <HAL_GPIO_Init+0x304>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	43db      	mvns	r3, r3
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4013      	ands	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e08:	4a24      	ldr	r2, [pc, #144]	; (8003e9c <HAL_GPIO_Init+0x304>)
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e0e:	4b23      	ldr	r3, [pc, #140]	; (8003e9c <HAL_GPIO_Init+0x304>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	43db      	mvns	r3, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e32:	4a1a      	ldr	r2, [pc, #104]	; (8003e9c <HAL_GPIO_Init+0x304>)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e38:	4b18      	ldr	r3, [pc, #96]	; (8003e9c <HAL_GPIO_Init+0x304>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	43db      	mvns	r3, r3
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4013      	ands	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e5c:	4a0f      	ldr	r2, [pc, #60]	; (8003e9c <HAL_GPIO_Init+0x304>)
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	3301      	adds	r3, #1
 8003e66:	61fb      	str	r3, [r7, #28]
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	2b0f      	cmp	r3, #15
 8003e6c:	f67f aea2 	bls.w	8003bb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e70:	bf00      	nop
 8003e72:	bf00      	nop
 8003e74:	3724      	adds	r7, #36	; 0x24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40023800 	.word	0x40023800
 8003e84:	40013800 	.word	0x40013800
 8003e88:	40020000 	.word	0x40020000
 8003e8c:	40020400 	.word	0x40020400
 8003e90:	40020800 	.word	0x40020800
 8003e94:	40020c00 	.word	0x40020c00
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40013c00 	.word	0x40013c00

08003ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	807b      	strh	r3, [r7, #2]
 8003eac:	4613      	mov	r3, r2
 8003eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003eb0:	787b      	ldrb	r3, [r7, #1]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eb6:	887a      	ldrh	r2, [r7, #2]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ebc:	e003      	b.n	8003ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ebe:	887b      	ldrh	r3, [r7, #2]
 8003ec0:	041a      	lsls	r2, r3, #16
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	619a      	str	r2, [r3, #24]
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ed2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ed4:	b08f      	sub	sp, #60	; 0x3c
 8003ed6:	af0a      	add	r7, sp, #40	; 0x28
 8003ed8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e10f      	b.n	8004104 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d106      	bne.n	8003f04 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f007 fba2 	bl	800b648 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2203      	movs	r2, #3
 8003f08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d102      	bne.n	8003f1e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f003 fe7f 	bl	8007c26 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	603b      	str	r3, [r7, #0]
 8003f2e:	687e      	ldr	r6, [r7, #4]
 8003f30:	466d      	mov	r5, sp
 8003f32:	f106 0410 	add.w	r4, r6, #16
 8003f36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f42:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f46:	1d33      	adds	r3, r6, #4
 8003f48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f4a:	6838      	ldr	r0, [r7, #0]
 8003f4c:	f003 fd56 	bl	80079fc <USB_CoreInit>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d005      	beq.n	8003f62 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2202      	movs	r2, #2
 8003f5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e0d0      	b.n	8004104 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2100      	movs	r1, #0
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f003 fe6d 	bl	8007c48 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f6e:	2300      	movs	r3, #0
 8003f70:	73fb      	strb	r3, [r7, #15]
 8003f72:	e04a      	b.n	800400a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f74:	7bfa      	ldrb	r2, [r7, #15]
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	333d      	adds	r3, #61	; 0x3d
 8003f84:	2201      	movs	r2, #1
 8003f86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f88:	7bfa      	ldrb	r2, [r7, #15]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4413      	add	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	333c      	adds	r3, #60	; 0x3c
 8003f98:	7bfa      	ldrb	r2, [r7, #15]
 8003f9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f9c:	7bfa      	ldrb	r2, [r7, #15]
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
 8003fa0:	b298      	uxth	r0, r3
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	3344      	adds	r3, #68	; 0x44
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fb4:	7bfa      	ldrb	r2, [r7, #15]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	3340      	adds	r3, #64	; 0x40
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fc8:	7bfa      	ldrb	r2, [r7, #15]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	3348      	adds	r3, #72	; 0x48
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fdc:	7bfa      	ldrb	r2, [r7, #15]
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	334c      	adds	r3, #76	; 0x4c
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ff0:	7bfa      	ldrb	r2, [r7, #15]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	3354      	adds	r3, #84	; 0x54
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004004:	7bfb      	ldrb	r3, [r7, #15]
 8004006:	3301      	adds	r3, #1
 8004008:	73fb      	strb	r3, [r7, #15]
 800400a:	7bfa      	ldrb	r2, [r7, #15]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	429a      	cmp	r2, r3
 8004012:	d3af      	bcc.n	8003f74 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004014:	2300      	movs	r3, #0
 8004016:	73fb      	strb	r3, [r7, #15]
 8004018:	e044      	b.n	80040a4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800401a:	7bfa      	ldrb	r2, [r7, #15]
 800401c:	6879      	ldr	r1, [r7, #4]
 800401e:	4613      	mov	r3, r2
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800402c:	2200      	movs	r2, #0
 800402e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004030:	7bfa      	ldrb	r2, [r7, #15]
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	4613      	mov	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	4413      	add	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004042:	7bfa      	ldrb	r2, [r7, #15]
 8004044:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004046:	7bfa      	ldrb	r2, [r7, #15]
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	4413      	add	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	440b      	add	r3, r1
 8004054:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004058:	2200      	movs	r2, #0
 800405a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800405c:	7bfa      	ldrb	r2, [r7, #15]
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004072:	7bfa      	ldrb	r2, [r7, #15]
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	4613      	mov	r3, r2
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	4413      	add	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	440b      	add	r3, r1
 8004080:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004088:	7bfa      	ldrb	r2, [r7, #15]
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	4613      	mov	r3, r2
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	4413      	add	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800409e:	7bfb      	ldrb	r3, [r7, #15]
 80040a0:	3301      	adds	r3, #1
 80040a2:	73fb      	strb	r3, [r7, #15]
 80040a4:	7bfa      	ldrb	r2, [r7, #15]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d3b5      	bcc.n	800401a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	687e      	ldr	r6, [r7, #4]
 80040b6:	466d      	mov	r5, sp
 80040b8:	f106 0410 	add.w	r4, r6, #16
 80040bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80040cc:	1d33      	adds	r3, r6, #4
 80040ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040d0:	6838      	ldr	r0, [r7, #0]
 80040d2:	f003 fe05 	bl	8007ce0 <USB_DevInit>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e00d      	b.n	8004104 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f004 ff54 	bl	8008faa <USB_DevDisconnect>

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800410c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_PCD_Start+0x1c>
 8004124:	2302      	movs	r3, #2
 8004126:	e020      	b.n	800416a <HAL_PCD_Start+0x5e>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004134:	2b01      	cmp	r3, #1
 8004136:	d109      	bne.n	800414c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800413c:	2b01      	cmp	r3, #1
 800413e:	d005      	beq.n	800414c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004144:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f003 fd57 	bl	8007c04 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f004 ff04 	bl	8008f68 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004172:	b590      	push	{r4, r7, lr}
 8004174:	b08d      	sub	sp, #52	; 0x34
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f004 ffc2 	bl	8009112 <USB_GetMode>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	f040 848a 	bne.w	8004aaa <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f004 ff26 	bl	8008fec <USB_ReadInterrupts>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 8480 	beq.w	8004aa8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	0a1b      	lsrs	r3, r3, #8
 80041b2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f004 ff13 	bl	8008fec <USB_ReadInterrupts>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d107      	bne.n	80041e0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695a      	ldr	r2, [r3, #20]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f002 0202 	and.w	r2, r2, #2
 80041de:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f004 ff01 	bl	8008fec <USB_ReadInterrupts>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b10      	cmp	r3, #16
 80041f2:	d161      	bne.n	80042b8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0210 	bic.w	r2, r2, #16
 8004202:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	f003 020f 	and.w	r2, r3, #15
 8004210:	4613      	mov	r3, r2
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	4413      	add	r3, r2
 8004220:	3304      	adds	r3, #4
 8004222:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	0c5b      	lsrs	r3, r3, #17
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	2b02      	cmp	r3, #2
 800422e:	d124      	bne.n	800427a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004236:	4013      	ands	r3, r2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d035      	beq.n	80042a8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	091b      	lsrs	r3, r3, #4
 8004244:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004246:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800424a:	b29b      	uxth	r3, r3
 800424c:	461a      	mov	r2, r3
 800424e:	6a38      	ldr	r0, [r7, #32]
 8004250:	f004 fd38 	bl	8008cc4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	091b      	lsrs	r3, r3, #4
 800425c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004260:	441a      	add	r2, r3
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	6a1a      	ldr	r2, [r3, #32]
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	091b      	lsrs	r3, r3, #4
 800426e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004272:	441a      	add	r2, r3
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	621a      	str	r2, [r3, #32]
 8004278:	e016      	b.n	80042a8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	0c5b      	lsrs	r3, r3, #17
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	2b06      	cmp	r3, #6
 8004284:	d110      	bne.n	80042a8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800428c:	2208      	movs	r2, #8
 800428e:	4619      	mov	r1, r3
 8004290:	6a38      	ldr	r0, [r7, #32]
 8004292:	f004 fd17 	bl	8008cc4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	6a1a      	ldr	r2, [r3, #32]
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042a2:	441a      	add	r2, r3
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0210 	orr.w	r2, r2, #16
 80042b6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f004 fe95 	bl	8008fec <USB_ReadInterrupts>
 80042c2:	4603      	mov	r3, r0
 80042c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042cc:	f040 80a7 	bne.w	800441e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	f004 fe9a 	bl	8009012 <USB_ReadDevAllOutEpInterrupt>
 80042de:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80042e0:	e099      	b.n	8004416 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 808e 	beq.w	800440a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	4611      	mov	r1, r2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f004 febe 	bl	800907a <USB_ReadDevOutEPInterrupt>
 80042fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00c      	beq.n	8004324 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004316:	461a      	mov	r2, r3
 8004318:	2301      	movs	r3, #1
 800431a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800431c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 fec2 	bl	80050a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00c      	beq.n	8004348 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	4413      	add	r3, r2
 8004336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433a:	461a      	mov	r2, r3
 800433c:	2308      	movs	r3, #8
 800433e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004340:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 ff98 	bl	8005278 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f003 0310 	and.w	r3, r3, #16
 800434e:	2b00      	cmp	r3, #0
 8004350:	d008      	beq.n	8004364 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	4413      	add	r3, r2
 800435a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435e:	461a      	mov	r2, r3
 8004360:	2310      	movs	r3, #16
 8004362:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d030      	beq.n	80043d0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004376:	2b80      	cmp	r3, #128	; 0x80
 8004378:	d109      	bne.n	800438e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	69fa      	ldr	r2, [r7, #28]
 8004384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004388:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800438c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800438e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004390:	4613      	mov	r3, r2
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	4413      	add	r3, r2
 80043a0:	3304      	adds	r3, #4
 80043a2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	78db      	ldrb	r3, [r3, #3]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d108      	bne.n	80043be <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2200      	movs	r2, #0
 80043b0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	4619      	mov	r1, r3
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f007 fa4b 	bl	800b854 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ca:	461a      	mov	r2, r3
 80043cc:	2302      	movs	r3, #2
 80043ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d008      	beq.n	80043ec <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e6:	461a      	mov	r2, r3
 80043e8:	2320      	movs	r3, #32
 80043ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004402:	461a      	mov	r2, r3
 8004404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004408:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	3301      	adds	r3, #1
 800440e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004412:	085b      	lsrs	r3, r3, #1
 8004414:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	2b00      	cmp	r3, #0
 800441a:	f47f af62 	bne.w	80042e2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f004 fde2 	bl	8008fec <USB_ReadInterrupts>
 8004428:	4603      	mov	r3, r0
 800442a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800442e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004432:	f040 80db 	bne.w	80045ec <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f004 fe03 	bl	8009046 <USB_ReadDevAllInEpInterrupt>
 8004440:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004446:	e0cd      	b.n	80045e4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 80c2 	beq.w	80045d8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	4611      	mov	r1, r2
 800445e:	4618      	mov	r0, r3
 8004460:	f004 fe29 	bl	80090b6 <USB_ReadDevInEPInterrupt>
 8004464:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d057      	beq.n	8004520 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	2201      	movs	r2, #1
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	43db      	mvns	r3, r3
 800448a:	69f9      	ldr	r1, [r7, #28]
 800448c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004490:	4013      	ands	r3, r2
 8004492:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a0:	461a      	mov	r2, r3
 80044a2:	2301      	movs	r3, #1
 80044a4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d132      	bne.n	8004514 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b2:	4613      	mov	r3, r2
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	334c      	adds	r3, #76	; 0x4c
 80044be:	6819      	ldr	r1, [r3, #0]
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c4:	4613      	mov	r3, r2
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4403      	add	r3, r0
 80044ce:	3348      	adds	r3, #72	; 0x48
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4419      	add	r1, r3
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d8:	4613      	mov	r3, r2
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	4413      	add	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4403      	add	r3, r0
 80044e2:	334c      	adds	r3, #76	; 0x4c
 80044e4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d113      	bne.n	8004514 <HAL_PCD_IRQHandler+0x3a2>
 80044ec:	6879      	ldr	r1, [r7, #4]
 80044ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f0:	4613      	mov	r3, r2
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	4413      	add	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	3354      	adds	r3, #84	; 0x54
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d108      	bne.n	8004514 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6818      	ldr	r0, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800450c:	461a      	mov	r2, r3
 800450e:	2101      	movs	r1, #1
 8004510:	f004 fe30 	bl	8009174 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	b2db      	uxtb	r3, r3
 8004518:	4619      	mov	r1, r3
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f007 f915 	bl	800b74a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d008      	beq.n	800453c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	4413      	add	r3, r2
 8004532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004536:	461a      	mov	r2, r3
 8004538:	2308      	movs	r3, #8
 800453a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	2b00      	cmp	r3, #0
 8004544:	d008      	beq.n	8004558 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004552:	461a      	mov	r2, r3
 8004554:	2310      	movs	r3, #16
 8004556:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455e:	2b00      	cmp	r3, #0
 8004560:	d008      	beq.n	8004574 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456e:	461a      	mov	r2, r3
 8004570:	2340      	movs	r3, #64	; 0x40
 8004572:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d023      	beq.n	80045c6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800457e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004580:	6a38      	ldr	r0, [r7, #32]
 8004582:	f003 fd11 	bl	8007fa8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004588:	4613      	mov	r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4413      	add	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	3338      	adds	r3, #56	; 0x38
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	4413      	add	r3, r2
 8004596:	3304      	adds	r3, #4
 8004598:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	78db      	ldrb	r3, [r3, #3]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d108      	bne.n	80045b4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2200      	movs	r2, #0
 80045a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	4619      	mov	r1, r3
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f007 f962 	bl	800b878 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c0:	461a      	mov	r2, r3
 80045c2:	2302      	movs	r3, #2
 80045c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80045d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fcdb 	bl	8004f8e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	3301      	adds	r3, #1
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	085b      	lsrs	r3, r3, #1
 80045e2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80045e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f47f af2e 	bne.w	8004448 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f004 fcfb 	bl	8008fec <USB_ReadInterrupts>
 80045f6:	4603      	mov	r3, r0
 80045f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004600:	d122      	bne.n	8004648 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	69fa      	ldr	r2, [r7, #28]
 800460c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004610:	f023 0301 	bic.w	r3, r3, #1
 8004614:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800461c:	2b01      	cmp	r3, #1
 800461e:	d108      	bne.n	8004632 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004628:	2100      	movs	r1, #0
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fec2 	bl	80053b4 <HAL_PCDEx_LPM_Callback>
 8004630:	e002      	b.n	8004638 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f007 f900 	bl	800b838 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695a      	ldr	r2, [r3, #20]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004646:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f004 fccd 	bl	8008fec <USB_ReadInterrupts>
 8004652:	4603      	mov	r3, r0
 8004654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800465c:	d112      	bne.n	8004684 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b01      	cmp	r3, #1
 800466c:	d102      	bne.n	8004674 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f007 f8bc 	bl	800b7ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695a      	ldr	r2, [r3, #20]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004682:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f004 fcaf 	bl	8008fec <USB_ReadInterrupts>
 800468e:	4603      	mov	r3, r0
 8004690:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004698:	f040 80b7 	bne.w	800480a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	69fa      	ldr	r2, [r7, #28]
 80046a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046aa:	f023 0301 	bic.w	r3, r3, #1
 80046ae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2110      	movs	r1, #16
 80046b6:	4618      	mov	r0, r3
 80046b8:	f003 fc76 	bl	8007fa8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046bc:	2300      	movs	r3, #0
 80046be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046c0:	e046      	b.n	8004750 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80046c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ce:	461a      	mov	r2, r3
 80046d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046d4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046e6:	0151      	lsls	r1, r2, #5
 80046e8:	69fa      	ldr	r2, [r7, #28]
 80046ea:	440a      	add	r2, r1
 80046ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80046f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004702:	461a      	mov	r2, r3
 8004704:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004708:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800470a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	4413      	add	r3, r2
 8004712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800471a:	0151      	lsls	r1, r2, #5
 800471c:	69fa      	ldr	r2, [r7, #28]
 800471e:	440a      	add	r2, r1
 8004720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004724:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004728:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800472a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800473a:	0151      	lsls	r1, r2, #5
 800473c:	69fa      	ldr	r2, [r7, #28]
 800473e:	440a      	add	r2, r1
 8004740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004744:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004748:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800474a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474c:	3301      	adds	r3, #1
 800474e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004756:	429a      	cmp	r2, r3
 8004758:	d3b3      	bcc.n	80046c2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	69fa      	ldr	r2, [r7, #28]
 8004764:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004768:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800476c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004772:	2b00      	cmp	r3, #0
 8004774:	d016      	beq.n	80047a4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004780:	69fa      	ldr	r2, [r7, #28]
 8004782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004786:	f043 030b 	orr.w	r3, r3, #11
 800478a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004796:	69fa      	ldr	r2, [r7, #28]
 8004798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800479c:	f043 030b 	orr.w	r3, r3, #11
 80047a0:	6453      	str	r3, [r2, #68]	; 0x44
 80047a2:	e015      	b.n	80047d0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	69fa      	ldr	r2, [r7, #28]
 80047ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047b6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80047ba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	69fa      	ldr	r2, [r7, #28]
 80047c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047ca:	f043 030b 	orr.w	r3, r3, #11
 80047ce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69fa      	ldr	r2, [r7, #28]
 80047da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80047e2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6818      	ldr	r0, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80047f4:	461a      	mov	r2, r3
 80047f6:	f004 fcbd 	bl	8009174 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695a      	ldr	r2, [r3, #20]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004808:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f004 fbec 	bl	8008fec <USB_ReadInterrupts>
 8004814:	4603      	mov	r3, r0
 8004816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800481a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800481e:	d124      	bne.n	800486a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4618      	mov	r0, r3
 8004826:	f004 fc82 	bl	800912e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	f003 fc37 	bl	80080a2 <USB_GetDevSpeed>
 8004834:	4603      	mov	r3, r0
 8004836:	461a      	mov	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681c      	ldr	r4, [r3, #0]
 8004840:	f001 f9e8 	bl	8005c14 <HAL_RCC_GetHCLKFreq>
 8004844:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800484a:	b2db      	uxtb	r3, r3
 800484c:	461a      	mov	r2, r3
 800484e:	4620      	mov	r0, r4
 8004850:	f003 f936 	bl	8007ac0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f006 ffa0 	bl	800b79a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	695a      	ldr	r2, [r3, #20]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004868:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f004 fbbc 	bl	8008fec <USB_ReadInterrupts>
 8004874:	4603      	mov	r3, r0
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b08      	cmp	r3, #8
 800487c:	d10a      	bne.n	8004894 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f006 ff7d 	bl	800b77e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695a      	ldr	r2, [r3, #20]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f002 0208 	and.w	r2, r2, #8
 8004892:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f004 fba7 	bl	8008fec <USB_ReadInterrupts>
 800489e:	4603      	mov	r3, r0
 80048a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a4:	2b80      	cmp	r3, #128	; 0x80
 80048a6:	d122      	bne.n	80048ee <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048b4:	2301      	movs	r3, #1
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
 80048b8:	e014      	b.n	80048e4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048be:	4613      	mov	r3, r2
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	4413      	add	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d105      	bne.n	80048de <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	4619      	mov	r1, r3
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 fb27 	bl	8004f2c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	3301      	adds	r3, #1
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d3e5      	bcc.n	80048ba <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f004 fb7a 	bl	8008fec <USB_ReadInterrupts>
 80048f8:	4603      	mov	r3, r0
 80048fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004902:	d13b      	bne.n	800497c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004904:	2301      	movs	r3, #1
 8004906:	627b      	str	r3, [r7, #36]	; 0x24
 8004908:	e02b      	b.n	8004962 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491e:	4613      	mov	r3, r2
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	4413      	add	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	440b      	add	r3, r1
 8004928:	3340      	adds	r3, #64	; 0x40
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d115      	bne.n	800495c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004930:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004932:	2b00      	cmp	r3, #0
 8004934:	da12      	bge.n	800495c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800493a:	4613      	mov	r3, r2
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	4413      	add	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	440b      	add	r3, r1
 8004944:	333f      	adds	r3, #63	; 0x3f
 8004946:	2201      	movs	r2, #1
 8004948:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	b2db      	uxtb	r3, r3
 800494e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004952:	b2db      	uxtb	r3, r3
 8004954:	4619      	mov	r1, r3
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fae8 	bl	8004f2c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	3301      	adds	r3, #1
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004968:	429a      	cmp	r2, r3
 800496a:	d3ce      	bcc.n	800490a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695a      	ldr	r2, [r3, #20]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800497a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4618      	mov	r0, r3
 8004982:	f004 fb33 	bl	8008fec <USB_ReadInterrupts>
 8004986:	4603      	mov	r3, r0
 8004988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800498c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004990:	d155      	bne.n	8004a3e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004992:	2301      	movs	r3, #1
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
 8004996:	e045      	b.n	8004a24 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ac:	4613      	mov	r3, r2
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	4413      	add	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	440b      	add	r3, r1
 80049b6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d12e      	bne.n	8004a1e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049c0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	da2b      	bge.n	8004a1e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80049d2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d121      	bne.n	8004a1e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049de:	4613      	mov	r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80049ec:	2201      	movs	r2, #1
 80049ee:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10a      	bne.n	8004a1e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	69fa      	ldr	r2, [r7, #28]
 8004a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a1a:	6053      	str	r3, [r2, #4]
            break;
 8004a1c:	e007      	b.n	8004a2e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	3301      	adds	r3, #1
 8004a22:	627b      	str	r3, [r7, #36]	; 0x24
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d3b4      	bcc.n	8004998 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695a      	ldr	r2, [r3, #20]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004a3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f004 fad2 	bl	8008fec <USB_ReadInterrupts>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a52:	d10a      	bne.n	8004a6a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f006 ff21 	bl	800b89c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695a      	ldr	r2, [r3, #20]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004a68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f004 fabc 	bl	8008fec <USB_ReadInterrupts>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f003 0304 	and.w	r3, r3, #4
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d115      	bne.n	8004aaa <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f006 ff11 	bl	800b8b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6859      	ldr	r1, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	605a      	str	r2, [r3, #4]
 8004aa6:	e000      	b.n	8004aaa <HAL_PCD_IRQHandler+0x938>
      return;
 8004aa8:	bf00      	nop
    }
  }
}
 8004aaa:	3734      	adds	r7, #52	; 0x34
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd90      	pop	{r4, r7, pc}

08004ab0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <HAL_PCD_SetAddress+0x1a>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e013      	b.n	8004af2 <HAL_PCD_SetAddress+0x42>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	78fa      	ldrb	r2, [r7, #3]
 8004ad6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	78fa      	ldrb	r2, [r7, #3]
 8004ae0:	4611      	mov	r1, r2
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f004 fa1a 	bl	8008f1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b084      	sub	sp, #16
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	4608      	mov	r0, r1
 8004b04:	4611      	mov	r1, r2
 8004b06:	461a      	mov	r2, r3
 8004b08:	4603      	mov	r3, r0
 8004b0a:	70fb      	strb	r3, [r7, #3]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	803b      	strh	r3, [r7, #0]
 8004b10:	4613      	mov	r3, r2
 8004b12:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	da0f      	bge.n	8004b40 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	f003 020f 	and.w	r2, r3, #15
 8004b26:	4613      	mov	r3, r2
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	4413      	add	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	3338      	adds	r3, #56	; 0x38
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	4413      	add	r3, r2
 8004b34:	3304      	adds	r3, #4
 8004b36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	705a      	strb	r2, [r3, #1]
 8004b3e:	e00f      	b.n	8004b60 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	f003 020f 	and.w	r2, r3, #15
 8004b46:	4613      	mov	r3, r2
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	4413      	add	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	4413      	add	r3, r2
 8004b56:	3304      	adds	r3, #4
 8004b58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b60:	78fb      	ldrb	r3, [r7, #3]
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b6c:	883a      	ldrh	r2, [r7, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	78ba      	ldrb	r2, [r7, #2]
 8004b76:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	785b      	ldrb	r3, [r3, #1]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d004      	beq.n	8004b8a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b8a:	78bb      	ldrb	r3, [r7, #2]
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d102      	bne.n	8004b96 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <HAL_PCD_EP_Open+0xaa>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e00e      	b.n	8004bc2 <HAL_PCD_EP_Open+0xc8>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68f9      	ldr	r1, [r7, #12]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f003 fa9a 	bl	80080ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004bc0:	7afb      	ldrb	r3, [r7, #11]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b084      	sub	sp, #16
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	da0f      	bge.n	8004bfe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bde:	78fb      	ldrb	r3, [r7, #3]
 8004be0:	f003 020f 	and.w	r2, r3, #15
 8004be4:	4613      	mov	r3, r2
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	4413      	add	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	3338      	adds	r3, #56	; 0x38
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	705a      	strb	r2, [r3, #1]
 8004bfc:	e00f      	b.n	8004c1e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bfe:	78fb      	ldrb	r3, [r7, #3]
 8004c00:	f003 020f 	and.w	r2, r3, #15
 8004c04:	4613      	mov	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	4413      	add	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	4413      	add	r3, r2
 8004c14:	3304      	adds	r3, #4
 8004c16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004c1e:	78fb      	ldrb	r3, [r7, #3]
 8004c20:	f003 030f 	and.w	r3, r3, #15
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d101      	bne.n	8004c38 <HAL_PCD_EP_Close+0x6e>
 8004c34:	2302      	movs	r3, #2
 8004c36:	e00e      	b.n	8004c56 <HAL_PCD_EP_Close+0x8c>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68f9      	ldr	r1, [r7, #12]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f003 fad8 	bl	80081fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b086      	sub	sp, #24
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	603b      	str	r3, [r7, #0]
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c6e:	7afb      	ldrb	r3, [r7, #11]
 8004c70:	f003 020f 	and.w	r2, r3, #15
 8004c74:	4613      	mov	r3, r2
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	4413      	add	r3, r2
 8004c84:	3304      	adds	r3, #4
 8004c86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	2200      	movs	r2, #0
 8004c98:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ca0:	7afb      	ldrb	r3, [r7, #11]
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d102      	bne.n	8004cba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cba:	7afb      	ldrb	r3, [r7, #11]
 8004cbc:	f003 030f 	and.w	r3, r3, #15
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d109      	bne.n	8004cd8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6818      	ldr	r0, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	461a      	mov	r2, r3
 8004cd0:	6979      	ldr	r1, [r7, #20]
 8004cd2:	f003 fdb7 	bl	8008844 <USB_EP0StartXfer>
 8004cd6:	e008      	b.n	8004cea <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6818      	ldr	r0, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	6979      	ldr	r1, [r7, #20]
 8004ce6:	f003 fb65 	bl	80083b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	f003 020f 	and.w	r2, r3, #15
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	4413      	add	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	440b      	add	r3, r1
 8004d12:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004d16:	681b      	ldr	r3, [r3, #0]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	607a      	str	r2, [r7, #4]
 8004d2e:	603b      	str	r3, [r7, #0]
 8004d30:	460b      	mov	r3, r1
 8004d32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d34:	7afb      	ldrb	r3, [r7, #11]
 8004d36:	f003 020f 	and.w	r2, r3, #15
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	4413      	add	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	3338      	adds	r3, #56	; 0x38
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4413      	add	r3, r2
 8004d48:	3304      	adds	r3, #4
 8004d4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2201      	movs	r2, #1
 8004d62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d64:	7afb      	ldrb	r3, [r7, #11]
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d102      	bne.n	8004d7e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d7e:	7afb      	ldrb	r3, [r7, #11]
 8004d80:	f003 030f 	and.w	r3, r3, #15
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d109      	bne.n	8004d9c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6818      	ldr	r0, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	461a      	mov	r2, r3
 8004d94:	6979      	ldr	r1, [r7, #20]
 8004d96:	f003 fd55 	bl	8008844 <USB_EP0StartXfer>
 8004d9a:	e008      	b.n	8004dae <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6818      	ldr	r0, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	461a      	mov	r2, r3
 8004da8:	6979      	ldr	r1, [r7, #20]
 8004daa:	f003 fb03 	bl	80083b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004dc4:	78fb      	ldrb	r3, [r7, #3]
 8004dc6:	f003 020f 	and.w	r2, r3, #15
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d901      	bls.n	8004dd6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e050      	b.n	8004e78 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004dd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	da0f      	bge.n	8004dfe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dde:	78fb      	ldrb	r3, [r7, #3]
 8004de0:	f003 020f 	and.w	r2, r3, #15
 8004de4:	4613      	mov	r3, r2
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	4413      	add	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	3338      	adds	r3, #56	; 0x38
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	4413      	add	r3, r2
 8004df2:	3304      	adds	r3, #4
 8004df4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	705a      	strb	r2, [r3, #1]
 8004dfc:	e00d      	b.n	8004e1a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004dfe:	78fa      	ldrb	r2, [r7, #3]
 8004e00:	4613      	mov	r3, r2
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	4413      	add	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	4413      	add	r3, r2
 8004e10:	3304      	adds	r3, #4
 8004e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d101      	bne.n	8004e3a <HAL_PCD_EP_SetStall+0x82>
 8004e36:	2302      	movs	r3, #2
 8004e38:	e01e      	b.n	8004e78 <HAL_PCD_EP_SetStall+0xc0>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68f9      	ldr	r1, [r7, #12]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f003 ff93 	bl	8008d74 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e4e:	78fb      	ldrb	r3, [r7, #3]
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10a      	bne.n	8004e6e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6818      	ldr	r0, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	b2d9      	uxtb	r1, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e68:	461a      	mov	r2, r3
 8004e6a:	f004 f983 	bl	8009174 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e8c:	78fb      	ldrb	r3, [r7, #3]
 8004e8e:	f003 020f 	and.w	r2, r3, #15
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d901      	bls.n	8004e9e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e042      	b.n	8004f24 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	da0f      	bge.n	8004ec6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ea6:	78fb      	ldrb	r3, [r7, #3]
 8004ea8:	f003 020f 	and.w	r2, r3, #15
 8004eac:	4613      	mov	r3, r2
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	3338      	adds	r3, #56	; 0x38
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	4413      	add	r3, r2
 8004eba:	3304      	adds	r3, #4
 8004ebc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	705a      	strb	r2, [r3, #1]
 8004ec4:	e00f      	b.n	8004ee6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ec6:	78fb      	ldrb	r3, [r7, #3]
 8004ec8:	f003 020f 	and.w	r2, r3, #15
 8004ecc:	4613      	mov	r3, r2
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	4413      	add	r3, r2
 8004edc:	3304      	adds	r3, #4
 8004ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004eec:	78fb      	ldrb	r3, [r7, #3]
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <HAL_PCD_EP_ClrStall+0x86>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e00e      	b.n	8004f24 <HAL_PCD_EP_ClrStall+0xa4>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68f9      	ldr	r1, [r7, #12]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f003 ff9b 	bl	8008e50 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004f38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	da0c      	bge.n	8004f5a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f40:	78fb      	ldrb	r3, [r7, #3]
 8004f42:	f003 020f 	and.w	r2, r3, #15
 8004f46:	4613      	mov	r3, r2
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	3338      	adds	r3, #56	; 0x38
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	4413      	add	r3, r2
 8004f54:	3304      	adds	r3, #4
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	e00c      	b.n	8004f74 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f5a:	78fb      	ldrb	r3, [r7, #3]
 8004f5c:	f003 020f 	and.w	r2, r3, #15
 8004f60:	4613      	mov	r3, r2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	4413      	add	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	4413      	add	r3, r2
 8004f70:	3304      	adds	r3, #4
 8004f72:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68f9      	ldr	r1, [r7, #12]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f003 fdba 	bl	8008af4 <USB_EPStopXfer>
 8004f80:	4603      	mov	r3, r0
 8004f82:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004f84:	7afb      	ldrb	r3, [r7, #11]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b08a      	sub	sp, #40	; 0x28
 8004f92:	af02      	add	r7, sp, #8
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	4413      	add	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	3338      	adds	r3, #56	; 0x38
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a1a      	ldr	r2, [r3, #32]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d901      	bls.n	8004fc6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e06c      	b.n	80050a0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	69fa      	ldr	r2, [r7, #28]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d902      	bls.n	8004fe2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	3303      	adds	r3, #3
 8004fe6:	089b      	lsrs	r3, r3, #2
 8004fe8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004fea:	e02b      	b.n	8005044 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	699a      	ldr	r2, [r3, #24]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	69fa      	ldr	r2, [r7, #28]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d902      	bls.n	8005008 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	3303      	adds	r3, #3
 800500c:	089b      	lsrs	r3, r3, #2
 800500e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6919      	ldr	r1, [r3, #16]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	b2da      	uxtb	r2, r3
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005020:	b2db      	uxtb	r3, r3
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	4603      	mov	r3, r0
 8005026:	6978      	ldr	r0, [r7, #20]
 8005028:	f003 fe0e 	bl	8008c48 <USB_WritePacket>

    ep->xfer_buff  += len;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	691a      	ldr	r2, [r3, #16]
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	441a      	add	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a1a      	ldr	r2, [r3, #32]
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	441a      	add	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	b29b      	uxth	r3, r3
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	429a      	cmp	r2, r3
 8005058:	d809      	bhi.n	800506e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a1a      	ldr	r2, [r3, #32]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005062:	429a      	cmp	r2, r3
 8005064:	d203      	bcs.n	800506e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1be      	bne.n	8004fec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	699a      	ldr	r2, [r3, #24]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	429a      	cmp	r2, r3
 8005078:	d811      	bhi.n	800509e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	2201      	movs	r2, #1
 8005082:	fa02 f303 	lsl.w	r3, r2, r3
 8005086:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	43db      	mvns	r3, r3
 8005094:	6939      	ldr	r1, [r7, #16]
 8005096:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800509a:	4013      	ands	r3, r2
 800509c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3720      	adds	r7, #32
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b088      	sub	sp, #32
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	333c      	adds	r3, #60	; 0x3c
 80050c0:	3304      	adds	r3, #4
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d17b      	bne.n	80051d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f003 0308 	and.w	r3, r3, #8
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d015      	beq.n	8005114 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	4a61      	ldr	r2, [pc, #388]	; (8005270 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	f240 80b9 	bls.w	8005264 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 80b3 	beq.w	8005264 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510a:	461a      	mov	r2, r3
 800510c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005110:	6093      	str	r3, [r2, #8]
 8005112:	e0a7      	b.n	8005264 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f003 0320 	and.w	r3, r3, #32
 800511a:	2b00      	cmp	r3, #0
 800511c:	d009      	beq.n	8005132 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512a:	461a      	mov	r2, r3
 800512c:	2320      	movs	r3, #32
 800512e:	6093      	str	r3, [r2, #8]
 8005130:	e098      	b.n	8005264 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005138:	2b00      	cmp	r3, #0
 800513a:	f040 8093 	bne.w	8005264 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	4a4b      	ldr	r2, [pc, #300]	; (8005270 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d90f      	bls.n	8005166 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00a      	beq.n	8005166 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515c:	461a      	mov	r2, r3
 800515e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005162:	6093      	str	r3, [r2, #8]
 8005164:	e07e      	b.n	8005264 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	4613      	mov	r3, r2
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	4413      	add	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	4413      	add	r3, r2
 8005178:	3304      	adds	r3, #4
 800517a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	69da      	ldr	r2, [r3, #28]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	0159      	lsls	r1, r3, #5
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	440b      	add	r3, r1
 8005188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005192:	1ad2      	subs	r2, r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d114      	bne.n	80051c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d109      	bne.n	80051ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6818      	ldr	r0, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80051b0:	461a      	mov	r2, r3
 80051b2:	2101      	movs	r1, #1
 80051b4:	f003 ffde 	bl	8009174 <USB_EP0_OutStart>
 80051b8:	e006      	b.n	80051c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	691a      	ldr	r2, [r3, #16]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	441a      	add	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	4619      	mov	r1, r3
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f006 faa0 	bl	800b714 <HAL_PCD_DataOutStageCallback>
 80051d4:	e046      	b.n	8005264 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	4a26      	ldr	r2, [pc, #152]	; (8005274 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d124      	bne.n	8005228 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00a      	beq.n	80051fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f4:	461a      	mov	r2, r3
 80051f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051fa:	6093      	str	r3, [r2, #8]
 80051fc:	e032      	b.n	8005264 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f003 0320 	and.w	r3, r3, #32
 8005204:	2b00      	cmp	r3, #0
 8005206:	d008      	beq.n	800521a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005214:	461a      	mov	r2, r3
 8005216:	2320      	movs	r3, #32
 8005218:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	b2db      	uxtb	r3, r3
 800521e:	4619      	mov	r1, r3
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f006 fa77 	bl	800b714 <HAL_PCD_DataOutStageCallback>
 8005226:	e01d      	b.n	8005264 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d114      	bne.n	8005258 <PCD_EP_OutXfrComplete_int+0x1b0>
 800522e:	6879      	ldr	r1, [r7, #4]
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	4613      	mov	r3, r2
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	4413      	add	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	440b      	add	r3, r1
 800523c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d108      	bne.n	8005258 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6818      	ldr	r0, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005250:	461a      	mov	r2, r3
 8005252:	2100      	movs	r1, #0
 8005254:	f003 ff8e 	bl	8009174 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	b2db      	uxtb	r3, r3
 800525c:	4619      	mov	r1, r3
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f006 fa58 	bl	800b714 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3720      	adds	r7, #32
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	4f54300a 	.word	0x4f54300a
 8005274:	4f54310a 	.word	0x4f54310a

08005278 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	333c      	adds	r3, #60	; 0x3c
 8005290:	3304      	adds	r3, #4
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4a15      	ldr	r2, [pc, #84]	; (8005300 <PCD_EP_OutSetupPacket_int+0x88>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d90e      	bls.n	80052cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d009      	beq.n	80052cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c4:	461a      	mov	r2, r3
 80052c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f006 fa0f 	bl	800b6f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	4a0a      	ldr	r2, [pc, #40]	; (8005300 <PCD_EP_OutSetupPacket_int+0x88>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d90c      	bls.n	80052f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d108      	bne.n	80052f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80052ec:	461a      	mov	r2, r3
 80052ee:	2101      	movs	r1, #1
 80052f0:	f003 ff40 	bl	8009174 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	4f54300a 	.word	0x4f54300a

08005304 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	460b      	mov	r3, r1
 800530e:	70fb      	strb	r3, [r7, #3]
 8005310:	4613      	mov	r3, r2
 8005312:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800531c:	78fb      	ldrb	r3, [r7, #3]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d107      	bne.n	8005332 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005322:	883b      	ldrh	r3, [r7, #0]
 8005324:	0419      	lsls	r1, r3, #16
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	430a      	orrs	r2, r1
 800532e:	629a      	str	r2, [r3, #40]	; 0x28
 8005330:	e028      	b.n	8005384 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005338:	0c1b      	lsrs	r3, r3, #16
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	4413      	add	r3, r2
 800533e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005340:	2300      	movs	r3, #0
 8005342:	73fb      	strb	r3, [r7, #15]
 8005344:	e00d      	b.n	8005362 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	7bfb      	ldrb	r3, [r7, #15]
 800534c:	3340      	adds	r3, #64	; 0x40
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	0c1b      	lsrs	r3, r3, #16
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	4413      	add	r3, r2
 800535a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800535c:	7bfb      	ldrb	r3, [r7, #15]
 800535e:	3301      	adds	r3, #1
 8005360:	73fb      	strb	r3, [r7, #15]
 8005362:	7bfa      	ldrb	r2, [r7, #15]
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	3b01      	subs	r3, #1
 8005368:	429a      	cmp	r2, r3
 800536a:	d3ec      	bcc.n	8005346 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800536c:	883b      	ldrh	r3, [r7, #0]
 800536e:	0418      	lsls	r0, r3, #16
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6819      	ldr	r1, [r3, #0]
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	3b01      	subs	r3, #1
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	4302      	orrs	r2, r0
 800537c:	3340      	adds	r3, #64	; 0x40
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	440b      	add	r3, r1
 8005382:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	460b      	mov	r3, r1
 800539c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	887a      	ldrh	r2, [r7, #2]
 80053a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	460b      	mov	r3, r1
 80053be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e267      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d075      	beq.n	80054d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053ea:	4b88      	ldr	r3, [pc, #544]	; (800560c <HAL_RCC_OscConfig+0x240>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 030c 	and.w	r3, r3, #12
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d00c      	beq.n	8005410 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053f6:	4b85      	ldr	r3, [pc, #532]	; (800560c <HAL_RCC_OscConfig+0x240>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053fe:	2b08      	cmp	r3, #8
 8005400:	d112      	bne.n	8005428 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005402:	4b82      	ldr	r3, [pc, #520]	; (800560c <HAL_RCC_OscConfig+0x240>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800540a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800540e:	d10b      	bne.n	8005428 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005410:	4b7e      	ldr	r3, [pc, #504]	; (800560c <HAL_RCC_OscConfig+0x240>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d05b      	beq.n	80054d4 <HAL_RCC_OscConfig+0x108>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d157      	bne.n	80054d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e242      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005430:	d106      	bne.n	8005440 <HAL_RCC_OscConfig+0x74>
 8005432:	4b76      	ldr	r3, [pc, #472]	; (800560c <HAL_RCC_OscConfig+0x240>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a75      	ldr	r2, [pc, #468]	; (800560c <HAL_RCC_OscConfig+0x240>)
 8005438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	e01d      	b.n	800547c <HAL_RCC_OscConfig+0xb0>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005448:	d10c      	bne.n	8005464 <HAL_RCC_OscConfig+0x98>
 800544a:	4b70      	ldr	r3, [pc, #448]	; (800560c <HAL_RCC_OscConfig+0x240>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a6f      	ldr	r2, [pc, #444]	; (800560c <HAL_RCC_OscConfig+0x240>)
 8005450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	4b6d      	ldr	r3, [pc, #436]	; (800560c <HAL_RCC_OscConfig+0x240>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a6c      	ldr	r2, [pc, #432]	; (800560c <HAL_RCC_OscConfig+0x240>)
 800545c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	e00b      	b.n	800547c <HAL_RCC_OscConfig+0xb0>
 8005464:	4b69      	ldr	r3, [pc, #420]	; (800560c <HAL_RCC_OscConfig+0x240>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a68      	ldr	r2, [pc, #416]	; (800560c <HAL_RCC_OscConfig+0x240>)
 800546a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	4b66      	ldr	r3, [pc, #408]	; (800560c <HAL_RCC_OscConfig+0x240>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a65      	ldr	r2, [pc, #404]	; (800560c <HAL_RCC_OscConfig+0x240>)
 8005476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800547a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d013      	beq.n	80054ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005484:	f7fd fa7a 	bl	800297c <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800548c:	f7fd fa76 	bl	800297c <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b64      	cmp	r3, #100	; 0x64
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e207      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800549e:	4b5b      	ldr	r3, [pc, #364]	; (800560c <HAL_RCC_OscConfig+0x240>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0f0      	beq.n	800548c <HAL_RCC_OscConfig+0xc0>
 80054aa:	e014      	b.n	80054d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ac:	f7fd fa66 	bl	800297c <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054b4:	f7fd fa62 	bl	800297c <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b64      	cmp	r3, #100	; 0x64
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e1f3      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054c6:	4b51      	ldr	r3, [pc, #324]	; (800560c <HAL_RCC_OscConfig+0x240>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1f0      	bne.n	80054b4 <HAL_RCC_OscConfig+0xe8>
 80054d2:	e000      	b.n	80054d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d063      	beq.n	80055aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054e2:	4b4a      	ldr	r3, [pc, #296]	; (800560c <HAL_RCC_OscConfig+0x240>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 030c 	and.w	r3, r3, #12
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00b      	beq.n	8005506 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ee:	4b47      	ldr	r3, [pc, #284]	; (800560c <HAL_RCC_OscConfig+0x240>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054f6:	2b08      	cmp	r3, #8
 80054f8:	d11c      	bne.n	8005534 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054fa:	4b44      	ldr	r3, [pc, #272]	; (800560c <HAL_RCC_OscConfig+0x240>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d116      	bne.n	8005534 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005506:	4b41      	ldr	r3, [pc, #260]	; (800560c <HAL_RCC_OscConfig+0x240>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d005      	beq.n	800551e <HAL_RCC_OscConfig+0x152>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d001      	beq.n	800551e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e1c7      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800551e:	4b3b      	ldr	r3, [pc, #236]	; (800560c <HAL_RCC_OscConfig+0x240>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	4937      	ldr	r1, [pc, #220]	; (800560c <HAL_RCC_OscConfig+0x240>)
 800552e:	4313      	orrs	r3, r2
 8005530:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005532:	e03a      	b.n	80055aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d020      	beq.n	800557e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800553c:	4b34      	ldr	r3, [pc, #208]	; (8005610 <HAL_RCC_OscConfig+0x244>)
 800553e:	2201      	movs	r2, #1
 8005540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005542:	f7fd fa1b 	bl	800297c <HAL_GetTick>
 8005546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005548:	e008      	b.n	800555c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800554a:	f7fd fa17 	bl	800297c <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d901      	bls.n	800555c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e1a8      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800555c:	4b2b      	ldr	r3, [pc, #172]	; (800560c <HAL_RCC_OscConfig+0x240>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0f0      	beq.n	800554a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005568:	4b28      	ldr	r3, [pc, #160]	; (800560c <HAL_RCC_OscConfig+0x240>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	00db      	lsls	r3, r3, #3
 8005576:	4925      	ldr	r1, [pc, #148]	; (800560c <HAL_RCC_OscConfig+0x240>)
 8005578:	4313      	orrs	r3, r2
 800557a:	600b      	str	r3, [r1, #0]
 800557c:	e015      	b.n	80055aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800557e:	4b24      	ldr	r3, [pc, #144]	; (8005610 <HAL_RCC_OscConfig+0x244>)
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005584:	f7fd f9fa 	bl	800297c <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800558c:	f7fd f9f6 	bl	800297c <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e187      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800559e:	4b1b      	ldr	r3, [pc, #108]	; (800560c <HAL_RCC_OscConfig+0x240>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f0      	bne.n	800558c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d036      	beq.n	8005624 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d016      	beq.n	80055ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055be:	4b15      	ldr	r3, [pc, #84]	; (8005614 <HAL_RCC_OscConfig+0x248>)
 80055c0:	2201      	movs	r2, #1
 80055c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c4:	f7fd f9da 	bl	800297c <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055cc:	f7fd f9d6 	bl	800297c <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e167      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055de:	4b0b      	ldr	r3, [pc, #44]	; (800560c <HAL_RCC_OscConfig+0x240>)
 80055e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0f0      	beq.n	80055cc <HAL_RCC_OscConfig+0x200>
 80055ea:	e01b      	b.n	8005624 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055ec:	4b09      	ldr	r3, [pc, #36]	; (8005614 <HAL_RCC_OscConfig+0x248>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055f2:	f7fd f9c3 	bl	800297c <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055f8:	e00e      	b.n	8005618 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055fa:	f7fd f9bf 	bl	800297c <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d907      	bls.n	8005618 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e150      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
 800560c:	40023800 	.word	0x40023800
 8005610:	42470000 	.word	0x42470000
 8005614:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005618:	4b88      	ldr	r3, [pc, #544]	; (800583c <HAL_RCC_OscConfig+0x470>)
 800561a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1ea      	bne.n	80055fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 8097 	beq.w	8005760 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005632:	2300      	movs	r3, #0
 8005634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005636:	4b81      	ldr	r3, [pc, #516]	; (800583c <HAL_RCC_OscConfig+0x470>)
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10f      	bne.n	8005662 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005642:	2300      	movs	r3, #0
 8005644:	60bb      	str	r3, [r7, #8]
 8005646:	4b7d      	ldr	r3, [pc, #500]	; (800583c <HAL_RCC_OscConfig+0x470>)
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	4a7c      	ldr	r2, [pc, #496]	; (800583c <HAL_RCC_OscConfig+0x470>)
 800564c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005650:	6413      	str	r3, [r2, #64]	; 0x40
 8005652:	4b7a      	ldr	r3, [pc, #488]	; (800583c <HAL_RCC_OscConfig+0x470>)
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800565a:	60bb      	str	r3, [r7, #8]
 800565c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800565e:	2301      	movs	r3, #1
 8005660:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005662:	4b77      	ldr	r3, [pc, #476]	; (8005840 <HAL_RCC_OscConfig+0x474>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566a:	2b00      	cmp	r3, #0
 800566c:	d118      	bne.n	80056a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800566e:	4b74      	ldr	r3, [pc, #464]	; (8005840 <HAL_RCC_OscConfig+0x474>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a73      	ldr	r2, [pc, #460]	; (8005840 <HAL_RCC_OscConfig+0x474>)
 8005674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800567a:	f7fd f97f 	bl	800297c <HAL_GetTick>
 800567e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005680:	e008      	b.n	8005694 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005682:	f7fd f97b 	bl	800297c <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d901      	bls.n	8005694 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e10c      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005694:	4b6a      	ldr	r3, [pc, #424]	; (8005840 <HAL_RCC_OscConfig+0x474>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0f0      	beq.n	8005682 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d106      	bne.n	80056b6 <HAL_RCC_OscConfig+0x2ea>
 80056a8:	4b64      	ldr	r3, [pc, #400]	; (800583c <HAL_RCC_OscConfig+0x470>)
 80056aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ac:	4a63      	ldr	r2, [pc, #396]	; (800583c <HAL_RCC_OscConfig+0x470>)
 80056ae:	f043 0301 	orr.w	r3, r3, #1
 80056b2:	6713      	str	r3, [r2, #112]	; 0x70
 80056b4:	e01c      	b.n	80056f0 <HAL_RCC_OscConfig+0x324>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	2b05      	cmp	r3, #5
 80056bc:	d10c      	bne.n	80056d8 <HAL_RCC_OscConfig+0x30c>
 80056be:	4b5f      	ldr	r3, [pc, #380]	; (800583c <HAL_RCC_OscConfig+0x470>)
 80056c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c2:	4a5e      	ldr	r2, [pc, #376]	; (800583c <HAL_RCC_OscConfig+0x470>)
 80056c4:	f043 0304 	orr.w	r3, r3, #4
 80056c8:	6713      	str	r3, [r2, #112]	; 0x70
 80056ca:	4b5c      	ldr	r3, [pc, #368]	; (800583c <HAL_RCC_OscConfig+0x470>)
 80056cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ce:	4a5b      	ldr	r2, [pc, #364]	; (800583c <HAL_RCC_OscConfig+0x470>)
 80056d0:	f043 0301 	orr.w	r3, r3, #1
 80056d4:	6713      	str	r3, [r2, #112]	; 0x70
 80056d6:	e00b      	b.n	80056f0 <HAL_RCC_OscConfig+0x324>
 80056d8:	4b58      	ldr	r3, [pc, #352]	; (800583c <HAL_RCC_OscConfig+0x470>)
 80056da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056dc:	4a57      	ldr	r2, [pc, #348]	; (800583c <HAL_RCC_OscConfig+0x470>)
 80056de:	f023 0301 	bic.w	r3, r3, #1
 80056e2:	6713      	str	r3, [r2, #112]	; 0x70
 80056e4:	4b55      	ldr	r3, [pc, #340]	; (800583c <HAL_RCC_OscConfig+0x470>)
 80056e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e8:	4a54      	ldr	r2, [pc, #336]	; (800583c <HAL_RCC_OscConfig+0x470>)
 80056ea:	f023 0304 	bic.w	r3, r3, #4
 80056ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d015      	beq.n	8005724 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f8:	f7fd f940 	bl	800297c <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056fe:	e00a      	b.n	8005716 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005700:	f7fd f93c 	bl	800297c <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	f241 3288 	movw	r2, #5000	; 0x1388
 800570e:	4293      	cmp	r3, r2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e0cb      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005716:	4b49      	ldr	r3, [pc, #292]	; (800583c <HAL_RCC_OscConfig+0x470>)
 8005718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d0ee      	beq.n	8005700 <HAL_RCC_OscConfig+0x334>
 8005722:	e014      	b.n	800574e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005724:	f7fd f92a 	bl	800297c <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800572a:	e00a      	b.n	8005742 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800572c:	f7fd f926 	bl	800297c <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	f241 3288 	movw	r2, #5000	; 0x1388
 800573a:	4293      	cmp	r3, r2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e0b5      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005742:	4b3e      	ldr	r3, [pc, #248]	; (800583c <HAL_RCC_OscConfig+0x470>)
 8005744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1ee      	bne.n	800572c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800574e:	7dfb      	ldrb	r3, [r7, #23]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d105      	bne.n	8005760 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005754:	4b39      	ldr	r3, [pc, #228]	; (800583c <HAL_RCC_OscConfig+0x470>)
 8005756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005758:	4a38      	ldr	r2, [pc, #224]	; (800583c <HAL_RCC_OscConfig+0x470>)
 800575a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800575e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 80a1 	beq.w	80058ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800576a:	4b34      	ldr	r3, [pc, #208]	; (800583c <HAL_RCC_OscConfig+0x470>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f003 030c 	and.w	r3, r3, #12
 8005772:	2b08      	cmp	r3, #8
 8005774:	d05c      	beq.n	8005830 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	2b02      	cmp	r3, #2
 800577c:	d141      	bne.n	8005802 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800577e:	4b31      	ldr	r3, [pc, #196]	; (8005844 <HAL_RCC_OscConfig+0x478>)
 8005780:	2200      	movs	r2, #0
 8005782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005784:	f7fd f8fa 	bl	800297c <HAL_GetTick>
 8005788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800578a:	e008      	b.n	800579e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800578c:	f7fd f8f6 	bl	800297c <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b02      	cmp	r3, #2
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e087      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800579e:	4b27      	ldr	r3, [pc, #156]	; (800583c <HAL_RCC_OscConfig+0x470>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1f0      	bne.n	800578c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69da      	ldr	r2, [r3, #28]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	431a      	orrs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	019b      	lsls	r3, r3, #6
 80057ba:	431a      	orrs	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c0:	085b      	lsrs	r3, r3, #1
 80057c2:	3b01      	subs	r3, #1
 80057c4:	041b      	lsls	r3, r3, #16
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057cc:	061b      	lsls	r3, r3, #24
 80057ce:	491b      	ldr	r1, [pc, #108]	; (800583c <HAL_RCC_OscConfig+0x470>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057d4:	4b1b      	ldr	r3, [pc, #108]	; (8005844 <HAL_RCC_OscConfig+0x478>)
 80057d6:	2201      	movs	r2, #1
 80057d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057da:	f7fd f8cf 	bl	800297c <HAL_GetTick>
 80057de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057e2:	f7fd f8cb 	bl	800297c <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e05c      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057f4:	4b11      	ldr	r3, [pc, #68]	; (800583c <HAL_RCC_OscConfig+0x470>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0f0      	beq.n	80057e2 <HAL_RCC_OscConfig+0x416>
 8005800:	e054      	b.n	80058ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005802:	4b10      	ldr	r3, [pc, #64]	; (8005844 <HAL_RCC_OscConfig+0x478>)
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005808:	f7fd f8b8 	bl	800297c <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005810:	f7fd f8b4 	bl	800297c <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b02      	cmp	r3, #2
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e045      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005822:	4b06      	ldr	r3, [pc, #24]	; (800583c <HAL_RCC_OscConfig+0x470>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1f0      	bne.n	8005810 <HAL_RCC_OscConfig+0x444>
 800582e:	e03d      	b.n	80058ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d107      	bne.n	8005848 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e038      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
 800583c:	40023800 	.word	0x40023800
 8005840:	40007000 	.word	0x40007000
 8005844:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005848:	4b1b      	ldr	r3, [pc, #108]	; (80058b8 <HAL_RCC_OscConfig+0x4ec>)
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d028      	beq.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005860:	429a      	cmp	r2, r3
 8005862:	d121      	bne.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800586e:	429a      	cmp	r2, r3
 8005870:	d11a      	bne.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005878:	4013      	ands	r3, r2
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800587e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005880:	4293      	cmp	r3, r2
 8005882:	d111      	bne.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588e:	085b      	lsrs	r3, r3, #1
 8005890:	3b01      	subs	r3, #1
 8005892:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005894:	429a      	cmp	r2, r3
 8005896:	d107      	bne.n	80058a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d001      	beq.n	80058ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e000      	b.n	80058ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	40023800 	.word	0x40023800

080058bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e0cc      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058d0:	4b68      	ldr	r3, [pc, #416]	; (8005a74 <HAL_RCC_ClockConfig+0x1b8>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d90c      	bls.n	80058f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058de:	4b65      	ldr	r3, [pc, #404]	; (8005a74 <HAL_RCC_ClockConfig+0x1b8>)
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058e6:	4b63      	ldr	r3, [pc, #396]	; (8005a74 <HAL_RCC_ClockConfig+0x1b8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d001      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e0b8      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d020      	beq.n	8005946 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	d005      	beq.n	800591c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005910:	4b59      	ldr	r3, [pc, #356]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	4a58      	ldr	r2, [pc, #352]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005916:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800591a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005928:	4b53      	ldr	r3, [pc, #332]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	4a52      	ldr	r2, [pc, #328]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 800592e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005932:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005934:	4b50      	ldr	r3, [pc, #320]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	494d      	ldr	r1, [pc, #308]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005942:	4313      	orrs	r3, r2
 8005944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d044      	beq.n	80059dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d107      	bne.n	800596a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800595a:	4b47      	ldr	r3, [pc, #284]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d119      	bne.n	800599a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e07f      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2b02      	cmp	r3, #2
 8005970:	d003      	beq.n	800597a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005976:	2b03      	cmp	r3, #3
 8005978:	d107      	bne.n	800598a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800597a:	4b3f      	ldr	r3, [pc, #252]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d109      	bne.n	800599a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e06f      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800598a:	4b3b      	ldr	r3, [pc, #236]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e067      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800599a:	4b37      	ldr	r3, [pc, #220]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f023 0203 	bic.w	r2, r3, #3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	4934      	ldr	r1, [pc, #208]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059ac:	f7fc ffe6 	bl	800297c <HAL_GetTick>
 80059b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059b2:	e00a      	b.n	80059ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059b4:	f7fc ffe2 	bl	800297c <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e04f      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ca:	4b2b      	ldr	r3, [pc, #172]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 020c 	and.w	r2, r3, #12
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	429a      	cmp	r2, r3
 80059da:	d1eb      	bne.n	80059b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059dc:	4b25      	ldr	r3, [pc, #148]	; (8005a74 <HAL_RCC_ClockConfig+0x1b8>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0307 	and.w	r3, r3, #7
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d20c      	bcs.n	8005a04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ea:	4b22      	ldr	r3, [pc, #136]	; (8005a74 <HAL_RCC_ClockConfig+0x1b8>)
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059f2:	4b20      	ldr	r3, [pc, #128]	; (8005a74 <HAL_RCC_ClockConfig+0x1b8>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d001      	beq.n	8005a04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e032      	b.n	8005a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0304 	and.w	r3, r3, #4
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d008      	beq.n	8005a22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a10:	4b19      	ldr	r3, [pc, #100]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	4916      	ldr	r1, [pc, #88]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0308 	and.w	r3, r3, #8
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d009      	beq.n	8005a42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a2e:	4b12      	ldr	r3, [pc, #72]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	490e      	ldr	r1, [pc, #56]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a42:	f000 f821 	bl	8005a88 <HAL_RCC_GetSysClockFreq>
 8005a46:	4602      	mov	r2, r0
 8005a48:	4b0b      	ldr	r3, [pc, #44]	; (8005a78 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	091b      	lsrs	r3, r3, #4
 8005a4e:	f003 030f 	and.w	r3, r3, #15
 8005a52:	490a      	ldr	r1, [pc, #40]	; (8005a7c <HAL_RCC_ClockConfig+0x1c0>)
 8005a54:	5ccb      	ldrb	r3, [r1, r3]
 8005a56:	fa22 f303 	lsr.w	r3, r2, r3
 8005a5a:	4a09      	ldr	r2, [pc, #36]	; (8005a80 <HAL_RCC_ClockConfig+0x1c4>)
 8005a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a5e:	4b09      	ldr	r3, [pc, #36]	; (8005a84 <HAL_RCC_ClockConfig+0x1c8>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fc ff46 	bl	80028f4 <HAL_InitTick>

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	40023c00 	.word	0x40023c00
 8005a78:	40023800 	.word	0x40023800
 8005a7c:	0800ec1c 	.word	0x0800ec1c
 8005a80:	20000000 	.word	0x20000000
 8005a84:	20000004 	.word	0x20000004

08005a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a8c:	b090      	sub	sp, #64	; 0x40
 8005a8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	637b      	str	r3, [r7, #52]	; 0x34
 8005a94:	2300      	movs	r3, #0
 8005a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a98:	2300      	movs	r3, #0
 8005a9a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005aa0:	4b59      	ldr	r3, [pc, #356]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f003 030c 	and.w	r3, r3, #12
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d00d      	beq.n	8005ac8 <HAL_RCC_GetSysClockFreq+0x40>
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	f200 80a1 	bhi.w	8005bf4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <HAL_RCC_GetSysClockFreq+0x34>
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d003      	beq.n	8005ac2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005aba:	e09b      	b.n	8005bf4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005abc:	4b53      	ldr	r3, [pc, #332]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x184>)
 8005abe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005ac0:	e09b      	b.n	8005bfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ac2:	4b53      	ldr	r3, [pc, #332]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ac4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ac6:	e098      	b.n	8005bfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ac8:	4b4f      	ldr	r3, [pc, #316]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ad0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ad2:	4b4d      	ldr	r3, [pc, #308]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d028      	beq.n	8005b30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ade:	4b4a      	ldr	r3, [pc, #296]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	099b      	lsrs	r3, r3, #6
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	623b      	str	r3, [r7, #32]
 8005ae8:	627a      	str	r2, [r7, #36]	; 0x24
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005af0:	2100      	movs	r1, #0
 8005af2:	4b47      	ldr	r3, [pc, #284]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x188>)
 8005af4:	fb03 f201 	mul.w	r2, r3, r1
 8005af8:	2300      	movs	r3, #0
 8005afa:	fb00 f303 	mul.w	r3, r0, r3
 8005afe:	4413      	add	r3, r2
 8005b00:	4a43      	ldr	r2, [pc, #268]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b02:	fba0 1202 	umull	r1, r2, r0, r2
 8005b06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b08:	460a      	mov	r2, r1
 8005b0a:	62ba      	str	r2, [r7, #40]	; 0x28
 8005b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b0e:	4413      	add	r3, r2
 8005b10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b14:	2200      	movs	r2, #0
 8005b16:	61bb      	str	r3, [r7, #24]
 8005b18:	61fa      	str	r2, [r7, #28]
 8005b1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005b22:	f7fb f899 	bl	8000c58 <__aeabi_uldivmod>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b2e:	e053      	b.n	8005bd8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b30:	4b35      	ldr	r3, [pc, #212]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	099b      	lsrs	r3, r3, #6
 8005b36:	2200      	movs	r2, #0
 8005b38:	613b      	str	r3, [r7, #16]
 8005b3a:	617a      	str	r2, [r7, #20]
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005b42:	f04f 0b00 	mov.w	fp, #0
 8005b46:	4652      	mov	r2, sl
 8005b48:	465b      	mov	r3, fp
 8005b4a:	f04f 0000 	mov.w	r0, #0
 8005b4e:	f04f 0100 	mov.w	r1, #0
 8005b52:	0159      	lsls	r1, r3, #5
 8005b54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b58:	0150      	lsls	r0, r2, #5
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	ebb2 080a 	subs.w	r8, r2, sl
 8005b62:	eb63 090b 	sbc.w	r9, r3, fp
 8005b66:	f04f 0200 	mov.w	r2, #0
 8005b6a:	f04f 0300 	mov.w	r3, #0
 8005b6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005b72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005b76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005b7a:	ebb2 0408 	subs.w	r4, r2, r8
 8005b7e:	eb63 0509 	sbc.w	r5, r3, r9
 8005b82:	f04f 0200 	mov.w	r2, #0
 8005b86:	f04f 0300 	mov.w	r3, #0
 8005b8a:	00eb      	lsls	r3, r5, #3
 8005b8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b90:	00e2      	lsls	r2, r4, #3
 8005b92:	4614      	mov	r4, r2
 8005b94:	461d      	mov	r5, r3
 8005b96:	eb14 030a 	adds.w	r3, r4, sl
 8005b9a:	603b      	str	r3, [r7, #0]
 8005b9c:	eb45 030b 	adc.w	r3, r5, fp
 8005ba0:	607b      	str	r3, [r7, #4]
 8005ba2:	f04f 0200 	mov.w	r2, #0
 8005ba6:	f04f 0300 	mov.w	r3, #0
 8005baa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bae:	4629      	mov	r1, r5
 8005bb0:	028b      	lsls	r3, r1, #10
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bb8:	4621      	mov	r1, r4
 8005bba:	028a      	lsls	r2, r1, #10
 8005bbc:	4610      	mov	r0, r2
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	60bb      	str	r3, [r7, #8]
 8005bc6:	60fa      	str	r2, [r7, #12]
 8005bc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bcc:	f7fb f844 	bl	8000c58 <__aeabi_uldivmod>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	0c1b      	lsrs	r3, r3, #16
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	3301      	adds	r3, #1
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005be8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005bf2:	e002      	b.n	8005bfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bf4:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x184>)
 8005bf6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3740      	adds	r7, #64	; 0x40
 8005c00:	46bd      	mov	sp, r7
 8005c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c06:	bf00      	nop
 8005c08:	40023800 	.word	0x40023800
 8005c0c:	00f42400 	.word	0x00f42400
 8005c10:	017d7840 	.word	0x017d7840

08005c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c18:	4b03      	ldr	r3, [pc, #12]	; (8005c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	20000000 	.word	0x20000000

08005c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c30:	f7ff fff0 	bl	8005c14 <HAL_RCC_GetHCLKFreq>
 8005c34:	4602      	mov	r2, r0
 8005c36:	4b05      	ldr	r3, [pc, #20]	; (8005c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	0a9b      	lsrs	r3, r3, #10
 8005c3c:	f003 0307 	and.w	r3, r3, #7
 8005c40:	4903      	ldr	r1, [pc, #12]	; (8005c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c42:	5ccb      	ldrb	r3, [r1, r3]
 8005c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	0800ec2c 	.word	0x0800ec2c

08005c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c58:	f7ff ffdc 	bl	8005c14 <HAL_RCC_GetHCLKFreq>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	0b5b      	lsrs	r3, r3, #13
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	4903      	ldr	r1, [pc, #12]	; (8005c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c6a:	5ccb      	ldrb	r3, [r1, r3]
 8005c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	40023800 	.word	0x40023800
 8005c78:	0800ec2c 	.word	0x0800ec2c

08005c7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e07b      	b.n	8005d86 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d108      	bne.n	8005ca8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c9e:	d009      	beq.n	8005cb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	61da      	str	r2, [r3, #28]
 8005ca6:	e005      	b.n	8005cb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d106      	bne.n	8005cd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7fb ffc4 	bl	8001c5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	431a      	orrs	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d24:	431a      	orrs	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d38:	ea42 0103 	orr.w	r1, r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d40:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	0c1b      	lsrs	r3, r3, #16
 8005d52:	f003 0104 	and.w	r1, r3, #4
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	f003 0210 	and.w	r2, r3, #16
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69da      	ldr	r2, [r3, #28]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b082      	sub	sp, #8
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e041      	b.n	8005e24 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d106      	bne.n	8005dba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7fc fb99 	bl	80024ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	3304      	adds	r3, #4
 8005dca:	4619      	mov	r1, r3
 8005dcc:	4610      	mov	r0, r2
 8005dce:	f000 fd93 	bl	80068f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d001      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e044      	b.n	8005ece <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0201 	orr.w	r2, r2, #1
 8005e5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a1e      	ldr	r2, [pc, #120]	; (8005edc <HAL_TIM_Base_Start_IT+0xb0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d018      	beq.n	8005e98 <HAL_TIM_Base_Start_IT+0x6c>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e6e:	d013      	beq.n	8005e98 <HAL_TIM_Base_Start_IT+0x6c>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1a      	ldr	r2, [pc, #104]	; (8005ee0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00e      	beq.n	8005e98 <HAL_TIM_Base_Start_IT+0x6c>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a19      	ldr	r2, [pc, #100]	; (8005ee4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d009      	beq.n	8005e98 <HAL_TIM_Base_Start_IT+0x6c>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a17      	ldr	r2, [pc, #92]	; (8005ee8 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d004      	beq.n	8005e98 <HAL_TIM_Base_Start_IT+0x6c>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a16      	ldr	r2, [pc, #88]	; (8005eec <HAL_TIM_Base_Start_IT+0xc0>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d111      	bne.n	8005ebc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f003 0307 	and.w	r3, r3, #7
 8005ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2b06      	cmp	r3, #6
 8005ea8:	d010      	beq.n	8005ecc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f042 0201 	orr.w	r2, r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eba:	e007      	b.n	8005ecc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f042 0201 	orr.w	r2, r2, #1
 8005eca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40010000 	.word	0x40010000
 8005ee0:	40000400 	.word	0x40000400
 8005ee4:	40000800 	.word	0x40000800
 8005ee8:	40000c00 	.word	0x40000c00
 8005eec:	40014000 	.word	0x40014000

08005ef0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e041      	b.n	8005f86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d106      	bne.n	8005f1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7fc fa9c 	bl	8002454 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	4610      	mov	r0, r2
 8005f30:	f000 fce2 	bl	80068f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
	...

08005f90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d109      	bne.n	8005fb4 <HAL_TIM_PWM_Start+0x24>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	bf14      	ite	ne
 8005fac:	2301      	movne	r3, #1
 8005fae:	2300      	moveq	r3, #0
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	e022      	b.n	8005ffa <HAL_TIM_PWM_Start+0x6a>
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	d109      	bne.n	8005fce <HAL_TIM_PWM_Start+0x3e>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	bf14      	ite	ne
 8005fc6:	2301      	movne	r3, #1
 8005fc8:	2300      	moveq	r3, #0
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	e015      	b.n	8005ffa <HAL_TIM_PWM_Start+0x6a>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b08      	cmp	r3, #8
 8005fd2:	d109      	bne.n	8005fe8 <HAL_TIM_PWM_Start+0x58>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	bf14      	ite	ne
 8005fe0:	2301      	movne	r3, #1
 8005fe2:	2300      	moveq	r3, #0
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	e008      	b.n	8005ffa <HAL_TIM_PWM_Start+0x6a>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	bf14      	ite	ne
 8005ff4:	2301      	movne	r3, #1
 8005ff6:	2300      	moveq	r3, #0
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e068      	b.n	80060d4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d104      	bne.n	8006012 <HAL_TIM_PWM_Start+0x82>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2202      	movs	r2, #2
 800600c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006010:	e013      	b.n	800603a <HAL_TIM_PWM_Start+0xaa>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b04      	cmp	r3, #4
 8006016:	d104      	bne.n	8006022 <HAL_TIM_PWM_Start+0x92>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006020:	e00b      	b.n	800603a <HAL_TIM_PWM_Start+0xaa>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b08      	cmp	r3, #8
 8006026:	d104      	bne.n	8006032 <HAL_TIM_PWM_Start+0xa2>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006030:	e003      	b.n	800603a <HAL_TIM_PWM_Start+0xaa>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2202      	movs	r2, #2
 8006036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2201      	movs	r2, #1
 8006040:	6839      	ldr	r1, [r7, #0]
 8006042:	4618      	mov	r0, r3
 8006044:	f000 fefe 	bl	8006e44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a23      	ldr	r2, [pc, #140]	; (80060dc <HAL_TIM_PWM_Start+0x14c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d107      	bne.n	8006062 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006060:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a1d      	ldr	r2, [pc, #116]	; (80060dc <HAL_TIM_PWM_Start+0x14c>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d018      	beq.n	800609e <HAL_TIM_PWM_Start+0x10e>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006074:	d013      	beq.n	800609e <HAL_TIM_PWM_Start+0x10e>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a19      	ldr	r2, [pc, #100]	; (80060e0 <HAL_TIM_PWM_Start+0x150>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d00e      	beq.n	800609e <HAL_TIM_PWM_Start+0x10e>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a17      	ldr	r2, [pc, #92]	; (80060e4 <HAL_TIM_PWM_Start+0x154>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d009      	beq.n	800609e <HAL_TIM_PWM_Start+0x10e>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a16      	ldr	r2, [pc, #88]	; (80060e8 <HAL_TIM_PWM_Start+0x158>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d004      	beq.n	800609e <HAL_TIM_PWM_Start+0x10e>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a14      	ldr	r2, [pc, #80]	; (80060ec <HAL_TIM_PWM_Start+0x15c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d111      	bne.n	80060c2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f003 0307 	and.w	r3, r3, #7
 80060a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2b06      	cmp	r3, #6
 80060ae:	d010      	beq.n	80060d2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0201 	orr.w	r2, r2, #1
 80060be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c0:	e007      	b.n	80060d2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f042 0201 	orr.w	r2, r2, #1
 80060d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	40010000 	.word	0x40010000
 80060e0:	40000400 	.word	0x40000400
 80060e4:	40000800 	.word	0x40000800
 80060e8:	40000c00 	.word	0x40000c00
 80060ec:	40014000 	.word	0x40014000

080060f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d101      	bne.n	8006104 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e097      	b.n	8006234 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	d106      	bne.n	800611e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7fc f933 	bl	8002384 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2202      	movs	r2, #2
 8006122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	6812      	ldr	r2, [r2, #0]
 8006130:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006134:	f023 0307 	bic.w	r3, r3, #7
 8006138:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	3304      	adds	r3, #4
 8006142:	4619      	mov	r1, r3
 8006144:	4610      	mov	r0, r2
 8006146:	f000 fbd7 	bl	80068f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	4313      	orrs	r3, r2
 800616a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006172:	f023 0303 	bic.w	r3, r3, #3
 8006176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	021b      	lsls	r3, r3, #8
 8006182:	4313      	orrs	r3, r2
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	4313      	orrs	r3, r2
 8006188:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006190:	f023 030c 	bic.w	r3, r3, #12
 8006194:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800619c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	021b      	lsls	r3, r3, #8
 80061ac:	4313      	orrs	r3, r2
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	011a      	lsls	r2, r3, #4
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	031b      	lsls	r3, r3, #12
 80061c0:	4313      	orrs	r3, r2
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80061ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80061d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	011b      	lsls	r3, r3, #4
 80061e2:	4313      	orrs	r3, r2
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3718      	adds	r7, #24
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800624c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006254:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800625c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006264:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d110      	bne.n	800628e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800626c:	7bfb      	ldrb	r3, [r7, #15]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d102      	bne.n	8006278 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006272:	7b7b      	ldrb	r3, [r7, #13]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d001      	beq.n	800627c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e089      	b.n	8006390 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2202      	movs	r2, #2
 8006280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800628c:	e031      	b.n	80062f2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2b04      	cmp	r3, #4
 8006292:	d110      	bne.n	80062b6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006294:	7bbb      	ldrb	r3, [r7, #14]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d102      	bne.n	80062a0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800629a:	7b3b      	ldrb	r3, [r7, #12]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d001      	beq.n	80062a4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e075      	b.n	8006390 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2202      	movs	r2, #2
 80062a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062b4:	e01d      	b.n	80062f2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d108      	bne.n	80062ce <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80062bc:	7bbb      	ldrb	r3, [r7, #14]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d105      	bne.n	80062ce <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062c2:	7b7b      	ldrb	r3, [r7, #13]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d102      	bne.n	80062ce <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80062c8:	7b3b      	ldrb	r3, [r7, #12]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d001      	beq.n	80062d2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e05e      	b.n	8006390 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2202      	movs	r2, #2
 80062d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2202      	movs	r2, #2
 80062de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2202      	movs	r2, #2
 80062e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2202      	movs	r2, #2
 80062ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d003      	beq.n	8006300 <HAL_TIM_Encoder_Start_IT+0xc4>
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	d010      	beq.n	8006320 <HAL_TIM_Encoder_Start_IT+0xe4>
 80062fe:	e01f      	b.n	8006340 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2201      	movs	r2, #1
 8006306:	2100      	movs	r1, #0
 8006308:	4618      	mov	r0, r3
 800630a:	f000 fd9b 	bl	8006e44 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68da      	ldr	r2, [r3, #12]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f042 0202 	orr.w	r2, r2, #2
 800631c:	60da      	str	r2, [r3, #12]
      break;
 800631e:	e02e      	b.n	800637e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2201      	movs	r2, #1
 8006326:	2104      	movs	r1, #4
 8006328:	4618      	mov	r0, r3
 800632a:	f000 fd8b 	bl	8006e44 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68da      	ldr	r2, [r3, #12]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f042 0204 	orr.w	r2, r2, #4
 800633c:	60da      	str	r2, [r3, #12]
      break;
 800633e:	e01e      	b.n	800637e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2201      	movs	r2, #1
 8006346:	2100      	movs	r1, #0
 8006348:	4618      	mov	r0, r3
 800634a:	f000 fd7b 	bl	8006e44 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2201      	movs	r2, #1
 8006354:	2104      	movs	r1, #4
 8006356:	4618      	mov	r0, r3
 8006358:	f000 fd74 	bl	8006e44 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68da      	ldr	r2, [r3, #12]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f042 0202 	orr.w	r2, r2, #2
 800636a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68da      	ldr	r2, [r3, #12]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f042 0204 	orr.w	r2, r2, #4
 800637a:	60da      	str	r2, [r3, #12]
      break;
 800637c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f042 0201 	orr.w	r2, r2, #1
 800638c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d122      	bne.n	80063f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d11b      	bne.n	80063f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f06f 0202 	mvn.w	r2, #2
 80063c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	f003 0303 	and.w	r3, r3, #3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d003      	beq.n	80063e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7fb f974 	bl	80016c8 <HAL_TIM_IC_CaptureCallback>
 80063e0:	e005      	b.n	80063ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fa69 	bl	80068ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fa70 	bl	80068ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	f003 0304 	and.w	r3, r3, #4
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d122      	bne.n	8006448 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b04      	cmp	r3, #4
 800640e:	d11b      	bne.n	8006448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f06f 0204 	mvn.w	r2, #4
 8006418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2202      	movs	r2, #2
 800641e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7fb f94a 	bl	80016c8 <HAL_TIM_IC_CaptureCallback>
 8006434:	e005      	b.n	8006442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fa3f 	bl	80068ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fa46 	bl	80068ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f003 0308 	and.w	r3, r3, #8
 8006452:	2b08      	cmp	r3, #8
 8006454:	d122      	bne.n	800649c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f003 0308 	and.w	r3, r3, #8
 8006460:	2b08      	cmp	r3, #8
 8006462:	d11b      	bne.n	800649c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f06f 0208 	mvn.w	r2, #8
 800646c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2204      	movs	r2, #4
 8006472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	f003 0303 	and.w	r3, r3, #3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7fb f920 	bl	80016c8 <HAL_TIM_IC_CaptureCallback>
 8006488:	e005      	b.n	8006496 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fa15 	bl	80068ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fa1c 	bl	80068ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0310 	and.w	r3, r3, #16
 80064a6:	2b10      	cmp	r3, #16
 80064a8:	d122      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f003 0310 	and.w	r3, r3, #16
 80064b4:	2b10      	cmp	r3, #16
 80064b6:	d11b      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f06f 0210 	mvn.w	r2, #16
 80064c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2208      	movs	r2, #8
 80064c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7fb f8f6 	bl	80016c8 <HAL_TIM_IC_CaptureCallback>
 80064dc:	e005      	b.n	80064ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f9eb 	bl	80068ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f9f2 	bl	80068ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d10e      	bne.n	800651c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b01      	cmp	r3, #1
 800650a:	d107      	bne.n	800651c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f06f 0201 	mvn.w	r2, #1
 8006514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7fa ffd8 	bl	80014cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006526:	2b80      	cmp	r3, #128	; 0x80
 8006528:	d10e      	bne.n	8006548 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006534:	2b80      	cmp	r3, #128	; 0x80
 8006536:	d107      	bne.n	8006548 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fd1c 	bl	8006f80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006552:	2b40      	cmp	r3, #64	; 0x40
 8006554:	d10e      	bne.n	8006574 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006560:	2b40      	cmp	r3, #64	; 0x40
 8006562:	d107      	bne.n	8006574 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800656c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f9b7 	bl	80068e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b20      	cmp	r3, #32
 8006580:	d10e      	bne.n	80065a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f003 0320 	and.w	r3, r3, #32
 800658c:	2b20      	cmp	r3, #32
 800658e:	d107      	bne.n	80065a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f06f 0220 	mvn.w	r2, #32
 8006598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fce6 	bl	8006f6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065a0:	bf00      	nop
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065b4:	2300      	movs	r3, #0
 80065b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d101      	bne.n	80065c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065c2:	2302      	movs	r3, #2
 80065c4:	e0ae      	b.n	8006724 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b0c      	cmp	r3, #12
 80065d2:	f200 809f 	bhi.w	8006714 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80065d6:	a201      	add	r2, pc, #4	; (adr r2, 80065dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065dc:	08006611 	.word	0x08006611
 80065e0:	08006715 	.word	0x08006715
 80065e4:	08006715 	.word	0x08006715
 80065e8:	08006715 	.word	0x08006715
 80065ec:	08006651 	.word	0x08006651
 80065f0:	08006715 	.word	0x08006715
 80065f4:	08006715 	.word	0x08006715
 80065f8:	08006715 	.word	0x08006715
 80065fc:	08006693 	.word	0x08006693
 8006600:	08006715 	.word	0x08006715
 8006604:	08006715 	.word	0x08006715
 8006608:	08006715 	.word	0x08006715
 800660c:	080066d3 	.word	0x080066d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68b9      	ldr	r1, [r7, #8]
 8006616:	4618      	mov	r0, r3
 8006618:	f000 f9ee 	bl	80069f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	699a      	ldr	r2, [r3, #24]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f042 0208 	orr.w	r2, r2, #8
 800662a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	699a      	ldr	r2, [r3, #24]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 0204 	bic.w	r2, r2, #4
 800663a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6999      	ldr	r1, [r3, #24]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	691a      	ldr	r2, [r3, #16]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	619a      	str	r2, [r3, #24]
      break;
 800664e:	e064      	b.n	800671a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68b9      	ldr	r1, [r7, #8]
 8006656:	4618      	mov	r0, r3
 8006658:	f000 fa34 	bl	8006ac4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	699a      	ldr	r2, [r3, #24]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800666a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	699a      	ldr	r2, [r3, #24]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800667a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6999      	ldr	r1, [r3, #24]
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	021a      	lsls	r2, r3, #8
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	619a      	str	r2, [r3, #24]
      break;
 8006690:	e043      	b.n	800671a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68b9      	ldr	r1, [r7, #8]
 8006698:	4618      	mov	r0, r3
 800669a:	f000 fa7f 	bl	8006b9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	69da      	ldr	r2, [r3, #28]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f042 0208 	orr.w	r2, r2, #8
 80066ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69da      	ldr	r2, [r3, #28]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 0204 	bic.w	r2, r2, #4
 80066bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69d9      	ldr	r1, [r3, #28]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	691a      	ldr	r2, [r3, #16]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	61da      	str	r2, [r3, #28]
      break;
 80066d0:	e023      	b.n	800671a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68b9      	ldr	r1, [r7, #8]
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 fac9 	bl	8006c70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	69da      	ldr	r2, [r3, #28]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69da      	ldr	r2, [r3, #28]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69d9      	ldr	r1, [r3, #28]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	021a      	lsls	r2, r3, #8
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	61da      	str	r2, [r3, #28]
      break;
 8006712:	e002      	b.n	800671a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	75fb      	strb	r3, [r7, #23]
      break;
 8006718:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006722:	7dfb      	ldrb	r3, [r7, #23]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006740:	2b01      	cmp	r3, #1
 8006742:	d101      	bne.n	8006748 <HAL_TIM_ConfigClockSource+0x1c>
 8006744:	2302      	movs	r3, #2
 8006746:	e0b4      	b.n	80068b2 <HAL_TIM_ConfigClockSource+0x186>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006766:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800676e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006780:	d03e      	beq.n	8006800 <HAL_TIM_ConfigClockSource+0xd4>
 8006782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006786:	f200 8087 	bhi.w	8006898 <HAL_TIM_ConfigClockSource+0x16c>
 800678a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800678e:	f000 8086 	beq.w	800689e <HAL_TIM_ConfigClockSource+0x172>
 8006792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006796:	d87f      	bhi.n	8006898 <HAL_TIM_ConfigClockSource+0x16c>
 8006798:	2b70      	cmp	r3, #112	; 0x70
 800679a:	d01a      	beq.n	80067d2 <HAL_TIM_ConfigClockSource+0xa6>
 800679c:	2b70      	cmp	r3, #112	; 0x70
 800679e:	d87b      	bhi.n	8006898 <HAL_TIM_ConfigClockSource+0x16c>
 80067a0:	2b60      	cmp	r3, #96	; 0x60
 80067a2:	d050      	beq.n	8006846 <HAL_TIM_ConfigClockSource+0x11a>
 80067a4:	2b60      	cmp	r3, #96	; 0x60
 80067a6:	d877      	bhi.n	8006898 <HAL_TIM_ConfigClockSource+0x16c>
 80067a8:	2b50      	cmp	r3, #80	; 0x50
 80067aa:	d03c      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0xfa>
 80067ac:	2b50      	cmp	r3, #80	; 0x50
 80067ae:	d873      	bhi.n	8006898 <HAL_TIM_ConfigClockSource+0x16c>
 80067b0:	2b40      	cmp	r3, #64	; 0x40
 80067b2:	d058      	beq.n	8006866 <HAL_TIM_ConfigClockSource+0x13a>
 80067b4:	2b40      	cmp	r3, #64	; 0x40
 80067b6:	d86f      	bhi.n	8006898 <HAL_TIM_ConfigClockSource+0x16c>
 80067b8:	2b30      	cmp	r3, #48	; 0x30
 80067ba:	d064      	beq.n	8006886 <HAL_TIM_ConfigClockSource+0x15a>
 80067bc:	2b30      	cmp	r3, #48	; 0x30
 80067be:	d86b      	bhi.n	8006898 <HAL_TIM_ConfigClockSource+0x16c>
 80067c0:	2b20      	cmp	r3, #32
 80067c2:	d060      	beq.n	8006886 <HAL_TIM_ConfigClockSource+0x15a>
 80067c4:	2b20      	cmp	r3, #32
 80067c6:	d867      	bhi.n	8006898 <HAL_TIM_ConfigClockSource+0x16c>
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d05c      	beq.n	8006886 <HAL_TIM_ConfigClockSource+0x15a>
 80067cc:	2b10      	cmp	r3, #16
 80067ce:	d05a      	beq.n	8006886 <HAL_TIM_ConfigClockSource+0x15a>
 80067d0:	e062      	b.n	8006898 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6818      	ldr	r0, [r3, #0]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	6899      	ldr	r1, [r3, #8]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f000 fb0f 	bl	8006e04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	609a      	str	r2, [r3, #8]
      break;
 80067fe:	e04f      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6818      	ldr	r0, [r3, #0]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	6899      	ldr	r1, [r3, #8]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	f000 faf8 	bl	8006e04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689a      	ldr	r2, [r3, #8]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006822:	609a      	str	r2, [r3, #8]
      break;
 8006824:	e03c      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6818      	ldr	r0, [r3, #0]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	6859      	ldr	r1, [r3, #4]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	461a      	mov	r2, r3
 8006834:	f000 fa6c 	bl	8006d10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2150      	movs	r1, #80	; 0x50
 800683e:	4618      	mov	r0, r3
 8006840:	f000 fac5 	bl	8006dce <TIM_ITRx_SetConfig>
      break;
 8006844:	e02c      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6818      	ldr	r0, [r3, #0]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	6859      	ldr	r1, [r3, #4]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	461a      	mov	r2, r3
 8006854:	f000 fa8b 	bl	8006d6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2160      	movs	r1, #96	; 0x60
 800685e:	4618      	mov	r0, r3
 8006860:	f000 fab5 	bl	8006dce <TIM_ITRx_SetConfig>
      break;
 8006864:	e01c      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6818      	ldr	r0, [r3, #0]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	6859      	ldr	r1, [r3, #4]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	461a      	mov	r2, r3
 8006874:	f000 fa4c 	bl	8006d10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2140      	movs	r1, #64	; 0x40
 800687e:	4618      	mov	r0, r3
 8006880:	f000 faa5 	bl	8006dce <TIM_ITRx_SetConfig>
      break;
 8006884:	e00c      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4619      	mov	r1, r3
 8006890:	4610      	mov	r0, r2
 8006892:	f000 fa9c 	bl	8006dce <TIM_ITRx_SetConfig>
      break;
 8006896:	e003      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	73fb      	strb	r3, [r7, #15]
      break;
 800689c:	e000      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800689e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068c2:	bf00      	nop
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068d6:	bf00      	nop
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068ea:	bf00      	nop
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
	...

080068f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a34      	ldr	r2, [pc, #208]	; (80069dc <TIM_Base_SetConfig+0xe4>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d00f      	beq.n	8006930 <TIM_Base_SetConfig+0x38>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006916:	d00b      	beq.n	8006930 <TIM_Base_SetConfig+0x38>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a31      	ldr	r2, [pc, #196]	; (80069e0 <TIM_Base_SetConfig+0xe8>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d007      	beq.n	8006930 <TIM_Base_SetConfig+0x38>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a30      	ldr	r2, [pc, #192]	; (80069e4 <TIM_Base_SetConfig+0xec>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d003      	beq.n	8006930 <TIM_Base_SetConfig+0x38>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a2f      	ldr	r2, [pc, #188]	; (80069e8 <TIM_Base_SetConfig+0xf0>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d108      	bne.n	8006942 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4313      	orrs	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a25      	ldr	r2, [pc, #148]	; (80069dc <TIM_Base_SetConfig+0xe4>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d01b      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006950:	d017      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a22      	ldr	r2, [pc, #136]	; (80069e0 <TIM_Base_SetConfig+0xe8>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d013      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a21      	ldr	r2, [pc, #132]	; (80069e4 <TIM_Base_SetConfig+0xec>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00f      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a20      	ldr	r2, [pc, #128]	; (80069e8 <TIM_Base_SetConfig+0xf0>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00b      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a1f      	ldr	r2, [pc, #124]	; (80069ec <TIM_Base_SetConfig+0xf4>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d007      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a1e      	ldr	r2, [pc, #120]	; (80069f0 <TIM_Base_SetConfig+0xf8>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d003      	beq.n	8006982 <TIM_Base_SetConfig+0x8a>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a1d      	ldr	r2, [pc, #116]	; (80069f4 <TIM_Base_SetConfig+0xfc>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d108      	bne.n	8006994 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4313      	orrs	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a08      	ldr	r2, [pc, #32]	; (80069dc <TIM_Base_SetConfig+0xe4>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d103      	bne.n	80069c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	691a      	ldr	r2, [r3, #16]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	615a      	str	r2, [r3, #20]
}
 80069ce:	bf00      	nop
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	40010000 	.word	0x40010000
 80069e0:	40000400 	.word	0x40000400
 80069e4:	40000800 	.word	0x40000800
 80069e8:	40000c00 	.word	0x40000c00
 80069ec:	40014000 	.word	0x40014000
 80069f0:	40014400 	.word	0x40014400
 80069f4:	40014800 	.word	0x40014800

080069f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	f023 0201 	bic.w	r2, r3, #1
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f023 0303 	bic.w	r3, r3, #3
 8006a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f023 0302 	bic.w	r3, r3, #2
 8006a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a1c      	ldr	r2, [pc, #112]	; (8006ac0 <TIM_OC1_SetConfig+0xc8>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d10c      	bne.n	8006a6e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f023 0308 	bic.w	r3, r3, #8
 8006a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f023 0304 	bic.w	r3, r3, #4
 8006a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a13      	ldr	r2, [pc, #76]	; (8006ac0 <TIM_OC1_SetConfig+0xc8>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d111      	bne.n	8006a9a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	621a      	str	r2, [r3, #32]
}
 8006ab4:	bf00      	nop
 8006ab6:	371c      	adds	r7, #28
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	40010000 	.word	0x40010000

08006ac4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	f023 0210 	bic.w	r2, r3, #16
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	021b      	lsls	r3, r3, #8
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f023 0320 	bic.w	r3, r3, #32
 8006b0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	011b      	lsls	r3, r3, #4
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a1e      	ldr	r2, [pc, #120]	; (8006b98 <TIM_OC2_SetConfig+0xd4>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d10d      	bne.n	8006b40 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	011b      	lsls	r3, r3, #4
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a15      	ldr	r2, [pc, #84]	; (8006b98 <TIM_OC2_SetConfig+0xd4>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d113      	bne.n	8006b70 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	621a      	str	r2, [r3, #32]
}
 8006b8a:	bf00      	nop
 8006b8c:	371c      	adds	r7, #28
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	40010000 	.word	0x40010000

08006b9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b087      	sub	sp, #28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f023 0303 	bic.w	r3, r3, #3
 8006bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	021b      	lsls	r3, r3, #8
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a1d      	ldr	r2, [pc, #116]	; (8006c6c <TIM_OC3_SetConfig+0xd0>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d10d      	bne.n	8006c16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	021b      	lsls	r3, r3, #8
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a14      	ldr	r2, [pc, #80]	; (8006c6c <TIM_OC3_SetConfig+0xd0>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d113      	bne.n	8006c46 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	011b      	lsls	r3, r3, #4
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	011b      	lsls	r3, r3, #4
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	621a      	str	r2, [r3, #32]
}
 8006c60:	bf00      	nop
 8006c62:	371c      	adds	r7, #28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	40010000 	.word	0x40010000

08006c70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	021b      	lsls	r3, r3, #8
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	031b      	lsls	r3, r3, #12
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a10      	ldr	r2, [pc, #64]	; (8006d0c <TIM_OC4_SetConfig+0x9c>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d109      	bne.n	8006ce4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	019b      	lsls	r3, r3, #6
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	621a      	str	r2, [r3, #32]
}
 8006cfe:	bf00      	nop
 8006d00:	371c      	adds	r7, #28
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40010000 	.word	0x40010000

08006d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6a1b      	ldr	r3, [r3, #32]
 8006d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	f023 0201 	bic.w	r2, r3, #1
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	011b      	lsls	r3, r3, #4
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f023 030a 	bic.w	r3, r3, #10
 8006d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	621a      	str	r2, [r3, #32]
}
 8006d62:	bf00      	nop
 8006d64:	371c      	adds	r7, #28
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b087      	sub	sp, #28
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	60f8      	str	r0, [r7, #12]
 8006d76:	60b9      	str	r1, [r7, #8]
 8006d78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	f023 0210 	bic.w	r2, r3, #16
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	031b      	lsls	r3, r3, #12
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006daa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	011b      	lsls	r3, r3, #4
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	621a      	str	r2, [r3, #32]
}
 8006dc2:	bf00      	nop
 8006dc4:	371c      	adds	r7, #28
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b085      	sub	sp, #20
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
 8006dd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	f043 0307 	orr.w	r3, r3, #7
 8006df0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	609a      	str	r2, [r3, #8]
}
 8006df8:	bf00      	nop
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	021a      	lsls	r2, r3, #8
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	431a      	orrs	r2, r3
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	609a      	str	r2, [r3, #8]
}
 8006e38:	bf00      	nop
 8006e3a:	371c      	adds	r7, #28
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	f003 031f 	and.w	r3, r3, #31
 8006e56:	2201      	movs	r2, #1
 8006e58:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6a1a      	ldr	r2, [r3, #32]
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	43db      	mvns	r3, r3
 8006e66:	401a      	ands	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6a1a      	ldr	r2, [r3, #32]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	f003 031f 	and.w	r3, r3, #31
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	fa01 f303 	lsl.w	r3, r1, r3
 8006e7c:	431a      	orrs	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	621a      	str	r2, [r3, #32]
}
 8006e82:	bf00      	nop
 8006e84:	371c      	adds	r7, #28
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
	...

08006e90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d101      	bne.n	8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e050      	b.n	8006f4a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ece:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a1c      	ldr	r2, [pc, #112]	; (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d018      	beq.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ef4:	d013      	beq.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a18      	ldr	r2, [pc, #96]	; (8006f5c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d00e      	beq.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a16      	ldr	r2, [pc, #88]	; (8006f60 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d009      	beq.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a15      	ldr	r2, [pc, #84]	; (8006f64 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d004      	beq.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a13      	ldr	r2, [pc, #76]	; (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d10c      	bne.n	8006f38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	40010000 	.word	0x40010000
 8006f5c:	40000400 	.word	0x40000400
 8006f60:	40000800 	.word	0x40000800
 8006f64:	40000c00 	.word	0x40000c00
 8006f68:	40014000 	.word	0x40014000

08006f6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e03f      	b.n	8007026 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d106      	bne.n	8006fc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7fb fb9c 	bl	80026f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2224      	movs	r2, #36	; 0x24
 8006fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68da      	ldr	r2, [r3, #12]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fa9b 	bl	8007514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	691a      	ldr	r2, [r3, #16]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	695a      	ldr	r2, [r3, #20]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ffc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68da      	ldr	r2, [r3, #12]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800700c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2220      	movs	r2, #32
 8007018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2220      	movs	r2, #32
 8007020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b084      	sub	sp, #16
 8007032:	af00      	add	r7, sp, #0
 8007034:	60f8      	str	r0, [r7, #12]
 8007036:	60b9      	str	r1, [r7, #8]
 8007038:	4613      	mov	r3, r2
 800703a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007042:	b2db      	uxtb	r3, r3
 8007044:	2b20      	cmp	r3, #32
 8007046:	d11d      	bne.n	8007084 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d002      	beq.n	8007054 <HAL_UART_Receive_DMA+0x26>
 800704e:	88fb      	ldrh	r3, [r7, #6]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e016      	b.n	8007086 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800705e:	2b01      	cmp	r3, #1
 8007060:	d101      	bne.n	8007066 <HAL_UART_Receive_DMA+0x38>
 8007062:	2302      	movs	r3, #2
 8007064:	e00f      	b.n	8007086 <HAL_UART_Receive_DMA+0x58>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007074:	88fb      	ldrh	r3, [r7, #6]
 8007076:	461a      	mov	r2, r3
 8007078:	68b9      	ldr	r1, [r7, #8]
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f000 f920 	bl	80072c0 <UART_Start_Receive_DMA>
 8007080:	4603      	mov	r3, r0
 8007082:	e000      	b.n	8007086 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007084:	2302      	movs	r3, #2
  }
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800708e:	b480      	push	{r7}
 8007090:	b083      	sub	sp, #12
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007096:	bf00      	nop
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b083      	sub	sp, #12
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80070aa:	bf00      	nop
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070b6:	b480      	push	{r7}
 80070b8:	b083      	sub	sp, #12
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	460b      	mov	r3, r1
 80070c0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070c2:	bf00      	nop
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr

080070ce <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b09c      	sub	sp, #112	; 0x70
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070da:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d172      	bne.n	80071d0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80070ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ec:	2200      	movs	r2, #0
 80070ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	330c      	adds	r3, #12
 80070f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070fa:	e853 3f00 	ldrex	r3, [r3]
 80070fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007106:	66bb      	str	r3, [r7, #104]	; 0x68
 8007108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	330c      	adds	r3, #12
 800710e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007110:	65ba      	str	r2, [r7, #88]	; 0x58
 8007112:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007114:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007116:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007118:	e841 2300 	strex	r3, r2, [r1]
 800711c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800711e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1e5      	bne.n	80070f0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	3314      	adds	r3, #20
 800712a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712e:	e853 3f00 	ldrex	r3, [r3]
 8007132:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007136:	f023 0301 	bic.w	r3, r3, #1
 800713a:	667b      	str	r3, [r7, #100]	; 0x64
 800713c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	3314      	adds	r3, #20
 8007142:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007144:	647a      	str	r2, [r7, #68]	; 0x44
 8007146:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007148:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800714a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800714c:	e841 2300 	strex	r3, r2, [r1]
 8007150:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1e5      	bne.n	8007124 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	3314      	adds	r3, #20
 800715e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	e853 3f00 	ldrex	r3, [r3]
 8007166:	623b      	str	r3, [r7, #32]
   return(result);
 8007168:	6a3b      	ldr	r3, [r7, #32]
 800716a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800716e:	663b      	str	r3, [r7, #96]	; 0x60
 8007170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	3314      	adds	r3, #20
 8007176:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007178:	633a      	str	r2, [r7, #48]	; 0x30
 800717a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800717e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007180:	e841 2300 	strex	r3, r2, [r1]
 8007184:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1e5      	bne.n	8007158 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800718c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800718e:	2220      	movs	r2, #32
 8007190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007198:	2b01      	cmp	r3, #1
 800719a:	d119      	bne.n	80071d0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800719c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	330c      	adds	r3, #12
 80071a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	e853 3f00 	ldrex	r3, [r3]
 80071aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f023 0310 	bic.w	r3, r3, #16
 80071b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	330c      	adds	r3, #12
 80071ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80071bc:	61fa      	str	r2, [r7, #28]
 80071be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c0:	69b9      	ldr	r1, [r7, #24]
 80071c2:	69fa      	ldr	r2, [r7, #28]
 80071c4:	e841 2300 	strex	r3, r2, [r1]
 80071c8:	617b      	str	r3, [r7, #20]
   return(result);
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1e5      	bne.n	800719c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d106      	bne.n	80071e6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071dc:	4619      	mov	r1, r3
 80071de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80071e0:	f7ff ff69 	bl	80070b6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071e4:	e002      	b.n	80071ec <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80071e6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80071e8:	f7fa f95a 	bl	80014a0 <HAL_UART_RxCpltCallback>
}
 80071ec:	bf00      	nop
 80071ee:	3770      	adds	r7, #112	; 0x70
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007200:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007206:	2b01      	cmp	r3, #1
 8007208:	d108      	bne.n	800721c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800720e:	085b      	lsrs	r3, r3, #1
 8007210:	b29b      	uxth	r3, r3
 8007212:	4619      	mov	r1, r3
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f7ff ff4e 	bl	80070b6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800721a:	e002      	b.n	8007222 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f7ff ff36 	bl	800708e <HAL_UART_RxHalfCpltCallback>
}
 8007222:	bf00      	nop
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b084      	sub	sp, #16
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007232:	2300      	movs	r3, #0
 8007234:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007246:	2b80      	cmp	r3, #128	; 0x80
 8007248:	bf0c      	ite	eq
 800724a:	2301      	moveq	r3, #1
 800724c:	2300      	movne	r3, #0
 800724e:	b2db      	uxtb	r3, r3
 8007250:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b21      	cmp	r3, #33	; 0x21
 800725c:	d108      	bne.n	8007270 <UART_DMAError+0x46>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d005      	beq.n	8007270 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	2200      	movs	r2, #0
 8007268:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800726a:	68b8      	ldr	r0, [r7, #8]
 800726c:	f000 f8c6 	bl	80073fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800727a:	2b40      	cmp	r3, #64	; 0x40
 800727c:	bf0c      	ite	eq
 800727e:	2301      	moveq	r3, #1
 8007280:	2300      	movne	r3, #0
 8007282:	b2db      	uxtb	r3, r3
 8007284:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b22      	cmp	r3, #34	; 0x22
 8007290:	d108      	bne.n	80072a4 <UART_DMAError+0x7a>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d005      	beq.n	80072a4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	2200      	movs	r2, #0
 800729c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800729e:	68b8      	ldr	r0, [r7, #8]
 80072a0:	f000 f8d4 	bl	800744c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a8:	f043 0210 	orr.w	r2, r3, #16
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072b0:	68b8      	ldr	r0, [r7, #8]
 80072b2:	f7ff fef6 	bl	80070a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072b6:	bf00      	nop
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
	...

080072c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b098      	sub	sp, #96	; 0x60
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	4613      	mov	r3, r2
 80072cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	88fa      	ldrh	r2, [r7, #6]
 80072d8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2222      	movs	r2, #34	; 0x22
 80072e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ec:	4a40      	ldr	r2, [pc, #256]	; (80073f0 <UART_Start_Receive_DMA+0x130>)
 80072ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f4:	4a3f      	ldr	r2, [pc, #252]	; (80073f4 <UART_Start_Receive_DMA+0x134>)
 80072f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fc:	4a3e      	ldr	r2, [pc, #248]	; (80073f8 <UART_Start_Receive_DMA+0x138>)
 80072fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007304:	2200      	movs	r2, #0
 8007306:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007308:	f107 0308 	add.w	r3, r7, #8
 800730c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3304      	adds	r3, #4
 8007318:	4619      	mov	r1, r3
 800731a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	88fb      	ldrh	r3, [r7, #6]
 8007320:	f7fc f978 	bl	8003614 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007324:	2300      	movs	r3, #0
 8007326:	613b      	str	r3, [r7, #16]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	613b      	str	r3, [r7, #16]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	613b      	str	r3, [r7, #16]
 8007338:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d019      	beq.n	800737e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	330c      	adds	r3, #12
 8007350:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007354:	e853 3f00 	ldrex	r3, [r3]
 8007358:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800735a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800735c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007360:	65bb      	str	r3, [r7, #88]	; 0x58
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	330c      	adds	r3, #12
 8007368:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800736a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800736c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007370:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007372:	e841 2300 	strex	r3, r2, [r1]
 8007376:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1e5      	bne.n	800734a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	3314      	adds	r3, #20
 8007384:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007388:	e853 3f00 	ldrex	r3, [r3]
 800738c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800738e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007390:	f043 0301 	orr.w	r3, r3, #1
 8007394:	657b      	str	r3, [r7, #84]	; 0x54
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	3314      	adds	r3, #20
 800739c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800739e:	63ba      	str	r2, [r7, #56]	; 0x38
 80073a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80073a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073a6:	e841 2300 	strex	r3, r2, [r1]
 80073aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1e5      	bne.n	800737e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3314      	adds	r3, #20
 80073b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	e853 3f00 	ldrex	r3, [r3]
 80073c0:	617b      	str	r3, [r7, #20]
   return(result);
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073c8:	653b      	str	r3, [r7, #80]	; 0x50
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	3314      	adds	r3, #20
 80073d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80073d2:	627a      	str	r2, [r7, #36]	; 0x24
 80073d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d6:	6a39      	ldr	r1, [r7, #32]
 80073d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073da:	e841 2300 	strex	r3, r2, [r1]
 80073de:	61fb      	str	r3, [r7, #28]
   return(result);
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1e5      	bne.n	80073b2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3760      	adds	r7, #96	; 0x60
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	080070cf 	.word	0x080070cf
 80073f4:	080071f5 	.word	0x080071f5
 80073f8:	0800722b 	.word	0x0800722b

080073fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b089      	sub	sp, #36	; 0x24
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	330c      	adds	r3, #12
 800740a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	e853 3f00 	ldrex	r3, [r3]
 8007412:	60bb      	str	r3, [r7, #8]
   return(result);
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800741a:	61fb      	str	r3, [r7, #28]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	330c      	adds	r3, #12
 8007422:	69fa      	ldr	r2, [r7, #28]
 8007424:	61ba      	str	r2, [r7, #24]
 8007426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007428:	6979      	ldr	r1, [r7, #20]
 800742a:	69ba      	ldr	r2, [r7, #24]
 800742c:	e841 2300 	strex	r3, r2, [r1]
 8007430:	613b      	str	r3, [r7, #16]
   return(result);
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1e5      	bne.n	8007404 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2220      	movs	r2, #32
 800743c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007440:	bf00      	nop
 8007442:	3724      	adds	r7, #36	; 0x24
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800744c:	b480      	push	{r7}
 800744e:	b095      	sub	sp, #84	; 0x54
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	330c      	adds	r3, #12
 800745a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745e:	e853 3f00 	ldrex	r3, [r3]
 8007462:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007466:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800746a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	330c      	adds	r3, #12
 8007472:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007474:	643a      	str	r2, [r7, #64]	; 0x40
 8007476:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007478:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800747a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800747c:	e841 2300 	strex	r3, r2, [r1]
 8007480:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1e5      	bne.n	8007454 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	3314      	adds	r3, #20
 800748e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	e853 3f00 	ldrex	r3, [r3]
 8007496:	61fb      	str	r3, [r7, #28]
   return(result);
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	f023 0301 	bic.w	r3, r3, #1
 800749e:	64bb      	str	r3, [r7, #72]	; 0x48
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3314      	adds	r3, #20
 80074a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074b0:	e841 2300 	strex	r3, r2, [r1]
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e5      	bne.n	8007488 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d119      	bne.n	80074f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	330c      	adds	r3, #12
 80074ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	e853 3f00 	ldrex	r3, [r3]
 80074d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	f023 0310 	bic.w	r3, r3, #16
 80074da:	647b      	str	r3, [r7, #68]	; 0x44
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	330c      	adds	r3, #12
 80074e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074e4:	61ba      	str	r2, [r7, #24]
 80074e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e8:	6979      	ldr	r1, [r7, #20]
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	e841 2300 	strex	r3, r2, [r1]
 80074f0:	613b      	str	r3, [r7, #16]
   return(result);
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e5      	bne.n	80074c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2220      	movs	r2, #32
 80074fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007506:	bf00      	nop
 8007508:	3754      	adds	r7, #84	; 0x54
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
	...

08007514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007518:	b0c0      	sub	sp, #256	; 0x100
 800751a:	af00      	add	r7, sp, #0
 800751c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800752c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007530:	68d9      	ldr	r1, [r3, #12]
 8007532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	ea40 0301 	orr.w	r3, r0, r1
 800753c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800753e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007542:	689a      	ldr	r2, [r3, #8]
 8007544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	431a      	orrs	r2, r3
 800754c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007550:	695b      	ldr	r3, [r3, #20]
 8007552:	431a      	orrs	r2, r3
 8007554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	4313      	orrs	r3, r2
 800755c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800756c:	f021 010c 	bic.w	r1, r1, #12
 8007570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800757a:	430b      	orrs	r3, r1
 800757c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800757e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800758a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800758e:	6999      	ldr	r1, [r3, #24]
 8007590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	ea40 0301 	orr.w	r3, r0, r1
 800759a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800759c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	4b8f      	ldr	r3, [pc, #572]	; (80077e0 <UART_SetConfig+0x2cc>)
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d005      	beq.n	80075b4 <UART_SetConfig+0xa0>
 80075a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	4b8d      	ldr	r3, [pc, #564]	; (80077e4 <UART_SetConfig+0x2d0>)
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d104      	bne.n	80075be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80075b4:	f7fe fb4e 	bl	8005c54 <HAL_RCC_GetPCLK2Freq>
 80075b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80075bc:	e003      	b.n	80075c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80075be:	f7fe fb35 	bl	8005c2c <HAL_RCC_GetPCLK1Freq>
 80075c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075d0:	f040 810c 	bne.w	80077ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075d8:	2200      	movs	r2, #0
 80075da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80075de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80075e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80075e6:	4622      	mov	r2, r4
 80075e8:	462b      	mov	r3, r5
 80075ea:	1891      	adds	r1, r2, r2
 80075ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80075ee:	415b      	adcs	r3, r3
 80075f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80075f6:	4621      	mov	r1, r4
 80075f8:	eb12 0801 	adds.w	r8, r2, r1
 80075fc:	4629      	mov	r1, r5
 80075fe:	eb43 0901 	adc.w	r9, r3, r1
 8007602:	f04f 0200 	mov.w	r2, #0
 8007606:	f04f 0300 	mov.w	r3, #0
 800760a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800760e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007616:	4690      	mov	r8, r2
 8007618:	4699      	mov	r9, r3
 800761a:	4623      	mov	r3, r4
 800761c:	eb18 0303 	adds.w	r3, r8, r3
 8007620:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007624:	462b      	mov	r3, r5
 8007626:	eb49 0303 	adc.w	r3, r9, r3
 800762a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800762e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800763a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800763e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007642:	460b      	mov	r3, r1
 8007644:	18db      	adds	r3, r3, r3
 8007646:	653b      	str	r3, [r7, #80]	; 0x50
 8007648:	4613      	mov	r3, r2
 800764a:	eb42 0303 	adc.w	r3, r2, r3
 800764e:	657b      	str	r3, [r7, #84]	; 0x54
 8007650:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007654:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007658:	f7f9 fafe 	bl	8000c58 <__aeabi_uldivmod>
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	4b61      	ldr	r3, [pc, #388]	; (80077e8 <UART_SetConfig+0x2d4>)
 8007662:	fba3 2302 	umull	r2, r3, r3, r2
 8007666:	095b      	lsrs	r3, r3, #5
 8007668:	011c      	lsls	r4, r3, #4
 800766a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800766e:	2200      	movs	r2, #0
 8007670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007674:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007678:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800767c:	4642      	mov	r2, r8
 800767e:	464b      	mov	r3, r9
 8007680:	1891      	adds	r1, r2, r2
 8007682:	64b9      	str	r1, [r7, #72]	; 0x48
 8007684:	415b      	adcs	r3, r3
 8007686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007688:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800768c:	4641      	mov	r1, r8
 800768e:	eb12 0a01 	adds.w	sl, r2, r1
 8007692:	4649      	mov	r1, r9
 8007694:	eb43 0b01 	adc.w	fp, r3, r1
 8007698:	f04f 0200 	mov.w	r2, #0
 800769c:	f04f 0300 	mov.w	r3, #0
 80076a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80076a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80076a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076ac:	4692      	mov	sl, r2
 80076ae:	469b      	mov	fp, r3
 80076b0:	4643      	mov	r3, r8
 80076b2:	eb1a 0303 	adds.w	r3, sl, r3
 80076b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80076ba:	464b      	mov	r3, r9
 80076bc:	eb4b 0303 	adc.w	r3, fp, r3
 80076c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80076c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80076d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80076d8:	460b      	mov	r3, r1
 80076da:	18db      	adds	r3, r3, r3
 80076dc:	643b      	str	r3, [r7, #64]	; 0x40
 80076de:	4613      	mov	r3, r2
 80076e0:	eb42 0303 	adc.w	r3, r2, r3
 80076e4:	647b      	str	r3, [r7, #68]	; 0x44
 80076e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80076ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80076ee:	f7f9 fab3 	bl	8000c58 <__aeabi_uldivmod>
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	4611      	mov	r1, r2
 80076f8:	4b3b      	ldr	r3, [pc, #236]	; (80077e8 <UART_SetConfig+0x2d4>)
 80076fa:	fba3 2301 	umull	r2, r3, r3, r1
 80076fe:	095b      	lsrs	r3, r3, #5
 8007700:	2264      	movs	r2, #100	; 0x64
 8007702:	fb02 f303 	mul.w	r3, r2, r3
 8007706:	1acb      	subs	r3, r1, r3
 8007708:	00db      	lsls	r3, r3, #3
 800770a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800770e:	4b36      	ldr	r3, [pc, #216]	; (80077e8 <UART_SetConfig+0x2d4>)
 8007710:	fba3 2302 	umull	r2, r3, r3, r2
 8007714:	095b      	lsrs	r3, r3, #5
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800771c:	441c      	add	r4, r3
 800771e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007722:	2200      	movs	r2, #0
 8007724:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007728:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800772c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007730:	4642      	mov	r2, r8
 8007732:	464b      	mov	r3, r9
 8007734:	1891      	adds	r1, r2, r2
 8007736:	63b9      	str	r1, [r7, #56]	; 0x38
 8007738:	415b      	adcs	r3, r3
 800773a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800773c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007740:	4641      	mov	r1, r8
 8007742:	1851      	adds	r1, r2, r1
 8007744:	6339      	str	r1, [r7, #48]	; 0x30
 8007746:	4649      	mov	r1, r9
 8007748:	414b      	adcs	r3, r1
 800774a:	637b      	str	r3, [r7, #52]	; 0x34
 800774c:	f04f 0200 	mov.w	r2, #0
 8007750:	f04f 0300 	mov.w	r3, #0
 8007754:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007758:	4659      	mov	r1, fp
 800775a:	00cb      	lsls	r3, r1, #3
 800775c:	4651      	mov	r1, sl
 800775e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007762:	4651      	mov	r1, sl
 8007764:	00ca      	lsls	r2, r1, #3
 8007766:	4610      	mov	r0, r2
 8007768:	4619      	mov	r1, r3
 800776a:	4603      	mov	r3, r0
 800776c:	4642      	mov	r2, r8
 800776e:	189b      	adds	r3, r3, r2
 8007770:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007774:	464b      	mov	r3, r9
 8007776:	460a      	mov	r2, r1
 8007778:	eb42 0303 	adc.w	r3, r2, r3
 800777c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800778c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007790:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007794:	460b      	mov	r3, r1
 8007796:	18db      	adds	r3, r3, r3
 8007798:	62bb      	str	r3, [r7, #40]	; 0x28
 800779a:	4613      	mov	r3, r2
 800779c:	eb42 0303 	adc.w	r3, r2, r3
 80077a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80077a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80077aa:	f7f9 fa55 	bl	8000c58 <__aeabi_uldivmod>
 80077ae:	4602      	mov	r2, r0
 80077b0:	460b      	mov	r3, r1
 80077b2:	4b0d      	ldr	r3, [pc, #52]	; (80077e8 <UART_SetConfig+0x2d4>)
 80077b4:	fba3 1302 	umull	r1, r3, r3, r2
 80077b8:	095b      	lsrs	r3, r3, #5
 80077ba:	2164      	movs	r1, #100	; 0x64
 80077bc:	fb01 f303 	mul.w	r3, r1, r3
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	00db      	lsls	r3, r3, #3
 80077c4:	3332      	adds	r3, #50	; 0x32
 80077c6:	4a08      	ldr	r2, [pc, #32]	; (80077e8 <UART_SetConfig+0x2d4>)
 80077c8:	fba2 2303 	umull	r2, r3, r2, r3
 80077cc:	095b      	lsrs	r3, r3, #5
 80077ce:	f003 0207 	and.w	r2, r3, #7
 80077d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4422      	add	r2, r4
 80077da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80077dc:	e105      	b.n	80079ea <UART_SetConfig+0x4d6>
 80077de:	bf00      	nop
 80077e0:	40011000 	.word	0x40011000
 80077e4:	40011400 	.word	0x40011400
 80077e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077f0:	2200      	movs	r2, #0
 80077f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80077f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80077fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80077fe:	4642      	mov	r2, r8
 8007800:	464b      	mov	r3, r9
 8007802:	1891      	adds	r1, r2, r2
 8007804:	6239      	str	r1, [r7, #32]
 8007806:	415b      	adcs	r3, r3
 8007808:	627b      	str	r3, [r7, #36]	; 0x24
 800780a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800780e:	4641      	mov	r1, r8
 8007810:	1854      	adds	r4, r2, r1
 8007812:	4649      	mov	r1, r9
 8007814:	eb43 0501 	adc.w	r5, r3, r1
 8007818:	f04f 0200 	mov.w	r2, #0
 800781c:	f04f 0300 	mov.w	r3, #0
 8007820:	00eb      	lsls	r3, r5, #3
 8007822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007826:	00e2      	lsls	r2, r4, #3
 8007828:	4614      	mov	r4, r2
 800782a:	461d      	mov	r5, r3
 800782c:	4643      	mov	r3, r8
 800782e:	18e3      	adds	r3, r4, r3
 8007830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007834:	464b      	mov	r3, r9
 8007836:	eb45 0303 	adc.w	r3, r5, r3
 800783a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800783e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800784a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800784e:	f04f 0200 	mov.w	r2, #0
 8007852:	f04f 0300 	mov.w	r3, #0
 8007856:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800785a:	4629      	mov	r1, r5
 800785c:	008b      	lsls	r3, r1, #2
 800785e:	4621      	mov	r1, r4
 8007860:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007864:	4621      	mov	r1, r4
 8007866:	008a      	lsls	r2, r1, #2
 8007868:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800786c:	f7f9 f9f4 	bl	8000c58 <__aeabi_uldivmod>
 8007870:	4602      	mov	r2, r0
 8007872:	460b      	mov	r3, r1
 8007874:	4b60      	ldr	r3, [pc, #384]	; (80079f8 <UART_SetConfig+0x4e4>)
 8007876:	fba3 2302 	umull	r2, r3, r3, r2
 800787a:	095b      	lsrs	r3, r3, #5
 800787c:	011c      	lsls	r4, r3, #4
 800787e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007882:	2200      	movs	r2, #0
 8007884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007888:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800788c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007890:	4642      	mov	r2, r8
 8007892:	464b      	mov	r3, r9
 8007894:	1891      	adds	r1, r2, r2
 8007896:	61b9      	str	r1, [r7, #24]
 8007898:	415b      	adcs	r3, r3
 800789a:	61fb      	str	r3, [r7, #28]
 800789c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078a0:	4641      	mov	r1, r8
 80078a2:	1851      	adds	r1, r2, r1
 80078a4:	6139      	str	r1, [r7, #16]
 80078a6:	4649      	mov	r1, r9
 80078a8:	414b      	adcs	r3, r1
 80078aa:	617b      	str	r3, [r7, #20]
 80078ac:	f04f 0200 	mov.w	r2, #0
 80078b0:	f04f 0300 	mov.w	r3, #0
 80078b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80078b8:	4659      	mov	r1, fp
 80078ba:	00cb      	lsls	r3, r1, #3
 80078bc:	4651      	mov	r1, sl
 80078be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078c2:	4651      	mov	r1, sl
 80078c4:	00ca      	lsls	r2, r1, #3
 80078c6:	4610      	mov	r0, r2
 80078c8:	4619      	mov	r1, r3
 80078ca:	4603      	mov	r3, r0
 80078cc:	4642      	mov	r2, r8
 80078ce:	189b      	adds	r3, r3, r2
 80078d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078d4:	464b      	mov	r3, r9
 80078d6:	460a      	mov	r2, r1
 80078d8:	eb42 0303 	adc.w	r3, r2, r3
 80078dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80078ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80078ec:	f04f 0200 	mov.w	r2, #0
 80078f0:	f04f 0300 	mov.w	r3, #0
 80078f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80078f8:	4649      	mov	r1, r9
 80078fa:	008b      	lsls	r3, r1, #2
 80078fc:	4641      	mov	r1, r8
 80078fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007902:	4641      	mov	r1, r8
 8007904:	008a      	lsls	r2, r1, #2
 8007906:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800790a:	f7f9 f9a5 	bl	8000c58 <__aeabi_uldivmod>
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	4b39      	ldr	r3, [pc, #228]	; (80079f8 <UART_SetConfig+0x4e4>)
 8007914:	fba3 1302 	umull	r1, r3, r3, r2
 8007918:	095b      	lsrs	r3, r3, #5
 800791a:	2164      	movs	r1, #100	; 0x64
 800791c:	fb01 f303 	mul.w	r3, r1, r3
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	011b      	lsls	r3, r3, #4
 8007924:	3332      	adds	r3, #50	; 0x32
 8007926:	4a34      	ldr	r2, [pc, #208]	; (80079f8 <UART_SetConfig+0x4e4>)
 8007928:	fba2 2303 	umull	r2, r3, r2, r3
 800792c:	095b      	lsrs	r3, r3, #5
 800792e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007932:	441c      	add	r4, r3
 8007934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007938:	2200      	movs	r2, #0
 800793a:	673b      	str	r3, [r7, #112]	; 0x70
 800793c:	677a      	str	r2, [r7, #116]	; 0x74
 800793e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007942:	4642      	mov	r2, r8
 8007944:	464b      	mov	r3, r9
 8007946:	1891      	adds	r1, r2, r2
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	415b      	adcs	r3, r3
 800794c:	60fb      	str	r3, [r7, #12]
 800794e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007952:	4641      	mov	r1, r8
 8007954:	1851      	adds	r1, r2, r1
 8007956:	6039      	str	r1, [r7, #0]
 8007958:	4649      	mov	r1, r9
 800795a:	414b      	adcs	r3, r1
 800795c:	607b      	str	r3, [r7, #4]
 800795e:	f04f 0200 	mov.w	r2, #0
 8007962:	f04f 0300 	mov.w	r3, #0
 8007966:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800796a:	4659      	mov	r1, fp
 800796c:	00cb      	lsls	r3, r1, #3
 800796e:	4651      	mov	r1, sl
 8007970:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007974:	4651      	mov	r1, sl
 8007976:	00ca      	lsls	r2, r1, #3
 8007978:	4610      	mov	r0, r2
 800797a:	4619      	mov	r1, r3
 800797c:	4603      	mov	r3, r0
 800797e:	4642      	mov	r2, r8
 8007980:	189b      	adds	r3, r3, r2
 8007982:	66bb      	str	r3, [r7, #104]	; 0x68
 8007984:	464b      	mov	r3, r9
 8007986:	460a      	mov	r2, r1
 8007988:	eb42 0303 	adc.w	r3, r2, r3
 800798c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800798e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	663b      	str	r3, [r7, #96]	; 0x60
 8007998:	667a      	str	r2, [r7, #100]	; 0x64
 800799a:	f04f 0200 	mov.w	r2, #0
 800799e:	f04f 0300 	mov.w	r3, #0
 80079a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80079a6:	4649      	mov	r1, r9
 80079a8:	008b      	lsls	r3, r1, #2
 80079aa:	4641      	mov	r1, r8
 80079ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079b0:	4641      	mov	r1, r8
 80079b2:	008a      	lsls	r2, r1, #2
 80079b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80079b8:	f7f9 f94e 	bl	8000c58 <__aeabi_uldivmod>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	4b0d      	ldr	r3, [pc, #52]	; (80079f8 <UART_SetConfig+0x4e4>)
 80079c2:	fba3 1302 	umull	r1, r3, r3, r2
 80079c6:	095b      	lsrs	r3, r3, #5
 80079c8:	2164      	movs	r1, #100	; 0x64
 80079ca:	fb01 f303 	mul.w	r3, r1, r3
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	011b      	lsls	r3, r3, #4
 80079d2:	3332      	adds	r3, #50	; 0x32
 80079d4:	4a08      	ldr	r2, [pc, #32]	; (80079f8 <UART_SetConfig+0x4e4>)
 80079d6:	fba2 2303 	umull	r2, r3, r2, r3
 80079da:	095b      	lsrs	r3, r3, #5
 80079dc:	f003 020f 	and.w	r2, r3, #15
 80079e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4422      	add	r2, r4
 80079e8:	609a      	str	r2, [r3, #8]
}
 80079ea:	bf00      	nop
 80079ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80079f0:	46bd      	mov	sp, r7
 80079f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079f6:	bf00      	nop
 80079f8:	51eb851f 	.word	0x51eb851f

080079fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079fc:	b084      	sub	sp, #16
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b084      	sub	sp, #16
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	f107 001c 	add.w	r0, r7, #28
 8007a0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d122      	bne.n	8007a5a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d105      	bne.n	8007a4e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f001 fbee 	bl	8009230 <USB_CoreReset>
 8007a54:	4603      	mov	r3, r0
 8007a56:	73fb      	strb	r3, [r7, #15]
 8007a58:	e01a      	b.n	8007a90 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f001 fbe2 	bl	8009230 <USB_CoreReset>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d106      	bne.n	8007a84 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	639a      	str	r2, [r3, #56]	; 0x38
 8007a82:	e005      	b.n	8007a90 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d10b      	bne.n	8007aae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	f043 0206 	orr.w	r2, r3, #6
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	f043 0220 	orr.w	r2, r3, #32
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007aba:	b004      	add	sp, #16
 8007abc:	4770      	bx	lr
	...

08007ac0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b087      	sub	sp, #28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	4613      	mov	r3, r2
 8007acc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007ace:	79fb      	ldrb	r3, [r7, #7]
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d165      	bne.n	8007ba0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	4a41      	ldr	r2, [pc, #260]	; (8007bdc <USB_SetTurnaroundTime+0x11c>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d906      	bls.n	8007aea <USB_SetTurnaroundTime+0x2a>
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	4a40      	ldr	r2, [pc, #256]	; (8007be0 <USB_SetTurnaroundTime+0x120>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d202      	bcs.n	8007aea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007ae4:	230f      	movs	r3, #15
 8007ae6:	617b      	str	r3, [r7, #20]
 8007ae8:	e062      	b.n	8007bb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	4a3c      	ldr	r2, [pc, #240]	; (8007be0 <USB_SetTurnaroundTime+0x120>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d306      	bcc.n	8007b00 <USB_SetTurnaroundTime+0x40>
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	4a3b      	ldr	r2, [pc, #236]	; (8007be4 <USB_SetTurnaroundTime+0x124>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d202      	bcs.n	8007b00 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007afa:	230e      	movs	r3, #14
 8007afc:	617b      	str	r3, [r7, #20]
 8007afe:	e057      	b.n	8007bb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	4a38      	ldr	r2, [pc, #224]	; (8007be4 <USB_SetTurnaroundTime+0x124>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d306      	bcc.n	8007b16 <USB_SetTurnaroundTime+0x56>
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	4a37      	ldr	r2, [pc, #220]	; (8007be8 <USB_SetTurnaroundTime+0x128>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d202      	bcs.n	8007b16 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007b10:	230d      	movs	r3, #13
 8007b12:	617b      	str	r3, [r7, #20]
 8007b14:	e04c      	b.n	8007bb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	4a33      	ldr	r2, [pc, #204]	; (8007be8 <USB_SetTurnaroundTime+0x128>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d306      	bcc.n	8007b2c <USB_SetTurnaroundTime+0x6c>
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	4a32      	ldr	r2, [pc, #200]	; (8007bec <USB_SetTurnaroundTime+0x12c>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d802      	bhi.n	8007b2c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007b26:	230c      	movs	r3, #12
 8007b28:	617b      	str	r3, [r7, #20]
 8007b2a:	e041      	b.n	8007bb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	4a2f      	ldr	r2, [pc, #188]	; (8007bec <USB_SetTurnaroundTime+0x12c>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d906      	bls.n	8007b42 <USB_SetTurnaroundTime+0x82>
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	4a2e      	ldr	r2, [pc, #184]	; (8007bf0 <USB_SetTurnaroundTime+0x130>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d802      	bhi.n	8007b42 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007b3c:	230b      	movs	r3, #11
 8007b3e:	617b      	str	r3, [r7, #20]
 8007b40:	e036      	b.n	8007bb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	4a2a      	ldr	r2, [pc, #168]	; (8007bf0 <USB_SetTurnaroundTime+0x130>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d906      	bls.n	8007b58 <USB_SetTurnaroundTime+0x98>
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	4a29      	ldr	r2, [pc, #164]	; (8007bf4 <USB_SetTurnaroundTime+0x134>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d802      	bhi.n	8007b58 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007b52:	230a      	movs	r3, #10
 8007b54:	617b      	str	r3, [r7, #20]
 8007b56:	e02b      	b.n	8007bb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	4a26      	ldr	r2, [pc, #152]	; (8007bf4 <USB_SetTurnaroundTime+0x134>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d906      	bls.n	8007b6e <USB_SetTurnaroundTime+0xae>
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	4a25      	ldr	r2, [pc, #148]	; (8007bf8 <USB_SetTurnaroundTime+0x138>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d202      	bcs.n	8007b6e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007b68:	2309      	movs	r3, #9
 8007b6a:	617b      	str	r3, [r7, #20]
 8007b6c:	e020      	b.n	8007bb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	4a21      	ldr	r2, [pc, #132]	; (8007bf8 <USB_SetTurnaroundTime+0x138>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d306      	bcc.n	8007b84 <USB_SetTurnaroundTime+0xc4>
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	4a20      	ldr	r2, [pc, #128]	; (8007bfc <USB_SetTurnaroundTime+0x13c>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d802      	bhi.n	8007b84 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007b7e:	2308      	movs	r3, #8
 8007b80:	617b      	str	r3, [r7, #20]
 8007b82:	e015      	b.n	8007bb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	4a1d      	ldr	r2, [pc, #116]	; (8007bfc <USB_SetTurnaroundTime+0x13c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d906      	bls.n	8007b9a <USB_SetTurnaroundTime+0xda>
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	4a1c      	ldr	r2, [pc, #112]	; (8007c00 <USB_SetTurnaroundTime+0x140>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d202      	bcs.n	8007b9a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007b94:	2307      	movs	r3, #7
 8007b96:	617b      	str	r3, [r7, #20]
 8007b98:	e00a      	b.n	8007bb0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007b9a:	2306      	movs	r3, #6
 8007b9c:	617b      	str	r3, [r7, #20]
 8007b9e:	e007      	b.n	8007bb0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007ba0:	79fb      	ldrb	r3, [r7, #7]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d102      	bne.n	8007bac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007ba6:	2309      	movs	r3, #9
 8007ba8:	617b      	str	r3, [r7, #20]
 8007baa:	e001      	b.n	8007bb0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007bac:	2309      	movs	r3, #9
 8007bae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	68da      	ldr	r2, [r3, #12]
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	029b      	lsls	r3, r3, #10
 8007bc4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007bc8:	431a      	orrs	r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	371c      	adds	r7, #28
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	00d8acbf 	.word	0x00d8acbf
 8007be0:	00e4e1c0 	.word	0x00e4e1c0
 8007be4:	00f42400 	.word	0x00f42400
 8007be8:	01067380 	.word	0x01067380
 8007bec:	011a499f 	.word	0x011a499f
 8007bf0:	01312cff 	.word	0x01312cff
 8007bf4:	014ca43f 	.word	0x014ca43f
 8007bf8:	016e3600 	.word	0x016e3600
 8007bfc:	01a6ab1f 	.word	0x01a6ab1f
 8007c00:	01e84800 	.word	0x01e84800

08007c04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f043 0201 	orr.w	r2, r3, #1
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f023 0201 	bic.w	r2, r3, #1
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	460b      	mov	r3, r1
 8007c52:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007c64:	78fb      	ldrb	r3, [r7, #3]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d115      	bne.n	8007c96 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007c76:	2001      	movs	r0, #1
 8007c78:	f7fa fe8c 	bl	8002994 <HAL_Delay>
      ms++;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f001 fa45 	bl	8009112 <USB_GetMode>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d01e      	beq.n	8007ccc <USB_SetCurrentMode+0x84>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2b31      	cmp	r3, #49	; 0x31
 8007c92:	d9f0      	bls.n	8007c76 <USB_SetCurrentMode+0x2e>
 8007c94:	e01a      	b.n	8007ccc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c96:	78fb      	ldrb	r3, [r7, #3]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d115      	bne.n	8007cc8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ca8:	2001      	movs	r0, #1
 8007caa:	f7fa fe73 	bl	8002994 <HAL_Delay>
      ms++;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f001 fa2c 	bl	8009112 <USB_GetMode>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d005      	beq.n	8007ccc <USB_SetCurrentMode+0x84>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2b31      	cmp	r3, #49	; 0x31
 8007cc4:	d9f0      	bls.n	8007ca8 <USB_SetCurrentMode+0x60>
 8007cc6:	e001      	b.n	8007ccc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e005      	b.n	8007cd8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b32      	cmp	r3, #50	; 0x32
 8007cd0:	d101      	bne.n	8007cd6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e000      	b.n	8007cd8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ce0:	b084      	sub	sp, #16
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b086      	sub	sp, #24
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007cee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	613b      	str	r3, [r7, #16]
 8007cfe:	e009      	b.n	8007d14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	3340      	adds	r3, #64	; 0x40
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4413      	add	r3, r2
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	3301      	adds	r3, #1
 8007d12:	613b      	str	r3, [r7, #16]
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	2b0e      	cmp	r3, #14
 8007d18:	d9f2      	bls.n	8007d00 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d11c      	bne.n	8007d5a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d2e:	f043 0302 	orr.w	r3, r3, #2
 8007d32:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d38:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d44:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d50:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	639a      	str	r2, [r3, #56]	; 0x38
 8007d58:	e00b      	b.n	8007d72 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d78:	461a      	mov	r2, r3
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d84:	4619      	mov	r1, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	680b      	ldr	r3, [r1, #0]
 8007d90:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d10c      	bne.n	8007db2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d104      	bne.n	8007da8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007d9e:	2100      	movs	r1, #0
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f965 	bl	8008070 <USB_SetDevSpeed>
 8007da6:	e008      	b.n	8007dba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007da8:	2101      	movs	r1, #1
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f960 	bl	8008070 <USB_SetDevSpeed>
 8007db0:	e003      	b.n	8007dba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007db2:	2103      	movs	r1, #3
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f95b 	bl	8008070 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007dba:	2110      	movs	r1, #16
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f8f3 	bl	8007fa8 <USB_FlushTxFifo>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d001      	beq.n	8007dcc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f91f 	bl	8008010 <USB_FlushRxFifo>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007de2:	461a      	mov	r2, r3
 8007de4:	2300      	movs	r3, #0
 8007de6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dee:	461a      	mov	r2, r3
 8007df0:	2300      	movs	r3, #0
 8007df2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e00:	2300      	movs	r3, #0
 8007e02:	613b      	str	r3, [r7, #16]
 8007e04:	e043      	b.n	8007e8e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	015a      	lsls	r2, r3, #5
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e1c:	d118      	bne.n	8007e50 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10a      	bne.n	8007e3a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	015a      	lsls	r2, r3, #5
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e30:	461a      	mov	r2, r3
 8007e32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e36:	6013      	str	r3, [r2, #0]
 8007e38:	e013      	b.n	8007e62 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	015a      	lsls	r2, r3, #5
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	4413      	add	r3, r2
 8007e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e46:	461a      	mov	r2, r3
 8007e48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007e4c:	6013      	str	r3, [r2, #0]
 8007e4e:	e008      	b.n	8007e62 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	015a      	lsls	r2, r3, #5
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	4413      	add	r3, r2
 8007e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	2300      	movs	r3, #0
 8007e60:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	015a      	lsls	r2, r3, #5
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	4413      	add	r3, r2
 8007e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e6e:	461a      	mov	r2, r3
 8007e70:	2300      	movs	r3, #0
 8007e72:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	015a      	lsls	r2, r3, #5
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e80:	461a      	mov	r2, r3
 8007e82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	613b      	str	r3, [r7, #16]
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d3b7      	bcc.n	8007e06 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e96:	2300      	movs	r3, #0
 8007e98:	613b      	str	r3, [r7, #16]
 8007e9a:	e043      	b.n	8007f24 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007eae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007eb2:	d118      	bne.n	8007ee6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10a      	bne.n	8007ed0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	015a      	lsls	r2, r3, #5
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ecc:	6013      	str	r3, [r2, #0]
 8007ece:	e013      	b.n	8007ef8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	015a      	lsls	r2, r3, #5
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007edc:	461a      	mov	r2, r3
 8007ede:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ee2:	6013      	str	r3, [r2, #0]
 8007ee4:	e008      	b.n	8007ef8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	015a      	lsls	r2, r3, #5
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	4413      	add	r3, r2
 8007eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	015a      	lsls	r2, r3, #5
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f04:	461a      	mov	r2, r3
 8007f06:	2300      	movs	r3, #0
 8007f08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	015a      	lsls	r2, r3, #5
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	4413      	add	r3, r2
 8007f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f16:	461a      	mov	r2, r3
 8007f18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	3301      	adds	r3, #1
 8007f22:	613b      	str	r3, [r7, #16]
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d3b7      	bcc.n	8007e9c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007f4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d105      	bne.n	8007f60 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	f043 0210 	orr.w	r2, r3, #16
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	699a      	ldr	r2, [r3, #24]
 8007f64:	4b0f      	ldr	r3, [pc, #60]	; (8007fa4 <USB_DevInit+0x2c4>)
 8007f66:	4313      	orrs	r3, r2
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d005      	beq.n	8007f7e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	f043 0208 	orr.w	r2, r3, #8
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d107      	bne.n	8007f94 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	699b      	ldr	r3, [r3, #24]
 8007f88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f8c:	f043 0304 	orr.w	r3, r3, #4
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3718      	adds	r7, #24
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fa0:	b004      	add	sp, #16
 8007fa2:	4770      	bx	lr
 8007fa4:	803c3800 	.word	0x803c3800

08007fa8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4a13      	ldr	r2, [pc, #76]	; (800800c <USB_FlushTxFifo+0x64>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d901      	bls.n	8007fc8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e01b      	b.n	8008000 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	daf2      	bge.n	8007fb6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	019b      	lsls	r3, r3, #6
 8007fd8:	f043 0220 	orr.w	r2, r3, #32
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	4a08      	ldr	r2, [pc, #32]	; (800800c <USB_FlushTxFifo+0x64>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d901      	bls.n	8007ff2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	e006      	b.n	8008000 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	f003 0320 	and.w	r3, r3, #32
 8007ffa:	2b20      	cmp	r3, #32
 8007ffc:	d0f0      	beq.n	8007fe0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3714      	adds	r7, #20
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	00030d40 	.word	0x00030d40

08008010 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	3301      	adds	r3, #1
 8008020:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	4a11      	ldr	r2, [pc, #68]	; (800806c <USB_FlushRxFifo+0x5c>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d901      	bls.n	800802e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	e018      	b.n	8008060 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	2b00      	cmp	r3, #0
 8008034:	daf2      	bge.n	800801c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008036:	2300      	movs	r3, #0
 8008038:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2210      	movs	r2, #16
 800803e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	3301      	adds	r3, #1
 8008044:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	4a08      	ldr	r2, [pc, #32]	; (800806c <USB_FlushRxFifo+0x5c>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d901      	bls.n	8008052 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800804e:	2303      	movs	r3, #3
 8008050:	e006      	b.n	8008060 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	f003 0310 	and.w	r3, r3, #16
 800805a:	2b10      	cmp	r3, #16
 800805c:	d0f0      	beq.n	8008040 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	00030d40 	.word	0x00030d40

08008070 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	460b      	mov	r3, r1
 800807a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	78fb      	ldrb	r3, [r7, #3]
 800808a:	68f9      	ldr	r1, [r7, #12]
 800808c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008090:	4313      	orrs	r3, r2
 8008092:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3714      	adds	r7, #20
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80080a2:	b480      	push	{r7}
 80080a4:	b087      	sub	sp, #28
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	f003 0306 	and.w	r3, r3, #6
 80080ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d102      	bne.n	80080c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80080c2:	2300      	movs	r3, #0
 80080c4:	75fb      	strb	r3, [r7, #23]
 80080c6:	e00a      	b.n	80080de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d002      	beq.n	80080d4 <USB_GetDevSpeed+0x32>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2b06      	cmp	r3, #6
 80080d2:	d102      	bne.n	80080da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80080d4:	2302      	movs	r3, #2
 80080d6:	75fb      	strb	r3, [r7, #23]
 80080d8:	e001      	b.n	80080de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80080da:	230f      	movs	r3, #15
 80080dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80080de:	7dfb      	ldrb	r3, [r7, #23]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	371c      	adds	r7, #28
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	785b      	ldrb	r3, [r3, #1]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d13a      	bne.n	800817e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800810e:	69da      	ldr	r2, [r3, #28]
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	f003 030f 	and.w	r3, r3, #15
 8008118:	2101      	movs	r1, #1
 800811a:	fa01 f303 	lsl.w	r3, r1, r3
 800811e:	b29b      	uxth	r3, r3
 8008120:	68f9      	ldr	r1, [r7, #12]
 8008122:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008126:	4313      	orrs	r3, r2
 8008128:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	015a      	lsls	r2, r3, #5
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	4413      	add	r3, r2
 8008132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d155      	bne.n	80081ec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	015a      	lsls	r2, r3, #5
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	4413      	add	r3, r2
 8008148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	791b      	ldrb	r3, [r3, #4]
 800815a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800815c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	059b      	lsls	r3, r3, #22
 8008162:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008164:	4313      	orrs	r3, r2
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	0151      	lsls	r1, r2, #5
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	440a      	add	r2, r1
 800816e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800817a:	6013      	str	r3, [r2, #0]
 800817c:	e036      	b.n	80081ec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008184:	69da      	ldr	r2, [r3, #28]
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	f003 030f 	and.w	r3, r3, #15
 800818e:	2101      	movs	r1, #1
 8008190:	fa01 f303 	lsl.w	r3, r1, r3
 8008194:	041b      	lsls	r3, r3, #16
 8008196:	68f9      	ldr	r1, [r7, #12]
 8008198:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800819c:	4313      	orrs	r3, r2
 800819e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	015a      	lsls	r2, r3, #5
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	4413      	add	r3, r2
 80081a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d11a      	bne.n	80081ec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	015a      	lsls	r2, r3, #5
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	4413      	add	r3, r2
 80081be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	791b      	ldrb	r3, [r3, #4]
 80081d0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80081d2:	430b      	orrs	r3, r1
 80081d4:	4313      	orrs	r3, r2
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	0151      	lsls	r1, r2, #5
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	440a      	add	r2, r1
 80081de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
	...

080081fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	785b      	ldrb	r3, [r3, #1]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d161      	bne.n	80082dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	015a      	lsls	r2, r3, #5
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4413      	add	r3, r2
 8008220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800822a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800822e:	d11f      	bne.n	8008270 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	015a      	lsls	r2, r3, #5
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	4413      	add	r3, r2
 8008238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	0151      	lsls	r1, r2, #5
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	440a      	add	r2, r1
 8008246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800824a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800824e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	4413      	add	r3, r2
 8008258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	0151      	lsls	r1, r2, #5
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	440a      	add	r2, r1
 8008266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800826a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800826e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008276:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	f003 030f 	and.w	r3, r3, #15
 8008280:	2101      	movs	r1, #1
 8008282:	fa01 f303 	lsl.w	r3, r1, r3
 8008286:	b29b      	uxth	r3, r3
 8008288:	43db      	mvns	r3, r3
 800828a:	68f9      	ldr	r1, [r7, #12]
 800828c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008290:	4013      	ands	r3, r2
 8008292:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800829a:	69da      	ldr	r2, [r3, #28]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	f003 030f 	and.w	r3, r3, #15
 80082a4:	2101      	movs	r1, #1
 80082a6:	fa01 f303 	lsl.w	r3, r1, r3
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	43db      	mvns	r3, r3
 80082ae:	68f9      	ldr	r1, [r7, #12]
 80082b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082b4:	4013      	ands	r3, r2
 80082b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	015a      	lsls	r2, r3, #5
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4413      	add	r3, r2
 80082c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	0159      	lsls	r1, r3, #5
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	440b      	add	r3, r1
 80082ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082d2:	4619      	mov	r1, r3
 80082d4:	4b35      	ldr	r3, [pc, #212]	; (80083ac <USB_DeactivateEndpoint+0x1b0>)
 80082d6:	4013      	ands	r3, r2
 80082d8:	600b      	str	r3, [r1, #0]
 80082da:	e060      	b.n	800839e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082f2:	d11f      	bne.n	8008334 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	015a      	lsls	r2, r3, #5
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	4413      	add	r3, r2
 80082fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	0151      	lsls	r1, r2, #5
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	440a      	add	r2, r1
 800830a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800830e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008312:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	015a      	lsls	r2, r3, #5
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	4413      	add	r3, r2
 800831c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	0151      	lsls	r1, r2, #5
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	440a      	add	r2, r1
 800832a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800832e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008332:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800833a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	f003 030f 	and.w	r3, r3, #15
 8008344:	2101      	movs	r1, #1
 8008346:	fa01 f303 	lsl.w	r3, r1, r3
 800834a:	041b      	lsls	r3, r3, #16
 800834c:	43db      	mvns	r3, r3
 800834e:	68f9      	ldr	r1, [r7, #12]
 8008350:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008354:	4013      	ands	r3, r2
 8008356:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800835e:	69da      	ldr	r2, [r3, #28]
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	f003 030f 	and.w	r3, r3, #15
 8008368:	2101      	movs	r1, #1
 800836a:	fa01 f303 	lsl.w	r3, r1, r3
 800836e:	041b      	lsls	r3, r3, #16
 8008370:	43db      	mvns	r3, r3
 8008372:	68f9      	ldr	r1, [r7, #12]
 8008374:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008378:	4013      	ands	r3, r2
 800837a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4413      	add	r3, r2
 8008384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	0159      	lsls	r1, r3, #5
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	440b      	add	r3, r1
 8008392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008396:	4619      	mov	r1, r3
 8008398:	4b05      	ldr	r3, [pc, #20]	; (80083b0 <USB_DeactivateEndpoint+0x1b4>)
 800839a:	4013      	ands	r3, r2
 800839c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3714      	adds	r7, #20
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	ec337800 	.word	0xec337800
 80083b0:	eff37800 	.word	0xeff37800

080083b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b08a      	sub	sp, #40	; 0x28
 80083b8:	af02      	add	r7, sp, #8
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	4613      	mov	r3, r2
 80083c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	785b      	ldrb	r3, [r3, #1]
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	f040 815c 	bne.w	800868e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d132      	bne.n	8008444 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	015a      	lsls	r2, r3, #5
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	4413      	add	r3, r2
 80083e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	69ba      	ldr	r2, [r7, #24]
 80083ee:	0151      	lsls	r1, r2, #5
 80083f0:	69fa      	ldr	r2, [r7, #28]
 80083f2:	440a      	add	r2, r1
 80083f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008400:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	015a      	lsls	r2, r3, #5
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	4413      	add	r3, r2
 800840a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	69ba      	ldr	r2, [r7, #24]
 8008412:	0151      	lsls	r1, r2, #5
 8008414:	69fa      	ldr	r2, [r7, #28]
 8008416:	440a      	add	r2, r1
 8008418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800841c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008420:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	015a      	lsls	r2, r3, #5
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	4413      	add	r3, r2
 800842a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	69ba      	ldr	r2, [r7, #24]
 8008432:	0151      	lsls	r1, r2, #5
 8008434:	69fa      	ldr	r2, [r7, #28]
 8008436:	440a      	add	r2, r1
 8008438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800843c:	0cdb      	lsrs	r3, r3, #19
 800843e:	04db      	lsls	r3, r3, #19
 8008440:	6113      	str	r3, [r2, #16]
 8008442:	e074      	b.n	800852e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	015a      	lsls	r2, r3, #5
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	4413      	add	r3, r2
 800844c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	69ba      	ldr	r2, [r7, #24]
 8008454:	0151      	lsls	r1, r2, #5
 8008456:	69fa      	ldr	r2, [r7, #28]
 8008458:	440a      	add	r2, r1
 800845a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800845e:	0cdb      	lsrs	r3, r3, #19
 8008460:	04db      	lsls	r3, r3, #19
 8008462:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	015a      	lsls	r2, r3, #5
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	4413      	add	r3, r2
 800846c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	69ba      	ldr	r2, [r7, #24]
 8008474:	0151      	lsls	r1, r2, #5
 8008476:	69fa      	ldr	r2, [r7, #28]
 8008478:	440a      	add	r2, r1
 800847a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800847e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008482:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008486:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	015a      	lsls	r2, r3, #5
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	4413      	add	r3, r2
 8008490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008494:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	6999      	ldr	r1, [r3, #24]
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	440b      	add	r3, r1
 80084a0:	1e59      	subs	r1, r3, #1
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80084aa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80084ac:	4b9d      	ldr	r3, [pc, #628]	; (8008724 <USB_EPStartXfer+0x370>)
 80084ae:	400b      	ands	r3, r1
 80084b0:	69b9      	ldr	r1, [r7, #24]
 80084b2:	0148      	lsls	r0, r1, #5
 80084b4:	69f9      	ldr	r1, [r7, #28]
 80084b6:	4401      	add	r1, r0
 80084b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80084bc:	4313      	orrs	r3, r2
 80084be:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	015a      	lsls	r2, r3, #5
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	4413      	add	r3, r2
 80084c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084cc:	691a      	ldr	r2, [r3, #16]
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	699b      	ldr	r3, [r3, #24]
 80084d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084d6:	69b9      	ldr	r1, [r7, #24]
 80084d8:	0148      	lsls	r0, r1, #5
 80084da:	69f9      	ldr	r1, [r7, #28]
 80084dc:	4401      	add	r1, r0
 80084de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80084e2:	4313      	orrs	r3, r2
 80084e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	791b      	ldrb	r3, [r3, #4]
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d11f      	bne.n	800852e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	015a      	lsls	r2, r3, #5
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	4413      	add	r3, r2
 80084f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	0151      	lsls	r1, r2, #5
 8008500:	69fa      	ldr	r2, [r7, #28]
 8008502:	440a      	add	r2, r1
 8008504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008508:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800850c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	015a      	lsls	r2, r3, #5
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	4413      	add	r3, r2
 8008516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	69ba      	ldr	r2, [r7, #24]
 800851e:	0151      	lsls	r1, r2, #5
 8008520:	69fa      	ldr	r2, [r7, #28]
 8008522:	440a      	add	r2, r1
 8008524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008528:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800852c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800852e:	79fb      	ldrb	r3, [r7, #7]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d14b      	bne.n	80085cc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	695b      	ldr	r3, [r3, #20]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d009      	beq.n	8008550 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	015a      	lsls	r2, r3, #5
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	4413      	add	r3, r2
 8008544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008548:	461a      	mov	r2, r3
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	695b      	ldr	r3, [r3, #20]
 800854e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	791b      	ldrb	r3, [r3, #4]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d128      	bne.n	80085aa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008564:	2b00      	cmp	r3, #0
 8008566:	d110      	bne.n	800858a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	015a      	lsls	r2, r3, #5
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	4413      	add	r3, r2
 8008570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	69ba      	ldr	r2, [r7, #24]
 8008578:	0151      	lsls	r1, r2, #5
 800857a:	69fa      	ldr	r2, [r7, #28]
 800857c:	440a      	add	r2, r1
 800857e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008582:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	e00f      	b.n	80085aa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	015a      	lsls	r2, r3, #5
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	4413      	add	r3, r2
 8008592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	69ba      	ldr	r2, [r7, #24]
 800859a:	0151      	lsls	r1, r2, #5
 800859c:	69fa      	ldr	r2, [r7, #28]
 800859e:	440a      	add	r2, r1
 80085a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	015a      	lsls	r2, r3, #5
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	4413      	add	r3, r2
 80085b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	69ba      	ldr	r2, [r7, #24]
 80085ba:	0151      	lsls	r1, r2, #5
 80085bc:	69fa      	ldr	r2, [r7, #28]
 80085be:	440a      	add	r2, r1
 80085c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80085c8:	6013      	str	r3, [r2, #0]
 80085ca:	e133      	b.n	8008834 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	015a      	lsls	r2, r3, #5
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	4413      	add	r3, r2
 80085d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	69ba      	ldr	r2, [r7, #24]
 80085dc:	0151      	lsls	r1, r2, #5
 80085de:	69fa      	ldr	r2, [r7, #28]
 80085e0:	440a      	add	r2, r1
 80085e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80085ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	791b      	ldrb	r3, [r3, #4]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d015      	beq.n	8008620 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f000 811b 	beq.w	8008834 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	f003 030f 	and.w	r3, r3, #15
 800860e:	2101      	movs	r1, #1
 8008610:	fa01 f303 	lsl.w	r3, r1, r3
 8008614:	69f9      	ldr	r1, [r7, #28]
 8008616:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800861a:	4313      	orrs	r3, r2
 800861c:	634b      	str	r3, [r1, #52]	; 0x34
 800861e:	e109      	b.n	8008834 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800862c:	2b00      	cmp	r3, #0
 800862e:	d110      	bne.n	8008652 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	015a      	lsls	r2, r3, #5
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	4413      	add	r3, r2
 8008638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	69ba      	ldr	r2, [r7, #24]
 8008640:	0151      	lsls	r1, r2, #5
 8008642:	69fa      	ldr	r2, [r7, #28]
 8008644:	440a      	add	r2, r1
 8008646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800864a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	e00f      	b.n	8008672 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	015a      	lsls	r2, r3, #5
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	4413      	add	r3, r2
 800865a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	69ba      	ldr	r2, [r7, #24]
 8008662:	0151      	lsls	r1, r2, #5
 8008664:	69fa      	ldr	r2, [r7, #28]
 8008666:	440a      	add	r2, r1
 8008668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800866c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008670:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	6919      	ldr	r1, [r3, #16]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	781a      	ldrb	r2, [r3, #0]
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	b298      	uxth	r0, r3
 8008680:	79fb      	ldrb	r3, [r7, #7]
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	4603      	mov	r3, r0
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f000 fade 	bl	8008c48 <USB_WritePacket>
 800868c:	e0d2      	b.n	8008834 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	015a      	lsls	r2, r3, #5
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	4413      	add	r3, r2
 8008696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	69ba      	ldr	r2, [r7, #24]
 800869e:	0151      	lsls	r1, r2, #5
 80086a0:	69fa      	ldr	r2, [r7, #28]
 80086a2:	440a      	add	r2, r1
 80086a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086a8:	0cdb      	lsrs	r3, r3, #19
 80086aa:	04db      	lsls	r3, r3, #19
 80086ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	69ba      	ldr	r2, [r7, #24]
 80086be:	0151      	lsls	r1, r2, #5
 80086c0:	69fa      	ldr	r2, [r7, #28]
 80086c2:	440a      	add	r2, r1
 80086c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d126      	bne.n	8008728 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	015a      	lsls	r2, r3, #5
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	4413      	add	r3, r2
 80086e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086e6:	691a      	ldr	r2, [r3, #16]
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086f0:	69b9      	ldr	r1, [r7, #24]
 80086f2:	0148      	lsls	r0, r1, #5
 80086f4:	69f9      	ldr	r1, [r7, #28]
 80086f6:	4401      	add	r1, r0
 80086f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80086fc:	4313      	orrs	r3, r2
 80086fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	015a      	lsls	r2, r3, #5
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	4413      	add	r3, r2
 8008708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	69ba      	ldr	r2, [r7, #24]
 8008710:	0151      	lsls	r1, r2, #5
 8008712:	69fa      	ldr	r2, [r7, #28]
 8008714:	440a      	add	r2, r1
 8008716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800871a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800871e:	6113      	str	r3, [r2, #16]
 8008720:	e03a      	b.n	8008798 <USB_EPStartXfer+0x3e4>
 8008722:	bf00      	nop
 8008724:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	699a      	ldr	r2, [r3, #24]
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	4413      	add	r3, r2
 8008732:	1e5a      	subs	r2, r3, #1
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	fbb2 f3f3 	udiv	r3, r2, r3
 800873c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	8afa      	ldrh	r2, [r7, #22]
 8008744:	fb03 f202 	mul.w	r2, r3, r2
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	015a      	lsls	r2, r3, #5
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	4413      	add	r3, r2
 8008754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008758:	691a      	ldr	r2, [r3, #16]
 800875a:	8afb      	ldrh	r3, [r7, #22]
 800875c:	04d9      	lsls	r1, r3, #19
 800875e:	4b38      	ldr	r3, [pc, #224]	; (8008840 <USB_EPStartXfer+0x48c>)
 8008760:	400b      	ands	r3, r1
 8008762:	69b9      	ldr	r1, [r7, #24]
 8008764:	0148      	lsls	r0, r1, #5
 8008766:	69f9      	ldr	r1, [r7, #28]
 8008768:	4401      	add	r1, r0
 800876a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800876e:	4313      	orrs	r3, r2
 8008770:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	015a      	lsls	r2, r3, #5
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	4413      	add	r3, r2
 800877a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800877e:	691a      	ldr	r2, [r3, #16]
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	69db      	ldr	r3, [r3, #28]
 8008784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008788:	69b9      	ldr	r1, [r7, #24]
 800878a:	0148      	lsls	r0, r1, #5
 800878c:	69f9      	ldr	r1, [r7, #28]
 800878e:	4401      	add	r1, r0
 8008790:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008794:	4313      	orrs	r3, r2
 8008796:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008798:	79fb      	ldrb	r3, [r7, #7]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d10d      	bne.n	80087ba <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d009      	beq.n	80087ba <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	6919      	ldr	r1, [r3, #16]
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	015a      	lsls	r2, r3, #5
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	4413      	add	r3, r2
 80087b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b6:	460a      	mov	r2, r1
 80087b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	791b      	ldrb	r3, [r3, #4]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d128      	bne.n	8008814 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d110      	bne.n	80087f4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	015a      	lsls	r2, r3, #5
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	4413      	add	r3, r2
 80087da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	69ba      	ldr	r2, [r7, #24]
 80087e2:	0151      	lsls	r1, r2, #5
 80087e4:	69fa      	ldr	r2, [r7, #28]
 80087e6:	440a      	add	r2, r1
 80087e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80087f0:	6013      	str	r3, [r2, #0]
 80087f2:	e00f      	b.n	8008814 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	015a      	lsls	r2, r3, #5
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	4413      	add	r3, r2
 80087fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	69ba      	ldr	r2, [r7, #24]
 8008804:	0151      	lsls	r1, r2, #5
 8008806:	69fa      	ldr	r2, [r7, #28]
 8008808:	440a      	add	r2, r1
 800880a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800880e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008812:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	015a      	lsls	r2, r3, #5
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	4413      	add	r3, r2
 800881c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	69ba      	ldr	r2, [r7, #24]
 8008824:	0151      	lsls	r1, r2, #5
 8008826:	69fa      	ldr	r2, [r7, #28]
 8008828:	440a      	add	r2, r1
 800882a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800882e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008832:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3720      	adds	r7, #32
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	1ff80000 	.word	0x1ff80000

08008844 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008844:	b480      	push	{r7}
 8008846:	b087      	sub	sp, #28
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	4613      	mov	r3, r2
 8008850:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	785b      	ldrb	r3, [r3, #1]
 8008860:	2b01      	cmp	r3, #1
 8008862:	f040 80ce 	bne.w	8008a02 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d132      	bne.n	80088d4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	015a      	lsls	r2, r3, #5
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	4413      	add	r3, r2
 8008876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	0151      	lsls	r1, r2, #5
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	440a      	add	r2, r1
 8008884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008888:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800888c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008890:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	015a      	lsls	r2, r3, #5
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	4413      	add	r3, r2
 800889a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	0151      	lsls	r1, r2, #5
 80088a4:	697a      	ldr	r2, [r7, #20]
 80088a6:	440a      	add	r2, r1
 80088a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	015a      	lsls	r2, r3, #5
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	4413      	add	r3, r2
 80088ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	693a      	ldr	r2, [r7, #16]
 80088c2:	0151      	lsls	r1, r2, #5
 80088c4:	697a      	ldr	r2, [r7, #20]
 80088c6:	440a      	add	r2, r1
 80088c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088cc:	0cdb      	lsrs	r3, r3, #19
 80088ce:	04db      	lsls	r3, r3, #19
 80088d0:	6113      	str	r3, [r2, #16]
 80088d2:	e04e      	b.n	8008972 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	015a      	lsls	r2, r3, #5
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	693a      	ldr	r2, [r7, #16]
 80088e4:	0151      	lsls	r1, r2, #5
 80088e6:	697a      	ldr	r2, [r7, #20]
 80088e8:	440a      	add	r2, r1
 80088ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088ee:	0cdb      	lsrs	r3, r3, #19
 80088f0:	04db      	lsls	r3, r3, #19
 80088f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	015a      	lsls	r2, r3, #5
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	4413      	add	r3, r2
 80088fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	693a      	ldr	r2, [r7, #16]
 8008904:	0151      	lsls	r1, r2, #5
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	440a      	add	r2, r1
 800890a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800890e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008912:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008916:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	699a      	ldr	r2, [r3, #24]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	429a      	cmp	r2, r3
 8008922:	d903      	bls.n	800892c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	68da      	ldr	r2, [r3, #12]
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	015a      	lsls	r2, r3, #5
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	4413      	add	r3, r2
 8008934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	693a      	ldr	r2, [r7, #16]
 800893c:	0151      	lsls	r1, r2, #5
 800893e:	697a      	ldr	r2, [r7, #20]
 8008940:	440a      	add	r2, r1
 8008942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008946:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800894a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	015a      	lsls	r2, r3, #5
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	4413      	add	r3, r2
 8008954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008958:	691a      	ldr	r2, [r3, #16]
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008962:	6939      	ldr	r1, [r7, #16]
 8008964:	0148      	lsls	r0, r1, #5
 8008966:	6979      	ldr	r1, [r7, #20]
 8008968:	4401      	add	r1, r0
 800896a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800896e:	4313      	orrs	r3, r2
 8008970:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008972:	79fb      	ldrb	r3, [r7, #7]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d11e      	bne.n	80089b6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	695b      	ldr	r3, [r3, #20]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d009      	beq.n	8008994 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	015a      	lsls	r2, r3, #5
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	4413      	add	r3, r2
 8008988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800898c:	461a      	mov	r2, r3
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	693a      	ldr	r2, [r7, #16]
 80089a4:	0151      	lsls	r1, r2, #5
 80089a6:	697a      	ldr	r2, [r7, #20]
 80089a8:	440a      	add	r2, r1
 80089aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089b2:	6013      	str	r3, [r2, #0]
 80089b4:	e097      	b.n	8008ae6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	015a      	lsls	r2, r3, #5
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	4413      	add	r3, r2
 80089be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	0151      	lsls	r1, r2, #5
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	440a      	add	r2, r1
 80089cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80089d4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f000 8083 	beq.w	8008ae6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	f003 030f 	and.w	r3, r3, #15
 80089f0:	2101      	movs	r1, #1
 80089f2:	fa01 f303 	lsl.w	r3, r1, r3
 80089f6:	6979      	ldr	r1, [r7, #20]
 80089f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089fc:	4313      	orrs	r3, r2
 80089fe:	634b      	str	r3, [r1, #52]	; 0x34
 8008a00:	e071      	b.n	8008ae6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	015a      	lsls	r2, r3, #5
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	4413      	add	r3, r2
 8008a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	693a      	ldr	r2, [r7, #16]
 8008a12:	0151      	lsls	r1, r2, #5
 8008a14:	697a      	ldr	r2, [r7, #20]
 8008a16:	440a      	add	r2, r1
 8008a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a1c:	0cdb      	lsrs	r3, r3, #19
 8008a1e:	04db      	lsls	r3, r3, #19
 8008a20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	015a      	lsls	r2, r3, #5
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	4413      	add	r3, r2
 8008a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	693a      	ldr	r2, [r7, #16]
 8008a32:	0151      	lsls	r1, r2, #5
 8008a34:	697a      	ldr	r2, [r7, #20]
 8008a36:	440a      	add	r2, r1
 8008a38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a44:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	699b      	ldr	r3, [r3, #24]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d003      	beq.n	8008a56 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	68da      	ldr	r2, [r3, #12]
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	68da      	ldr	r2, [r3, #12]
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	015a      	lsls	r2, r3, #5
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	4413      	add	r3, r2
 8008a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	693a      	ldr	r2, [r7, #16]
 8008a6e:	0151      	lsls	r1, r2, #5
 8008a70:	697a      	ldr	r2, [r7, #20]
 8008a72:	440a      	add	r2, r1
 8008a74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	015a      	lsls	r2, r3, #5
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a8a:	691a      	ldr	r2, [r3, #16]
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	69db      	ldr	r3, [r3, #28]
 8008a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a94:	6939      	ldr	r1, [r7, #16]
 8008a96:	0148      	lsls	r0, r1, #5
 8008a98:	6979      	ldr	r1, [r7, #20]
 8008a9a:	4401      	add	r1, r0
 8008a9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008aa4:	79fb      	ldrb	r3, [r7, #7]
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d10d      	bne.n	8008ac6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d009      	beq.n	8008ac6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	6919      	ldr	r1, [r3, #16]
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	015a      	lsls	r2, r3, #5
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	4413      	add	r3, r2
 8008abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ac2:	460a      	mov	r2, r1
 8008ac4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	015a      	lsls	r2, r3, #5
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	4413      	add	r3, r2
 8008ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	0151      	lsls	r1, r2, #5
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	440a      	add	r2, r1
 8008adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ae0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ae4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	371c      	adds	r7, #28
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b087      	sub	sp, #28
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b02:	2300      	movs	r3, #0
 8008b04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	785b      	ldrb	r3, [r3, #1]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d14a      	bne.n	8008ba8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	015a      	lsls	r2, r3, #5
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b2a:	f040 8086 	bne.w	8008c3a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	015a      	lsls	r2, r3, #5
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	4413      	add	r3, r2
 8008b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	683a      	ldr	r2, [r7, #0]
 8008b40:	7812      	ldrb	r2, [r2, #0]
 8008b42:	0151      	lsls	r1, r2, #5
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	440a      	add	r2, r1
 8008b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b50:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	015a      	lsls	r2, r3, #5
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	683a      	ldr	r2, [r7, #0]
 8008b64:	7812      	ldrb	r2, [r2, #0]
 8008b66:	0151      	lsls	r1, r2, #5
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	440a      	add	r2, r1
 8008b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d902      	bls.n	8008b8c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	75fb      	strb	r3, [r7, #23]
          break;
 8008b8a:	e056      	b.n	8008c3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	015a      	lsls	r2, r3, #5
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	4413      	add	r3, r2
 8008b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ba4:	d0e7      	beq.n	8008b76 <USB_EPStopXfer+0x82>
 8008ba6:	e048      	b.n	8008c3a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	015a      	lsls	r2, r3, #5
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bc0:	d13b      	bne.n	8008c3a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	015a      	lsls	r2, r3, #5
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	4413      	add	r3, r2
 8008bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	7812      	ldrb	r2, [r2, #0]
 8008bd6:	0151      	lsls	r1, r2, #5
 8008bd8:	693a      	ldr	r2, [r7, #16]
 8008bda:	440a      	add	r2, r1
 8008bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008be0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008be4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	015a      	lsls	r2, r3, #5
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	4413      	add	r3, r2
 8008bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	683a      	ldr	r2, [r7, #0]
 8008bf8:	7812      	ldrb	r2, [r2, #0]
 8008bfa:	0151      	lsls	r1, r2, #5
 8008bfc:	693a      	ldr	r2, [r7, #16]
 8008bfe:	440a      	add	r2, r1
 8008c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f242 7210 	movw	r2, #10000	; 0x2710
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d902      	bls.n	8008c20 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	75fb      	strb	r3, [r7, #23]
          break;
 8008c1e:	e00c      	b.n	8008c3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	015a      	lsls	r2, r3, #5
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	4413      	add	r3, r2
 8008c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c38:	d0e7      	beq.n	8008c0a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	371c      	adds	r7, #28
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b089      	sub	sp, #36	; 0x24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	4611      	mov	r1, r2
 8008c54:	461a      	mov	r2, r3
 8008c56:	460b      	mov	r3, r1
 8008c58:	71fb      	strb	r3, [r7, #7]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008c66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d123      	bne.n	8008cb6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008c6e:	88bb      	ldrh	r3, [r7, #4]
 8008c70:	3303      	adds	r3, #3
 8008c72:	089b      	lsrs	r3, r3, #2
 8008c74:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008c76:	2300      	movs	r3, #0
 8008c78:	61bb      	str	r3, [r7, #24]
 8008c7a:	e018      	b.n	8008cae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008c7c:	79fb      	ldrb	r3, [r7, #7]
 8008c7e:	031a      	lsls	r2, r3, #12
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	4413      	add	r3, r2
 8008c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c88:	461a      	mov	r2, r3
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	3301      	adds	r3, #1
 8008c94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	3301      	adds	r3, #1
 8008cac:	61bb      	str	r3, [r7, #24]
 8008cae:	69ba      	ldr	r2, [r7, #24]
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d3e2      	bcc.n	8008c7c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3724      	adds	r7, #36	; 0x24
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b08b      	sub	sp, #44	; 0x2c
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008cda:	88fb      	ldrh	r3, [r7, #6]
 8008cdc:	089b      	lsrs	r3, r3, #2
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008ce2:	88fb      	ldrh	r3, [r7, #6]
 8008ce4:	f003 0303 	and.w	r3, r3, #3
 8008ce8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008cea:	2300      	movs	r3, #0
 8008cec:	623b      	str	r3, [r7, #32]
 8008cee:	e014      	b.n	8008d1a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfa:	601a      	str	r2, [r3, #0]
    pDest++;
 8008cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfe:	3301      	adds	r3, #1
 8008d00:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d04:	3301      	adds	r3, #1
 8008d06:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d10:	3301      	adds	r3, #1
 8008d12:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008d14:	6a3b      	ldr	r3, [r7, #32]
 8008d16:	3301      	adds	r3, #1
 8008d18:	623b      	str	r3, [r7, #32]
 8008d1a:	6a3a      	ldr	r2, [r7, #32]
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d3e6      	bcc.n	8008cf0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008d22:	8bfb      	ldrh	r3, [r7, #30]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d01e      	beq.n	8008d66 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d32:	461a      	mov	r2, r3
 8008d34:	f107 0310 	add.w	r3, r7, #16
 8008d38:	6812      	ldr	r2, [r2, #0]
 8008d3a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	6a3b      	ldr	r3, [r7, #32]
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	00db      	lsls	r3, r3, #3
 8008d44:	fa22 f303 	lsr.w	r3, r2, r3
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4c:	701a      	strb	r2, [r3, #0]
      i++;
 8008d4e:	6a3b      	ldr	r3, [r7, #32]
 8008d50:	3301      	adds	r3, #1
 8008d52:	623b      	str	r3, [r7, #32]
      pDest++;
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	3301      	adds	r3, #1
 8008d58:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008d5a:	8bfb      	ldrh	r3, [r7, #30]
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008d60:	8bfb      	ldrh	r3, [r7, #30]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1ea      	bne.n	8008d3c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	372c      	adds	r7, #44	; 0x2c
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	785b      	ldrb	r3, [r3, #1]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d12c      	bne.n	8008dea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	015a      	lsls	r2, r3, #5
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	4413      	add	r3, r2
 8008d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	db12      	blt.n	8008dc8 <USB_EPSetStall+0x54>
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00f      	beq.n	8008dc8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	015a      	lsls	r2, r3, #5
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	4413      	add	r3, r2
 8008db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	0151      	lsls	r1, r2, #5
 8008dba:	68fa      	ldr	r2, [r7, #12]
 8008dbc:	440a      	add	r2, r1
 8008dbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dc2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008dc6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	015a      	lsls	r2, r3, #5
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	4413      	add	r3, r2
 8008dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68ba      	ldr	r2, [r7, #8]
 8008dd8:	0151      	lsls	r1, r2, #5
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	440a      	add	r2, r1
 8008dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008de2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008de6:	6013      	str	r3, [r2, #0]
 8008de8:	e02b      	b.n	8008e42 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	015a      	lsls	r2, r3, #5
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	4413      	add	r3, r2
 8008df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	db12      	blt.n	8008e22 <USB_EPSetStall+0xae>
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00f      	beq.n	8008e22 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	015a      	lsls	r2, r3, #5
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68ba      	ldr	r2, [r7, #8]
 8008e12:	0151      	lsls	r1, r2, #5
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	440a      	add	r2, r1
 8008e18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e20:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	015a      	lsls	r2, r3, #5
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	4413      	add	r3, r2
 8008e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	0151      	lsls	r1, r2, #5
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	440a      	add	r2, r1
 8008e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e40:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3714      	adds	r7, #20
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	785b      	ldrb	r3, [r3, #1]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d128      	bne.n	8008ebe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	015a      	lsls	r2, r3, #5
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	4413      	add	r3, r2
 8008e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	0151      	lsls	r1, r2, #5
 8008e7e:	68fa      	ldr	r2, [r7, #12]
 8008e80:	440a      	add	r2, r1
 8008e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e8a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	791b      	ldrb	r3, [r3, #4]
 8008e90:	2b03      	cmp	r3, #3
 8008e92:	d003      	beq.n	8008e9c <USB_EPClearStall+0x4c>
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	791b      	ldrb	r3, [r3, #4]
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d138      	bne.n	8008f0e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	015a      	lsls	r2, r3, #5
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	0151      	lsls	r1, r2, #5
 8008eae:	68fa      	ldr	r2, [r7, #12]
 8008eb0:	440a      	add	r2, r1
 8008eb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008eba:	6013      	str	r3, [r2, #0]
 8008ebc:	e027      	b.n	8008f0e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	015a      	lsls	r2, r3, #5
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68ba      	ldr	r2, [r7, #8]
 8008ece:	0151      	lsls	r1, r2, #5
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	440a      	add	r2, r1
 8008ed4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ed8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008edc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	791b      	ldrb	r3, [r3, #4]
 8008ee2:	2b03      	cmp	r3, #3
 8008ee4:	d003      	beq.n	8008eee <USB_EPClearStall+0x9e>
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	791b      	ldrb	r3, [r3, #4]
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d10f      	bne.n	8008f0e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	015a      	lsls	r2, r3, #5
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	0151      	lsls	r1, r2, #5
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	440a      	add	r2, r1
 8008f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f0c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3714      	adds	r7, #20
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b085      	sub	sp, #20
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	460b      	mov	r3, r1
 8008f26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f3a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008f3e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	78fb      	ldrb	r3, [r7, #3]
 8008f4a:	011b      	lsls	r3, r3, #4
 8008f4c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008f50:	68f9      	ldr	r1, [r7, #12]
 8008f52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f56:	4313      	orrs	r3, r2
 8008f58:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3714      	adds	r7, #20
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f82:	f023 0303 	bic.w	r3, r3, #3
 8008f86:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f96:	f023 0302 	bic.w	r3, r3, #2
 8008f9a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3714      	adds	r7, #20
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr

08008faa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008faa:	b480      	push	{r7}
 8008fac:	b085      	sub	sp, #20
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68fa      	ldr	r2, [r7, #12]
 8008fc0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008fc4:	f023 0303 	bic.w	r3, r3, #3
 8008fc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fd8:	f043 0302 	orr.w	r3, r3, #2
 8008fdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3714      	adds	r7, #20
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	68fa      	ldr	r2, [r7, #12]
 8009000:	4013      	ands	r3, r2
 8009002:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009004:	68fb      	ldr	r3, [r7, #12]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3714      	adds	r7, #20
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009012:	b480      	push	{r7}
 8009014:	b085      	sub	sp, #20
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009024:	699b      	ldr	r3, [r3, #24]
 8009026:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800902e:	69db      	ldr	r3, [r3, #28]
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	4013      	ands	r3, r2
 8009034:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	0c1b      	lsrs	r3, r3, #16
}
 800903a:	4618      	mov	r0, r3
 800903c:	3714      	adds	r7, #20
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr

08009046 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009046:	b480      	push	{r7}
 8009048:	b085      	sub	sp, #20
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009062:	69db      	ldr	r3, [r3, #28]
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	4013      	ands	r3, r2
 8009068:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	b29b      	uxth	r3, r3
}
 800906e:	4618      	mov	r0, r3
 8009070:	3714      	adds	r7, #20
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr

0800907a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800907a:	b480      	push	{r7}
 800907c:	b085      	sub	sp, #20
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	460b      	mov	r3, r1
 8009084:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800908a:	78fb      	ldrb	r3, [r7, #3]
 800908c:	015a      	lsls	r2, r3, #5
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	4413      	add	r3, r2
 8009092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	68ba      	ldr	r2, [r7, #8]
 80090a4:	4013      	ands	r3, r2
 80090a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80090a8:	68bb      	ldr	r3, [r7, #8]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3714      	adds	r7, #20
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b087      	sub	sp, #28
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	460b      	mov	r3, r1
 80090c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80090da:	78fb      	ldrb	r3, [r7, #3]
 80090dc:	f003 030f 	and.w	r3, r3, #15
 80090e0:	68fa      	ldr	r2, [r7, #12]
 80090e2:	fa22 f303 	lsr.w	r3, r2, r3
 80090e6:	01db      	lsls	r3, r3, #7
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	693a      	ldr	r2, [r7, #16]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80090f0:	78fb      	ldrb	r3, [r7, #3]
 80090f2:	015a      	lsls	r2, r3, #5
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	4413      	add	r3, r2
 80090f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	4013      	ands	r3, r2
 8009102:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009104:	68bb      	ldr	r3, [r7, #8]
}
 8009106:	4618      	mov	r0, r3
 8009108:	371c      	adds	r7, #28
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr

08009112 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009112:	b480      	push	{r7}
 8009114:	b083      	sub	sp, #12
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	695b      	ldr	r3, [r3, #20]
 800911e:	f003 0301 	and.w	r3, r3, #1
}
 8009122:	4618      	mov	r0, r3
 8009124:	370c      	adds	r7, #12
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr

0800912e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800912e:	b480      	push	{r7}
 8009130:	b085      	sub	sp, #20
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009148:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800914c:	f023 0307 	bic.w	r3, r3, #7
 8009150:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009164:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009166:	2300      	movs	r3, #0
}
 8009168:	4618      	mov	r0, r3
 800916a:	3714      	adds	r7, #20
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009174:	b480      	push	{r7}
 8009176:	b087      	sub	sp, #28
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	460b      	mov	r3, r1
 800917e:	607a      	str	r2, [r7, #4]
 8009180:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	333c      	adds	r3, #60	; 0x3c
 800918a:	3304      	adds	r3, #4
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	4a26      	ldr	r2, [pc, #152]	; (800922c <USB_EP0_OutStart+0xb8>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d90a      	bls.n	80091ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091a8:	d101      	bne.n	80091ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80091aa:	2300      	movs	r3, #0
 80091ac:	e037      	b.n	800921e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b4:	461a      	mov	r2, r3
 80091b6:	2300      	movs	r3, #0
 80091b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	697a      	ldr	r2, [r7, #20]
 80091c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091dc:	f043 0318 	orr.w	r3, r3, #24
 80091e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091f0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80091f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80091f6:	7afb      	ldrb	r3, [r7, #11]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d10f      	bne.n	800921c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009202:	461a      	mov	r2, r3
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	697a      	ldr	r2, [r7, #20]
 8009212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009216:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800921a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	371c      	adds	r7, #28
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	4f54300a 	.word	0x4f54300a

08009230 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009238:	2300      	movs	r3, #0
 800923a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	3301      	adds	r3, #1
 8009240:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	4a13      	ldr	r2, [pc, #76]	; (8009294 <USB_CoreReset+0x64>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d901      	bls.n	800924e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e01b      	b.n	8009286 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	2b00      	cmp	r3, #0
 8009254:	daf2      	bge.n	800923c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009256:	2300      	movs	r3, #0
 8009258:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	f043 0201 	orr.w	r2, r3, #1
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	3301      	adds	r3, #1
 800926a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4a09      	ldr	r2, [pc, #36]	; (8009294 <USB_CoreReset+0x64>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d901      	bls.n	8009278 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009274:	2303      	movs	r3, #3
 8009276:	e006      	b.n	8009286 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	f003 0301 	and.w	r3, r3, #1
 8009280:	2b01      	cmp	r3, #1
 8009282:	d0f0      	beq.n	8009266 <USB_CoreReset+0x36>

  return HAL_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3714      	adds	r7, #20
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	00030d40 	.word	0x00030d40

08009298 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	460b      	mov	r3, r1
 80092a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80092a4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80092a8:	f002 fc9e 	bl	800bbe8 <USBD_static_malloc>
 80092ac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d109      	bne.n	80092c8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	32b0      	adds	r2, #176	; 0xb0
 80092be:	2100      	movs	r1, #0
 80092c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80092c4:	2302      	movs	r3, #2
 80092c6:	e0d4      	b.n	8009472 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80092c8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80092cc:	2100      	movs	r1, #0
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	f002 fd0a 	bl	800bce8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	32b0      	adds	r2, #176	; 0xb0
 80092de:	68f9      	ldr	r1, [r7, #12]
 80092e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	32b0      	adds	r2, #176	; 0xb0
 80092ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	7c1b      	ldrb	r3, [r3, #16]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d138      	bne.n	8009372 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009300:	4b5e      	ldr	r3, [pc, #376]	; (800947c <USBD_CDC_Init+0x1e4>)
 8009302:	7819      	ldrb	r1, [r3, #0]
 8009304:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009308:	2202      	movs	r2, #2
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f002 fb49 	bl	800b9a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009310:	4b5a      	ldr	r3, [pc, #360]	; (800947c <USBD_CDC_Init+0x1e4>)
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	f003 020f 	and.w	r2, r3, #15
 8009318:	6879      	ldr	r1, [r7, #4]
 800931a:	4613      	mov	r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	4413      	add	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	440b      	add	r3, r1
 8009324:	3324      	adds	r3, #36	; 0x24
 8009326:	2201      	movs	r2, #1
 8009328:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800932a:	4b55      	ldr	r3, [pc, #340]	; (8009480 <USBD_CDC_Init+0x1e8>)
 800932c:	7819      	ldrb	r1, [r3, #0]
 800932e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009332:	2202      	movs	r2, #2
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f002 fb34 	bl	800b9a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800933a:	4b51      	ldr	r3, [pc, #324]	; (8009480 <USBD_CDC_Init+0x1e8>)
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	f003 020f 	and.w	r2, r3, #15
 8009342:	6879      	ldr	r1, [r7, #4]
 8009344:	4613      	mov	r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	4413      	add	r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	440b      	add	r3, r1
 800934e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009352:	2201      	movs	r2, #1
 8009354:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009356:	4b4b      	ldr	r3, [pc, #300]	; (8009484 <USBD_CDC_Init+0x1ec>)
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	f003 020f 	and.w	r2, r3, #15
 800935e:	6879      	ldr	r1, [r7, #4]
 8009360:	4613      	mov	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	4413      	add	r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	440b      	add	r3, r1
 800936a:	3326      	adds	r3, #38	; 0x26
 800936c:	2210      	movs	r2, #16
 800936e:	801a      	strh	r2, [r3, #0]
 8009370:	e035      	b.n	80093de <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009372:	4b42      	ldr	r3, [pc, #264]	; (800947c <USBD_CDC_Init+0x1e4>)
 8009374:	7819      	ldrb	r1, [r3, #0]
 8009376:	2340      	movs	r3, #64	; 0x40
 8009378:	2202      	movs	r2, #2
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f002 fb11 	bl	800b9a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009380:	4b3e      	ldr	r3, [pc, #248]	; (800947c <USBD_CDC_Init+0x1e4>)
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	f003 020f 	and.w	r2, r3, #15
 8009388:	6879      	ldr	r1, [r7, #4]
 800938a:	4613      	mov	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	440b      	add	r3, r1
 8009394:	3324      	adds	r3, #36	; 0x24
 8009396:	2201      	movs	r2, #1
 8009398:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800939a:	4b39      	ldr	r3, [pc, #228]	; (8009480 <USBD_CDC_Init+0x1e8>)
 800939c:	7819      	ldrb	r1, [r3, #0]
 800939e:	2340      	movs	r3, #64	; 0x40
 80093a0:	2202      	movs	r2, #2
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f002 fafd 	bl	800b9a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80093a8:	4b35      	ldr	r3, [pc, #212]	; (8009480 <USBD_CDC_Init+0x1e8>)
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	f003 020f 	and.w	r2, r3, #15
 80093b0:	6879      	ldr	r1, [r7, #4]
 80093b2:	4613      	mov	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	4413      	add	r3, r2
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	440b      	add	r3, r1
 80093bc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80093c0:	2201      	movs	r2, #1
 80093c2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80093c4:	4b2f      	ldr	r3, [pc, #188]	; (8009484 <USBD_CDC_Init+0x1ec>)
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	f003 020f 	and.w	r2, r3, #15
 80093cc:	6879      	ldr	r1, [r7, #4]
 80093ce:	4613      	mov	r3, r2
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	4413      	add	r3, r2
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	440b      	add	r3, r1
 80093d8:	3326      	adds	r3, #38	; 0x26
 80093da:	2210      	movs	r2, #16
 80093dc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80093de:	4b29      	ldr	r3, [pc, #164]	; (8009484 <USBD_CDC_Init+0x1ec>)
 80093e0:	7819      	ldrb	r1, [r3, #0]
 80093e2:	2308      	movs	r3, #8
 80093e4:	2203      	movs	r2, #3
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f002 fadb 	bl	800b9a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80093ec:	4b25      	ldr	r3, [pc, #148]	; (8009484 <USBD_CDC_Init+0x1ec>)
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	f003 020f 	and.w	r2, r3, #15
 80093f4:	6879      	ldr	r1, [r7, #4]
 80093f6:	4613      	mov	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	4413      	add	r3, r2
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	440b      	add	r3, r1
 8009400:	3324      	adds	r3, #36	; 0x24
 8009402:	2201      	movs	r2, #1
 8009404:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	33b0      	adds	r3, #176	; 0xb0
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	4413      	add	r3, r2
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2200      	movs	r2, #0
 8009426:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2200      	movs	r2, #0
 800942e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009438:	2b00      	cmp	r3, #0
 800943a:	d101      	bne.n	8009440 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800943c:	2302      	movs	r3, #2
 800943e:	e018      	b.n	8009472 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	7c1b      	ldrb	r3, [r3, #16]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10a      	bne.n	800945e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009448:	4b0d      	ldr	r3, [pc, #52]	; (8009480 <USBD_CDC_Init+0x1e8>)
 800944a:	7819      	ldrb	r1, [r3, #0]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009452:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f002 fb92 	bl	800bb80 <USBD_LL_PrepareReceive>
 800945c:	e008      	b.n	8009470 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800945e:	4b08      	ldr	r3, [pc, #32]	; (8009480 <USBD_CDC_Init+0x1e8>)
 8009460:	7819      	ldrb	r1, [r3, #0]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009468:	2340      	movs	r3, #64	; 0x40
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f002 fb88 	bl	800bb80 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009470:	2300      	movs	r3, #0
}
 8009472:	4618      	mov	r0, r3
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	20000093 	.word	0x20000093
 8009480:	20000094 	.word	0x20000094
 8009484:	20000095 	.word	0x20000095

08009488 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	460b      	mov	r3, r1
 8009492:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009494:	4b3a      	ldr	r3, [pc, #232]	; (8009580 <USBD_CDC_DeInit+0xf8>)
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	4619      	mov	r1, r3
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f002 faa7 	bl	800b9ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80094a0:	4b37      	ldr	r3, [pc, #220]	; (8009580 <USBD_CDC_DeInit+0xf8>)
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	f003 020f 	and.w	r2, r3, #15
 80094a8:	6879      	ldr	r1, [r7, #4]
 80094aa:	4613      	mov	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	4413      	add	r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	440b      	add	r3, r1
 80094b4:	3324      	adds	r3, #36	; 0x24
 80094b6:	2200      	movs	r2, #0
 80094b8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80094ba:	4b32      	ldr	r3, [pc, #200]	; (8009584 <USBD_CDC_DeInit+0xfc>)
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	4619      	mov	r1, r3
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f002 fa94 	bl	800b9ee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80094c6:	4b2f      	ldr	r3, [pc, #188]	; (8009584 <USBD_CDC_DeInit+0xfc>)
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	f003 020f 	and.w	r2, r3, #15
 80094ce:	6879      	ldr	r1, [r7, #4]
 80094d0:	4613      	mov	r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	4413      	add	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	440b      	add	r3, r1
 80094da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80094de:	2200      	movs	r2, #0
 80094e0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80094e2:	4b29      	ldr	r3, [pc, #164]	; (8009588 <USBD_CDC_DeInit+0x100>)
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	4619      	mov	r1, r3
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f002 fa80 	bl	800b9ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80094ee:	4b26      	ldr	r3, [pc, #152]	; (8009588 <USBD_CDC_DeInit+0x100>)
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	f003 020f 	and.w	r2, r3, #15
 80094f6:	6879      	ldr	r1, [r7, #4]
 80094f8:	4613      	mov	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	4413      	add	r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	440b      	add	r3, r1
 8009502:	3324      	adds	r3, #36	; 0x24
 8009504:	2200      	movs	r2, #0
 8009506:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009508:	4b1f      	ldr	r3, [pc, #124]	; (8009588 <USBD_CDC_DeInit+0x100>)
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	f003 020f 	and.w	r2, r3, #15
 8009510:	6879      	ldr	r1, [r7, #4]
 8009512:	4613      	mov	r3, r2
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	4413      	add	r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	440b      	add	r3, r1
 800951c:	3326      	adds	r3, #38	; 0x26
 800951e:	2200      	movs	r2, #0
 8009520:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	32b0      	adds	r2, #176	; 0xb0
 800952c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d01f      	beq.n	8009574 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	33b0      	adds	r3, #176	; 0xb0
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	4413      	add	r3, r2
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	32b0      	adds	r2, #176	; 0xb0
 8009552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009556:	4618      	mov	r0, r3
 8009558:	f002 fb54 	bl	800bc04 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	32b0      	adds	r2, #176	; 0xb0
 8009566:	2100      	movs	r1, #0
 8009568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	20000093 	.word	0x20000093
 8009584:	20000094 	.word	0x20000094
 8009588:	20000095 	.word	0x20000095

0800958c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	32b0      	adds	r2, #176	; 0xb0
 80095a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80095a6:	2300      	movs	r3, #0
 80095a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80095aa:	2300      	movs	r3, #0
 80095ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80095ae:	2300      	movs	r3, #0
 80095b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d101      	bne.n	80095bc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80095b8:	2303      	movs	r3, #3
 80095ba:	e0bf      	b.n	800973c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d050      	beq.n	800966a <USBD_CDC_Setup+0xde>
 80095c8:	2b20      	cmp	r3, #32
 80095ca:	f040 80af 	bne.w	800972c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	88db      	ldrh	r3, [r3, #6]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d03a      	beq.n	800964c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	b25b      	sxtb	r3, r3
 80095dc:	2b00      	cmp	r3, #0
 80095de:	da1b      	bge.n	8009618 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	33b0      	adds	r3, #176	; 0xb0
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4413      	add	r3, r2
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	683a      	ldr	r2, [r7, #0]
 80095f4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80095f6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80095f8:	683a      	ldr	r2, [r7, #0]
 80095fa:	88d2      	ldrh	r2, [r2, #6]
 80095fc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	88db      	ldrh	r3, [r3, #6]
 8009602:	2b07      	cmp	r3, #7
 8009604:	bf28      	it	cs
 8009606:	2307      	movcs	r3, #7
 8009608:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	89fa      	ldrh	r2, [r7, #14]
 800960e:	4619      	mov	r1, r3
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f001 fd89 	bl	800b128 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009616:	e090      	b.n	800973a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	785a      	ldrb	r2, [r3, #1]
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	88db      	ldrh	r3, [r3, #6]
 8009626:	2b3f      	cmp	r3, #63	; 0x3f
 8009628:	d803      	bhi.n	8009632 <USBD_CDC_Setup+0xa6>
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	88db      	ldrh	r3, [r3, #6]
 800962e:	b2da      	uxtb	r2, r3
 8009630:	e000      	b.n	8009634 <USBD_CDC_Setup+0xa8>
 8009632:	2240      	movs	r2, #64	; 0x40
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800963a:	6939      	ldr	r1, [r7, #16]
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009642:	461a      	mov	r2, r3
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f001 fd9b 	bl	800b180 <USBD_CtlPrepareRx>
      break;
 800964a:	e076      	b.n	800973a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	33b0      	adds	r3, #176	; 0xb0
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	4413      	add	r3, r2
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	683a      	ldr	r2, [r7, #0]
 8009660:	7850      	ldrb	r0, [r2, #1]
 8009662:	2200      	movs	r2, #0
 8009664:	6839      	ldr	r1, [r7, #0]
 8009666:	4798      	blx	r3
      break;
 8009668:	e067      	b.n	800973a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	785b      	ldrb	r3, [r3, #1]
 800966e:	2b0b      	cmp	r3, #11
 8009670:	d851      	bhi.n	8009716 <USBD_CDC_Setup+0x18a>
 8009672:	a201      	add	r2, pc, #4	; (adr r2, 8009678 <USBD_CDC_Setup+0xec>)
 8009674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009678:	080096a9 	.word	0x080096a9
 800967c:	08009725 	.word	0x08009725
 8009680:	08009717 	.word	0x08009717
 8009684:	08009717 	.word	0x08009717
 8009688:	08009717 	.word	0x08009717
 800968c:	08009717 	.word	0x08009717
 8009690:	08009717 	.word	0x08009717
 8009694:	08009717 	.word	0x08009717
 8009698:	08009717 	.word	0x08009717
 800969c:	08009717 	.word	0x08009717
 80096a0:	080096d3 	.word	0x080096d3
 80096a4:	080096fd 	.word	0x080096fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2b03      	cmp	r3, #3
 80096b2:	d107      	bne.n	80096c4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80096b4:	f107 030a 	add.w	r3, r7, #10
 80096b8:	2202      	movs	r2, #2
 80096ba:	4619      	mov	r1, r3
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f001 fd33 	bl	800b128 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80096c2:	e032      	b.n	800972a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80096c4:	6839      	ldr	r1, [r7, #0]
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f001 fcbd 	bl	800b046 <USBD_CtlError>
            ret = USBD_FAIL;
 80096cc:	2303      	movs	r3, #3
 80096ce:	75fb      	strb	r3, [r7, #23]
          break;
 80096d0:	e02b      	b.n	800972a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	2b03      	cmp	r3, #3
 80096dc:	d107      	bne.n	80096ee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80096de:	f107 030d 	add.w	r3, r7, #13
 80096e2:	2201      	movs	r2, #1
 80096e4:	4619      	mov	r1, r3
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f001 fd1e 	bl	800b128 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80096ec:	e01d      	b.n	800972a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80096ee:	6839      	ldr	r1, [r7, #0]
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f001 fca8 	bl	800b046 <USBD_CtlError>
            ret = USBD_FAIL;
 80096f6:	2303      	movs	r3, #3
 80096f8:	75fb      	strb	r3, [r7, #23]
          break;
 80096fa:	e016      	b.n	800972a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009702:	b2db      	uxtb	r3, r3
 8009704:	2b03      	cmp	r3, #3
 8009706:	d00f      	beq.n	8009728 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f001 fc9b 	bl	800b046 <USBD_CtlError>
            ret = USBD_FAIL;
 8009710:	2303      	movs	r3, #3
 8009712:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009714:	e008      	b.n	8009728 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009716:	6839      	ldr	r1, [r7, #0]
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f001 fc94 	bl	800b046 <USBD_CtlError>
          ret = USBD_FAIL;
 800971e:	2303      	movs	r3, #3
 8009720:	75fb      	strb	r3, [r7, #23]
          break;
 8009722:	e002      	b.n	800972a <USBD_CDC_Setup+0x19e>
          break;
 8009724:	bf00      	nop
 8009726:	e008      	b.n	800973a <USBD_CDC_Setup+0x1ae>
          break;
 8009728:	bf00      	nop
      }
      break;
 800972a:	e006      	b.n	800973a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800972c:	6839      	ldr	r1, [r7, #0]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f001 fc89 	bl	800b046 <USBD_CtlError>
      ret = USBD_FAIL;
 8009734:	2303      	movs	r3, #3
 8009736:	75fb      	strb	r3, [r7, #23]
      break;
 8009738:	bf00      	nop
  }

  return (uint8_t)ret;
 800973a:	7dfb      	ldrb	r3, [r7, #23]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3718      	adds	r7, #24
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	460b      	mov	r3, r1
 800974e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009756:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	32b0      	adds	r2, #176	; 0xb0
 8009762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d101      	bne.n	800976e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800976a:	2303      	movs	r3, #3
 800976c:	e065      	b.n	800983a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	32b0      	adds	r2, #176	; 0xb0
 8009778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800977c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800977e:	78fb      	ldrb	r3, [r7, #3]
 8009780:	f003 020f 	and.w	r2, r3, #15
 8009784:	6879      	ldr	r1, [r7, #4]
 8009786:	4613      	mov	r3, r2
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	4413      	add	r3, r2
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	440b      	add	r3, r1
 8009790:	3318      	adds	r3, #24
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d02f      	beq.n	80097f8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009798:	78fb      	ldrb	r3, [r7, #3]
 800979a:	f003 020f 	and.w	r2, r3, #15
 800979e:	6879      	ldr	r1, [r7, #4]
 80097a0:	4613      	mov	r3, r2
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	4413      	add	r3, r2
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	440b      	add	r3, r1
 80097aa:	3318      	adds	r3, #24
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	78fb      	ldrb	r3, [r7, #3]
 80097b0:	f003 010f 	and.w	r1, r3, #15
 80097b4:	68f8      	ldr	r0, [r7, #12]
 80097b6:	460b      	mov	r3, r1
 80097b8:	00db      	lsls	r3, r3, #3
 80097ba:	440b      	add	r3, r1
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4403      	add	r3, r0
 80097c0:	3348      	adds	r3, #72	; 0x48
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80097c8:	fb01 f303 	mul.w	r3, r1, r3
 80097cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d112      	bne.n	80097f8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80097d2:	78fb      	ldrb	r3, [r7, #3]
 80097d4:	f003 020f 	and.w	r2, r3, #15
 80097d8:	6879      	ldr	r1, [r7, #4]
 80097da:	4613      	mov	r3, r2
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	4413      	add	r3, r2
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	440b      	add	r3, r1
 80097e4:	3318      	adds	r3, #24
 80097e6:	2200      	movs	r2, #0
 80097e8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80097ea:	78f9      	ldrb	r1, [r7, #3]
 80097ec:	2300      	movs	r3, #0
 80097ee:	2200      	movs	r2, #0
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f002 f9a4 	bl	800bb3e <USBD_LL_Transmit>
 80097f6:	e01f      	b.n	8009838 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	33b0      	adds	r3, #176	; 0xb0
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	4413      	add	r3, r2
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d010      	beq.n	8009838 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	33b0      	adds	r3, #176	; 0xb0
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	4413      	add	r3, r2
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	68ba      	ldr	r2, [r7, #8]
 800982a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800982e:	68ba      	ldr	r2, [r7, #8]
 8009830:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009834:	78fa      	ldrb	r2, [r7, #3]
 8009836:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b084      	sub	sp, #16
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
 800984a:	460b      	mov	r3, r1
 800984c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	32b0      	adds	r2, #176	; 0xb0
 8009858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800985c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	32b0      	adds	r2, #176	; 0xb0
 8009868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d101      	bne.n	8009874 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009870:	2303      	movs	r3, #3
 8009872:	e01a      	b.n	80098aa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009874:	78fb      	ldrb	r3, [r7, #3]
 8009876:	4619      	mov	r1, r3
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f002 f9a2 	bl	800bbc2 <USBD_LL_GetRxDataSize>
 800987e:	4602      	mov	r2, r0
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	33b0      	adds	r3, #176	; 0xb0
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	4413      	add	r3, r2
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80098a4:	4611      	mov	r1, r2
 80098a6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b084      	sub	sp, #16
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	32b0      	adds	r2, #176	; 0xb0
 80098c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d101      	bne.n	80098d4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80098d0:	2303      	movs	r3, #3
 80098d2:	e025      	b.n	8009920 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	33b0      	adds	r3, #176	; 0xb0
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	4413      	add	r3, r2
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d01a      	beq.n	800991e <USBD_CDC_EP0_RxReady+0x6c>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80098ee:	2bff      	cmp	r3, #255	; 0xff
 80098f0:	d015      	beq.n	800991e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	33b0      	adds	r3, #176	; 0xb0
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800990a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009912:	b292      	uxth	r2, r2
 8009914:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	22ff      	movs	r2, #255	; 0xff
 800991a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800991e:	2300      	movs	r3, #0
}
 8009920:	4618      	mov	r0, r3
 8009922:	3710      	adds	r7, #16
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b086      	sub	sp, #24
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009930:	2182      	movs	r1, #130	; 0x82
 8009932:	4818      	ldr	r0, [pc, #96]	; (8009994 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009934:	f000 fd4f 	bl	800a3d6 <USBD_GetEpDesc>
 8009938:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800993a:	2101      	movs	r1, #1
 800993c:	4815      	ldr	r0, [pc, #84]	; (8009994 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800993e:	f000 fd4a 	bl	800a3d6 <USBD_GetEpDesc>
 8009942:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009944:	2181      	movs	r1, #129	; 0x81
 8009946:	4813      	ldr	r0, [pc, #76]	; (8009994 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009948:	f000 fd45 	bl	800a3d6 <USBD_GetEpDesc>
 800994c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d002      	beq.n	800995a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	2210      	movs	r2, #16
 8009958:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d006      	beq.n	800996e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	2200      	movs	r2, #0
 8009964:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009968:	711a      	strb	r2, [r3, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d006      	beq.n	8009982 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800997c:	711a      	strb	r2, [r3, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2243      	movs	r2, #67	; 0x43
 8009986:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009988:	4b02      	ldr	r3, [pc, #8]	; (8009994 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800998a:	4618      	mov	r0, r3
 800998c:	3718      	adds	r7, #24
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	20000050 	.word	0x20000050

08009998 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b086      	sub	sp, #24
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80099a0:	2182      	movs	r1, #130	; 0x82
 80099a2:	4818      	ldr	r0, [pc, #96]	; (8009a04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80099a4:	f000 fd17 	bl	800a3d6 <USBD_GetEpDesc>
 80099a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80099aa:	2101      	movs	r1, #1
 80099ac:	4815      	ldr	r0, [pc, #84]	; (8009a04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80099ae:	f000 fd12 	bl	800a3d6 <USBD_GetEpDesc>
 80099b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80099b4:	2181      	movs	r1, #129	; 0x81
 80099b6:	4813      	ldr	r0, [pc, #76]	; (8009a04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80099b8:	f000 fd0d 	bl	800a3d6 <USBD_GetEpDesc>
 80099bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d002      	beq.n	80099ca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	2210      	movs	r2, #16
 80099c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d006      	beq.n	80099de <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	2200      	movs	r2, #0
 80099d4:	711a      	strb	r2, [r3, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f042 0202 	orr.w	r2, r2, #2
 80099dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d006      	beq.n	80099f2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	711a      	strb	r2, [r3, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	f042 0202 	orr.w	r2, r2, #2
 80099f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2243      	movs	r2, #67	; 0x43
 80099f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80099f8:	4b02      	ldr	r3, [pc, #8]	; (8009a04 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3718      	adds	r7, #24
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	20000050 	.word	0x20000050

08009a08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b086      	sub	sp, #24
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009a10:	2182      	movs	r1, #130	; 0x82
 8009a12:	4818      	ldr	r0, [pc, #96]	; (8009a74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009a14:	f000 fcdf 	bl	800a3d6 <USBD_GetEpDesc>
 8009a18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009a1a:	2101      	movs	r1, #1
 8009a1c:	4815      	ldr	r0, [pc, #84]	; (8009a74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009a1e:	f000 fcda 	bl	800a3d6 <USBD_GetEpDesc>
 8009a22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009a24:	2181      	movs	r1, #129	; 0x81
 8009a26:	4813      	ldr	r0, [pc, #76]	; (8009a74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009a28:	f000 fcd5 	bl	800a3d6 <USBD_GetEpDesc>
 8009a2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d002      	beq.n	8009a3a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	2210      	movs	r2, #16
 8009a38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d006      	beq.n	8009a4e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a48:	711a      	strb	r2, [r3, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d006      	beq.n	8009a62 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a5c:	711a      	strb	r2, [r3, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2243      	movs	r2, #67	; 0x43
 8009a66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009a68:	4b02      	ldr	r3, [pc, #8]	; (8009a74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3718      	adds	r7, #24
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	20000050 	.word	0x20000050

08009a78 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	220a      	movs	r2, #10
 8009a84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009a86:	4b03      	ldr	r3, [pc, #12]	; (8009a94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr
 8009a94:	2000000c 	.word	0x2000000c

08009a98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d101      	bne.n	8009aac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009aa8:	2303      	movs	r3, #3
 8009aaa:	e009      	b.n	8009ac0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	33b0      	adds	r3, #176	; 0xb0
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	4413      	add	r3, r2
 8009aba:	683a      	ldr	r2, [r7, #0]
 8009abc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b087      	sub	sp, #28
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	32b0      	adds	r2, #176	; 0xb0
 8009ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ae6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d101      	bne.n	8009af2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009aee:	2303      	movs	r3, #3
 8009af0:	e008      	b.n	8009b04 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	371c      	adds	r7, #28
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b085      	sub	sp, #20
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	32b0      	adds	r2, #176	; 0xb0
 8009b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b28:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d101      	bne.n	8009b34 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009b30:	2303      	movs	r3, #3
 8009b32:	e004      	b.n	8009b3e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	683a      	ldr	r2, [r7, #0]
 8009b38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3714      	adds	r7, #20
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr
	...

08009b4c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	32b0      	adds	r2, #176	; 0xb0
 8009b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b62:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009b64:	2301      	movs	r3, #1
 8009b66:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	32b0      	adds	r2, #176	; 0xb0
 8009b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d101      	bne.n	8009b7e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e025      	b.n	8009bca <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d11f      	bne.n	8009bc8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009b90:	4b10      	ldr	r3, [pc, #64]	; (8009bd4 <USBD_CDC_TransmitPacket+0x88>)
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	f003 020f 	and.w	r2, r3, #15
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	4613      	mov	r3, r2
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	4413      	add	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	4403      	add	r3, r0
 8009baa:	3318      	adds	r3, #24
 8009bac:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009bae:	4b09      	ldr	r3, [pc, #36]	; (8009bd4 <USBD_CDC_TransmitPacket+0x88>)
 8009bb0:	7819      	ldrb	r1, [r3, #0]
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f001 ffbd 	bl	800bb3e <USBD_LL_Transmit>

    ret = USBD_OK;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	20000093 	.word	0x20000093

08009bd8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	32b0      	adds	r2, #176	; 0xb0
 8009bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	32b0      	adds	r2, #176	; 0xb0
 8009bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d101      	bne.n	8009c06 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009c02:	2303      	movs	r3, #3
 8009c04:	e018      	b.n	8009c38 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	7c1b      	ldrb	r3, [r3, #16]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10a      	bne.n	8009c24 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c0e:	4b0c      	ldr	r3, [pc, #48]	; (8009c40 <USBD_CDC_ReceivePacket+0x68>)
 8009c10:	7819      	ldrb	r1, [r3, #0]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f001 ffaf 	bl	800bb80 <USBD_LL_PrepareReceive>
 8009c22:	e008      	b.n	8009c36 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c24:	4b06      	ldr	r3, [pc, #24]	; (8009c40 <USBD_CDC_ReceivePacket+0x68>)
 8009c26:	7819      	ldrb	r1, [r3, #0]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c2e:	2340      	movs	r3, #64	; 0x40
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f001 ffa5 	bl	800bb80 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009c36:	2300      	movs	r3, #0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3710      	adds	r7, #16
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	20000094 	.word	0x20000094

08009c44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b086      	sub	sp, #24
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	4613      	mov	r3, r2
 8009c50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d101      	bne.n	8009c5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009c58:	2303      	movs	r3, #3
 8009c5a:	e01f      	b.n	8009c9c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2200      	movs	r2, #0
 8009c68:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d003      	beq.n	8009c82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	68ba      	ldr	r2, [r7, #8]
 8009c7e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2201      	movs	r2, #1
 8009c86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	79fa      	ldrb	r2, [r7, #7]
 8009c8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009c90:	68f8      	ldr	r0, [r7, #12]
 8009c92:	f001 fe1f 	bl	800b8d4 <USBD_LL_Init>
 8009c96:	4603      	mov	r3, r0
 8009c98:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3718      	adds	r7, #24
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d101      	bne.n	8009cbc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009cb8:	2303      	movs	r3, #3
 8009cba:	e025      	b.n	8009d08 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	683a      	ldr	r2, [r7, #0]
 8009cc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	32ae      	adds	r2, #174	; 0xae
 8009cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00f      	beq.n	8009cf8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	32ae      	adds	r2, #174	; 0xae
 8009ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce8:	f107 020e 	add.w	r2, r7, #14
 8009cec:	4610      	mov	r0, r2
 8009cee:	4798      	blx	r3
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009cfe:	1c5a      	adds	r2, r3, #1
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3710      	adds	r7, #16
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f001 fe27 	bl	800b96c <USBD_LL_Start>
 8009d1e:	4603      	mov	r3, r0
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3708      	adds	r7, #8
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d30:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	370c      	adds	r7, #12
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr

08009d3e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b084      	sub	sp, #16
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	460b      	mov	r3, r1
 8009d48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d009      	beq.n	8009d6c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	78fa      	ldrb	r2, [r7, #3]
 8009d62:	4611      	mov	r1, r2
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	4798      	blx	r3
 8009d68:	4603      	mov	r3, r0
 8009d6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b084      	sub	sp, #16
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	460b      	mov	r3, r1
 8009d80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	78fa      	ldrb	r2, [r7, #3]
 8009d90:	4611      	mov	r1, r2
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	4798      	blx	r3
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d001      	beq.n	8009da0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009d9c:	2303      	movs	r3, #3
 8009d9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3710      	adds	r7, #16
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b084      	sub	sp, #16
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
 8009db2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009dba:	6839      	ldr	r1, [r7, #0]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f001 f908 	bl	800afd2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009dde:	f003 031f 	and.w	r3, r3, #31
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	d01a      	beq.n	8009e1c <USBD_LL_SetupStage+0x72>
 8009de6:	2b02      	cmp	r3, #2
 8009de8:	d822      	bhi.n	8009e30 <USBD_LL_SetupStage+0x86>
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d002      	beq.n	8009df4 <USBD_LL_SetupStage+0x4a>
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d00a      	beq.n	8009e08 <USBD_LL_SetupStage+0x5e>
 8009df2:	e01d      	b.n	8009e30 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 fb5f 	bl	800a4c0 <USBD_StdDevReq>
 8009e02:	4603      	mov	r3, r0
 8009e04:	73fb      	strb	r3, [r7, #15]
      break;
 8009e06:	e020      	b.n	8009e4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e0e:	4619      	mov	r1, r3
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 fbc7 	bl	800a5a4 <USBD_StdItfReq>
 8009e16:	4603      	mov	r3, r0
 8009e18:	73fb      	strb	r3, [r7, #15]
      break;
 8009e1a:	e016      	b.n	8009e4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e22:	4619      	mov	r1, r3
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fc29 	bl	800a67c <USBD_StdEPReq>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8009e2e:	e00c      	b.n	8009e4a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009e36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f001 fdf4 	bl	800ba2c <USBD_LL_StallEP>
 8009e44:	4603      	mov	r3, r0
 8009e46:	73fb      	strb	r3, [r7, #15]
      break;
 8009e48:	bf00      	nop
  }

  return ret;
 8009e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	607a      	str	r2, [r7, #4]
 8009e60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e62:	2300      	movs	r3, #0
 8009e64:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009e66:	7afb      	ldrb	r3, [r7, #11]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d16e      	bne.n	8009f4a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009e72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e7a:	2b03      	cmp	r3, #3
 8009e7c:	f040 8098 	bne.w	8009fb0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	689a      	ldr	r2, [r3, #8]
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d913      	bls.n	8009eb4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	689a      	ldr	r2, [r3, #8]
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	1ad2      	subs	r2, r2, r3
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	68da      	ldr	r2, [r3, #12]
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	bf28      	it	cs
 8009ea6:	4613      	movcs	r3, r2
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	6879      	ldr	r1, [r7, #4]
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f001 f984 	bl	800b1ba <USBD_CtlContinueRx>
 8009eb2:	e07d      	b.n	8009fb0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009eba:	f003 031f 	and.w	r3, r3, #31
 8009ebe:	2b02      	cmp	r3, #2
 8009ec0:	d014      	beq.n	8009eec <USBD_LL_DataOutStage+0x98>
 8009ec2:	2b02      	cmp	r3, #2
 8009ec4:	d81d      	bhi.n	8009f02 <USBD_LL_DataOutStage+0xae>
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d002      	beq.n	8009ed0 <USBD_LL_DataOutStage+0x7c>
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d003      	beq.n	8009ed6 <USBD_LL_DataOutStage+0x82>
 8009ece:	e018      	b.n	8009f02 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	75bb      	strb	r3, [r7, #22]
            break;
 8009ed4:	e018      	b.n	8009f08 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	4619      	mov	r1, r3
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	f000 fa5e 	bl	800a3a2 <USBD_CoreFindIF>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	75bb      	strb	r3, [r7, #22]
            break;
 8009eea:	e00d      	b.n	8009f08 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f000 fa60 	bl	800a3bc <USBD_CoreFindEP>
 8009efc:	4603      	mov	r3, r0
 8009efe:	75bb      	strb	r3, [r7, #22]
            break;
 8009f00:	e002      	b.n	8009f08 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009f02:	2300      	movs	r3, #0
 8009f04:	75bb      	strb	r3, [r7, #22]
            break;
 8009f06:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009f08:	7dbb      	ldrb	r3, [r7, #22]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d119      	bne.n	8009f42 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	2b03      	cmp	r3, #3
 8009f18:	d113      	bne.n	8009f42 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009f1a:	7dba      	ldrb	r2, [r7, #22]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	32ae      	adds	r2, #174	; 0xae
 8009f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00b      	beq.n	8009f42 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009f2a:	7dba      	ldrb	r2, [r7, #22]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009f32:	7dba      	ldrb	r2, [r7, #22]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	32ae      	adds	r2, #174	; 0xae
 8009f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f3c:	691b      	ldr	r3, [r3, #16]
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f001 f94a 	bl	800b1dc <USBD_CtlSendStatus>
 8009f48:	e032      	b.n	8009fb0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009f4a:	7afb      	ldrb	r3, [r7, #11]
 8009f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	4619      	mov	r1, r3
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f000 fa31 	bl	800a3bc <USBD_CoreFindEP>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f5e:	7dbb      	ldrb	r3, [r7, #22]
 8009f60:	2bff      	cmp	r3, #255	; 0xff
 8009f62:	d025      	beq.n	8009fb0 <USBD_LL_DataOutStage+0x15c>
 8009f64:	7dbb      	ldrb	r3, [r7, #22]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d122      	bne.n	8009fb0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	2b03      	cmp	r3, #3
 8009f74:	d117      	bne.n	8009fa6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009f76:	7dba      	ldrb	r2, [r7, #22]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	32ae      	adds	r2, #174	; 0xae
 8009f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f80:	699b      	ldr	r3, [r3, #24]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d00f      	beq.n	8009fa6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009f86:	7dba      	ldrb	r2, [r7, #22]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009f8e:	7dba      	ldrb	r2, [r7, #22]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	32ae      	adds	r2, #174	; 0xae
 8009f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f98:	699b      	ldr	r3, [r3, #24]
 8009f9a:	7afa      	ldrb	r2, [r7, #11]
 8009f9c:	4611      	mov	r1, r2
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	4798      	blx	r3
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009fa6:	7dfb      	ldrb	r3, [r7, #23]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d001      	beq.n	8009fb0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009fac:	7dfb      	ldrb	r3, [r7, #23]
 8009fae:	e000      	b.n	8009fb2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3718      	adds	r7, #24
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b086      	sub	sp, #24
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	60f8      	str	r0, [r7, #12]
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	607a      	str	r2, [r7, #4]
 8009fc6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009fc8:	7afb      	ldrb	r3, [r7, #11]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d16f      	bne.n	800a0ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	3314      	adds	r3, #20
 8009fd2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009fda:	2b02      	cmp	r3, #2
 8009fdc:	d15a      	bne.n	800a094 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	689a      	ldr	r2, [r3, #8]
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d914      	bls.n	800a014 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	689a      	ldr	r2, [r3, #8]
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	1ad2      	subs	r2, r2, r3
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	6879      	ldr	r1, [r7, #4]
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f001 f8ac 	bl	800b15e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a006:	2300      	movs	r3, #0
 800a008:	2200      	movs	r2, #0
 800a00a:	2100      	movs	r1, #0
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	f001 fdb7 	bl	800bb80 <USBD_LL_PrepareReceive>
 800a012:	e03f      	b.n	800a094 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	68da      	ldr	r2, [r3, #12]
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d11c      	bne.n	800a05a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	685a      	ldr	r2, [r3, #4]
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a028:	429a      	cmp	r2, r3
 800a02a:	d316      	bcc.n	800a05a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	685a      	ldr	r2, [r3, #4]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a036:	429a      	cmp	r2, r3
 800a038:	d20f      	bcs.n	800a05a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a03a:	2200      	movs	r2, #0
 800a03c:	2100      	movs	r1, #0
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f001 f88d 	bl	800b15e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2200      	movs	r2, #0
 800a048:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a04c:	2300      	movs	r3, #0
 800a04e:	2200      	movs	r2, #0
 800a050:	2100      	movs	r1, #0
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f001 fd94 	bl	800bb80 <USBD_LL_PrepareReceive>
 800a058:	e01c      	b.n	800a094 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a060:	b2db      	uxtb	r3, r3
 800a062:	2b03      	cmp	r3, #3
 800a064:	d10f      	bne.n	800a086 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a06c:	68db      	ldr	r3, [r3, #12]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d009      	beq.n	800a086 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2200      	movs	r2, #0
 800a076:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a086:	2180      	movs	r1, #128	; 0x80
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f001 fccf 	bl	800ba2c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f001 f8b7 	bl	800b202 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d03a      	beq.n	800a114 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f7ff fe42 	bl	8009d28 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a0ac:	e032      	b.n	800a114 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a0ae:	7afb      	ldrb	r3, [r7, #11]
 800a0b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	68f8      	ldr	r0, [r7, #12]
 800a0ba:	f000 f97f 	bl	800a3bc <USBD_CoreFindEP>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0c2:	7dfb      	ldrb	r3, [r7, #23]
 800a0c4:	2bff      	cmp	r3, #255	; 0xff
 800a0c6:	d025      	beq.n	800a114 <USBD_LL_DataInStage+0x15a>
 800a0c8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d122      	bne.n	800a114 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	2b03      	cmp	r3, #3
 800a0d8:	d11c      	bne.n	800a114 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a0da:	7dfa      	ldrb	r2, [r7, #23]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	32ae      	adds	r2, #174	; 0xae
 800a0e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0e4:	695b      	ldr	r3, [r3, #20]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d014      	beq.n	800a114 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a0ea:	7dfa      	ldrb	r2, [r7, #23]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a0f2:	7dfa      	ldrb	r2, [r7, #23]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	32ae      	adds	r2, #174	; 0xae
 800a0f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0fc:	695b      	ldr	r3, [r3, #20]
 800a0fe:	7afa      	ldrb	r2, [r7, #11]
 800a100:	4611      	mov	r1, r2
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	4798      	blx	r3
 800a106:	4603      	mov	r3, r0
 800a108:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a10a:	7dbb      	ldrb	r3, [r7, #22]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d001      	beq.n	800a114 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a110:	7dbb      	ldrb	r3, [r7, #22]
 800a112:	e000      	b.n	800a116 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3718      	adds	r7, #24
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b084      	sub	sp, #16
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a126:	2300      	movs	r3, #0
 800a128:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2201      	movs	r2, #1
 800a12e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a156:	2b00      	cmp	r3, #0
 800a158:	d014      	beq.n	800a184 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00e      	beq.n	800a184 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	6852      	ldr	r2, [r2, #4]
 800a172:	b2d2      	uxtb	r2, r2
 800a174:	4611      	mov	r1, r2
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	4798      	blx	r3
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d001      	beq.n	800a184 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a180:	2303      	movs	r3, #3
 800a182:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a184:	2340      	movs	r3, #64	; 0x40
 800a186:	2200      	movs	r2, #0
 800a188:	2100      	movs	r1, #0
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f001 fc09 	bl	800b9a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2240      	movs	r2, #64	; 0x40
 800a19c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a1a0:	2340      	movs	r3, #64	; 0x40
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	2180      	movs	r1, #128	; 0x80
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f001 fbfb 	bl	800b9a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2240      	movs	r2, #64	; 0x40
 800a1b6:	621a      	str	r2, [r3, #32]

  return ret;
 800a1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a1c2:	b480      	push	{r7}
 800a1c4:	b083      	sub	sp, #12
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	78fa      	ldrb	r2, [r7, #3]
 800a1d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a1d4:	2300      	movs	r3, #0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	370c      	adds	r7, #12
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr

0800a1e2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a1e2:	b480      	push	{r7}
 800a1e4:	b083      	sub	sp, #12
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1f0:	b2da      	uxtb	r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2204      	movs	r2, #4
 800a1fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	370c      	adds	r7, #12
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr

0800a20e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a20e:	b480      	push	{r7}
 800a210:	b083      	sub	sp, #12
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	2b04      	cmp	r3, #4
 800a220:	d106      	bne.n	800a230 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a228:	b2da      	uxtb	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	370c      	adds	r7, #12
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr

0800a23e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b082      	sub	sp, #8
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	2b03      	cmp	r3, #3
 800a250:	d110      	bne.n	800a274 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00b      	beq.n	800a274 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a262:	69db      	ldr	r3, [r3, #28]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d005      	beq.n	800a274 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a26e:	69db      	ldr	r3, [r3, #28]
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a274:	2300      	movs	r3, #0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3708      	adds	r7, #8
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b082      	sub	sp, #8
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
 800a286:	460b      	mov	r3, r1
 800a288:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	32ae      	adds	r2, #174	; 0xae
 800a294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d101      	bne.n	800a2a0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a29c:	2303      	movs	r3, #3
 800a29e:	e01c      	b.n	800a2da <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	2b03      	cmp	r3, #3
 800a2aa:	d115      	bne.n	800a2d8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	32ae      	adds	r2, #174	; 0xae
 800a2b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ba:	6a1b      	ldr	r3, [r3, #32]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d00b      	beq.n	800a2d8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	32ae      	adds	r2, #174	; 0xae
 800a2ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ce:	6a1b      	ldr	r3, [r3, #32]
 800a2d0:	78fa      	ldrb	r2, [r7, #3]
 800a2d2:	4611      	mov	r1, r2
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a2d8:	2300      	movs	r3, #0
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3708      	adds	r7, #8
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b082      	sub	sp, #8
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	32ae      	adds	r2, #174	; 0xae
 800a2f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d101      	bne.n	800a304 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a300:	2303      	movs	r3, #3
 800a302:	e01c      	b.n	800a33e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	2b03      	cmp	r3, #3
 800a30e:	d115      	bne.n	800a33c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	32ae      	adds	r2, #174	; 0xae
 800a31a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00b      	beq.n	800a33c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	32ae      	adds	r2, #174	; 0xae
 800a32e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a334:	78fa      	ldrb	r2, [r7, #3]
 800a336:	4611      	mov	r1, r2
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3708      	adds	r7, #8
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a346:	b480      	push	{r7}
 800a348:	b083      	sub	sp, #12
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a34e:	2300      	movs	r3, #0
}
 800a350:	4618      	mov	r0, r3
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a364:	2300      	movs	r3, #0
 800a366:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2201      	movs	r2, #1
 800a36c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00e      	beq.n	800a398 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	6852      	ldr	r2, [r2, #4]
 800a386:	b2d2      	uxtb	r2, r2
 800a388:	4611      	mov	r1, r2
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	4798      	blx	r3
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d001      	beq.n	800a398 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a394:	2303      	movs	r3, #3
 800a396:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a398:	7bfb      	ldrb	r3, [r7, #15]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a3a2:	b480      	push	{r7}
 800a3a4:	b083      	sub	sp, #12
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a3ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a3c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	370c      	adds	r7, #12
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr

0800a3d6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b086      	sub	sp, #24
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
 800a3de:	460b      	mov	r3, r1
 800a3e0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	885b      	ldrh	r3, [r3, #2]
 800a3f2:	b29a      	uxth	r2, r3
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d920      	bls.n	800a440 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	b29b      	uxth	r3, r3
 800a404:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a406:	e013      	b.n	800a430 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a408:	f107 030a 	add.w	r3, r7, #10
 800a40c:	4619      	mov	r1, r3
 800a40e:	6978      	ldr	r0, [r7, #20]
 800a410:	f000 f81b 	bl	800a44a <USBD_GetNextDesc>
 800a414:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	785b      	ldrb	r3, [r3, #1]
 800a41a:	2b05      	cmp	r3, #5
 800a41c:	d108      	bne.n	800a430 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	789b      	ldrb	r3, [r3, #2]
 800a426:	78fa      	ldrb	r2, [r7, #3]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d008      	beq.n	800a43e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a42c:	2300      	movs	r3, #0
 800a42e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	885b      	ldrh	r3, [r3, #2]
 800a434:	b29a      	uxth	r2, r3
 800a436:	897b      	ldrh	r3, [r7, #10]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d8e5      	bhi.n	800a408 <USBD_GetEpDesc+0x32>
 800a43c:	e000      	b.n	800a440 <USBD_GetEpDesc+0x6a>
          break;
 800a43e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a440:	693b      	ldr	r3, [r7, #16]
}
 800a442:	4618      	mov	r0, r3
 800a444:	3718      	adds	r7, #24
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a44a:	b480      	push	{r7}
 800a44c:	b085      	sub	sp, #20
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	881a      	ldrh	r2, [r3, #0]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	b29b      	uxth	r3, r3
 800a462:	4413      	add	r3, r2
 800a464:	b29a      	uxth	r2, r3
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	461a      	mov	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	4413      	add	r3, r2
 800a474:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a476:	68fb      	ldr	r3, [r7, #12]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3714      	adds	r7, #20
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a484:	b480      	push	{r7}
 800a486:	b087      	sub	sp, #28
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	3301      	adds	r3, #1
 800a49a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a4a2:	8a3b      	ldrh	r3, [r7, #16]
 800a4a4:	021b      	lsls	r3, r3, #8
 800a4a6:	b21a      	sxth	r2, r3
 800a4a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	b21b      	sxth	r3, r3
 800a4b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a4b2:	89fb      	ldrh	r3, [r7, #14]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	371c      	adds	r7, #28
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a4d6:	2b40      	cmp	r3, #64	; 0x40
 800a4d8:	d005      	beq.n	800a4e6 <USBD_StdDevReq+0x26>
 800a4da:	2b40      	cmp	r3, #64	; 0x40
 800a4dc:	d857      	bhi.n	800a58e <USBD_StdDevReq+0xce>
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00f      	beq.n	800a502 <USBD_StdDevReq+0x42>
 800a4e2:	2b20      	cmp	r3, #32
 800a4e4:	d153      	bne.n	800a58e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	32ae      	adds	r2, #174	; 0xae
 800a4f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	6839      	ldr	r1, [r7, #0]
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	4798      	blx	r3
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	73fb      	strb	r3, [r7, #15]
      break;
 800a500:	e04a      	b.n	800a598 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	785b      	ldrb	r3, [r3, #1]
 800a506:	2b09      	cmp	r3, #9
 800a508:	d83b      	bhi.n	800a582 <USBD_StdDevReq+0xc2>
 800a50a:	a201      	add	r2, pc, #4	; (adr r2, 800a510 <USBD_StdDevReq+0x50>)
 800a50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a510:	0800a565 	.word	0x0800a565
 800a514:	0800a579 	.word	0x0800a579
 800a518:	0800a583 	.word	0x0800a583
 800a51c:	0800a56f 	.word	0x0800a56f
 800a520:	0800a583 	.word	0x0800a583
 800a524:	0800a543 	.word	0x0800a543
 800a528:	0800a539 	.word	0x0800a539
 800a52c:	0800a583 	.word	0x0800a583
 800a530:	0800a55b 	.word	0x0800a55b
 800a534:	0800a54d 	.word	0x0800a54d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a538:	6839      	ldr	r1, [r7, #0]
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 fa3c 	bl	800a9b8 <USBD_GetDescriptor>
          break;
 800a540:	e024      	b.n	800a58c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a542:	6839      	ldr	r1, [r7, #0]
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f000 fba1 	bl	800ac8c <USBD_SetAddress>
          break;
 800a54a:	e01f      	b.n	800a58c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a54c:	6839      	ldr	r1, [r7, #0]
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 fbe0 	bl	800ad14 <USBD_SetConfig>
 800a554:	4603      	mov	r3, r0
 800a556:	73fb      	strb	r3, [r7, #15]
          break;
 800a558:	e018      	b.n	800a58c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a55a:	6839      	ldr	r1, [r7, #0]
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 fc83 	bl	800ae68 <USBD_GetConfig>
          break;
 800a562:	e013      	b.n	800a58c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a564:	6839      	ldr	r1, [r7, #0]
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 fcb4 	bl	800aed4 <USBD_GetStatus>
          break;
 800a56c:	e00e      	b.n	800a58c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a56e:	6839      	ldr	r1, [r7, #0]
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 fce3 	bl	800af3c <USBD_SetFeature>
          break;
 800a576:	e009      	b.n	800a58c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a578:	6839      	ldr	r1, [r7, #0]
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 fd07 	bl	800af8e <USBD_ClrFeature>
          break;
 800a580:	e004      	b.n	800a58c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a582:	6839      	ldr	r1, [r7, #0]
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 fd5e 	bl	800b046 <USBD_CtlError>
          break;
 800a58a:	bf00      	nop
      }
      break;
 800a58c:	e004      	b.n	800a598 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a58e:	6839      	ldr	r1, [r7, #0]
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 fd58 	bl	800b046 <USBD_CtlError>
      break;
 800a596:	bf00      	nop
  }

  return ret;
 800a598:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop

0800a5a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5ba:	2b40      	cmp	r3, #64	; 0x40
 800a5bc:	d005      	beq.n	800a5ca <USBD_StdItfReq+0x26>
 800a5be:	2b40      	cmp	r3, #64	; 0x40
 800a5c0:	d852      	bhi.n	800a668 <USBD_StdItfReq+0xc4>
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d001      	beq.n	800a5ca <USBD_StdItfReq+0x26>
 800a5c6:	2b20      	cmp	r3, #32
 800a5c8:	d14e      	bne.n	800a668 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	2b02      	cmp	r3, #2
 800a5d6:	d840      	bhi.n	800a65a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	889b      	ldrh	r3, [r3, #4]
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d836      	bhi.n	800a650 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	889b      	ldrh	r3, [r3, #4]
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f7ff fed9 	bl	800a3a2 <USBD_CoreFindIF>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a5f4:	7bbb      	ldrb	r3, [r7, #14]
 800a5f6:	2bff      	cmp	r3, #255	; 0xff
 800a5f8:	d01d      	beq.n	800a636 <USBD_StdItfReq+0x92>
 800a5fa:	7bbb      	ldrb	r3, [r7, #14]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d11a      	bne.n	800a636 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a600:	7bba      	ldrb	r2, [r7, #14]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	32ae      	adds	r2, #174	; 0xae
 800a606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d00f      	beq.n	800a630 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a610:	7bba      	ldrb	r2, [r7, #14]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a618:	7bba      	ldrb	r2, [r7, #14]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	32ae      	adds	r2, #174	; 0xae
 800a61e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	6839      	ldr	r1, [r7, #0]
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	4798      	blx	r3
 800a62a:	4603      	mov	r3, r0
 800a62c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a62e:	e004      	b.n	800a63a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a630:	2303      	movs	r3, #3
 800a632:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a634:	e001      	b.n	800a63a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a636:	2303      	movs	r3, #3
 800a638:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	88db      	ldrh	r3, [r3, #6]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d110      	bne.n	800a664 <USBD_StdItfReq+0xc0>
 800a642:	7bfb      	ldrb	r3, [r7, #15]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d10d      	bne.n	800a664 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 fdc7 	bl	800b1dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a64e:	e009      	b.n	800a664 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a650:	6839      	ldr	r1, [r7, #0]
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 fcf7 	bl	800b046 <USBD_CtlError>
          break;
 800a658:	e004      	b.n	800a664 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a65a:	6839      	ldr	r1, [r7, #0]
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 fcf2 	bl	800b046 <USBD_CtlError>
          break;
 800a662:	e000      	b.n	800a666 <USBD_StdItfReq+0xc2>
          break;
 800a664:	bf00      	nop
      }
      break;
 800a666:	e004      	b.n	800a672 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a668:	6839      	ldr	r1, [r7, #0]
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 fceb 	bl	800b046 <USBD_CtlError>
      break;
 800a670:	bf00      	nop
  }

  return ret;
 800a672:	7bfb      	ldrb	r3, [r7, #15]
}
 800a674:	4618      	mov	r0, r3
 800a676:	3710      	adds	r7, #16
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a686:	2300      	movs	r3, #0
 800a688:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	889b      	ldrh	r3, [r3, #4]
 800a68e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a698:	2b40      	cmp	r3, #64	; 0x40
 800a69a:	d007      	beq.n	800a6ac <USBD_StdEPReq+0x30>
 800a69c:	2b40      	cmp	r3, #64	; 0x40
 800a69e:	f200 817f 	bhi.w	800a9a0 <USBD_StdEPReq+0x324>
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d02a      	beq.n	800a6fc <USBD_StdEPReq+0x80>
 800a6a6:	2b20      	cmp	r3, #32
 800a6a8:	f040 817a 	bne.w	800a9a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a6ac:	7bbb      	ldrb	r3, [r7, #14]
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f7ff fe83 	bl	800a3bc <USBD_CoreFindEP>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6ba:	7b7b      	ldrb	r3, [r7, #13]
 800a6bc:	2bff      	cmp	r3, #255	; 0xff
 800a6be:	f000 8174 	beq.w	800a9aa <USBD_StdEPReq+0x32e>
 800a6c2:	7b7b      	ldrb	r3, [r7, #13]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f040 8170 	bne.w	800a9aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a6ca:	7b7a      	ldrb	r2, [r7, #13]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a6d2:	7b7a      	ldrb	r2, [r7, #13]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	32ae      	adds	r2, #174	; 0xae
 800a6d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	f000 8163 	beq.w	800a9aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a6e4:	7b7a      	ldrb	r2, [r7, #13]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	32ae      	adds	r2, #174	; 0xae
 800a6ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	6839      	ldr	r1, [r7, #0]
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	4798      	blx	r3
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a6fa:	e156      	b.n	800a9aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	785b      	ldrb	r3, [r3, #1]
 800a700:	2b03      	cmp	r3, #3
 800a702:	d008      	beq.n	800a716 <USBD_StdEPReq+0x9a>
 800a704:	2b03      	cmp	r3, #3
 800a706:	f300 8145 	bgt.w	800a994 <USBD_StdEPReq+0x318>
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	f000 809b 	beq.w	800a846 <USBD_StdEPReq+0x1ca>
 800a710:	2b01      	cmp	r3, #1
 800a712:	d03c      	beq.n	800a78e <USBD_StdEPReq+0x112>
 800a714:	e13e      	b.n	800a994 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d002      	beq.n	800a728 <USBD_StdEPReq+0xac>
 800a722:	2b03      	cmp	r3, #3
 800a724:	d016      	beq.n	800a754 <USBD_StdEPReq+0xd8>
 800a726:	e02c      	b.n	800a782 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a728:	7bbb      	ldrb	r3, [r7, #14]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00d      	beq.n	800a74a <USBD_StdEPReq+0xce>
 800a72e:	7bbb      	ldrb	r3, [r7, #14]
 800a730:	2b80      	cmp	r3, #128	; 0x80
 800a732:	d00a      	beq.n	800a74a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a734:	7bbb      	ldrb	r3, [r7, #14]
 800a736:	4619      	mov	r1, r3
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f001 f977 	bl	800ba2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a73e:	2180      	movs	r1, #128	; 0x80
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f001 f973 	bl	800ba2c <USBD_LL_StallEP>
 800a746:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a748:	e020      	b.n	800a78c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a74a:	6839      	ldr	r1, [r7, #0]
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 fc7a 	bl	800b046 <USBD_CtlError>
              break;
 800a752:	e01b      	b.n	800a78c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	885b      	ldrh	r3, [r3, #2]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d10e      	bne.n	800a77a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a75c:	7bbb      	ldrb	r3, [r7, #14]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00b      	beq.n	800a77a <USBD_StdEPReq+0xfe>
 800a762:	7bbb      	ldrb	r3, [r7, #14]
 800a764:	2b80      	cmp	r3, #128	; 0x80
 800a766:	d008      	beq.n	800a77a <USBD_StdEPReq+0xfe>
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	88db      	ldrh	r3, [r3, #6]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d104      	bne.n	800a77a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a770:	7bbb      	ldrb	r3, [r7, #14]
 800a772:	4619      	mov	r1, r3
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f001 f959 	bl	800ba2c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 fd2e 	bl	800b1dc <USBD_CtlSendStatus>

              break;
 800a780:	e004      	b.n	800a78c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fc5e 	bl	800b046 <USBD_CtlError>
              break;
 800a78a:	bf00      	nop
          }
          break;
 800a78c:	e107      	b.n	800a99e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a794:	b2db      	uxtb	r3, r3
 800a796:	2b02      	cmp	r3, #2
 800a798:	d002      	beq.n	800a7a0 <USBD_StdEPReq+0x124>
 800a79a:	2b03      	cmp	r3, #3
 800a79c:	d016      	beq.n	800a7cc <USBD_StdEPReq+0x150>
 800a79e:	e04b      	b.n	800a838 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7a0:	7bbb      	ldrb	r3, [r7, #14]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00d      	beq.n	800a7c2 <USBD_StdEPReq+0x146>
 800a7a6:	7bbb      	ldrb	r3, [r7, #14]
 800a7a8:	2b80      	cmp	r3, #128	; 0x80
 800a7aa:	d00a      	beq.n	800a7c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7ac:	7bbb      	ldrb	r3, [r7, #14]
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f001 f93b 	bl	800ba2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7b6:	2180      	movs	r1, #128	; 0x80
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f001 f937 	bl	800ba2c <USBD_LL_StallEP>
 800a7be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a7c0:	e040      	b.n	800a844 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a7c2:	6839      	ldr	r1, [r7, #0]
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 fc3e 	bl	800b046 <USBD_CtlError>
              break;
 800a7ca:	e03b      	b.n	800a844 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	885b      	ldrh	r3, [r3, #2]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d136      	bne.n	800a842 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a7d4:	7bbb      	ldrb	r3, [r7, #14]
 800a7d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d004      	beq.n	800a7e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a7de:	7bbb      	ldrb	r3, [r7, #14]
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f001 f941 	bl	800ba6a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 fcf7 	bl	800b1dc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a7ee:	7bbb      	ldrb	r3, [r7, #14]
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f7ff fde2 	bl	800a3bc <USBD_CoreFindEP>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7fc:	7b7b      	ldrb	r3, [r7, #13]
 800a7fe:	2bff      	cmp	r3, #255	; 0xff
 800a800:	d01f      	beq.n	800a842 <USBD_StdEPReq+0x1c6>
 800a802:	7b7b      	ldrb	r3, [r7, #13]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d11c      	bne.n	800a842 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a808:	7b7a      	ldrb	r2, [r7, #13]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a810:	7b7a      	ldrb	r2, [r7, #13]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	32ae      	adds	r2, #174	; 0xae
 800a816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d010      	beq.n	800a842 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a820:	7b7a      	ldrb	r2, [r7, #13]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	32ae      	adds	r2, #174	; 0xae
 800a826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	6839      	ldr	r1, [r7, #0]
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	4798      	blx	r3
 800a832:	4603      	mov	r3, r0
 800a834:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a836:	e004      	b.n	800a842 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a838:	6839      	ldr	r1, [r7, #0]
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 fc03 	bl	800b046 <USBD_CtlError>
              break;
 800a840:	e000      	b.n	800a844 <USBD_StdEPReq+0x1c8>
              break;
 800a842:	bf00      	nop
          }
          break;
 800a844:	e0ab      	b.n	800a99e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	2b02      	cmp	r3, #2
 800a850:	d002      	beq.n	800a858 <USBD_StdEPReq+0x1dc>
 800a852:	2b03      	cmp	r3, #3
 800a854:	d032      	beq.n	800a8bc <USBD_StdEPReq+0x240>
 800a856:	e097      	b.n	800a988 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a858:	7bbb      	ldrb	r3, [r7, #14]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d007      	beq.n	800a86e <USBD_StdEPReq+0x1f2>
 800a85e:	7bbb      	ldrb	r3, [r7, #14]
 800a860:	2b80      	cmp	r3, #128	; 0x80
 800a862:	d004      	beq.n	800a86e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a864:	6839      	ldr	r1, [r7, #0]
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 fbed 	bl	800b046 <USBD_CtlError>
                break;
 800a86c:	e091      	b.n	800a992 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a86e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a872:	2b00      	cmp	r3, #0
 800a874:	da0b      	bge.n	800a88e <USBD_StdEPReq+0x212>
 800a876:	7bbb      	ldrb	r3, [r7, #14]
 800a878:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a87c:	4613      	mov	r3, r2
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	4413      	add	r3, r2
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	3310      	adds	r3, #16
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	4413      	add	r3, r2
 800a88a:	3304      	adds	r3, #4
 800a88c:	e00b      	b.n	800a8a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a88e:	7bbb      	ldrb	r3, [r7, #14]
 800a890:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a894:	4613      	mov	r3, r2
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	4413      	add	r3, r2
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	3304      	adds	r3, #4
 800a8a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	2202      	movs	r2, #2
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 fc37 	bl	800b128 <USBD_CtlSendData>
              break;
 800a8ba:	e06a      	b.n	800a992 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a8bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	da11      	bge.n	800a8e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a8c4:	7bbb      	ldrb	r3, [r7, #14]
 800a8c6:	f003 020f 	and.w	r2, r3, #15
 800a8ca:	6879      	ldr	r1, [r7, #4]
 800a8cc:	4613      	mov	r3, r2
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	4413      	add	r3, r2
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	440b      	add	r3, r1
 800a8d6:	3324      	adds	r3, #36	; 0x24
 800a8d8:	881b      	ldrh	r3, [r3, #0]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d117      	bne.n	800a90e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a8de:	6839      	ldr	r1, [r7, #0]
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 fbb0 	bl	800b046 <USBD_CtlError>
                  break;
 800a8e6:	e054      	b.n	800a992 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a8e8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ea:	f003 020f 	and.w	r2, r3, #15
 800a8ee:	6879      	ldr	r1, [r7, #4]
 800a8f0:	4613      	mov	r3, r2
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	4413      	add	r3, r2
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	440b      	add	r3, r1
 800a8fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a8fe:	881b      	ldrh	r3, [r3, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d104      	bne.n	800a90e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a904:	6839      	ldr	r1, [r7, #0]
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 fb9d 	bl	800b046 <USBD_CtlError>
                  break;
 800a90c:	e041      	b.n	800a992 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a90e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a912:	2b00      	cmp	r3, #0
 800a914:	da0b      	bge.n	800a92e <USBD_StdEPReq+0x2b2>
 800a916:	7bbb      	ldrb	r3, [r7, #14]
 800a918:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a91c:	4613      	mov	r3, r2
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	4413      	add	r3, r2
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	3310      	adds	r3, #16
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	4413      	add	r3, r2
 800a92a:	3304      	adds	r3, #4
 800a92c:	e00b      	b.n	800a946 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a92e:	7bbb      	ldrb	r3, [r7, #14]
 800a930:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a934:	4613      	mov	r3, r2
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	4413      	add	r3, r2
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	4413      	add	r3, r2
 800a944:	3304      	adds	r3, #4
 800a946:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a948:	7bbb      	ldrb	r3, [r7, #14]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d002      	beq.n	800a954 <USBD_StdEPReq+0x2d8>
 800a94e:	7bbb      	ldrb	r3, [r7, #14]
 800a950:	2b80      	cmp	r3, #128	; 0x80
 800a952:	d103      	bne.n	800a95c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	2200      	movs	r2, #0
 800a958:	601a      	str	r2, [r3, #0]
 800a95a:	e00e      	b.n	800a97a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a95c:	7bbb      	ldrb	r3, [r7, #14]
 800a95e:	4619      	mov	r1, r3
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f001 f8a1 	bl	800baa8 <USBD_LL_IsStallEP>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d003      	beq.n	800a974 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	2201      	movs	r2, #1
 800a970:	601a      	str	r2, [r3, #0]
 800a972:	e002      	b.n	800a97a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	2200      	movs	r2, #0
 800a978:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	2202      	movs	r2, #2
 800a97e:	4619      	mov	r1, r3
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 fbd1 	bl	800b128 <USBD_CtlSendData>
              break;
 800a986:	e004      	b.n	800a992 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a988:	6839      	ldr	r1, [r7, #0]
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 fb5b 	bl	800b046 <USBD_CtlError>
              break;
 800a990:	bf00      	nop
          }
          break;
 800a992:	e004      	b.n	800a99e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a994:	6839      	ldr	r1, [r7, #0]
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 fb55 	bl	800b046 <USBD_CtlError>
          break;
 800a99c:	bf00      	nop
      }
      break;
 800a99e:	e005      	b.n	800a9ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a9a0:	6839      	ldr	r1, [r7, #0]
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 fb4f 	bl	800b046 <USBD_CtlError>
      break;
 800a9a8:	e000      	b.n	800a9ac <USBD_StdEPReq+0x330>
      break;
 800a9aa:	bf00      	nop
  }

  return ret;
 800a9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
	...

0800a9b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	885b      	ldrh	r3, [r3, #2]
 800a9d2:	0a1b      	lsrs	r3, r3, #8
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	2b06      	cmp	r3, #6
 800a9da:	f200 8128 	bhi.w	800ac2e <USBD_GetDescriptor+0x276>
 800a9de:	a201      	add	r2, pc, #4	; (adr r2, 800a9e4 <USBD_GetDescriptor+0x2c>)
 800a9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e4:	0800aa01 	.word	0x0800aa01
 800a9e8:	0800aa19 	.word	0x0800aa19
 800a9ec:	0800aa59 	.word	0x0800aa59
 800a9f0:	0800ac2f 	.word	0x0800ac2f
 800a9f4:	0800ac2f 	.word	0x0800ac2f
 800a9f8:	0800abcf 	.word	0x0800abcf
 800a9fc:	0800abfb 	.word	0x0800abfb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	7c12      	ldrb	r2, [r2, #16]
 800aa0c:	f107 0108 	add.w	r1, r7, #8
 800aa10:	4610      	mov	r0, r2
 800aa12:	4798      	blx	r3
 800aa14:	60f8      	str	r0, [r7, #12]
      break;
 800aa16:	e112      	b.n	800ac3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	7c1b      	ldrb	r3, [r3, #16]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d10d      	bne.n	800aa3c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa28:	f107 0208 	add.w	r2, r7, #8
 800aa2c:	4610      	mov	r0, r2
 800aa2e:	4798      	blx	r3
 800aa30:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	3301      	adds	r3, #1
 800aa36:	2202      	movs	r2, #2
 800aa38:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aa3a:	e100      	b.n	800ac3e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa44:	f107 0208 	add.w	r2, r7, #8
 800aa48:	4610      	mov	r0, r2
 800aa4a:	4798      	blx	r3
 800aa4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	3301      	adds	r3, #1
 800aa52:	2202      	movs	r2, #2
 800aa54:	701a      	strb	r2, [r3, #0]
      break;
 800aa56:	e0f2      	b.n	800ac3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	885b      	ldrh	r3, [r3, #2]
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	2b05      	cmp	r3, #5
 800aa60:	f200 80ac 	bhi.w	800abbc <USBD_GetDescriptor+0x204>
 800aa64:	a201      	add	r2, pc, #4	; (adr r2, 800aa6c <USBD_GetDescriptor+0xb4>)
 800aa66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa6a:	bf00      	nop
 800aa6c:	0800aa85 	.word	0x0800aa85
 800aa70:	0800aab9 	.word	0x0800aab9
 800aa74:	0800aaed 	.word	0x0800aaed
 800aa78:	0800ab21 	.word	0x0800ab21
 800aa7c:	0800ab55 	.word	0x0800ab55
 800aa80:	0800ab89 	.word	0x0800ab89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d00b      	beq.n	800aaa8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	7c12      	ldrb	r2, [r2, #16]
 800aa9c:	f107 0108 	add.w	r1, r7, #8
 800aaa0:	4610      	mov	r0, r2
 800aaa2:	4798      	blx	r3
 800aaa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aaa6:	e091      	b.n	800abcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aaa8:	6839      	ldr	r1, [r7, #0]
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 facb 	bl	800b046 <USBD_CtlError>
            err++;
 800aab0:	7afb      	ldrb	r3, [r7, #11]
 800aab2:	3301      	adds	r3, #1
 800aab4:	72fb      	strb	r3, [r7, #11]
          break;
 800aab6:	e089      	b.n	800abcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d00b      	beq.n	800aadc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaca:	689b      	ldr	r3, [r3, #8]
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	7c12      	ldrb	r2, [r2, #16]
 800aad0:	f107 0108 	add.w	r1, r7, #8
 800aad4:	4610      	mov	r0, r2
 800aad6:	4798      	blx	r3
 800aad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aada:	e077      	b.n	800abcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aadc:	6839      	ldr	r1, [r7, #0]
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 fab1 	bl	800b046 <USBD_CtlError>
            err++;
 800aae4:	7afb      	ldrb	r3, [r7, #11]
 800aae6:	3301      	adds	r3, #1
 800aae8:	72fb      	strb	r3, [r7, #11]
          break;
 800aaea:	e06f      	b.n	800abcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d00b      	beq.n	800ab10 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	7c12      	ldrb	r2, [r2, #16]
 800ab04:	f107 0108 	add.w	r1, r7, #8
 800ab08:	4610      	mov	r0, r2
 800ab0a:	4798      	blx	r3
 800ab0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab0e:	e05d      	b.n	800abcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab10:	6839      	ldr	r1, [r7, #0]
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 fa97 	bl	800b046 <USBD_CtlError>
            err++;
 800ab18:	7afb      	ldrb	r3, [r7, #11]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	72fb      	strb	r3, [r7, #11]
          break;
 800ab1e:	e055      	b.n	800abcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00b      	beq.n	800ab44 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab32:	691b      	ldr	r3, [r3, #16]
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	7c12      	ldrb	r2, [r2, #16]
 800ab38:	f107 0108 	add.w	r1, r7, #8
 800ab3c:	4610      	mov	r0, r2
 800ab3e:	4798      	blx	r3
 800ab40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab42:	e043      	b.n	800abcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab44:	6839      	ldr	r1, [r7, #0]
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 fa7d 	bl	800b046 <USBD_CtlError>
            err++;
 800ab4c:	7afb      	ldrb	r3, [r7, #11]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	72fb      	strb	r3, [r7, #11]
          break;
 800ab52:	e03b      	b.n	800abcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab5a:	695b      	ldr	r3, [r3, #20]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00b      	beq.n	800ab78 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab66:	695b      	ldr	r3, [r3, #20]
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	7c12      	ldrb	r2, [r2, #16]
 800ab6c:	f107 0108 	add.w	r1, r7, #8
 800ab70:	4610      	mov	r0, r2
 800ab72:	4798      	blx	r3
 800ab74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab76:	e029      	b.n	800abcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab78:	6839      	ldr	r1, [r7, #0]
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 fa63 	bl	800b046 <USBD_CtlError>
            err++;
 800ab80:	7afb      	ldrb	r3, [r7, #11]
 800ab82:	3301      	adds	r3, #1
 800ab84:	72fb      	strb	r3, [r7, #11]
          break;
 800ab86:	e021      	b.n	800abcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab8e:	699b      	ldr	r3, [r3, #24]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d00b      	beq.n	800abac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab9a:	699b      	ldr	r3, [r3, #24]
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	7c12      	ldrb	r2, [r2, #16]
 800aba0:	f107 0108 	add.w	r1, r7, #8
 800aba4:	4610      	mov	r0, r2
 800aba6:	4798      	blx	r3
 800aba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abaa:	e00f      	b.n	800abcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abac:	6839      	ldr	r1, [r7, #0]
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 fa49 	bl	800b046 <USBD_CtlError>
            err++;
 800abb4:	7afb      	ldrb	r3, [r7, #11]
 800abb6:	3301      	adds	r3, #1
 800abb8:	72fb      	strb	r3, [r7, #11]
          break;
 800abba:	e007      	b.n	800abcc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800abbc:	6839      	ldr	r1, [r7, #0]
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 fa41 	bl	800b046 <USBD_CtlError>
          err++;
 800abc4:	7afb      	ldrb	r3, [r7, #11]
 800abc6:	3301      	adds	r3, #1
 800abc8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800abca:	bf00      	nop
      }
      break;
 800abcc:	e037      	b.n	800ac3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	7c1b      	ldrb	r3, [r3, #16]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d109      	bne.n	800abea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abde:	f107 0208 	add.w	r2, r7, #8
 800abe2:	4610      	mov	r0, r2
 800abe4:	4798      	blx	r3
 800abe6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800abe8:	e029      	b.n	800ac3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800abea:	6839      	ldr	r1, [r7, #0]
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 fa2a 	bl	800b046 <USBD_CtlError>
        err++;
 800abf2:	7afb      	ldrb	r3, [r7, #11]
 800abf4:	3301      	adds	r3, #1
 800abf6:	72fb      	strb	r3, [r7, #11]
      break;
 800abf8:	e021      	b.n	800ac3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	7c1b      	ldrb	r3, [r3, #16]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d10d      	bne.n	800ac1e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac0a:	f107 0208 	add.w	r2, r7, #8
 800ac0e:	4610      	mov	r0, r2
 800ac10:	4798      	blx	r3
 800ac12:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	3301      	adds	r3, #1
 800ac18:	2207      	movs	r2, #7
 800ac1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac1c:	e00f      	b.n	800ac3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac1e:	6839      	ldr	r1, [r7, #0]
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 fa10 	bl	800b046 <USBD_CtlError>
        err++;
 800ac26:	7afb      	ldrb	r3, [r7, #11]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	72fb      	strb	r3, [r7, #11]
      break;
 800ac2c:	e007      	b.n	800ac3e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ac2e:	6839      	ldr	r1, [r7, #0]
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 fa08 	bl	800b046 <USBD_CtlError>
      err++;
 800ac36:	7afb      	ldrb	r3, [r7, #11]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	72fb      	strb	r3, [r7, #11]
      break;
 800ac3c:	bf00      	nop
  }

  if (err != 0U)
 800ac3e:	7afb      	ldrb	r3, [r7, #11]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d11e      	bne.n	800ac82 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	88db      	ldrh	r3, [r3, #6]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d016      	beq.n	800ac7a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ac4c:	893b      	ldrh	r3, [r7, #8]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d00e      	beq.n	800ac70 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	88da      	ldrh	r2, [r3, #6]
 800ac56:	893b      	ldrh	r3, [r7, #8]
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	bf28      	it	cs
 800ac5c:	4613      	movcs	r3, r2
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ac62:	893b      	ldrh	r3, [r7, #8]
 800ac64:	461a      	mov	r2, r3
 800ac66:	68f9      	ldr	r1, [r7, #12]
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 fa5d 	bl	800b128 <USBD_CtlSendData>
 800ac6e:	e009      	b.n	800ac84 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ac70:	6839      	ldr	r1, [r7, #0]
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 f9e7 	bl	800b046 <USBD_CtlError>
 800ac78:	e004      	b.n	800ac84 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 faae 	bl	800b1dc <USBD_CtlSendStatus>
 800ac80:	e000      	b.n	800ac84 <USBD_GetDescriptor+0x2cc>
    return;
 800ac82:	bf00      	nop
  }
}
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop

0800ac8c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	889b      	ldrh	r3, [r3, #4]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d131      	bne.n	800ad02 <USBD_SetAddress+0x76>
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	88db      	ldrh	r3, [r3, #6]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d12d      	bne.n	800ad02 <USBD_SetAddress+0x76>
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	885b      	ldrh	r3, [r3, #2]
 800acaa:	2b7f      	cmp	r3, #127	; 0x7f
 800acac:	d829      	bhi.n	800ad02 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	885b      	ldrh	r3, [r3, #2]
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acb8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	2b03      	cmp	r3, #3
 800acc4:	d104      	bne.n	800acd0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800acc6:	6839      	ldr	r1, [r7, #0]
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 f9bc 	bl	800b046 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acce:	e01d      	b.n	800ad0c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	7bfa      	ldrb	r2, [r7, #15]
 800acd4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800acd8:	7bfb      	ldrb	r3, [r7, #15]
 800acda:	4619      	mov	r1, r3
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 ff0f 	bl	800bb00 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 fa7a 	bl	800b1dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ace8:	7bfb      	ldrb	r3, [r7, #15]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d004      	beq.n	800acf8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2202      	movs	r2, #2
 800acf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acf6:	e009      	b.n	800ad0c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad00:	e004      	b.n	800ad0c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ad02:	6839      	ldr	r1, [r7, #0]
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 f99e 	bl	800b046 <USBD_CtlError>
  }
}
 800ad0a:	bf00      	nop
 800ad0c:	bf00      	nop
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	885b      	ldrh	r3, [r3, #2]
 800ad26:	b2da      	uxtb	r2, r3
 800ad28:	4b4e      	ldr	r3, [pc, #312]	; (800ae64 <USBD_SetConfig+0x150>)
 800ad2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ad2c:	4b4d      	ldr	r3, [pc, #308]	; (800ae64 <USBD_SetConfig+0x150>)
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	d905      	bls.n	800ad40 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ad34:	6839      	ldr	r1, [r7, #0]
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 f985 	bl	800b046 <USBD_CtlError>
    return USBD_FAIL;
 800ad3c:	2303      	movs	r3, #3
 800ad3e:	e08c      	b.n	800ae5a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	d002      	beq.n	800ad52 <USBD_SetConfig+0x3e>
 800ad4c:	2b03      	cmp	r3, #3
 800ad4e:	d029      	beq.n	800ada4 <USBD_SetConfig+0x90>
 800ad50:	e075      	b.n	800ae3e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ad52:	4b44      	ldr	r3, [pc, #272]	; (800ae64 <USBD_SetConfig+0x150>)
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d020      	beq.n	800ad9c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ad5a:	4b42      	ldr	r3, [pc, #264]	; (800ae64 <USBD_SetConfig+0x150>)
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	461a      	mov	r2, r3
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ad64:	4b3f      	ldr	r3, [pc, #252]	; (800ae64 <USBD_SetConfig+0x150>)
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	4619      	mov	r1, r3
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f7fe ffe7 	bl	8009d3e <USBD_SetClassConfig>
 800ad70:	4603      	mov	r3, r0
 800ad72:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ad74:	7bfb      	ldrb	r3, [r7, #15]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d008      	beq.n	800ad8c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ad7a:	6839      	ldr	r1, [r7, #0]
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 f962 	bl	800b046 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2202      	movs	r2, #2
 800ad86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ad8a:	e065      	b.n	800ae58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 fa25 	bl	800b1dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2203      	movs	r2, #3
 800ad96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ad9a:	e05d      	b.n	800ae58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 fa1d 	bl	800b1dc <USBD_CtlSendStatus>
      break;
 800ada2:	e059      	b.n	800ae58 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ada4:	4b2f      	ldr	r3, [pc, #188]	; (800ae64 <USBD_SetConfig+0x150>)
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d112      	bne.n	800add2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2202      	movs	r2, #2
 800adb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800adb4:	4b2b      	ldr	r3, [pc, #172]	; (800ae64 <USBD_SetConfig+0x150>)
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	461a      	mov	r2, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800adbe:	4b29      	ldr	r3, [pc, #164]	; (800ae64 <USBD_SetConfig+0x150>)
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	4619      	mov	r1, r3
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f7fe ffd6 	bl	8009d76 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 fa06 	bl	800b1dc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800add0:	e042      	b.n	800ae58 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800add2:	4b24      	ldr	r3, [pc, #144]	; (800ae64 <USBD_SetConfig+0x150>)
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	461a      	mov	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	429a      	cmp	r2, r3
 800adde:	d02a      	beq.n	800ae36 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	4619      	mov	r1, r3
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f7fe ffc4 	bl	8009d76 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800adee:	4b1d      	ldr	r3, [pc, #116]	; (800ae64 <USBD_SetConfig+0x150>)
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	461a      	mov	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800adf8:	4b1a      	ldr	r3, [pc, #104]	; (800ae64 <USBD_SetConfig+0x150>)
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	4619      	mov	r1, r3
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f7fe ff9d 	bl	8009d3e <USBD_SetClassConfig>
 800ae04:	4603      	mov	r3, r0
 800ae06:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ae08:	7bfb      	ldrb	r3, [r7, #15]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d00f      	beq.n	800ae2e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ae0e:	6839      	ldr	r1, [r7, #0]
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 f918 	bl	800b046 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f7fe ffa9 	bl	8009d76 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2202      	movs	r2, #2
 800ae28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ae2c:	e014      	b.n	800ae58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 f9d4 	bl	800b1dc <USBD_CtlSendStatus>
      break;
 800ae34:	e010      	b.n	800ae58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 f9d0 	bl	800b1dc <USBD_CtlSendStatus>
      break;
 800ae3c:	e00c      	b.n	800ae58 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ae3e:	6839      	ldr	r1, [r7, #0]
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 f900 	bl	800b046 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae46:	4b07      	ldr	r3, [pc, #28]	; (800ae64 <USBD_SetConfig+0x150>)
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f7fe ff92 	bl	8009d76 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ae52:	2303      	movs	r3, #3
 800ae54:	73fb      	strb	r3, [r7, #15]
      break;
 800ae56:	bf00      	nop
  }

  return ret;
 800ae58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	bf00      	nop
 800ae64:	20000718 	.word	0x20000718

0800ae68 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	88db      	ldrh	r3, [r3, #6]
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d004      	beq.n	800ae84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ae7a:	6839      	ldr	r1, [r7, #0]
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 f8e2 	bl	800b046 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ae82:	e023      	b.n	800aecc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	2b02      	cmp	r3, #2
 800ae8e:	dc02      	bgt.n	800ae96 <USBD_GetConfig+0x2e>
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	dc03      	bgt.n	800ae9c <USBD_GetConfig+0x34>
 800ae94:	e015      	b.n	800aec2 <USBD_GetConfig+0x5a>
 800ae96:	2b03      	cmp	r3, #3
 800ae98:	d00b      	beq.n	800aeb2 <USBD_GetConfig+0x4a>
 800ae9a:	e012      	b.n	800aec2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	3308      	adds	r3, #8
 800aea6:	2201      	movs	r2, #1
 800aea8:	4619      	mov	r1, r3
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 f93c 	bl	800b128 <USBD_CtlSendData>
        break;
 800aeb0:	e00c      	b.n	800aecc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	3304      	adds	r3, #4
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	4619      	mov	r1, r3
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 f934 	bl	800b128 <USBD_CtlSendData>
        break;
 800aec0:	e004      	b.n	800aecc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800aec2:	6839      	ldr	r1, [r7, #0]
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 f8be 	bl	800b046 <USBD_CtlError>
        break;
 800aeca:	bf00      	nop
}
 800aecc:	bf00      	nop
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	3b01      	subs	r3, #1
 800aee8:	2b02      	cmp	r3, #2
 800aeea:	d81e      	bhi.n	800af2a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	88db      	ldrh	r3, [r3, #6]
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	d004      	beq.n	800aefe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800aef4:	6839      	ldr	r1, [r7, #0]
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 f8a5 	bl	800b046 <USBD_CtlError>
        break;
 800aefc:	e01a      	b.n	800af34 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2201      	movs	r2, #1
 800af02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d005      	beq.n	800af1a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	f043 0202 	orr.w	r2, r3, #2
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	330c      	adds	r3, #12
 800af1e:	2202      	movs	r2, #2
 800af20:	4619      	mov	r1, r3
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 f900 	bl	800b128 <USBD_CtlSendData>
      break;
 800af28:	e004      	b.n	800af34 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800af2a:	6839      	ldr	r1, [r7, #0]
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f000 f88a 	bl	800b046 <USBD_CtlError>
      break;
 800af32:	bf00      	nop
  }
}
 800af34:	bf00      	nop
 800af36:	3708      	adds	r7, #8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	885b      	ldrh	r3, [r3, #2]
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d107      	bne.n	800af5e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2201      	movs	r2, #1
 800af52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 f940 	bl	800b1dc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800af5c:	e013      	b.n	800af86 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	885b      	ldrh	r3, [r3, #2]
 800af62:	2b02      	cmp	r3, #2
 800af64:	d10b      	bne.n	800af7e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	889b      	ldrh	r3, [r3, #4]
 800af6a:	0a1b      	lsrs	r3, r3, #8
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	b2da      	uxtb	r2, r3
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 f930 	bl	800b1dc <USBD_CtlSendStatus>
}
 800af7c:	e003      	b.n	800af86 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800af7e:	6839      	ldr	r1, [r7, #0]
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 f860 	bl	800b046 <USBD_CtlError>
}
 800af86:	bf00      	nop
 800af88:	3708      	adds	r7, #8
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af8e:	b580      	push	{r7, lr}
 800af90:	b082      	sub	sp, #8
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
 800af96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	3b01      	subs	r3, #1
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	d80b      	bhi.n	800afbe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	885b      	ldrh	r3, [r3, #2]
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d10c      	bne.n	800afc8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2200      	movs	r2, #0
 800afb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 f910 	bl	800b1dc <USBD_CtlSendStatus>
      }
      break;
 800afbc:	e004      	b.n	800afc8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800afbe:	6839      	ldr	r1, [r7, #0]
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 f840 	bl	800b046 <USBD_CtlError>
      break;
 800afc6:	e000      	b.n	800afca <USBD_ClrFeature+0x3c>
      break;
 800afc8:	bf00      	nop
  }
}
 800afca:	bf00      	nop
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}

0800afd2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800afd2:	b580      	push	{r7, lr}
 800afd4:	b084      	sub	sp, #16
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
 800afda:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	781a      	ldrb	r2, [r3, #0]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	3301      	adds	r3, #1
 800afec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	781a      	ldrb	r2, [r3, #0]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	3301      	adds	r3, #1
 800affa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f7ff fa41 	bl	800a484 <SWAPBYTE>
 800b002:	4603      	mov	r3, r0
 800b004:	461a      	mov	r2, r3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	3301      	adds	r3, #1
 800b00e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	3301      	adds	r3, #1
 800b014:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	f7ff fa34 	bl	800a484 <SWAPBYTE>
 800b01c:	4603      	mov	r3, r0
 800b01e:	461a      	mov	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	3301      	adds	r3, #1
 800b028:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	3301      	adds	r3, #1
 800b02e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f7ff fa27 	bl	800a484 <SWAPBYTE>
 800b036:	4603      	mov	r3, r0
 800b038:	461a      	mov	r2, r3
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	80da      	strh	r2, [r3, #6]
}
 800b03e:	bf00      	nop
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b046:	b580      	push	{r7, lr}
 800b048:	b082      	sub	sp, #8
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
 800b04e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b050:	2180      	movs	r1, #128	; 0x80
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 fcea 	bl	800ba2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b058:	2100      	movs	r1, #0
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 fce6 	bl	800ba2c <USBD_LL_StallEP>
}
 800b060:	bf00      	nop
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b086      	sub	sp, #24
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b074:	2300      	movs	r3, #0
 800b076:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d036      	beq.n	800b0ec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b082:	6938      	ldr	r0, [r7, #16]
 800b084:	f000 f836 	bl	800b0f4 <USBD_GetLen>
 800b088:	4603      	mov	r3, r0
 800b08a:	3301      	adds	r3, #1
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	005b      	lsls	r3, r3, #1
 800b090:	b29a      	uxth	r2, r3
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b096:	7dfb      	ldrb	r3, [r7, #23]
 800b098:	68ba      	ldr	r2, [r7, #8]
 800b09a:	4413      	add	r3, r2
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	7812      	ldrb	r2, [r2, #0]
 800b0a0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b0a2:	7dfb      	ldrb	r3, [r7, #23]
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b0a8:	7dfb      	ldrb	r3, [r7, #23]
 800b0aa:	68ba      	ldr	r2, [r7, #8]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	2203      	movs	r2, #3
 800b0b0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b0b2:	7dfb      	ldrb	r3, [r7, #23]
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b0b8:	e013      	b.n	800b0e2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b0ba:	7dfb      	ldrb	r3, [r7, #23]
 800b0bc:	68ba      	ldr	r2, [r7, #8]
 800b0be:	4413      	add	r3, r2
 800b0c0:	693a      	ldr	r2, [r7, #16]
 800b0c2:	7812      	ldrb	r2, [r2, #0]
 800b0c4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	613b      	str	r3, [r7, #16]
    idx++;
 800b0cc:	7dfb      	ldrb	r3, [r7, #23]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b0d2:	7dfb      	ldrb	r3, [r7, #23]
 800b0d4:	68ba      	ldr	r2, [r7, #8]
 800b0d6:	4413      	add	r3, r2
 800b0d8:	2200      	movs	r2, #0
 800b0da:	701a      	strb	r2, [r3, #0]
    idx++;
 800b0dc:	7dfb      	ldrb	r3, [r7, #23]
 800b0de:	3301      	adds	r3, #1
 800b0e0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d1e7      	bne.n	800b0ba <USBD_GetString+0x52>
 800b0ea:	e000      	b.n	800b0ee <USBD_GetString+0x86>
    return;
 800b0ec:	bf00      	nop
  }
}
 800b0ee:	3718      	adds	r7, #24
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b104:	e005      	b.n	800b112 <USBD_GetLen+0x1e>
  {
    len++;
 800b106:	7bfb      	ldrb	r3, [r7, #15]
 800b108:	3301      	adds	r3, #1
 800b10a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	3301      	adds	r3, #1
 800b110:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d1f5      	bne.n	800b106 <USBD_GetLen+0x12>
  }

  return len;
 800b11a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3714      	adds	r7, #20
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr

0800b128 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2202      	movs	r2, #2
 800b138:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	68ba      	ldr	r2, [r7, #8]
 800b14c:	2100      	movs	r1, #0
 800b14e:	68f8      	ldr	r0, [r7, #12]
 800b150:	f000 fcf5 	bl	800bb3e <USBD_LL_Transmit>

  return USBD_OK;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}

0800b15e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b15e:	b580      	push	{r7, lr}
 800b160:	b084      	sub	sp, #16
 800b162:	af00      	add	r7, sp, #0
 800b164:	60f8      	str	r0, [r7, #12]
 800b166:	60b9      	str	r1, [r7, #8]
 800b168:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	68ba      	ldr	r2, [r7, #8]
 800b16e:	2100      	movs	r1, #0
 800b170:	68f8      	ldr	r0, [r7, #12]
 800b172:	f000 fce4 	bl	800bb3e <USBD_LL_Transmit>

  return USBD_OK;
 800b176:	2300      	movs	r3, #0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3710      	adds	r7, #16
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2203      	movs	r2, #3
 800b190:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	68ba      	ldr	r2, [r7, #8]
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f000 fce8 	bl	800bb80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1b0:	2300      	movs	r3, #0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b1ba:	b580      	push	{r7, lr}
 800b1bc:	b084      	sub	sp, #16
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	60f8      	str	r0, [r7, #12]
 800b1c2:	60b9      	str	r1, [r7, #8]
 800b1c4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	68ba      	ldr	r2, [r7, #8]
 800b1ca:	2100      	movs	r1, #0
 800b1cc:	68f8      	ldr	r0, [r7, #12]
 800b1ce:	f000 fcd7 	bl	800bb80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1d2:	2300      	movs	r3, #0
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3710      	adds	r7, #16
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2204      	movs	r2, #4
 800b1e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	2100      	movs	r1, #0
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 fca3 	bl	800bb3e <USBD_LL_Transmit>

  return USBD_OK;
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b082      	sub	sp, #8
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2205      	movs	r2, #5
 800b20e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b212:	2300      	movs	r3, #0
 800b214:	2200      	movs	r2, #0
 800b216:	2100      	movs	r1, #0
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 fcb1 	bl	800bb80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b21e:	2300      	movs	r3, #0
}
 800b220:	4618      	mov	r0, r3
 800b222:	3708      	adds	r7, #8
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b22c:	2200      	movs	r2, #0
 800b22e:	4912      	ldr	r1, [pc, #72]	; (800b278 <MX_USB_DEVICE_Init+0x50>)
 800b230:	4812      	ldr	r0, [pc, #72]	; (800b27c <MX_USB_DEVICE_Init+0x54>)
 800b232:	f7fe fd07 	bl	8009c44 <USBD_Init>
 800b236:	4603      	mov	r3, r0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d001      	beq.n	800b240 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b23c:	f7f6 faca 	bl	80017d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b240:	490f      	ldr	r1, [pc, #60]	; (800b280 <MX_USB_DEVICE_Init+0x58>)
 800b242:	480e      	ldr	r0, [pc, #56]	; (800b27c <MX_USB_DEVICE_Init+0x54>)
 800b244:	f7fe fd2e 	bl	8009ca4 <USBD_RegisterClass>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d001      	beq.n	800b252 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b24e:	f7f6 fac1 	bl	80017d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b252:	490c      	ldr	r1, [pc, #48]	; (800b284 <MX_USB_DEVICE_Init+0x5c>)
 800b254:	4809      	ldr	r0, [pc, #36]	; (800b27c <MX_USB_DEVICE_Init+0x54>)
 800b256:	f7fe fc1f 	bl	8009a98 <USBD_CDC_RegisterInterface>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d001      	beq.n	800b264 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b260:	f7f6 fab8 	bl	80017d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b264:	4805      	ldr	r0, [pc, #20]	; (800b27c <MX_USB_DEVICE_Init+0x54>)
 800b266:	f7fe fd53 	bl	8009d10 <USBD_Start>
 800b26a:	4603      	mov	r3, r0
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d001      	beq.n	800b274 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b270:	f7f6 fab0 	bl	80017d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b274:	bf00      	nop
 800b276:	bd80      	pop	{r7, pc}
 800b278:	200000ac 	.word	0x200000ac
 800b27c:	2000071c 	.word	0x2000071c
 800b280:	20000018 	.word	0x20000018
 800b284:	20000098 	.word	0x20000098

0800b288 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b28c:	2200      	movs	r2, #0
 800b28e:	4905      	ldr	r1, [pc, #20]	; (800b2a4 <CDC_Init_FS+0x1c>)
 800b290:	4805      	ldr	r0, [pc, #20]	; (800b2a8 <CDC_Init_FS+0x20>)
 800b292:	f7fe fc1b 	bl	8009acc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b296:	4905      	ldr	r1, [pc, #20]	; (800b2ac <CDC_Init_FS+0x24>)
 800b298:	4803      	ldr	r0, [pc, #12]	; (800b2a8 <CDC_Init_FS+0x20>)
 800b29a:	f7fe fc39 	bl	8009b10 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b29e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	bd80      	pop	{r7, pc}
 800b2a4:	200011f8 	.word	0x200011f8
 800b2a8:	2000071c 	.word	0x2000071c
 800b2ac:	200009f8 	.word	0x200009f8

0800b2b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b2b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	6039      	str	r1, [r7, #0]
 800b2ca:	71fb      	strb	r3, [r7, #7]
 800b2cc:	4613      	mov	r3, r2
 800b2ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b2d0:	79fb      	ldrb	r3, [r7, #7]
 800b2d2:	2b23      	cmp	r3, #35	; 0x23
 800b2d4:	d84a      	bhi.n	800b36c <CDC_Control_FS+0xac>
 800b2d6:	a201      	add	r2, pc, #4	; (adr r2, 800b2dc <CDC_Control_FS+0x1c>)
 800b2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2dc:	0800b36d 	.word	0x0800b36d
 800b2e0:	0800b36d 	.word	0x0800b36d
 800b2e4:	0800b36d 	.word	0x0800b36d
 800b2e8:	0800b36d 	.word	0x0800b36d
 800b2ec:	0800b36d 	.word	0x0800b36d
 800b2f0:	0800b36d 	.word	0x0800b36d
 800b2f4:	0800b36d 	.word	0x0800b36d
 800b2f8:	0800b36d 	.word	0x0800b36d
 800b2fc:	0800b36d 	.word	0x0800b36d
 800b300:	0800b36d 	.word	0x0800b36d
 800b304:	0800b36d 	.word	0x0800b36d
 800b308:	0800b36d 	.word	0x0800b36d
 800b30c:	0800b36d 	.word	0x0800b36d
 800b310:	0800b36d 	.word	0x0800b36d
 800b314:	0800b36d 	.word	0x0800b36d
 800b318:	0800b36d 	.word	0x0800b36d
 800b31c:	0800b36d 	.word	0x0800b36d
 800b320:	0800b36d 	.word	0x0800b36d
 800b324:	0800b36d 	.word	0x0800b36d
 800b328:	0800b36d 	.word	0x0800b36d
 800b32c:	0800b36d 	.word	0x0800b36d
 800b330:	0800b36d 	.word	0x0800b36d
 800b334:	0800b36d 	.word	0x0800b36d
 800b338:	0800b36d 	.word	0x0800b36d
 800b33c:	0800b36d 	.word	0x0800b36d
 800b340:	0800b36d 	.word	0x0800b36d
 800b344:	0800b36d 	.word	0x0800b36d
 800b348:	0800b36d 	.word	0x0800b36d
 800b34c:	0800b36d 	.word	0x0800b36d
 800b350:	0800b36d 	.word	0x0800b36d
 800b354:	0800b36d 	.word	0x0800b36d
 800b358:	0800b36d 	.word	0x0800b36d
 800b35c:	0800b36d 	.word	0x0800b36d
 800b360:	0800b36d 	.word	0x0800b36d
 800b364:	0800b36d 	.word	0x0800b36d
 800b368:	0800b36d 	.word	0x0800b36d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b36c:	bf00      	nop
  }

  return (USBD_OK);
 800b36e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b370:	4618      	mov	r0, r3
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b386:	6879      	ldr	r1, [r7, #4]
 800b388:	4809      	ldr	r0, [pc, #36]	; (800b3b0 <CDC_Receive_FS+0x34>)
 800b38a:	f7fe fbc1 	bl	8009b10 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b38e:	4808      	ldr	r0, [pc, #32]	; (800b3b0 <CDC_Receive_FS+0x34>)
 800b390:	f7fe fc22 	bl	8009bd8 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t)*Len;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	73fb      	strb	r3, [r7, #15]
  memcpy(usbd_buf_recv, Buf, len);
 800b39a:	7bfb      	ldrb	r3, [r7, #15]
 800b39c:	461a      	mov	r2, r3
 800b39e:	6879      	ldr	r1, [r7, #4]
 800b3a0:	4804      	ldr	r0, [pc, #16]	; (800b3b4 <CDC_Receive_FS+0x38>)
 800b3a2:	f000 fc93 	bl	800bccc <memcpy>
  return (USBD_OK);
 800b3a6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3710      	adds	r7, #16
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	2000071c 	.word	0x2000071c
 800b3b4:	20000330 	.word	0x20000330

0800b3b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b3c8:	4b0d      	ldr	r3, [pc, #52]	; (800b400 <CDC_Transmit_FS+0x48>)
 800b3ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d001      	beq.n	800b3de <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	e00b      	b.n	800b3f6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b3de:	887b      	ldrh	r3, [r7, #2]
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	6879      	ldr	r1, [r7, #4]
 800b3e4:	4806      	ldr	r0, [pc, #24]	; (800b400 <CDC_Transmit_FS+0x48>)
 800b3e6:	f7fe fb71 	bl	8009acc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b3ea:	4805      	ldr	r0, [pc, #20]	; (800b400 <CDC_Transmit_FS+0x48>)
 800b3ec:	f7fe fbae 	bl	8009b4c <USBD_CDC_TransmitPacket>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b3f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3710      	adds	r7, #16
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	2000071c 	.word	0x2000071c

0800b404 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b404:	b480      	push	{r7}
 800b406:	b087      	sub	sp, #28
 800b408:	af00      	add	r7, sp, #0
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	60b9      	str	r1, [r7, #8]
 800b40e:	4613      	mov	r3, r2
 800b410:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b412:	2300      	movs	r3, #0
 800b414:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b416:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	371c      	adds	r7, #28
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr
	...

0800b428 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	4603      	mov	r3, r0
 800b430:	6039      	str	r1, [r7, #0]
 800b432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	2212      	movs	r2, #18
 800b438:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b43a:	4b03      	ldr	r3, [pc, #12]	; (800b448 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr
 800b448:	200000c8 	.word	0x200000c8

0800b44c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
 800b452:	4603      	mov	r3, r0
 800b454:	6039      	str	r1, [r7, #0]
 800b456:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	2204      	movs	r2, #4
 800b45c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b45e:	4b03      	ldr	r3, [pc, #12]	; (800b46c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b460:	4618      	mov	r0, r3
 800b462:	370c      	adds	r7, #12
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr
 800b46c:	200000dc 	.word	0x200000dc

0800b470 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
 800b476:	4603      	mov	r3, r0
 800b478:	6039      	str	r1, [r7, #0]
 800b47a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b47c:	79fb      	ldrb	r3, [r7, #7]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d105      	bne.n	800b48e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b482:	683a      	ldr	r2, [r7, #0]
 800b484:	4907      	ldr	r1, [pc, #28]	; (800b4a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b486:	4808      	ldr	r0, [pc, #32]	; (800b4a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b488:	f7ff fdee 	bl	800b068 <USBD_GetString>
 800b48c:	e004      	b.n	800b498 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b48e:	683a      	ldr	r2, [r7, #0]
 800b490:	4904      	ldr	r1, [pc, #16]	; (800b4a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b492:	4805      	ldr	r0, [pc, #20]	; (800b4a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b494:	f7ff fde8 	bl	800b068 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b498:	4b02      	ldr	r3, [pc, #8]	; (800b4a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3708      	adds	r7, #8
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	200019f8 	.word	0x200019f8
 800b4a8:	0800ebdc 	.word	0x0800ebdc

0800b4ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	6039      	str	r1, [r7, #0]
 800b4b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b4b8:	683a      	ldr	r2, [r7, #0]
 800b4ba:	4904      	ldr	r1, [pc, #16]	; (800b4cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b4bc:	4804      	ldr	r0, [pc, #16]	; (800b4d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b4be:	f7ff fdd3 	bl	800b068 <USBD_GetString>
  return USBD_StrDesc;
 800b4c2:	4b02      	ldr	r3, [pc, #8]	; (800b4cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3708      	adds	r7, #8
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	200019f8 	.word	0x200019f8
 800b4d0:	0800ebec 	.word	0x0800ebec

0800b4d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b082      	sub	sp, #8
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	4603      	mov	r3, r0
 800b4dc:	6039      	str	r1, [r7, #0]
 800b4de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	221a      	movs	r2, #26
 800b4e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b4e6:	f000 f843 	bl	800b570 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b4ea:	4b02      	ldr	r3, [pc, #8]	; (800b4f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3708      	adds	r7, #8
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	200000e0 	.word	0x200000e0

0800b4f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	4603      	mov	r3, r0
 800b500:	6039      	str	r1, [r7, #0]
 800b502:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b504:	79fb      	ldrb	r3, [r7, #7]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d105      	bne.n	800b516 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b50a:	683a      	ldr	r2, [r7, #0]
 800b50c:	4907      	ldr	r1, [pc, #28]	; (800b52c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b50e:	4808      	ldr	r0, [pc, #32]	; (800b530 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b510:	f7ff fdaa 	bl	800b068 <USBD_GetString>
 800b514:	e004      	b.n	800b520 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b516:	683a      	ldr	r2, [r7, #0]
 800b518:	4904      	ldr	r1, [pc, #16]	; (800b52c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b51a:	4805      	ldr	r0, [pc, #20]	; (800b530 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b51c:	f7ff fda4 	bl	800b068 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b520:	4b02      	ldr	r3, [pc, #8]	; (800b52c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b522:	4618      	mov	r0, r3
 800b524:	3708      	adds	r7, #8
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	200019f8 	.word	0x200019f8
 800b530:	0800ec00 	.word	0x0800ec00

0800b534 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	4603      	mov	r3, r0
 800b53c:	6039      	str	r1, [r7, #0]
 800b53e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b540:	79fb      	ldrb	r3, [r7, #7]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d105      	bne.n	800b552 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b546:	683a      	ldr	r2, [r7, #0]
 800b548:	4907      	ldr	r1, [pc, #28]	; (800b568 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b54a:	4808      	ldr	r0, [pc, #32]	; (800b56c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b54c:	f7ff fd8c 	bl	800b068 <USBD_GetString>
 800b550:	e004      	b.n	800b55c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b552:	683a      	ldr	r2, [r7, #0]
 800b554:	4904      	ldr	r1, [pc, #16]	; (800b568 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b556:	4805      	ldr	r0, [pc, #20]	; (800b56c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b558:	f7ff fd86 	bl	800b068 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b55c:	4b02      	ldr	r3, [pc, #8]	; (800b568 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3708      	adds	r7, #8
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	200019f8 	.word	0x200019f8
 800b56c:	0800ec0c 	.word	0x0800ec0c

0800b570 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b576:	4b0f      	ldr	r3, [pc, #60]	; (800b5b4 <Get_SerialNum+0x44>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b57c:	4b0e      	ldr	r3, [pc, #56]	; (800b5b8 <Get_SerialNum+0x48>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b582:	4b0e      	ldr	r3, [pc, #56]	; (800b5bc <Get_SerialNum+0x4c>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b588:	68fa      	ldr	r2, [r7, #12]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	4413      	add	r3, r2
 800b58e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d009      	beq.n	800b5aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b596:	2208      	movs	r2, #8
 800b598:	4909      	ldr	r1, [pc, #36]	; (800b5c0 <Get_SerialNum+0x50>)
 800b59a:	68f8      	ldr	r0, [r7, #12]
 800b59c:	f000 f814 	bl	800b5c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b5a0:	2204      	movs	r2, #4
 800b5a2:	4908      	ldr	r1, [pc, #32]	; (800b5c4 <Get_SerialNum+0x54>)
 800b5a4:	68b8      	ldr	r0, [r7, #8]
 800b5a6:	f000 f80f 	bl	800b5c8 <IntToUnicode>
  }
}
 800b5aa:	bf00      	nop
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	1fff7a10 	.word	0x1fff7a10
 800b5b8:	1fff7a14 	.word	0x1fff7a14
 800b5bc:	1fff7a18 	.word	0x1fff7a18
 800b5c0:	200000e2 	.word	0x200000e2
 800b5c4:	200000f2 	.word	0x200000f2

0800b5c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b087      	sub	sp, #28
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	4613      	mov	r3, r2
 800b5d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b5da:	2300      	movs	r3, #0
 800b5dc:	75fb      	strb	r3, [r7, #23]
 800b5de:	e027      	b.n	800b630 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	0f1b      	lsrs	r3, r3, #28
 800b5e4:	2b09      	cmp	r3, #9
 800b5e6:	d80b      	bhi.n	800b600 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	0f1b      	lsrs	r3, r3, #28
 800b5ec:	b2da      	uxtb	r2, r3
 800b5ee:	7dfb      	ldrb	r3, [r7, #23]
 800b5f0:	005b      	lsls	r3, r3, #1
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	440b      	add	r3, r1
 800b5f8:	3230      	adds	r2, #48	; 0x30
 800b5fa:	b2d2      	uxtb	r2, r2
 800b5fc:	701a      	strb	r2, [r3, #0]
 800b5fe:	e00a      	b.n	800b616 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	0f1b      	lsrs	r3, r3, #28
 800b604:	b2da      	uxtb	r2, r3
 800b606:	7dfb      	ldrb	r3, [r7, #23]
 800b608:	005b      	lsls	r3, r3, #1
 800b60a:	4619      	mov	r1, r3
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	440b      	add	r3, r1
 800b610:	3237      	adds	r2, #55	; 0x37
 800b612:	b2d2      	uxtb	r2, r2
 800b614:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	011b      	lsls	r3, r3, #4
 800b61a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b61c:	7dfb      	ldrb	r3, [r7, #23]
 800b61e:	005b      	lsls	r3, r3, #1
 800b620:	3301      	adds	r3, #1
 800b622:	68ba      	ldr	r2, [r7, #8]
 800b624:	4413      	add	r3, r2
 800b626:	2200      	movs	r2, #0
 800b628:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b62a:	7dfb      	ldrb	r3, [r7, #23]
 800b62c:	3301      	adds	r3, #1
 800b62e:	75fb      	strb	r3, [r7, #23]
 800b630:	7dfa      	ldrb	r2, [r7, #23]
 800b632:	79fb      	ldrb	r3, [r7, #7]
 800b634:	429a      	cmp	r2, r3
 800b636:	d3d3      	bcc.n	800b5e0 <IntToUnicode+0x18>
  }
}
 800b638:	bf00      	nop
 800b63a:	bf00      	nop
 800b63c:	371c      	adds	r7, #28
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
	...

0800b648 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b08a      	sub	sp, #40	; 0x28
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b650:	f107 0314 	add.w	r3, r7, #20
 800b654:	2200      	movs	r2, #0
 800b656:	601a      	str	r2, [r3, #0]
 800b658:	605a      	str	r2, [r3, #4]
 800b65a:	609a      	str	r2, [r3, #8]
 800b65c:	60da      	str	r2, [r3, #12]
 800b65e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b668:	d13a      	bne.n	800b6e0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b66a:	2300      	movs	r3, #0
 800b66c:	613b      	str	r3, [r7, #16]
 800b66e:	4b1e      	ldr	r3, [pc, #120]	; (800b6e8 <HAL_PCD_MspInit+0xa0>)
 800b670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b672:	4a1d      	ldr	r2, [pc, #116]	; (800b6e8 <HAL_PCD_MspInit+0xa0>)
 800b674:	f043 0301 	orr.w	r3, r3, #1
 800b678:	6313      	str	r3, [r2, #48]	; 0x30
 800b67a:	4b1b      	ldr	r3, [pc, #108]	; (800b6e8 <HAL_PCD_MspInit+0xa0>)
 800b67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b67e:	f003 0301 	and.w	r3, r3, #1
 800b682:	613b      	str	r3, [r7, #16]
 800b684:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b686:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b68a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b68c:	2302      	movs	r3, #2
 800b68e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b690:	2300      	movs	r3, #0
 800b692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b694:	2303      	movs	r3, #3
 800b696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b698:	230a      	movs	r3, #10
 800b69a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b69c:	f107 0314 	add.w	r3, r7, #20
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	4812      	ldr	r0, [pc, #72]	; (800b6ec <HAL_PCD_MspInit+0xa4>)
 800b6a4:	f7f8 fa78 	bl	8003b98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b6a8:	4b0f      	ldr	r3, [pc, #60]	; (800b6e8 <HAL_PCD_MspInit+0xa0>)
 800b6aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6ac:	4a0e      	ldr	r2, [pc, #56]	; (800b6e8 <HAL_PCD_MspInit+0xa0>)
 800b6ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6b2:	6353      	str	r3, [r2, #52]	; 0x34
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	60fb      	str	r3, [r7, #12]
 800b6b8:	4b0b      	ldr	r3, [pc, #44]	; (800b6e8 <HAL_PCD_MspInit+0xa0>)
 800b6ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6bc:	4a0a      	ldr	r2, [pc, #40]	; (800b6e8 <HAL_PCD_MspInit+0xa0>)
 800b6be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b6c2:	6453      	str	r3, [r2, #68]	; 0x44
 800b6c4:	4b08      	ldr	r3, [pc, #32]	; (800b6e8 <HAL_PCD_MspInit+0xa0>)
 800b6c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6cc:	60fb      	str	r3, [r7, #12]
 800b6ce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	2043      	movs	r0, #67	; 0x43
 800b6d6:	f7f7 feb8 	bl	800344a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b6da:	2043      	movs	r0, #67	; 0x43
 800b6dc:	f7f7 fed1 	bl	8003482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b6e0:	bf00      	nop
 800b6e2:	3728      	adds	r7, #40	; 0x28
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	40023800 	.word	0x40023800
 800b6ec:	40020000 	.word	0x40020000

0800b6f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b704:	4619      	mov	r1, r3
 800b706:	4610      	mov	r0, r2
 800b708:	f7fe fb4f 	bl	8009daa <USBD_LL_SetupStage>
}
 800b70c:	bf00      	nop
 800b70e:	3708      	adds	r7, #8
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	460b      	mov	r3, r1
 800b71e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b726:	78fa      	ldrb	r2, [r7, #3]
 800b728:	6879      	ldr	r1, [r7, #4]
 800b72a:	4613      	mov	r3, r2
 800b72c:	00db      	lsls	r3, r3, #3
 800b72e:	4413      	add	r3, r2
 800b730:	009b      	lsls	r3, r3, #2
 800b732:	440b      	add	r3, r1
 800b734:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	78fb      	ldrb	r3, [r7, #3]
 800b73c:	4619      	mov	r1, r3
 800b73e:	f7fe fb89 	bl	8009e54 <USBD_LL_DataOutStage>
}
 800b742:	bf00      	nop
 800b744:	3708      	adds	r7, #8
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}

0800b74a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b74a:	b580      	push	{r7, lr}
 800b74c:	b082      	sub	sp, #8
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
 800b752:	460b      	mov	r3, r1
 800b754:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b75c:	78fa      	ldrb	r2, [r7, #3]
 800b75e:	6879      	ldr	r1, [r7, #4]
 800b760:	4613      	mov	r3, r2
 800b762:	00db      	lsls	r3, r3, #3
 800b764:	4413      	add	r3, r2
 800b766:	009b      	lsls	r3, r3, #2
 800b768:	440b      	add	r3, r1
 800b76a:	334c      	adds	r3, #76	; 0x4c
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	78fb      	ldrb	r3, [r7, #3]
 800b770:	4619      	mov	r1, r3
 800b772:	f7fe fc22 	bl	8009fba <USBD_LL_DataInStage>
}
 800b776:	bf00      	nop
 800b778:	3708      	adds	r7, #8
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b77e:	b580      	push	{r7, lr}
 800b780:	b082      	sub	sp, #8
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b78c:	4618      	mov	r0, r3
 800b78e:	f7fe fd56 	bl	800a23e <USBD_LL_SOF>
}
 800b792:	bf00      	nop
 800b794:	3708      	adds	r7, #8
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b084      	sub	sp, #16
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	68db      	ldr	r3, [r3, #12]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d102      	bne.n	800b7b4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	73fb      	strb	r3, [r7, #15]
 800b7b2:	e008      	b.n	800b7c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	68db      	ldr	r3, [r3, #12]
 800b7b8:	2b02      	cmp	r3, #2
 800b7ba:	d102      	bne.n	800b7c2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	73fb      	strb	r3, [r7, #15]
 800b7c0:	e001      	b.n	800b7c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b7c2:	f7f6 f807 	bl	80017d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7cc:	7bfa      	ldrb	r2, [r7, #15]
 800b7ce:	4611      	mov	r1, r2
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7fe fcf6 	bl	800a1c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7fe fc9e 	bl	800a11e <USBD_LL_Reset>
}
 800b7e2:	bf00      	nop
 800b7e4:	3710      	adds	r7, #16
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
	...

0800b7ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7fe fcf1 	bl	800a1e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	6812      	ldr	r2, [r2, #0]
 800b80e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b812:	f043 0301 	orr.w	r3, r3, #1
 800b816:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6a1b      	ldr	r3, [r3, #32]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d005      	beq.n	800b82c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b820:	4b04      	ldr	r3, [pc, #16]	; (800b834 <HAL_PCD_SuspendCallback+0x48>)
 800b822:	691b      	ldr	r3, [r3, #16]
 800b824:	4a03      	ldr	r2, [pc, #12]	; (800b834 <HAL_PCD_SuspendCallback+0x48>)
 800b826:	f043 0306 	orr.w	r3, r3, #6
 800b82a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b82c:	bf00      	nop
 800b82e:	3708      	adds	r7, #8
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}
 800b834:	e000ed00 	.word	0xe000ed00

0800b838 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b846:	4618      	mov	r0, r3
 800b848:	f7fe fce1 	bl	800a20e <USBD_LL_Resume>
}
 800b84c:	bf00      	nop
 800b84e:	3708      	adds	r7, #8
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	460b      	mov	r3, r1
 800b85e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b866:	78fa      	ldrb	r2, [r7, #3]
 800b868:	4611      	mov	r1, r2
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7fe fd39 	bl	800a2e2 <USBD_LL_IsoOUTIncomplete>
}
 800b870:	bf00      	nop
 800b872:	3708      	adds	r7, #8
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	460b      	mov	r3, r1
 800b882:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b88a:	78fa      	ldrb	r2, [r7, #3]
 800b88c:	4611      	mov	r1, r2
 800b88e:	4618      	mov	r0, r3
 800b890:	f7fe fcf5 	bl	800a27e <USBD_LL_IsoINIncomplete>
}
 800b894:	bf00      	nop
 800b896:	3708      	adds	r7, #8
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b082      	sub	sp, #8
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7fe fd4b 	bl	800a346 <USBD_LL_DevConnected>
}
 800b8b0:	bf00      	nop
 800b8b2:	3708      	adds	r7, #8
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7fe fd48 	bl	800a35c <USBD_LL_DevDisconnected>
}
 800b8cc:	bf00      	nop
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d13c      	bne.n	800b95e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b8e4:	4a20      	ldr	r2, [pc, #128]	; (800b968 <USBD_LL_Init+0x94>)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	4a1e      	ldr	r2, [pc, #120]	; (800b968 <USBD_LL_Init+0x94>)
 800b8f0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b8f4:	4b1c      	ldr	r3, [pc, #112]	; (800b968 <USBD_LL_Init+0x94>)
 800b8f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b8fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b8fc:	4b1a      	ldr	r3, [pc, #104]	; (800b968 <USBD_LL_Init+0x94>)
 800b8fe:	2204      	movs	r2, #4
 800b900:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b902:	4b19      	ldr	r3, [pc, #100]	; (800b968 <USBD_LL_Init+0x94>)
 800b904:	2202      	movs	r2, #2
 800b906:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b908:	4b17      	ldr	r3, [pc, #92]	; (800b968 <USBD_LL_Init+0x94>)
 800b90a:	2200      	movs	r2, #0
 800b90c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b90e:	4b16      	ldr	r3, [pc, #88]	; (800b968 <USBD_LL_Init+0x94>)
 800b910:	2202      	movs	r2, #2
 800b912:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b914:	4b14      	ldr	r3, [pc, #80]	; (800b968 <USBD_LL_Init+0x94>)
 800b916:	2200      	movs	r2, #0
 800b918:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b91a:	4b13      	ldr	r3, [pc, #76]	; (800b968 <USBD_LL_Init+0x94>)
 800b91c:	2200      	movs	r2, #0
 800b91e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b920:	4b11      	ldr	r3, [pc, #68]	; (800b968 <USBD_LL_Init+0x94>)
 800b922:	2200      	movs	r2, #0
 800b924:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b926:	4b10      	ldr	r3, [pc, #64]	; (800b968 <USBD_LL_Init+0x94>)
 800b928:	2200      	movs	r2, #0
 800b92a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b92c:	4b0e      	ldr	r3, [pc, #56]	; (800b968 <USBD_LL_Init+0x94>)
 800b92e:	2200      	movs	r2, #0
 800b930:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b932:	480d      	ldr	r0, [pc, #52]	; (800b968 <USBD_LL_Init+0x94>)
 800b934:	f7f8 facd 	bl	8003ed2 <HAL_PCD_Init>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d001      	beq.n	800b942 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b93e:	f7f5 ff49 	bl	80017d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b942:	2180      	movs	r1, #128	; 0x80
 800b944:	4808      	ldr	r0, [pc, #32]	; (800b968 <USBD_LL_Init+0x94>)
 800b946:	f7f9 fd24 	bl	8005392 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b94a:	2240      	movs	r2, #64	; 0x40
 800b94c:	2100      	movs	r1, #0
 800b94e:	4806      	ldr	r0, [pc, #24]	; (800b968 <USBD_LL_Init+0x94>)
 800b950:	f7f9 fcd8 	bl	8005304 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b954:	2280      	movs	r2, #128	; 0x80
 800b956:	2101      	movs	r1, #1
 800b958:	4803      	ldr	r0, [pc, #12]	; (800b968 <USBD_LL_Init+0x94>)
 800b95a:	f7f9 fcd3 	bl	8005304 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3708      	adds	r7, #8
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	20001bf8 	.word	0x20001bf8

0800b96c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b974:	2300      	movs	r3, #0
 800b976:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b978:	2300      	movs	r3, #0
 800b97a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b982:	4618      	mov	r0, r3
 800b984:	f7f8 fbc2 	bl	800410c <HAL_PCD_Start>
 800b988:	4603      	mov	r3, r0
 800b98a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b98c:	7bfb      	ldrb	r3, [r7, #15]
 800b98e:	4618      	mov	r0, r3
 800b990:	f000 f942 	bl	800bc18 <USBD_Get_USB_Status>
 800b994:	4603      	mov	r3, r0
 800b996:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b998:	7bbb      	ldrb	r3, [r7, #14]
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}

0800b9a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b084      	sub	sp, #16
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
 800b9aa:	4608      	mov	r0, r1
 800b9ac:	4611      	mov	r1, r2
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	70fb      	strb	r3, [r7, #3]
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	70bb      	strb	r3, [r7, #2]
 800b9b8:	4613      	mov	r3, r2
 800b9ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b9ca:	78bb      	ldrb	r3, [r7, #2]
 800b9cc:	883a      	ldrh	r2, [r7, #0]
 800b9ce:	78f9      	ldrb	r1, [r7, #3]
 800b9d0:	f7f9 f893 	bl	8004afa <HAL_PCD_EP_Open>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9d8:	7bfb      	ldrb	r3, [r7, #15]
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f000 f91c 	bl	800bc18 <USBD_Get_USB_Status>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3710      	adds	r7, #16
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b084      	sub	sp, #16
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba08:	78fa      	ldrb	r2, [r7, #3]
 800ba0a:	4611      	mov	r1, r2
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7f9 f8dc 	bl	8004bca <HAL_PCD_EP_Close>
 800ba12:	4603      	mov	r3, r0
 800ba14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba16:	7bfb      	ldrb	r3, [r7, #15]
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f000 f8fd 	bl	800bc18 <USBD_Get_USB_Status>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba22:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3710      	adds	r7, #16
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	460b      	mov	r3, r1
 800ba36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba46:	78fa      	ldrb	r2, [r7, #3]
 800ba48:	4611      	mov	r1, r2
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7f9 f9b4 	bl	8004db8 <HAL_PCD_EP_SetStall>
 800ba50:	4603      	mov	r3, r0
 800ba52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba54:	7bfb      	ldrb	r3, [r7, #15]
 800ba56:	4618      	mov	r0, r3
 800ba58:	f000 f8de 	bl	800bc18 <USBD_Get_USB_Status>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba60:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3710      	adds	r7, #16
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b084      	sub	sp, #16
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
 800ba72:	460b      	mov	r3, r1
 800ba74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba76:	2300      	movs	r3, #0
 800ba78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba84:	78fa      	ldrb	r2, [r7, #3]
 800ba86:	4611      	mov	r1, r2
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7f9 f9f9 	bl	8004e80 <HAL_PCD_EP_ClrStall>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba92:	7bfb      	ldrb	r3, [r7, #15]
 800ba94:	4618      	mov	r0, r3
 800ba96:	f000 f8bf 	bl	800bc18 <USBD_Get_USB_Status>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b085      	sub	sp, #20
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	460b      	mov	r3, r1
 800bab2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800baba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800babc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	da0b      	bge.n	800badc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bac4:	78fb      	ldrb	r3, [r7, #3]
 800bac6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800baca:	68f9      	ldr	r1, [r7, #12]
 800bacc:	4613      	mov	r3, r2
 800bace:	00db      	lsls	r3, r3, #3
 800bad0:	4413      	add	r3, r2
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	440b      	add	r3, r1
 800bad6:	333e      	adds	r3, #62	; 0x3e
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	e00b      	b.n	800baf4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800badc:	78fb      	ldrb	r3, [r7, #3]
 800bade:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bae2:	68f9      	ldr	r1, [r7, #12]
 800bae4:	4613      	mov	r3, r2
 800bae6:	00db      	lsls	r3, r3, #3
 800bae8:	4413      	add	r3, r2
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	440b      	add	r3, r1
 800baee:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800baf2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3714      	adds	r7, #20
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr

0800bb00 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	460b      	mov	r3, r1
 800bb0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb10:	2300      	movs	r3, #0
 800bb12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb1a:	78fa      	ldrb	r2, [r7, #3]
 800bb1c:	4611      	mov	r1, r2
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7f8 ffc6 	bl	8004ab0 <HAL_PCD_SetAddress>
 800bb24:	4603      	mov	r3, r0
 800bb26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb28:	7bfb      	ldrb	r3, [r7, #15]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f000 f874 	bl	800bc18 <USBD_Get_USB_Status>
 800bb30:	4603      	mov	r3, r0
 800bb32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb34:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b086      	sub	sp, #24
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	60f8      	str	r0, [r7, #12]
 800bb46:	607a      	str	r2, [r7, #4]
 800bb48:	603b      	str	r3, [r7, #0]
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb52:	2300      	movs	r3, #0
 800bb54:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb5c:	7af9      	ldrb	r1, [r7, #11]
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	f7f9 f8df 	bl	8004d24 <HAL_PCD_EP_Transmit>
 800bb66:	4603      	mov	r3, r0
 800bb68:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb6a:	7dfb      	ldrb	r3, [r7, #23]
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f000 f853 	bl	800bc18 <USBD_Get_USB_Status>
 800bb72:	4603      	mov	r3, r0
 800bb74:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb76:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3718      	adds	r7, #24
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b086      	sub	sp, #24
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	607a      	str	r2, [r7, #4]
 800bb8a:	603b      	str	r3, [r7, #0]
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb90:	2300      	movs	r3, #0
 800bb92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb94:	2300      	movs	r3, #0
 800bb96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb9e:	7af9      	ldrb	r1, [r7, #11]
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	f7f9 f85b 	bl	8004c5e <HAL_PCD_EP_Receive>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbac:	7dfb      	ldrb	r3, [r7, #23]
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f000 f832 	bl	800bc18 <USBD_Get_USB_Status>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bbb8:	7dbb      	ldrb	r3, [r7, #22]
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3718      	adds	r7, #24
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}

0800bbc2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbc2:	b580      	push	{r7, lr}
 800bbc4:	b082      	sub	sp, #8
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]
 800bbca:	460b      	mov	r3, r1
 800bbcc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bbd4:	78fa      	ldrb	r2, [r7, #3]
 800bbd6:	4611      	mov	r1, r2
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7f9 f88b 	bl	8004cf4 <HAL_PCD_EP_GetRxCount>
 800bbde:	4603      	mov	r3, r0
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3708      	adds	r7, #8
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bbf0:	4b03      	ldr	r3, [pc, #12]	; (800bc00 <USBD_static_malloc+0x18>)
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	370c      	adds	r7, #12
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr
 800bbfe:	bf00      	nop
 800bc00:	20002104 	.word	0x20002104

0800bc04 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]

}
 800bc0c:	bf00      	nop
 800bc0e:	370c      	adds	r7, #12
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr

0800bc18 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	4603      	mov	r3, r0
 800bc20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc22:	2300      	movs	r3, #0
 800bc24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc26:	79fb      	ldrb	r3, [r7, #7]
 800bc28:	2b03      	cmp	r3, #3
 800bc2a:	d817      	bhi.n	800bc5c <USBD_Get_USB_Status+0x44>
 800bc2c:	a201      	add	r2, pc, #4	; (adr r2, 800bc34 <USBD_Get_USB_Status+0x1c>)
 800bc2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc32:	bf00      	nop
 800bc34:	0800bc45 	.word	0x0800bc45
 800bc38:	0800bc4b 	.word	0x0800bc4b
 800bc3c:	0800bc51 	.word	0x0800bc51
 800bc40:	0800bc57 	.word	0x0800bc57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bc44:	2300      	movs	r3, #0
 800bc46:	73fb      	strb	r3, [r7, #15]
    break;
 800bc48:	e00b      	b.n	800bc62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc4a:	2303      	movs	r3, #3
 800bc4c:	73fb      	strb	r3, [r7, #15]
    break;
 800bc4e:	e008      	b.n	800bc62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc50:	2301      	movs	r3, #1
 800bc52:	73fb      	strb	r3, [r7, #15]
    break;
 800bc54:	e005      	b.n	800bc62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc56:	2303      	movs	r3, #3
 800bc58:	73fb      	strb	r3, [r7, #15]
    break;
 800bc5a:	e002      	b.n	800bc62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc60:	bf00      	nop
  }
  return usb_status;
 800bc62:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3714      	adds	r7, #20
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <atoi>:
 800bc70:	220a      	movs	r2, #10
 800bc72:	2100      	movs	r1, #0
 800bc74:	f000 bd4c 	b.w	800c710 <strtol>

0800bc78 <__errno>:
 800bc78:	4b01      	ldr	r3, [pc, #4]	; (800bc80 <__errno+0x8>)
 800bc7a:	6818      	ldr	r0, [r3, #0]
 800bc7c:	4770      	bx	lr
 800bc7e:	bf00      	nop
 800bc80:	200000fc 	.word	0x200000fc

0800bc84 <__libc_init_array>:
 800bc84:	b570      	push	{r4, r5, r6, lr}
 800bc86:	4d0d      	ldr	r5, [pc, #52]	; (800bcbc <__libc_init_array+0x38>)
 800bc88:	4c0d      	ldr	r4, [pc, #52]	; (800bcc0 <__libc_init_array+0x3c>)
 800bc8a:	1b64      	subs	r4, r4, r5
 800bc8c:	10a4      	asrs	r4, r4, #2
 800bc8e:	2600      	movs	r6, #0
 800bc90:	42a6      	cmp	r6, r4
 800bc92:	d109      	bne.n	800bca8 <__libc_init_array+0x24>
 800bc94:	4d0b      	ldr	r5, [pc, #44]	; (800bcc4 <__libc_init_array+0x40>)
 800bc96:	4c0c      	ldr	r4, [pc, #48]	; (800bcc8 <__libc_init_array+0x44>)
 800bc98:	f002 ff90 	bl	800ebbc <_init>
 800bc9c:	1b64      	subs	r4, r4, r5
 800bc9e:	10a4      	asrs	r4, r4, #2
 800bca0:	2600      	movs	r6, #0
 800bca2:	42a6      	cmp	r6, r4
 800bca4:	d105      	bne.n	800bcb2 <__libc_init_array+0x2e>
 800bca6:	bd70      	pop	{r4, r5, r6, pc}
 800bca8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcac:	4798      	blx	r3
 800bcae:	3601      	adds	r6, #1
 800bcb0:	e7ee      	b.n	800bc90 <__libc_init_array+0xc>
 800bcb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcb6:	4798      	blx	r3
 800bcb8:	3601      	adds	r6, #1
 800bcba:	e7f2      	b.n	800bca2 <__libc_init_array+0x1e>
 800bcbc:	0800f024 	.word	0x0800f024
 800bcc0:	0800f024 	.word	0x0800f024
 800bcc4:	0800f024 	.word	0x0800f024
 800bcc8:	0800f028 	.word	0x0800f028

0800bccc <memcpy>:
 800bccc:	440a      	add	r2, r1
 800bcce:	4291      	cmp	r1, r2
 800bcd0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bcd4:	d100      	bne.n	800bcd8 <memcpy+0xc>
 800bcd6:	4770      	bx	lr
 800bcd8:	b510      	push	{r4, lr}
 800bcda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcde:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bce2:	4291      	cmp	r1, r2
 800bce4:	d1f9      	bne.n	800bcda <memcpy+0xe>
 800bce6:	bd10      	pop	{r4, pc}

0800bce8 <memset>:
 800bce8:	4402      	add	r2, r0
 800bcea:	4603      	mov	r3, r0
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d100      	bne.n	800bcf2 <memset+0xa>
 800bcf0:	4770      	bx	lr
 800bcf2:	f803 1b01 	strb.w	r1, [r3], #1
 800bcf6:	e7f9      	b.n	800bcec <memset+0x4>

0800bcf8 <__cvt>:
 800bcf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcfc:	ec55 4b10 	vmov	r4, r5, d0
 800bd00:	2d00      	cmp	r5, #0
 800bd02:	460e      	mov	r6, r1
 800bd04:	4619      	mov	r1, r3
 800bd06:	462b      	mov	r3, r5
 800bd08:	bfbb      	ittet	lt
 800bd0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bd0e:	461d      	movlt	r5, r3
 800bd10:	2300      	movge	r3, #0
 800bd12:	232d      	movlt	r3, #45	; 0x2d
 800bd14:	700b      	strb	r3, [r1, #0]
 800bd16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bd1c:	4691      	mov	r9, r2
 800bd1e:	f023 0820 	bic.w	r8, r3, #32
 800bd22:	bfbc      	itt	lt
 800bd24:	4622      	movlt	r2, r4
 800bd26:	4614      	movlt	r4, r2
 800bd28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd2c:	d005      	beq.n	800bd3a <__cvt+0x42>
 800bd2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bd32:	d100      	bne.n	800bd36 <__cvt+0x3e>
 800bd34:	3601      	adds	r6, #1
 800bd36:	2102      	movs	r1, #2
 800bd38:	e000      	b.n	800bd3c <__cvt+0x44>
 800bd3a:	2103      	movs	r1, #3
 800bd3c:	ab03      	add	r3, sp, #12
 800bd3e:	9301      	str	r3, [sp, #4]
 800bd40:	ab02      	add	r3, sp, #8
 800bd42:	9300      	str	r3, [sp, #0]
 800bd44:	ec45 4b10 	vmov	d0, r4, r5
 800bd48:	4653      	mov	r3, sl
 800bd4a:	4632      	mov	r2, r6
 800bd4c:	f000 fd78 	bl	800c840 <_dtoa_r>
 800bd50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bd54:	4607      	mov	r7, r0
 800bd56:	d102      	bne.n	800bd5e <__cvt+0x66>
 800bd58:	f019 0f01 	tst.w	r9, #1
 800bd5c:	d022      	beq.n	800bda4 <__cvt+0xac>
 800bd5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd62:	eb07 0906 	add.w	r9, r7, r6
 800bd66:	d110      	bne.n	800bd8a <__cvt+0x92>
 800bd68:	783b      	ldrb	r3, [r7, #0]
 800bd6a:	2b30      	cmp	r3, #48	; 0x30
 800bd6c:	d10a      	bne.n	800bd84 <__cvt+0x8c>
 800bd6e:	2200      	movs	r2, #0
 800bd70:	2300      	movs	r3, #0
 800bd72:	4620      	mov	r0, r4
 800bd74:	4629      	mov	r1, r5
 800bd76:	f7f4 feaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd7a:	b918      	cbnz	r0, 800bd84 <__cvt+0x8c>
 800bd7c:	f1c6 0601 	rsb	r6, r6, #1
 800bd80:	f8ca 6000 	str.w	r6, [sl]
 800bd84:	f8da 3000 	ldr.w	r3, [sl]
 800bd88:	4499      	add	r9, r3
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	4620      	mov	r0, r4
 800bd90:	4629      	mov	r1, r5
 800bd92:	f7f4 fea1 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd96:	b108      	cbz	r0, 800bd9c <__cvt+0xa4>
 800bd98:	f8cd 900c 	str.w	r9, [sp, #12]
 800bd9c:	2230      	movs	r2, #48	; 0x30
 800bd9e:	9b03      	ldr	r3, [sp, #12]
 800bda0:	454b      	cmp	r3, r9
 800bda2:	d307      	bcc.n	800bdb4 <__cvt+0xbc>
 800bda4:	9b03      	ldr	r3, [sp, #12]
 800bda6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bda8:	1bdb      	subs	r3, r3, r7
 800bdaa:	4638      	mov	r0, r7
 800bdac:	6013      	str	r3, [r2, #0]
 800bdae:	b004      	add	sp, #16
 800bdb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdb4:	1c59      	adds	r1, r3, #1
 800bdb6:	9103      	str	r1, [sp, #12]
 800bdb8:	701a      	strb	r2, [r3, #0]
 800bdba:	e7f0      	b.n	800bd9e <__cvt+0xa6>

0800bdbc <__exponent>:
 800bdbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2900      	cmp	r1, #0
 800bdc2:	bfb8      	it	lt
 800bdc4:	4249      	neglt	r1, r1
 800bdc6:	f803 2b02 	strb.w	r2, [r3], #2
 800bdca:	bfb4      	ite	lt
 800bdcc:	222d      	movlt	r2, #45	; 0x2d
 800bdce:	222b      	movge	r2, #43	; 0x2b
 800bdd0:	2909      	cmp	r1, #9
 800bdd2:	7042      	strb	r2, [r0, #1]
 800bdd4:	dd2a      	ble.n	800be2c <__exponent+0x70>
 800bdd6:	f10d 0407 	add.w	r4, sp, #7
 800bdda:	46a4      	mov	ip, r4
 800bddc:	270a      	movs	r7, #10
 800bdde:	46a6      	mov	lr, r4
 800bde0:	460a      	mov	r2, r1
 800bde2:	fb91 f6f7 	sdiv	r6, r1, r7
 800bde6:	fb07 1516 	mls	r5, r7, r6, r1
 800bdea:	3530      	adds	r5, #48	; 0x30
 800bdec:	2a63      	cmp	r2, #99	; 0x63
 800bdee:	f104 34ff 	add.w	r4, r4, #4294967295
 800bdf2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bdf6:	4631      	mov	r1, r6
 800bdf8:	dcf1      	bgt.n	800bdde <__exponent+0x22>
 800bdfa:	3130      	adds	r1, #48	; 0x30
 800bdfc:	f1ae 0502 	sub.w	r5, lr, #2
 800be00:	f804 1c01 	strb.w	r1, [r4, #-1]
 800be04:	1c44      	adds	r4, r0, #1
 800be06:	4629      	mov	r1, r5
 800be08:	4561      	cmp	r1, ip
 800be0a:	d30a      	bcc.n	800be22 <__exponent+0x66>
 800be0c:	f10d 0209 	add.w	r2, sp, #9
 800be10:	eba2 020e 	sub.w	r2, r2, lr
 800be14:	4565      	cmp	r5, ip
 800be16:	bf88      	it	hi
 800be18:	2200      	movhi	r2, #0
 800be1a:	4413      	add	r3, r2
 800be1c:	1a18      	subs	r0, r3, r0
 800be1e:	b003      	add	sp, #12
 800be20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be26:	f804 2f01 	strb.w	r2, [r4, #1]!
 800be2a:	e7ed      	b.n	800be08 <__exponent+0x4c>
 800be2c:	2330      	movs	r3, #48	; 0x30
 800be2e:	3130      	adds	r1, #48	; 0x30
 800be30:	7083      	strb	r3, [r0, #2]
 800be32:	70c1      	strb	r1, [r0, #3]
 800be34:	1d03      	adds	r3, r0, #4
 800be36:	e7f1      	b.n	800be1c <__exponent+0x60>

0800be38 <_printf_float>:
 800be38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be3c:	ed2d 8b02 	vpush	{d8}
 800be40:	b08d      	sub	sp, #52	; 0x34
 800be42:	460c      	mov	r4, r1
 800be44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800be48:	4616      	mov	r6, r2
 800be4a:	461f      	mov	r7, r3
 800be4c:	4605      	mov	r5, r0
 800be4e:	f001 fae5 	bl	800d41c <_localeconv_r>
 800be52:	f8d0 a000 	ldr.w	sl, [r0]
 800be56:	4650      	mov	r0, sl
 800be58:	f7f4 f9c2 	bl	80001e0 <strlen>
 800be5c:	2300      	movs	r3, #0
 800be5e:	930a      	str	r3, [sp, #40]	; 0x28
 800be60:	6823      	ldr	r3, [r4, #0]
 800be62:	9305      	str	r3, [sp, #20]
 800be64:	f8d8 3000 	ldr.w	r3, [r8]
 800be68:	f894 b018 	ldrb.w	fp, [r4, #24]
 800be6c:	3307      	adds	r3, #7
 800be6e:	f023 0307 	bic.w	r3, r3, #7
 800be72:	f103 0208 	add.w	r2, r3, #8
 800be76:	f8c8 2000 	str.w	r2, [r8]
 800be7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800be82:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800be86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800be8a:	9307      	str	r3, [sp, #28]
 800be8c:	f8cd 8018 	str.w	r8, [sp, #24]
 800be90:	ee08 0a10 	vmov	s16, r0
 800be94:	4b9f      	ldr	r3, [pc, #636]	; (800c114 <_printf_float+0x2dc>)
 800be96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be9a:	f04f 32ff 	mov.w	r2, #4294967295
 800be9e:	f7f4 fe4d 	bl	8000b3c <__aeabi_dcmpun>
 800bea2:	bb88      	cbnz	r0, 800bf08 <_printf_float+0xd0>
 800bea4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bea8:	4b9a      	ldr	r3, [pc, #616]	; (800c114 <_printf_float+0x2dc>)
 800beaa:	f04f 32ff 	mov.w	r2, #4294967295
 800beae:	f7f4 fe27 	bl	8000b00 <__aeabi_dcmple>
 800beb2:	bb48      	cbnz	r0, 800bf08 <_printf_float+0xd0>
 800beb4:	2200      	movs	r2, #0
 800beb6:	2300      	movs	r3, #0
 800beb8:	4640      	mov	r0, r8
 800beba:	4649      	mov	r1, r9
 800bebc:	f7f4 fe16 	bl	8000aec <__aeabi_dcmplt>
 800bec0:	b110      	cbz	r0, 800bec8 <_printf_float+0x90>
 800bec2:	232d      	movs	r3, #45	; 0x2d
 800bec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bec8:	4b93      	ldr	r3, [pc, #588]	; (800c118 <_printf_float+0x2e0>)
 800beca:	4894      	ldr	r0, [pc, #592]	; (800c11c <_printf_float+0x2e4>)
 800becc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bed0:	bf94      	ite	ls
 800bed2:	4698      	movls	r8, r3
 800bed4:	4680      	movhi	r8, r0
 800bed6:	2303      	movs	r3, #3
 800bed8:	6123      	str	r3, [r4, #16]
 800beda:	9b05      	ldr	r3, [sp, #20]
 800bedc:	f023 0204 	bic.w	r2, r3, #4
 800bee0:	6022      	str	r2, [r4, #0]
 800bee2:	f04f 0900 	mov.w	r9, #0
 800bee6:	9700      	str	r7, [sp, #0]
 800bee8:	4633      	mov	r3, r6
 800beea:	aa0b      	add	r2, sp, #44	; 0x2c
 800beec:	4621      	mov	r1, r4
 800beee:	4628      	mov	r0, r5
 800bef0:	f000 f9d8 	bl	800c2a4 <_printf_common>
 800bef4:	3001      	adds	r0, #1
 800bef6:	f040 8090 	bne.w	800c01a <_printf_float+0x1e2>
 800befa:	f04f 30ff 	mov.w	r0, #4294967295
 800befe:	b00d      	add	sp, #52	; 0x34
 800bf00:	ecbd 8b02 	vpop	{d8}
 800bf04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf08:	4642      	mov	r2, r8
 800bf0a:	464b      	mov	r3, r9
 800bf0c:	4640      	mov	r0, r8
 800bf0e:	4649      	mov	r1, r9
 800bf10:	f7f4 fe14 	bl	8000b3c <__aeabi_dcmpun>
 800bf14:	b140      	cbz	r0, 800bf28 <_printf_float+0xf0>
 800bf16:	464b      	mov	r3, r9
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	bfbc      	itt	lt
 800bf1c:	232d      	movlt	r3, #45	; 0x2d
 800bf1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bf22:	487f      	ldr	r0, [pc, #508]	; (800c120 <_printf_float+0x2e8>)
 800bf24:	4b7f      	ldr	r3, [pc, #508]	; (800c124 <_printf_float+0x2ec>)
 800bf26:	e7d1      	b.n	800becc <_printf_float+0x94>
 800bf28:	6863      	ldr	r3, [r4, #4]
 800bf2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bf2e:	9206      	str	r2, [sp, #24]
 800bf30:	1c5a      	adds	r2, r3, #1
 800bf32:	d13f      	bne.n	800bfb4 <_printf_float+0x17c>
 800bf34:	2306      	movs	r3, #6
 800bf36:	6063      	str	r3, [r4, #4]
 800bf38:	9b05      	ldr	r3, [sp, #20]
 800bf3a:	6861      	ldr	r1, [r4, #4]
 800bf3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bf40:	2300      	movs	r3, #0
 800bf42:	9303      	str	r3, [sp, #12]
 800bf44:	ab0a      	add	r3, sp, #40	; 0x28
 800bf46:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bf4a:	ab09      	add	r3, sp, #36	; 0x24
 800bf4c:	ec49 8b10 	vmov	d0, r8, r9
 800bf50:	9300      	str	r3, [sp, #0]
 800bf52:	6022      	str	r2, [r4, #0]
 800bf54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bf58:	4628      	mov	r0, r5
 800bf5a:	f7ff fecd 	bl	800bcf8 <__cvt>
 800bf5e:	9b06      	ldr	r3, [sp, #24]
 800bf60:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf62:	2b47      	cmp	r3, #71	; 0x47
 800bf64:	4680      	mov	r8, r0
 800bf66:	d108      	bne.n	800bf7a <_printf_float+0x142>
 800bf68:	1cc8      	adds	r0, r1, #3
 800bf6a:	db02      	blt.n	800bf72 <_printf_float+0x13a>
 800bf6c:	6863      	ldr	r3, [r4, #4]
 800bf6e:	4299      	cmp	r1, r3
 800bf70:	dd41      	ble.n	800bff6 <_printf_float+0x1be>
 800bf72:	f1ab 0b02 	sub.w	fp, fp, #2
 800bf76:	fa5f fb8b 	uxtb.w	fp, fp
 800bf7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bf7e:	d820      	bhi.n	800bfc2 <_printf_float+0x18a>
 800bf80:	3901      	subs	r1, #1
 800bf82:	465a      	mov	r2, fp
 800bf84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bf88:	9109      	str	r1, [sp, #36]	; 0x24
 800bf8a:	f7ff ff17 	bl	800bdbc <__exponent>
 800bf8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf90:	1813      	adds	r3, r2, r0
 800bf92:	2a01      	cmp	r2, #1
 800bf94:	4681      	mov	r9, r0
 800bf96:	6123      	str	r3, [r4, #16]
 800bf98:	dc02      	bgt.n	800bfa0 <_printf_float+0x168>
 800bf9a:	6822      	ldr	r2, [r4, #0]
 800bf9c:	07d2      	lsls	r2, r2, #31
 800bf9e:	d501      	bpl.n	800bfa4 <_printf_float+0x16c>
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	6123      	str	r3, [r4, #16]
 800bfa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d09c      	beq.n	800bee6 <_printf_float+0xae>
 800bfac:	232d      	movs	r3, #45	; 0x2d
 800bfae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfb2:	e798      	b.n	800bee6 <_printf_float+0xae>
 800bfb4:	9a06      	ldr	r2, [sp, #24]
 800bfb6:	2a47      	cmp	r2, #71	; 0x47
 800bfb8:	d1be      	bne.n	800bf38 <_printf_float+0x100>
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d1bc      	bne.n	800bf38 <_printf_float+0x100>
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	e7b9      	b.n	800bf36 <_printf_float+0xfe>
 800bfc2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bfc6:	d118      	bne.n	800bffa <_printf_float+0x1c2>
 800bfc8:	2900      	cmp	r1, #0
 800bfca:	6863      	ldr	r3, [r4, #4]
 800bfcc:	dd0b      	ble.n	800bfe6 <_printf_float+0x1ae>
 800bfce:	6121      	str	r1, [r4, #16]
 800bfd0:	b913      	cbnz	r3, 800bfd8 <_printf_float+0x1a0>
 800bfd2:	6822      	ldr	r2, [r4, #0]
 800bfd4:	07d0      	lsls	r0, r2, #31
 800bfd6:	d502      	bpl.n	800bfde <_printf_float+0x1a6>
 800bfd8:	3301      	adds	r3, #1
 800bfda:	440b      	add	r3, r1
 800bfdc:	6123      	str	r3, [r4, #16]
 800bfde:	65a1      	str	r1, [r4, #88]	; 0x58
 800bfe0:	f04f 0900 	mov.w	r9, #0
 800bfe4:	e7de      	b.n	800bfa4 <_printf_float+0x16c>
 800bfe6:	b913      	cbnz	r3, 800bfee <_printf_float+0x1b6>
 800bfe8:	6822      	ldr	r2, [r4, #0]
 800bfea:	07d2      	lsls	r2, r2, #31
 800bfec:	d501      	bpl.n	800bff2 <_printf_float+0x1ba>
 800bfee:	3302      	adds	r3, #2
 800bff0:	e7f4      	b.n	800bfdc <_printf_float+0x1a4>
 800bff2:	2301      	movs	r3, #1
 800bff4:	e7f2      	b.n	800bfdc <_printf_float+0x1a4>
 800bff6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bffc:	4299      	cmp	r1, r3
 800bffe:	db05      	blt.n	800c00c <_printf_float+0x1d4>
 800c000:	6823      	ldr	r3, [r4, #0]
 800c002:	6121      	str	r1, [r4, #16]
 800c004:	07d8      	lsls	r0, r3, #31
 800c006:	d5ea      	bpl.n	800bfde <_printf_float+0x1a6>
 800c008:	1c4b      	adds	r3, r1, #1
 800c00a:	e7e7      	b.n	800bfdc <_printf_float+0x1a4>
 800c00c:	2900      	cmp	r1, #0
 800c00e:	bfd4      	ite	le
 800c010:	f1c1 0202 	rsble	r2, r1, #2
 800c014:	2201      	movgt	r2, #1
 800c016:	4413      	add	r3, r2
 800c018:	e7e0      	b.n	800bfdc <_printf_float+0x1a4>
 800c01a:	6823      	ldr	r3, [r4, #0]
 800c01c:	055a      	lsls	r2, r3, #21
 800c01e:	d407      	bmi.n	800c030 <_printf_float+0x1f8>
 800c020:	6923      	ldr	r3, [r4, #16]
 800c022:	4642      	mov	r2, r8
 800c024:	4631      	mov	r1, r6
 800c026:	4628      	mov	r0, r5
 800c028:	47b8      	blx	r7
 800c02a:	3001      	adds	r0, #1
 800c02c:	d12c      	bne.n	800c088 <_printf_float+0x250>
 800c02e:	e764      	b.n	800befa <_printf_float+0xc2>
 800c030:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c034:	f240 80e0 	bls.w	800c1f8 <_printf_float+0x3c0>
 800c038:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c03c:	2200      	movs	r2, #0
 800c03e:	2300      	movs	r3, #0
 800c040:	f7f4 fd4a 	bl	8000ad8 <__aeabi_dcmpeq>
 800c044:	2800      	cmp	r0, #0
 800c046:	d034      	beq.n	800c0b2 <_printf_float+0x27a>
 800c048:	4a37      	ldr	r2, [pc, #220]	; (800c128 <_printf_float+0x2f0>)
 800c04a:	2301      	movs	r3, #1
 800c04c:	4631      	mov	r1, r6
 800c04e:	4628      	mov	r0, r5
 800c050:	47b8      	blx	r7
 800c052:	3001      	adds	r0, #1
 800c054:	f43f af51 	beq.w	800befa <_printf_float+0xc2>
 800c058:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c05c:	429a      	cmp	r2, r3
 800c05e:	db02      	blt.n	800c066 <_printf_float+0x22e>
 800c060:	6823      	ldr	r3, [r4, #0]
 800c062:	07d8      	lsls	r0, r3, #31
 800c064:	d510      	bpl.n	800c088 <_printf_float+0x250>
 800c066:	ee18 3a10 	vmov	r3, s16
 800c06a:	4652      	mov	r2, sl
 800c06c:	4631      	mov	r1, r6
 800c06e:	4628      	mov	r0, r5
 800c070:	47b8      	blx	r7
 800c072:	3001      	adds	r0, #1
 800c074:	f43f af41 	beq.w	800befa <_printf_float+0xc2>
 800c078:	f04f 0800 	mov.w	r8, #0
 800c07c:	f104 091a 	add.w	r9, r4, #26
 800c080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c082:	3b01      	subs	r3, #1
 800c084:	4543      	cmp	r3, r8
 800c086:	dc09      	bgt.n	800c09c <_printf_float+0x264>
 800c088:	6823      	ldr	r3, [r4, #0]
 800c08a:	079b      	lsls	r3, r3, #30
 800c08c:	f100 8105 	bmi.w	800c29a <_printf_float+0x462>
 800c090:	68e0      	ldr	r0, [r4, #12]
 800c092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c094:	4298      	cmp	r0, r3
 800c096:	bfb8      	it	lt
 800c098:	4618      	movlt	r0, r3
 800c09a:	e730      	b.n	800befe <_printf_float+0xc6>
 800c09c:	2301      	movs	r3, #1
 800c09e:	464a      	mov	r2, r9
 800c0a0:	4631      	mov	r1, r6
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	47b8      	blx	r7
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	f43f af27 	beq.w	800befa <_printf_float+0xc2>
 800c0ac:	f108 0801 	add.w	r8, r8, #1
 800c0b0:	e7e6      	b.n	800c080 <_printf_float+0x248>
 800c0b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	dc39      	bgt.n	800c12c <_printf_float+0x2f4>
 800c0b8:	4a1b      	ldr	r2, [pc, #108]	; (800c128 <_printf_float+0x2f0>)
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	4631      	mov	r1, r6
 800c0be:	4628      	mov	r0, r5
 800c0c0:	47b8      	blx	r7
 800c0c2:	3001      	adds	r0, #1
 800c0c4:	f43f af19 	beq.w	800befa <_printf_float+0xc2>
 800c0c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	d102      	bne.n	800c0d6 <_printf_float+0x29e>
 800c0d0:	6823      	ldr	r3, [r4, #0]
 800c0d2:	07d9      	lsls	r1, r3, #31
 800c0d4:	d5d8      	bpl.n	800c088 <_printf_float+0x250>
 800c0d6:	ee18 3a10 	vmov	r3, s16
 800c0da:	4652      	mov	r2, sl
 800c0dc:	4631      	mov	r1, r6
 800c0de:	4628      	mov	r0, r5
 800c0e0:	47b8      	blx	r7
 800c0e2:	3001      	adds	r0, #1
 800c0e4:	f43f af09 	beq.w	800befa <_printf_float+0xc2>
 800c0e8:	f04f 0900 	mov.w	r9, #0
 800c0ec:	f104 0a1a 	add.w	sl, r4, #26
 800c0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0f2:	425b      	negs	r3, r3
 800c0f4:	454b      	cmp	r3, r9
 800c0f6:	dc01      	bgt.n	800c0fc <_printf_float+0x2c4>
 800c0f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0fa:	e792      	b.n	800c022 <_printf_float+0x1ea>
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	4652      	mov	r2, sl
 800c100:	4631      	mov	r1, r6
 800c102:	4628      	mov	r0, r5
 800c104:	47b8      	blx	r7
 800c106:	3001      	adds	r0, #1
 800c108:	f43f aef7 	beq.w	800befa <_printf_float+0xc2>
 800c10c:	f109 0901 	add.w	r9, r9, #1
 800c110:	e7ee      	b.n	800c0f0 <_printf_float+0x2b8>
 800c112:	bf00      	nop
 800c114:	7fefffff 	.word	0x7fefffff
 800c118:	0800ec40 	.word	0x0800ec40
 800c11c:	0800ec44 	.word	0x0800ec44
 800c120:	0800ec4c 	.word	0x0800ec4c
 800c124:	0800ec48 	.word	0x0800ec48
 800c128:	0800ec50 	.word	0x0800ec50
 800c12c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c12e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c130:	429a      	cmp	r2, r3
 800c132:	bfa8      	it	ge
 800c134:	461a      	movge	r2, r3
 800c136:	2a00      	cmp	r2, #0
 800c138:	4691      	mov	r9, r2
 800c13a:	dc37      	bgt.n	800c1ac <_printf_float+0x374>
 800c13c:	f04f 0b00 	mov.w	fp, #0
 800c140:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c144:	f104 021a 	add.w	r2, r4, #26
 800c148:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c14a:	9305      	str	r3, [sp, #20]
 800c14c:	eba3 0309 	sub.w	r3, r3, r9
 800c150:	455b      	cmp	r3, fp
 800c152:	dc33      	bgt.n	800c1bc <_printf_float+0x384>
 800c154:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c158:	429a      	cmp	r2, r3
 800c15a:	db3b      	blt.n	800c1d4 <_printf_float+0x39c>
 800c15c:	6823      	ldr	r3, [r4, #0]
 800c15e:	07da      	lsls	r2, r3, #31
 800c160:	d438      	bmi.n	800c1d4 <_printf_float+0x39c>
 800c162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c164:	9a05      	ldr	r2, [sp, #20]
 800c166:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c168:	1a9a      	subs	r2, r3, r2
 800c16a:	eba3 0901 	sub.w	r9, r3, r1
 800c16e:	4591      	cmp	r9, r2
 800c170:	bfa8      	it	ge
 800c172:	4691      	movge	r9, r2
 800c174:	f1b9 0f00 	cmp.w	r9, #0
 800c178:	dc35      	bgt.n	800c1e6 <_printf_float+0x3ae>
 800c17a:	f04f 0800 	mov.w	r8, #0
 800c17e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c182:	f104 0a1a 	add.w	sl, r4, #26
 800c186:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c18a:	1a9b      	subs	r3, r3, r2
 800c18c:	eba3 0309 	sub.w	r3, r3, r9
 800c190:	4543      	cmp	r3, r8
 800c192:	f77f af79 	ble.w	800c088 <_printf_float+0x250>
 800c196:	2301      	movs	r3, #1
 800c198:	4652      	mov	r2, sl
 800c19a:	4631      	mov	r1, r6
 800c19c:	4628      	mov	r0, r5
 800c19e:	47b8      	blx	r7
 800c1a0:	3001      	adds	r0, #1
 800c1a2:	f43f aeaa 	beq.w	800befa <_printf_float+0xc2>
 800c1a6:	f108 0801 	add.w	r8, r8, #1
 800c1aa:	e7ec      	b.n	800c186 <_printf_float+0x34e>
 800c1ac:	4613      	mov	r3, r2
 800c1ae:	4631      	mov	r1, r6
 800c1b0:	4642      	mov	r2, r8
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	47b8      	blx	r7
 800c1b6:	3001      	adds	r0, #1
 800c1b8:	d1c0      	bne.n	800c13c <_printf_float+0x304>
 800c1ba:	e69e      	b.n	800befa <_printf_float+0xc2>
 800c1bc:	2301      	movs	r3, #1
 800c1be:	4631      	mov	r1, r6
 800c1c0:	4628      	mov	r0, r5
 800c1c2:	9205      	str	r2, [sp, #20]
 800c1c4:	47b8      	blx	r7
 800c1c6:	3001      	adds	r0, #1
 800c1c8:	f43f ae97 	beq.w	800befa <_printf_float+0xc2>
 800c1cc:	9a05      	ldr	r2, [sp, #20]
 800c1ce:	f10b 0b01 	add.w	fp, fp, #1
 800c1d2:	e7b9      	b.n	800c148 <_printf_float+0x310>
 800c1d4:	ee18 3a10 	vmov	r3, s16
 800c1d8:	4652      	mov	r2, sl
 800c1da:	4631      	mov	r1, r6
 800c1dc:	4628      	mov	r0, r5
 800c1de:	47b8      	blx	r7
 800c1e0:	3001      	adds	r0, #1
 800c1e2:	d1be      	bne.n	800c162 <_printf_float+0x32a>
 800c1e4:	e689      	b.n	800befa <_printf_float+0xc2>
 800c1e6:	9a05      	ldr	r2, [sp, #20]
 800c1e8:	464b      	mov	r3, r9
 800c1ea:	4442      	add	r2, r8
 800c1ec:	4631      	mov	r1, r6
 800c1ee:	4628      	mov	r0, r5
 800c1f0:	47b8      	blx	r7
 800c1f2:	3001      	adds	r0, #1
 800c1f4:	d1c1      	bne.n	800c17a <_printf_float+0x342>
 800c1f6:	e680      	b.n	800befa <_printf_float+0xc2>
 800c1f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1fa:	2a01      	cmp	r2, #1
 800c1fc:	dc01      	bgt.n	800c202 <_printf_float+0x3ca>
 800c1fe:	07db      	lsls	r3, r3, #31
 800c200:	d538      	bpl.n	800c274 <_printf_float+0x43c>
 800c202:	2301      	movs	r3, #1
 800c204:	4642      	mov	r2, r8
 800c206:	4631      	mov	r1, r6
 800c208:	4628      	mov	r0, r5
 800c20a:	47b8      	blx	r7
 800c20c:	3001      	adds	r0, #1
 800c20e:	f43f ae74 	beq.w	800befa <_printf_float+0xc2>
 800c212:	ee18 3a10 	vmov	r3, s16
 800c216:	4652      	mov	r2, sl
 800c218:	4631      	mov	r1, r6
 800c21a:	4628      	mov	r0, r5
 800c21c:	47b8      	blx	r7
 800c21e:	3001      	adds	r0, #1
 800c220:	f43f ae6b 	beq.w	800befa <_printf_float+0xc2>
 800c224:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c228:	2200      	movs	r2, #0
 800c22a:	2300      	movs	r3, #0
 800c22c:	f7f4 fc54 	bl	8000ad8 <__aeabi_dcmpeq>
 800c230:	b9d8      	cbnz	r0, 800c26a <_printf_float+0x432>
 800c232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c234:	f108 0201 	add.w	r2, r8, #1
 800c238:	3b01      	subs	r3, #1
 800c23a:	4631      	mov	r1, r6
 800c23c:	4628      	mov	r0, r5
 800c23e:	47b8      	blx	r7
 800c240:	3001      	adds	r0, #1
 800c242:	d10e      	bne.n	800c262 <_printf_float+0x42a>
 800c244:	e659      	b.n	800befa <_printf_float+0xc2>
 800c246:	2301      	movs	r3, #1
 800c248:	4652      	mov	r2, sl
 800c24a:	4631      	mov	r1, r6
 800c24c:	4628      	mov	r0, r5
 800c24e:	47b8      	blx	r7
 800c250:	3001      	adds	r0, #1
 800c252:	f43f ae52 	beq.w	800befa <_printf_float+0xc2>
 800c256:	f108 0801 	add.w	r8, r8, #1
 800c25a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c25c:	3b01      	subs	r3, #1
 800c25e:	4543      	cmp	r3, r8
 800c260:	dcf1      	bgt.n	800c246 <_printf_float+0x40e>
 800c262:	464b      	mov	r3, r9
 800c264:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c268:	e6dc      	b.n	800c024 <_printf_float+0x1ec>
 800c26a:	f04f 0800 	mov.w	r8, #0
 800c26e:	f104 0a1a 	add.w	sl, r4, #26
 800c272:	e7f2      	b.n	800c25a <_printf_float+0x422>
 800c274:	2301      	movs	r3, #1
 800c276:	4642      	mov	r2, r8
 800c278:	e7df      	b.n	800c23a <_printf_float+0x402>
 800c27a:	2301      	movs	r3, #1
 800c27c:	464a      	mov	r2, r9
 800c27e:	4631      	mov	r1, r6
 800c280:	4628      	mov	r0, r5
 800c282:	47b8      	blx	r7
 800c284:	3001      	adds	r0, #1
 800c286:	f43f ae38 	beq.w	800befa <_printf_float+0xc2>
 800c28a:	f108 0801 	add.w	r8, r8, #1
 800c28e:	68e3      	ldr	r3, [r4, #12]
 800c290:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c292:	1a5b      	subs	r3, r3, r1
 800c294:	4543      	cmp	r3, r8
 800c296:	dcf0      	bgt.n	800c27a <_printf_float+0x442>
 800c298:	e6fa      	b.n	800c090 <_printf_float+0x258>
 800c29a:	f04f 0800 	mov.w	r8, #0
 800c29e:	f104 0919 	add.w	r9, r4, #25
 800c2a2:	e7f4      	b.n	800c28e <_printf_float+0x456>

0800c2a4 <_printf_common>:
 800c2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2a8:	4616      	mov	r6, r2
 800c2aa:	4699      	mov	r9, r3
 800c2ac:	688a      	ldr	r2, [r1, #8]
 800c2ae:	690b      	ldr	r3, [r1, #16]
 800c2b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	bfb8      	it	lt
 800c2b8:	4613      	movlt	r3, r2
 800c2ba:	6033      	str	r3, [r6, #0]
 800c2bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c2c0:	4607      	mov	r7, r0
 800c2c2:	460c      	mov	r4, r1
 800c2c4:	b10a      	cbz	r2, 800c2ca <_printf_common+0x26>
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	6033      	str	r3, [r6, #0]
 800c2ca:	6823      	ldr	r3, [r4, #0]
 800c2cc:	0699      	lsls	r1, r3, #26
 800c2ce:	bf42      	ittt	mi
 800c2d0:	6833      	ldrmi	r3, [r6, #0]
 800c2d2:	3302      	addmi	r3, #2
 800c2d4:	6033      	strmi	r3, [r6, #0]
 800c2d6:	6825      	ldr	r5, [r4, #0]
 800c2d8:	f015 0506 	ands.w	r5, r5, #6
 800c2dc:	d106      	bne.n	800c2ec <_printf_common+0x48>
 800c2de:	f104 0a19 	add.w	sl, r4, #25
 800c2e2:	68e3      	ldr	r3, [r4, #12]
 800c2e4:	6832      	ldr	r2, [r6, #0]
 800c2e6:	1a9b      	subs	r3, r3, r2
 800c2e8:	42ab      	cmp	r3, r5
 800c2ea:	dc26      	bgt.n	800c33a <_printf_common+0x96>
 800c2ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c2f0:	1e13      	subs	r3, r2, #0
 800c2f2:	6822      	ldr	r2, [r4, #0]
 800c2f4:	bf18      	it	ne
 800c2f6:	2301      	movne	r3, #1
 800c2f8:	0692      	lsls	r2, r2, #26
 800c2fa:	d42b      	bmi.n	800c354 <_printf_common+0xb0>
 800c2fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c300:	4649      	mov	r1, r9
 800c302:	4638      	mov	r0, r7
 800c304:	47c0      	blx	r8
 800c306:	3001      	adds	r0, #1
 800c308:	d01e      	beq.n	800c348 <_printf_common+0xa4>
 800c30a:	6823      	ldr	r3, [r4, #0]
 800c30c:	68e5      	ldr	r5, [r4, #12]
 800c30e:	6832      	ldr	r2, [r6, #0]
 800c310:	f003 0306 	and.w	r3, r3, #6
 800c314:	2b04      	cmp	r3, #4
 800c316:	bf08      	it	eq
 800c318:	1aad      	subeq	r5, r5, r2
 800c31a:	68a3      	ldr	r3, [r4, #8]
 800c31c:	6922      	ldr	r2, [r4, #16]
 800c31e:	bf0c      	ite	eq
 800c320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c324:	2500      	movne	r5, #0
 800c326:	4293      	cmp	r3, r2
 800c328:	bfc4      	itt	gt
 800c32a:	1a9b      	subgt	r3, r3, r2
 800c32c:	18ed      	addgt	r5, r5, r3
 800c32e:	2600      	movs	r6, #0
 800c330:	341a      	adds	r4, #26
 800c332:	42b5      	cmp	r5, r6
 800c334:	d11a      	bne.n	800c36c <_printf_common+0xc8>
 800c336:	2000      	movs	r0, #0
 800c338:	e008      	b.n	800c34c <_printf_common+0xa8>
 800c33a:	2301      	movs	r3, #1
 800c33c:	4652      	mov	r2, sl
 800c33e:	4649      	mov	r1, r9
 800c340:	4638      	mov	r0, r7
 800c342:	47c0      	blx	r8
 800c344:	3001      	adds	r0, #1
 800c346:	d103      	bne.n	800c350 <_printf_common+0xac>
 800c348:	f04f 30ff 	mov.w	r0, #4294967295
 800c34c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c350:	3501      	adds	r5, #1
 800c352:	e7c6      	b.n	800c2e2 <_printf_common+0x3e>
 800c354:	18e1      	adds	r1, r4, r3
 800c356:	1c5a      	adds	r2, r3, #1
 800c358:	2030      	movs	r0, #48	; 0x30
 800c35a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c35e:	4422      	add	r2, r4
 800c360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c364:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c368:	3302      	adds	r3, #2
 800c36a:	e7c7      	b.n	800c2fc <_printf_common+0x58>
 800c36c:	2301      	movs	r3, #1
 800c36e:	4622      	mov	r2, r4
 800c370:	4649      	mov	r1, r9
 800c372:	4638      	mov	r0, r7
 800c374:	47c0      	blx	r8
 800c376:	3001      	adds	r0, #1
 800c378:	d0e6      	beq.n	800c348 <_printf_common+0xa4>
 800c37a:	3601      	adds	r6, #1
 800c37c:	e7d9      	b.n	800c332 <_printf_common+0x8e>
	...

0800c380 <_printf_i>:
 800c380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c384:	7e0f      	ldrb	r7, [r1, #24]
 800c386:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c388:	2f78      	cmp	r7, #120	; 0x78
 800c38a:	4691      	mov	r9, r2
 800c38c:	4680      	mov	r8, r0
 800c38e:	460c      	mov	r4, r1
 800c390:	469a      	mov	sl, r3
 800c392:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c396:	d807      	bhi.n	800c3a8 <_printf_i+0x28>
 800c398:	2f62      	cmp	r7, #98	; 0x62
 800c39a:	d80a      	bhi.n	800c3b2 <_printf_i+0x32>
 800c39c:	2f00      	cmp	r7, #0
 800c39e:	f000 80d8 	beq.w	800c552 <_printf_i+0x1d2>
 800c3a2:	2f58      	cmp	r7, #88	; 0x58
 800c3a4:	f000 80a3 	beq.w	800c4ee <_printf_i+0x16e>
 800c3a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c3b0:	e03a      	b.n	800c428 <_printf_i+0xa8>
 800c3b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c3b6:	2b15      	cmp	r3, #21
 800c3b8:	d8f6      	bhi.n	800c3a8 <_printf_i+0x28>
 800c3ba:	a101      	add	r1, pc, #4	; (adr r1, 800c3c0 <_printf_i+0x40>)
 800c3bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c3c0:	0800c419 	.word	0x0800c419
 800c3c4:	0800c42d 	.word	0x0800c42d
 800c3c8:	0800c3a9 	.word	0x0800c3a9
 800c3cc:	0800c3a9 	.word	0x0800c3a9
 800c3d0:	0800c3a9 	.word	0x0800c3a9
 800c3d4:	0800c3a9 	.word	0x0800c3a9
 800c3d8:	0800c42d 	.word	0x0800c42d
 800c3dc:	0800c3a9 	.word	0x0800c3a9
 800c3e0:	0800c3a9 	.word	0x0800c3a9
 800c3e4:	0800c3a9 	.word	0x0800c3a9
 800c3e8:	0800c3a9 	.word	0x0800c3a9
 800c3ec:	0800c539 	.word	0x0800c539
 800c3f0:	0800c45d 	.word	0x0800c45d
 800c3f4:	0800c51b 	.word	0x0800c51b
 800c3f8:	0800c3a9 	.word	0x0800c3a9
 800c3fc:	0800c3a9 	.word	0x0800c3a9
 800c400:	0800c55b 	.word	0x0800c55b
 800c404:	0800c3a9 	.word	0x0800c3a9
 800c408:	0800c45d 	.word	0x0800c45d
 800c40c:	0800c3a9 	.word	0x0800c3a9
 800c410:	0800c3a9 	.word	0x0800c3a9
 800c414:	0800c523 	.word	0x0800c523
 800c418:	682b      	ldr	r3, [r5, #0]
 800c41a:	1d1a      	adds	r2, r3, #4
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	602a      	str	r2, [r5, #0]
 800c420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c428:	2301      	movs	r3, #1
 800c42a:	e0a3      	b.n	800c574 <_printf_i+0x1f4>
 800c42c:	6820      	ldr	r0, [r4, #0]
 800c42e:	6829      	ldr	r1, [r5, #0]
 800c430:	0606      	lsls	r6, r0, #24
 800c432:	f101 0304 	add.w	r3, r1, #4
 800c436:	d50a      	bpl.n	800c44e <_printf_i+0xce>
 800c438:	680e      	ldr	r6, [r1, #0]
 800c43a:	602b      	str	r3, [r5, #0]
 800c43c:	2e00      	cmp	r6, #0
 800c43e:	da03      	bge.n	800c448 <_printf_i+0xc8>
 800c440:	232d      	movs	r3, #45	; 0x2d
 800c442:	4276      	negs	r6, r6
 800c444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c448:	485e      	ldr	r0, [pc, #376]	; (800c5c4 <_printf_i+0x244>)
 800c44a:	230a      	movs	r3, #10
 800c44c:	e019      	b.n	800c482 <_printf_i+0x102>
 800c44e:	680e      	ldr	r6, [r1, #0]
 800c450:	602b      	str	r3, [r5, #0]
 800c452:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c456:	bf18      	it	ne
 800c458:	b236      	sxthne	r6, r6
 800c45a:	e7ef      	b.n	800c43c <_printf_i+0xbc>
 800c45c:	682b      	ldr	r3, [r5, #0]
 800c45e:	6820      	ldr	r0, [r4, #0]
 800c460:	1d19      	adds	r1, r3, #4
 800c462:	6029      	str	r1, [r5, #0]
 800c464:	0601      	lsls	r1, r0, #24
 800c466:	d501      	bpl.n	800c46c <_printf_i+0xec>
 800c468:	681e      	ldr	r6, [r3, #0]
 800c46a:	e002      	b.n	800c472 <_printf_i+0xf2>
 800c46c:	0646      	lsls	r6, r0, #25
 800c46e:	d5fb      	bpl.n	800c468 <_printf_i+0xe8>
 800c470:	881e      	ldrh	r6, [r3, #0]
 800c472:	4854      	ldr	r0, [pc, #336]	; (800c5c4 <_printf_i+0x244>)
 800c474:	2f6f      	cmp	r7, #111	; 0x6f
 800c476:	bf0c      	ite	eq
 800c478:	2308      	moveq	r3, #8
 800c47a:	230a      	movne	r3, #10
 800c47c:	2100      	movs	r1, #0
 800c47e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c482:	6865      	ldr	r5, [r4, #4]
 800c484:	60a5      	str	r5, [r4, #8]
 800c486:	2d00      	cmp	r5, #0
 800c488:	bfa2      	ittt	ge
 800c48a:	6821      	ldrge	r1, [r4, #0]
 800c48c:	f021 0104 	bicge.w	r1, r1, #4
 800c490:	6021      	strge	r1, [r4, #0]
 800c492:	b90e      	cbnz	r6, 800c498 <_printf_i+0x118>
 800c494:	2d00      	cmp	r5, #0
 800c496:	d04d      	beq.n	800c534 <_printf_i+0x1b4>
 800c498:	4615      	mov	r5, r2
 800c49a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c49e:	fb03 6711 	mls	r7, r3, r1, r6
 800c4a2:	5dc7      	ldrb	r7, [r0, r7]
 800c4a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c4a8:	4637      	mov	r7, r6
 800c4aa:	42bb      	cmp	r3, r7
 800c4ac:	460e      	mov	r6, r1
 800c4ae:	d9f4      	bls.n	800c49a <_printf_i+0x11a>
 800c4b0:	2b08      	cmp	r3, #8
 800c4b2:	d10b      	bne.n	800c4cc <_printf_i+0x14c>
 800c4b4:	6823      	ldr	r3, [r4, #0]
 800c4b6:	07de      	lsls	r6, r3, #31
 800c4b8:	d508      	bpl.n	800c4cc <_printf_i+0x14c>
 800c4ba:	6923      	ldr	r3, [r4, #16]
 800c4bc:	6861      	ldr	r1, [r4, #4]
 800c4be:	4299      	cmp	r1, r3
 800c4c0:	bfde      	ittt	le
 800c4c2:	2330      	movle	r3, #48	; 0x30
 800c4c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c4c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c4cc:	1b52      	subs	r2, r2, r5
 800c4ce:	6122      	str	r2, [r4, #16]
 800c4d0:	f8cd a000 	str.w	sl, [sp]
 800c4d4:	464b      	mov	r3, r9
 800c4d6:	aa03      	add	r2, sp, #12
 800c4d8:	4621      	mov	r1, r4
 800c4da:	4640      	mov	r0, r8
 800c4dc:	f7ff fee2 	bl	800c2a4 <_printf_common>
 800c4e0:	3001      	adds	r0, #1
 800c4e2:	d14c      	bne.n	800c57e <_printf_i+0x1fe>
 800c4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e8:	b004      	add	sp, #16
 800c4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ee:	4835      	ldr	r0, [pc, #212]	; (800c5c4 <_printf_i+0x244>)
 800c4f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c4f4:	6829      	ldr	r1, [r5, #0]
 800c4f6:	6823      	ldr	r3, [r4, #0]
 800c4f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800c4fc:	6029      	str	r1, [r5, #0]
 800c4fe:	061d      	lsls	r5, r3, #24
 800c500:	d514      	bpl.n	800c52c <_printf_i+0x1ac>
 800c502:	07df      	lsls	r7, r3, #31
 800c504:	bf44      	itt	mi
 800c506:	f043 0320 	orrmi.w	r3, r3, #32
 800c50a:	6023      	strmi	r3, [r4, #0]
 800c50c:	b91e      	cbnz	r6, 800c516 <_printf_i+0x196>
 800c50e:	6823      	ldr	r3, [r4, #0]
 800c510:	f023 0320 	bic.w	r3, r3, #32
 800c514:	6023      	str	r3, [r4, #0]
 800c516:	2310      	movs	r3, #16
 800c518:	e7b0      	b.n	800c47c <_printf_i+0xfc>
 800c51a:	6823      	ldr	r3, [r4, #0]
 800c51c:	f043 0320 	orr.w	r3, r3, #32
 800c520:	6023      	str	r3, [r4, #0]
 800c522:	2378      	movs	r3, #120	; 0x78
 800c524:	4828      	ldr	r0, [pc, #160]	; (800c5c8 <_printf_i+0x248>)
 800c526:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c52a:	e7e3      	b.n	800c4f4 <_printf_i+0x174>
 800c52c:	0659      	lsls	r1, r3, #25
 800c52e:	bf48      	it	mi
 800c530:	b2b6      	uxthmi	r6, r6
 800c532:	e7e6      	b.n	800c502 <_printf_i+0x182>
 800c534:	4615      	mov	r5, r2
 800c536:	e7bb      	b.n	800c4b0 <_printf_i+0x130>
 800c538:	682b      	ldr	r3, [r5, #0]
 800c53a:	6826      	ldr	r6, [r4, #0]
 800c53c:	6961      	ldr	r1, [r4, #20]
 800c53e:	1d18      	adds	r0, r3, #4
 800c540:	6028      	str	r0, [r5, #0]
 800c542:	0635      	lsls	r5, r6, #24
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	d501      	bpl.n	800c54c <_printf_i+0x1cc>
 800c548:	6019      	str	r1, [r3, #0]
 800c54a:	e002      	b.n	800c552 <_printf_i+0x1d2>
 800c54c:	0670      	lsls	r0, r6, #25
 800c54e:	d5fb      	bpl.n	800c548 <_printf_i+0x1c8>
 800c550:	8019      	strh	r1, [r3, #0]
 800c552:	2300      	movs	r3, #0
 800c554:	6123      	str	r3, [r4, #16]
 800c556:	4615      	mov	r5, r2
 800c558:	e7ba      	b.n	800c4d0 <_printf_i+0x150>
 800c55a:	682b      	ldr	r3, [r5, #0]
 800c55c:	1d1a      	adds	r2, r3, #4
 800c55e:	602a      	str	r2, [r5, #0]
 800c560:	681d      	ldr	r5, [r3, #0]
 800c562:	6862      	ldr	r2, [r4, #4]
 800c564:	2100      	movs	r1, #0
 800c566:	4628      	mov	r0, r5
 800c568:	f7f3 fe42 	bl	80001f0 <memchr>
 800c56c:	b108      	cbz	r0, 800c572 <_printf_i+0x1f2>
 800c56e:	1b40      	subs	r0, r0, r5
 800c570:	6060      	str	r0, [r4, #4]
 800c572:	6863      	ldr	r3, [r4, #4]
 800c574:	6123      	str	r3, [r4, #16]
 800c576:	2300      	movs	r3, #0
 800c578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c57c:	e7a8      	b.n	800c4d0 <_printf_i+0x150>
 800c57e:	6923      	ldr	r3, [r4, #16]
 800c580:	462a      	mov	r2, r5
 800c582:	4649      	mov	r1, r9
 800c584:	4640      	mov	r0, r8
 800c586:	47d0      	blx	sl
 800c588:	3001      	adds	r0, #1
 800c58a:	d0ab      	beq.n	800c4e4 <_printf_i+0x164>
 800c58c:	6823      	ldr	r3, [r4, #0]
 800c58e:	079b      	lsls	r3, r3, #30
 800c590:	d413      	bmi.n	800c5ba <_printf_i+0x23a>
 800c592:	68e0      	ldr	r0, [r4, #12]
 800c594:	9b03      	ldr	r3, [sp, #12]
 800c596:	4298      	cmp	r0, r3
 800c598:	bfb8      	it	lt
 800c59a:	4618      	movlt	r0, r3
 800c59c:	e7a4      	b.n	800c4e8 <_printf_i+0x168>
 800c59e:	2301      	movs	r3, #1
 800c5a0:	4632      	mov	r2, r6
 800c5a2:	4649      	mov	r1, r9
 800c5a4:	4640      	mov	r0, r8
 800c5a6:	47d0      	blx	sl
 800c5a8:	3001      	adds	r0, #1
 800c5aa:	d09b      	beq.n	800c4e4 <_printf_i+0x164>
 800c5ac:	3501      	adds	r5, #1
 800c5ae:	68e3      	ldr	r3, [r4, #12]
 800c5b0:	9903      	ldr	r1, [sp, #12]
 800c5b2:	1a5b      	subs	r3, r3, r1
 800c5b4:	42ab      	cmp	r3, r5
 800c5b6:	dcf2      	bgt.n	800c59e <_printf_i+0x21e>
 800c5b8:	e7eb      	b.n	800c592 <_printf_i+0x212>
 800c5ba:	2500      	movs	r5, #0
 800c5bc:	f104 0619 	add.w	r6, r4, #25
 800c5c0:	e7f5      	b.n	800c5ae <_printf_i+0x22e>
 800c5c2:	bf00      	nop
 800c5c4:	0800ec52 	.word	0x0800ec52
 800c5c8:	0800ec63 	.word	0x0800ec63

0800c5cc <siprintf>:
 800c5cc:	b40e      	push	{r1, r2, r3}
 800c5ce:	b500      	push	{lr}
 800c5d0:	b09c      	sub	sp, #112	; 0x70
 800c5d2:	ab1d      	add	r3, sp, #116	; 0x74
 800c5d4:	9002      	str	r0, [sp, #8]
 800c5d6:	9006      	str	r0, [sp, #24]
 800c5d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c5dc:	4809      	ldr	r0, [pc, #36]	; (800c604 <siprintf+0x38>)
 800c5de:	9107      	str	r1, [sp, #28]
 800c5e0:	9104      	str	r1, [sp, #16]
 800c5e2:	4909      	ldr	r1, [pc, #36]	; (800c608 <siprintf+0x3c>)
 800c5e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5e8:	9105      	str	r1, [sp, #20]
 800c5ea:	6800      	ldr	r0, [r0, #0]
 800c5ec:	9301      	str	r3, [sp, #4]
 800c5ee:	a902      	add	r1, sp, #8
 800c5f0:	f001 fbf6 	bl	800dde0 <_svfiprintf_r>
 800c5f4:	9b02      	ldr	r3, [sp, #8]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	701a      	strb	r2, [r3, #0]
 800c5fa:	b01c      	add	sp, #112	; 0x70
 800c5fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c600:	b003      	add	sp, #12
 800c602:	4770      	bx	lr
 800c604:	200000fc 	.word	0x200000fc
 800c608:	ffff0208 	.word	0xffff0208

0800c60c <_strtol_l.constprop.0>:
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c612:	d001      	beq.n	800c618 <_strtol_l.constprop.0+0xc>
 800c614:	2b24      	cmp	r3, #36	; 0x24
 800c616:	d906      	bls.n	800c626 <_strtol_l.constprop.0+0x1a>
 800c618:	f7ff fb2e 	bl	800bc78 <__errno>
 800c61c:	2316      	movs	r3, #22
 800c61e:	6003      	str	r3, [r0, #0]
 800c620:	2000      	movs	r0, #0
 800c622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c626:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c70c <_strtol_l.constprop.0+0x100>
 800c62a:	460d      	mov	r5, r1
 800c62c:	462e      	mov	r6, r5
 800c62e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c632:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c636:	f017 0708 	ands.w	r7, r7, #8
 800c63a:	d1f7      	bne.n	800c62c <_strtol_l.constprop.0+0x20>
 800c63c:	2c2d      	cmp	r4, #45	; 0x2d
 800c63e:	d132      	bne.n	800c6a6 <_strtol_l.constprop.0+0x9a>
 800c640:	782c      	ldrb	r4, [r5, #0]
 800c642:	2701      	movs	r7, #1
 800c644:	1cb5      	adds	r5, r6, #2
 800c646:	2b00      	cmp	r3, #0
 800c648:	d05b      	beq.n	800c702 <_strtol_l.constprop.0+0xf6>
 800c64a:	2b10      	cmp	r3, #16
 800c64c:	d109      	bne.n	800c662 <_strtol_l.constprop.0+0x56>
 800c64e:	2c30      	cmp	r4, #48	; 0x30
 800c650:	d107      	bne.n	800c662 <_strtol_l.constprop.0+0x56>
 800c652:	782c      	ldrb	r4, [r5, #0]
 800c654:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c658:	2c58      	cmp	r4, #88	; 0x58
 800c65a:	d14d      	bne.n	800c6f8 <_strtol_l.constprop.0+0xec>
 800c65c:	786c      	ldrb	r4, [r5, #1]
 800c65e:	2310      	movs	r3, #16
 800c660:	3502      	adds	r5, #2
 800c662:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c666:	f108 38ff 	add.w	r8, r8, #4294967295
 800c66a:	f04f 0c00 	mov.w	ip, #0
 800c66e:	fbb8 f9f3 	udiv	r9, r8, r3
 800c672:	4666      	mov	r6, ip
 800c674:	fb03 8a19 	mls	sl, r3, r9, r8
 800c678:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c67c:	f1be 0f09 	cmp.w	lr, #9
 800c680:	d816      	bhi.n	800c6b0 <_strtol_l.constprop.0+0xa4>
 800c682:	4674      	mov	r4, lr
 800c684:	42a3      	cmp	r3, r4
 800c686:	dd24      	ble.n	800c6d2 <_strtol_l.constprop.0+0xc6>
 800c688:	f1bc 0f00 	cmp.w	ip, #0
 800c68c:	db1e      	blt.n	800c6cc <_strtol_l.constprop.0+0xc0>
 800c68e:	45b1      	cmp	r9, r6
 800c690:	d31c      	bcc.n	800c6cc <_strtol_l.constprop.0+0xc0>
 800c692:	d101      	bne.n	800c698 <_strtol_l.constprop.0+0x8c>
 800c694:	45a2      	cmp	sl, r4
 800c696:	db19      	blt.n	800c6cc <_strtol_l.constprop.0+0xc0>
 800c698:	fb06 4603 	mla	r6, r6, r3, r4
 800c69c:	f04f 0c01 	mov.w	ip, #1
 800c6a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c6a4:	e7e8      	b.n	800c678 <_strtol_l.constprop.0+0x6c>
 800c6a6:	2c2b      	cmp	r4, #43	; 0x2b
 800c6a8:	bf04      	itt	eq
 800c6aa:	782c      	ldrbeq	r4, [r5, #0]
 800c6ac:	1cb5      	addeq	r5, r6, #2
 800c6ae:	e7ca      	b.n	800c646 <_strtol_l.constprop.0+0x3a>
 800c6b0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c6b4:	f1be 0f19 	cmp.w	lr, #25
 800c6b8:	d801      	bhi.n	800c6be <_strtol_l.constprop.0+0xb2>
 800c6ba:	3c37      	subs	r4, #55	; 0x37
 800c6bc:	e7e2      	b.n	800c684 <_strtol_l.constprop.0+0x78>
 800c6be:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c6c2:	f1be 0f19 	cmp.w	lr, #25
 800c6c6:	d804      	bhi.n	800c6d2 <_strtol_l.constprop.0+0xc6>
 800c6c8:	3c57      	subs	r4, #87	; 0x57
 800c6ca:	e7db      	b.n	800c684 <_strtol_l.constprop.0+0x78>
 800c6cc:	f04f 3cff 	mov.w	ip, #4294967295
 800c6d0:	e7e6      	b.n	800c6a0 <_strtol_l.constprop.0+0x94>
 800c6d2:	f1bc 0f00 	cmp.w	ip, #0
 800c6d6:	da05      	bge.n	800c6e4 <_strtol_l.constprop.0+0xd8>
 800c6d8:	2322      	movs	r3, #34	; 0x22
 800c6da:	6003      	str	r3, [r0, #0]
 800c6dc:	4646      	mov	r6, r8
 800c6de:	b942      	cbnz	r2, 800c6f2 <_strtol_l.constprop.0+0xe6>
 800c6e0:	4630      	mov	r0, r6
 800c6e2:	e79e      	b.n	800c622 <_strtol_l.constprop.0+0x16>
 800c6e4:	b107      	cbz	r7, 800c6e8 <_strtol_l.constprop.0+0xdc>
 800c6e6:	4276      	negs	r6, r6
 800c6e8:	2a00      	cmp	r2, #0
 800c6ea:	d0f9      	beq.n	800c6e0 <_strtol_l.constprop.0+0xd4>
 800c6ec:	f1bc 0f00 	cmp.w	ip, #0
 800c6f0:	d000      	beq.n	800c6f4 <_strtol_l.constprop.0+0xe8>
 800c6f2:	1e69      	subs	r1, r5, #1
 800c6f4:	6011      	str	r1, [r2, #0]
 800c6f6:	e7f3      	b.n	800c6e0 <_strtol_l.constprop.0+0xd4>
 800c6f8:	2430      	movs	r4, #48	; 0x30
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d1b1      	bne.n	800c662 <_strtol_l.constprop.0+0x56>
 800c6fe:	2308      	movs	r3, #8
 800c700:	e7af      	b.n	800c662 <_strtol_l.constprop.0+0x56>
 800c702:	2c30      	cmp	r4, #48	; 0x30
 800c704:	d0a5      	beq.n	800c652 <_strtol_l.constprop.0+0x46>
 800c706:	230a      	movs	r3, #10
 800c708:	e7ab      	b.n	800c662 <_strtol_l.constprop.0+0x56>
 800c70a:	bf00      	nop
 800c70c:	0800ec75 	.word	0x0800ec75

0800c710 <strtol>:
 800c710:	4613      	mov	r3, r2
 800c712:	460a      	mov	r2, r1
 800c714:	4601      	mov	r1, r0
 800c716:	4802      	ldr	r0, [pc, #8]	; (800c720 <strtol+0x10>)
 800c718:	6800      	ldr	r0, [r0, #0]
 800c71a:	f7ff bf77 	b.w	800c60c <_strtol_l.constprop.0>
 800c71e:	bf00      	nop
 800c720:	200000fc 	.word	0x200000fc

0800c724 <quorem>:
 800c724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c728:	6903      	ldr	r3, [r0, #16]
 800c72a:	690c      	ldr	r4, [r1, #16]
 800c72c:	42a3      	cmp	r3, r4
 800c72e:	4607      	mov	r7, r0
 800c730:	f2c0 8081 	blt.w	800c836 <quorem+0x112>
 800c734:	3c01      	subs	r4, #1
 800c736:	f101 0814 	add.w	r8, r1, #20
 800c73a:	f100 0514 	add.w	r5, r0, #20
 800c73e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c742:	9301      	str	r3, [sp, #4]
 800c744:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c748:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c74c:	3301      	adds	r3, #1
 800c74e:	429a      	cmp	r2, r3
 800c750:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c754:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c758:	fbb2 f6f3 	udiv	r6, r2, r3
 800c75c:	d331      	bcc.n	800c7c2 <quorem+0x9e>
 800c75e:	f04f 0e00 	mov.w	lr, #0
 800c762:	4640      	mov	r0, r8
 800c764:	46ac      	mov	ip, r5
 800c766:	46f2      	mov	sl, lr
 800c768:	f850 2b04 	ldr.w	r2, [r0], #4
 800c76c:	b293      	uxth	r3, r2
 800c76e:	fb06 e303 	mla	r3, r6, r3, lr
 800c772:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c776:	b29b      	uxth	r3, r3
 800c778:	ebaa 0303 	sub.w	r3, sl, r3
 800c77c:	f8dc a000 	ldr.w	sl, [ip]
 800c780:	0c12      	lsrs	r2, r2, #16
 800c782:	fa13 f38a 	uxtah	r3, r3, sl
 800c786:	fb06 e202 	mla	r2, r6, r2, lr
 800c78a:	9300      	str	r3, [sp, #0]
 800c78c:	9b00      	ldr	r3, [sp, #0]
 800c78e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c792:	b292      	uxth	r2, r2
 800c794:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c798:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c79c:	f8bd 3000 	ldrh.w	r3, [sp]
 800c7a0:	4581      	cmp	r9, r0
 800c7a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c7a6:	f84c 3b04 	str.w	r3, [ip], #4
 800c7aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c7ae:	d2db      	bcs.n	800c768 <quorem+0x44>
 800c7b0:	f855 300b 	ldr.w	r3, [r5, fp]
 800c7b4:	b92b      	cbnz	r3, 800c7c2 <quorem+0x9e>
 800c7b6:	9b01      	ldr	r3, [sp, #4]
 800c7b8:	3b04      	subs	r3, #4
 800c7ba:	429d      	cmp	r5, r3
 800c7bc:	461a      	mov	r2, r3
 800c7be:	d32e      	bcc.n	800c81e <quorem+0xfa>
 800c7c0:	613c      	str	r4, [r7, #16]
 800c7c2:	4638      	mov	r0, r7
 800c7c4:	f001 f8b8 	bl	800d938 <__mcmp>
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	db24      	blt.n	800c816 <quorem+0xf2>
 800c7cc:	3601      	adds	r6, #1
 800c7ce:	4628      	mov	r0, r5
 800c7d0:	f04f 0c00 	mov.w	ip, #0
 800c7d4:	f858 2b04 	ldr.w	r2, [r8], #4
 800c7d8:	f8d0 e000 	ldr.w	lr, [r0]
 800c7dc:	b293      	uxth	r3, r2
 800c7de:	ebac 0303 	sub.w	r3, ip, r3
 800c7e2:	0c12      	lsrs	r2, r2, #16
 800c7e4:	fa13 f38e 	uxtah	r3, r3, lr
 800c7e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c7ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c7f6:	45c1      	cmp	r9, r8
 800c7f8:	f840 3b04 	str.w	r3, [r0], #4
 800c7fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c800:	d2e8      	bcs.n	800c7d4 <quorem+0xb0>
 800c802:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c806:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c80a:	b922      	cbnz	r2, 800c816 <quorem+0xf2>
 800c80c:	3b04      	subs	r3, #4
 800c80e:	429d      	cmp	r5, r3
 800c810:	461a      	mov	r2, r3
 800c812:	d30a      	bcc.n	800c82a <quorem+0x106>
 800c814:	613c      	str	r4, [r7, #16]
 800c816:	4630      	mov	r0, r6
 800c818:	b003      	add	sp, #12
 800c81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c81e:	6812      	ldr	r2, [r2, #0]
 800c820:	3b04      	subs	r3, #4
 800c822:	2a00      	cmp	r2, #0
 800c824:	d1cc      	bne.n	800c7c0 <quorem+0x9c>
 800c826:	3c01      	subs	r4, #1
 800c828:	e7c7      	b.n	800c7ba <quorem+0x96>
 800c82a:	6812      	ldr	r2, [r2, #0]
 800c82c:	3b04      	subs	r3, #4
 800c82e:	2a00      	cmp	r2, #0
 800c830:	d1f0      	bne.n	800c814 <quorem+0xf0>
 800c832:	3c01      	subs	r4, #1
 800c834:	e7eb      	b.n	800c80e <quorem+0xea>
 800c836:	2000      	movs	r0, #0
 800c838:	e7ee      	b.n	800c818 <quorem+0xf4>
 800c83a:	0000      	movs	r0, r0
 800c83c:	0000      	movs	r0, r0
	...

0800c840 <_dtoa_r>:
 800c840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c844:	ed2d 8b04 	vpush	{d8-d9}
 800c848:	ec57 6b10 	vmov	r6, r7, d0
 800c84c:	b093      	sub	sp, #76	; 0x4c
 800c84e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c850:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c854:	9106      	str	r1, [sp, #24]
 800c856:	ee10 aa10 	vmov	sl, s0
 800c85a:	4604      	mov	r4, r0
 800c85c:	9209      	str	r2, [sp, #36]	; 0x24
 800c85e:	930c      	str	r3, [sp, #48]	; 0x30
 800c860:	46bb      	mov	fp, r7
 800c862:	b975      	cbnz	r5, 800c882 <_dtoa_r+0x42>
 800c864:	2010      	movs	r0, #16
 800c866:	f000 fddd 	bl	800d424 <malloc>
 800c86a:	4602      	mov	r2, r0
 800c86c:	6260      	str	r0, [r4, #36]	; 0x24
 800c86e:	b920      	cbnz	r0, 800c87a <_dtoa_r+0x3a>
 800c870:	4ba7      	ldr	r3, [pc, #668]	; (800cb10 <_dtoa_r+0x2d0>)
 800c872:	21ea      	movs	r1, #234	; 0xea
 800c874:	48a7      	ldr	r0, [pc, #668]	; (800cb14 <_dtoa_r+0x2d4>)
 800c876:	f001 fbc3 	bl	800e000 <__assert_func>
 800c87a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c87e:	6005      	str	r5, [r0, #0]
 800c880:	60c5      	str	r5, [r0, #12]
 800c882:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c884:	6819      	ldr	r1, [r3, #0]
 800c886:	b151      	cbz	r1, 800c89e <_dtoa_r+0x5e>
 800c888:	685a      	ldr	r2, [r3, #4]
 800c88a:	604a      	str	r2, [r1, #4]
 800c88c:	2301      	movs	r3, #1
 800c88e:	4093      	lsls	r3, r2
 800c890:	608b      	str	r3, [r1, #8]
 800c892:	4620      	mov	r0, r4
 800c894:	f000 fe0e 	bl	800d4b4 <_Bfree>
 800c898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c89a:	2200      	movs	r2, #0
 800c89c:	601a      	str	r2, [r3, #0]
 800c89e:	1e3b      	subs	r3, r7, #0
 800c8a0:	bfaa      	itet	ge
 800c8a2:	2300      	movge	r3, #0
 800c8a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c8a8:	f8c8 3000 	strge.w	r3, [r8]
 800c8ac:	4b9a      	ldr	r3, [pc, #616]	; (800cb18 <_dtoa_r+0x2d8>)
 800c8ae:	bfbc      	itt	lt
 800c8b0:	2201      	movlt	r2, #1
 800c8b2:	f8c8 2000 	strlt.w	r2, [r8]
 800c8b6:	ea33 030b 	bics.w	r3, r3, fp
 800c8ba:	d11b      	bne.n	800c8f4 <_dtoa_r+0xb4>
 800c8bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c8be:	f242 730f 	movw	r3, #9999	; 0x270f
 800c8c2:	6013      	str	r3, [r2, #0]
 800c8c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c8c8:	4333      	orrs	r3, r6
 800c8ca:	f000 8592 	beq.w	800d3f2 <_dtoa_r+0xbb2>
 800c8ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8d0:	b963      	cbnz	r3, 800c8ec <_dtoa_r+0xac>
 800c8d2:	4b92      	ldr	r3, [pc, #584]	; (800cb1c <_dtoa_r+0x2dc>)
 800c8d4:	e022      	b.n	800c91c <_dtoa_r+0xdc>
 800c8d6:	4b92      	ldr	r3, [pc, #584]	; (800cb20 <_dtoa_r+0x2e0>)
 800c8d8:	9301      	str	r3, [sp, #4]
 800c8da:	3308      	adds	r3, #8
 800c8dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c8de:	6013      	str	r3, [r2, #0]
 800c8e0:	9801      	ldr	r0, [sp, #4]
 800c8e2:	b013      	add	sp, #76	; 0x4c
 800c8e4:	ecbd 8b04 	vpop	{d8-d9}
 800c8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ec:	4b8b      	ldr	r3, [pc, #556]	; (800cb1c <_dtoa_r+0x2dc>)
 800c8ee:	9301      	str	r3, [sp, #4]
 800c8f0:	3303      	adds	r3, #3
 800c8f2:	e7f3      	b.n	800c8dc <_dtoa_r+0x9c>
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	4650      	mov	r0, sl
 800c8fa:	4659      	mov	r1, fp
 800c8fc:	f7f4 f8ec 	bl	8000ad8 <__aeabi_dcmpeq>
 800c900:	ec4b ab19 	vmov	d9, sl, fp
 800c904:	4680      	mov	r8, r0
 800c906:	b158      	cbz	r0, 800c920 <_dtoa_r+0xe0>
 800c908:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c90a:	2301      	movs	r3, #1
 800c90c:	6013      	str	r3, [r2, #0]
 800c90e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c910:	2b00      	cmp	r3, #0
 800c912:	f000 856b 	beq.w	800d3ec <_dtoa_r+0xbac>
 800c916:	4883      	ldr	r0, [pc, #524]	; (800cb24 <_dtoa_r+0x2e4>)
 800c918:	6018      	str	r0, [r3, #0]
 800c91a:	1e43      	subs	r3, r0, #1
 800c91c:	9301      	str	r3, [sp, #4]
 800c91e:	e7df      	b.n	800c8e0 <_dtoa_r+0xa0>
 800c920:	ec4b ab10 	vmov	d0, sl, fp
 800c924:	aa10      	add	r2, sp, #64	; 0x40
 800c926:	a911      	add	r1, sp, #68	; 0x44
 800c928:	4620      	mov	r0, r4
 800c92a:	f001 f8ab 	bl	800da84 <__d2b>
 800c92e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c932:	ee08 0a10 	vmov	s16, r0
 800c936:	2d00      	cmp	r5, #0
 800c938:	f000 8084 	beq.w	800ca44 <_dtoa_r+0x204>
 800c93c:	ee19 3a90 	vmov	r3, s19
 800c940:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c944:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c948:	4656      	mov	r6, sl
 800c94a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c94e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c952:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c956:	4b74      	ldr	r3, [pc, #464]	; (800cb28 <_dtoa_r+0x2e8>)
 800c958:	2200      	movs	r2, #0
 800c95a:	4630      	mov	r0, r6
 800c95c:	4639      	mov	r1, r7
 800c95e:	f7f3 fc9b 	bl	8000298 <__aeabi_dsub>
 800c962:	a365      	add	r3, pc, #404	; (adr r3, 800caf8 <_dtoa_r+0x2b8>)
 800c964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c968:	f7f3 fe4e 	bl	8000608 <__aeabi_dmul>
 800c96c:	a364      	add	r3, pc, #400	; (adr r3, 800cb00 <_dtoa_r+0x2c0>)
 800c96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c972:	f7f3 fc93 	bl	800029c <__adddf3>
 800c976:	4606      	mov	r6, r0
 800c978:	4628      	mov	r0, r5
 800c97a:	460f      	mov	r7, r1
 800c97c:	f7f3 fdda 	bl	8000534 <__aeabi_i2d>
 800c980:	a361      	add	r3, pc, #388	; (adr r3, 800cb08 <_dtoa_r+0x2c8>)
 800c982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c986:	f7f3 fe3f 	bl	8000608 <__aeabi_dmul>
 800c98a:	4602      	mov	r2, r0
 800c98c:	460b      	mov	r3, r1
 800c98e:	4630      	mov	r0, r6
 800c990:	4639      	mov	r1, r7
 800c992:	f7f3 fc83 	bl	800029c <__adddf3>
 800c996:	4606      	mov	r6, r0
 800c998:	460f      	mov	r7, r1
 800c99a:	f7f4 f8e5 	bl	8000b68 <__aeabi_d2iz>
 800c99e:	2200      	movs	r2, #0
 800c9a0:	9000      	str	r0, [sp, #0]
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	4630      	mov	r0, r6
 800c9a6:	4639      	mov	r1, r7
 800c9a8:	f7f4 f8a0 	bl	8000aec <__aeabi_dcmplt>
 800c9ac:	b150      	cbz	r0, 800c9c4 <_dtoa_r+0x184>
 800c9ae:	9800      	ldr	r0, [sp, #0]
 800c9b0:	f7f3 fdc0 	bl	8000534 <__aeabi_i2d>
 800c9b4:	4632      	mov	r2, r6
 800c9b6:	463b      	mov	r3, r7
 800c9b8:	f7f4 f88e 	bl	8000ad8 <__aeabi_dcmpeq>
 800c9bc:	b910      	cbnz	r0, 800c9c4 <_dtoa_r+0x184>
 800c9be:	9b00      	ldr	r3, [sp, #0]
 800c9c0:	3b01      	subs	r3, #1
 800c9c2:	9300      	str	r3, [sp, #0]
 800c9c4:	9b00      	ldr	r3, [sp, #0]
 800c9c6:	2b16      	cmp	r3, #22
 800c9c8:	d85a      	bhi.n	800ca80 <_dtoa_r+0x240>
 800c9ca:	9a00      	ldr	r2, [sp, #0]
 800c9cc:	4b57      	ldr	r3, [pc, #348]	; (800cb2c <_dtoa_r+0x2ec>)
 800c9ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d6:	ec51 0b19 	vmov	r0, r1, d9
 800c9da:	f7f4 f887 	bl	8000aec <__aeabi_dcmplt>
 800c9de:	2800      	cmp	r0, #0
 800c9e0:	d050      	beq.n	800ca84 <_dtoa_r+0x244>
 800c9e2:	9b00      	ldr	r3, [sp, #0]
 800c9e4:	3b01      	subs	r3, #1
 800c9e6:	9300      	str	r3, [sp, #0]
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800c9ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c9ee:	1b5d      	subs	r5, r3, r5
 800c9f0:	1e6b      	subs	r3, r5, #1
 800c9f2:	9305      	str	r3, [sp, #20]
 800c9f4:	bf45      	ittet	mi
 800c9f6:	f1c5 0301 	rsbmi	r3, r5, #1
 800c9fa:	9304      	strmi	r3, [sp, #16]
 800c9fc:	2300      	movpl	r3, #0
 800c9fe:	2300      	movmi	r3, #0
 800ca00:	bf4c      	ite	mi
 800ca02:	9305      	strmi	r3, [sp, #20]
 800ca04:	9304      	strpl	r3, [sp, #16]
 800ca06:	9b00      	ldr	r3, [sp, #0]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	db3d      	blt.n	800ca88 <_dtoa_r+0x248>
 800ca0c:	9b05      	ldr	r3, [sp, #20]
 800ca0e:	9a00      	ldr	r2, [sp, #0]
 800ca10:	920a      	str	r2, [sp, #40]	; 0x28
 800ca12:	4413      	add	r3, r2
 800ca14:	9305      	str	r3, [sp, #20]
 800ca16:	2300      	movs	r3, #0
 800ca18:	9307      	str	r3, [sp, #28]
 800ca1a:	9b06      	ldr	r3, [sp, #24]
 800ca1c:	2b09      	cmp	r3, #9
 800ca1e:	f200 8089 	bhi.w	800cb34 <_dtoa_r+0x2f4>
 800ca22:	2b05      	cmp	r3, #5
 800ca24:	bfc4      	itt	gt
 800ca26:	3b04      	subgt	r3, #4
 800ca28:	9306      	strgt	r3, [sp, #24]
 800ca2a:	9b06      	ldr	r3, [sp, #24]
 800ca2c:	f1a3 0302 	sub.w	r3, r3, #2
 800ca30:	bfcc      	ite	gt
 800ca32:	2500      	movgt	r5, #0
 800ca34:	2501      	movle	r5, #1
 800ca36:	2b03      	cmp	r3, #3
 800ca38:	f200 8087 	bhi.w	800cb4a <_dtoa_r+0x30a>
 800ca3c:	e8df f003 	tbb	[pc, r3]
 800ca40:	59383a2d 	.word	0x59383a2d
 800ca44:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ca48:	441d      	add	r5, r3
 800ca4a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ca4e:	2b20      	cmp	r3, #32
 800ca50:	bfc1      	itttt	gt
 800ca52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ca56:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ca5a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ca5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ca62:	bfda      	itte	le
 800ca64:	f1c3 0320 	rsble	r3, r3, #32
 800ca68:	fa06 f003 	lslle.w	r0, r6, r3
 800ca6c:	4318      	orrgt	r0, r3
 800ca6e:	f7f3 fd51 	bl	8000514 <__aeabi_ui2d>
 800ca72:	2301      	movs	r3, #1
 800ca74:	4606      	mov	r6, r0
 800ca76:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ca7a:	3d01      	subs	r5, #1
 800ca7c:	930e      	str	r3, [sp, #56]	; 0x38
 800ca7e:	e76a      	b.n	800c956 <_dtoa_r+0x116>
 800ca80:	2301      	movs	r3, #1
 800ca82:	e7b2      	b.n	800c9ea <_dtoa_r+0x1aa>
 800ca84:	900b      	str	r0, [sp, #44]	; 0x2c
 800ca86:	e7b1      	b.n	800c9ec <_dtoa_r+0x1ac>
 800ca88:	9b04      	ldr	r3, [sp, #16]
 800ca8a:	9a00      	ldr	r2, [sp, #0]
 800ca8c:	1a9b      	subs	r3, r3, r2
 800ca8e:	9304      	str	r3, [sp, #16]
 800ca90:	4253      	negs	r3, r2
 800ca92:	9307      	str	r3, [sp, #28]
 800ca94:	2300      	movs	r3, #0
 800ca96:	930a      	str	r3, [sp, #40]	; 0x28
 800ca98:	e7bf      	b.n	800ca1a <_dtoa_r+0x1da>
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	9308      	str	r3, [sp, #32]
 800ca9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	dc55      	bgt.n	800cb50 <_dtoa_r+0x310>
 800caa4:	2301      	movs	r3, #1
 800caa6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800caaa:	461a      	mov	r2, r3
 800caac:	9209      	str	r2, [sp, #36]	; 0x24
 800caae:	e00c      	b.n	800caca <_dtoa_r+0x28a>
 800cab0:	2301      	movs	r3, #1
 800cab2:	e7f3      	b.n	800ca9c <_dtoa_r+0x25c>
 800cab4:	2300      	movs	r3, #0
 800cab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cab8:	9308      	str	r3, [sp, #32]
 800caba:	9b00      	ldr	r3, [sp, #0]
 800cabc:	4413      	add	r3, r2
 800cabe:	9302      	str	r3, [sp, #8]
 800cac0:	3301      	adds	r3, #1
 800cac2:	2b01      	cmp	r3, #1
 800cac4:	9303      	str	r3, [sp, #12]
 800cac6:	bfb8      	it	lt
 800cac8:	2301      	movlt	r3, #1
 800caca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cacc:	2200      	movs	r2, #0
 800cace:	6042      	str	r2, [r0, #4]
 800cad0:	2204      	movs	r2, #4
 800cad2:	f102 0614 	add.w	r6, r2, #20
 800cad6:	429e      	cmp	r6, r3
 800cad8:	6841      	ldr	r1, [r0, #4]
 800cada:	d93d      	bls.n	800cb58 <_dtoa_r+0x318>
 800cadc:	4620      	mov	r0, r4
 800cade:	f000 fca9 	bl	800d434 <_Balloc>
 800cae2:	9001      	str	r0, [sp, #4]
 800cae4:	2800      	cmp	r0, #0
 800cae6:	d13b      	bne.n	800cb60 <_dtoa_r+0x320>
 800cae8:	4b11      	ldr	r3, [pc, #68]	; (800cb30 <_dtoa_r+0x2f0>)
 800caea:	4602      	mov	r2, r0
 800caec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800caf0:	e6c0      	b.n	800c874 <_dtoa_r+0x34>
 800caf2:	2301      	movs	r3, #1
 800caf4:	e7df      	b.n	800cab6 <_dtoa_r+0x276>
 800caf6:	bf00      	nop
 800caf8:	636f4361 	.word	0x636f4361
 800cafc:	3fd287a7 	.word	0x3fd287a7
 800cb00:	8b60c8b3 	.word	0x8b60c8b3
 800cb04:	3fc68a28 	.word	0x3fc68a28
 800cb08:	509f79fb 	.word	0x509f79fb
 800cb0c:	3fd34413 	.word	0x3fd34413
 800cb10:	0800ed82 	.word	0x0800ed82
 800cb14:	0800ed99 	.word	0x0800ed99
 800cb18:	7ff00000 	.word	0x7ff00000
 800cb1c:	0800ed7e 	.word	0x0800ed7e
 800cb20:	0800ed75 	.word	0x0800ed75
 800cb24:	0800ec51 	.word	0x0800ec51
 800cb28:	3ff80000 	.word	0x3ff80000
 800cb2c:	0800ee90 	.word	0x0800ee90
 800cb30:	0800edf4 	.word	0x0800edf4
 800cb34:	2501      	movs	r5, #1
 800cb36:	2300      	movs	r3, #0
 800cb38:	9306      	str	r3, [sp, #24]
 800cb3a:	9508      	str	r5, [sp, #32]
 800cb3c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cb44:	2200      	movs	r2, #0
 800cb46:	2312      	movs	r3, #18
 800cb48:	e7b0      	b.n	800caac <_dtoa_r+0x26c>
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	9308      	str	r3, [sp, #32]
 800cb4e:	e7f5      	b.n	800cb3c <_dtoa_r+0x2fc>
 800cb50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cb56:	e7b8      	b.n	800caca <_dtoa_r+0x28a>
 800cb58:	3101      	adds	r1, #1
 800cb5a:	6041      	str	r1, [r0, #4]
 800cb5c:	0052      	lsls	r2, r2, #1
 800cb5e:	e7b8      	b.n	800cad2 <_dtoa_r+0x292>
 800cb60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb62:	9a01      	ldr	r2, [sp, #4]
 800cb64:	601a      	str	r2, [r3, #0]
 800cb66:	9b03      	ldr	r3, [sp, #12]
 800cb68:	2b0e      	cmp	r3, #14
 800cb6a:	f200 809d 	bhi.w	800cca8 <_dtoa_r+0x468>
 800cb6e:	2d00      	cmp	r5, #0
 800cb70:	f000 809a 	beq.w	800cca8 <_dtoa_r+0x468>
 800cb74:	9b00      	ldr	r3, [sp, #0]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	dd32      	ble.n	800cbe0 <_dtoa_r+0x3a0>
 800cb7a:	4ab7      	ldr	r2, [pc, #732]	; (800ce58 <_dtoa_r+0x618>)
 800cb7c:	f003 030f 	and.w	r3, r3, #15
 800cb80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cb84:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cb88:	9b00      	ldr	r3, [sp, #0]
 800cb8a:	05d8      	lsls	r0, r3, #23
 800cb8c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cb90:	d516      	bpl.n	800cbc0 <_dtoa_r+0x380>
 800cb92:	4bb2      	ldr	r3, [pc, #712]	; (800ce5c <_dtoa_r+0x61c>)
 800cb94:	ec51 0b19 	vmov	r0, r1, d9
 800cb98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cb9c:	f7f3 fe5e 	bl	800085c <__aeabi_ddiv>
 800cba0:	f007 070f 	and.w	r7, r7, #15
 800cba4:	4682      	mov	sl, r0
 800cba6:	468b      	mov	fp, r1
 800cba8:	2503      	movs	r5, #3
 800cbaa:	4eac      	ldr	r6, [pc, #688]	; (800ce5c <_dtoa_r+0x61c>)
 800cbac:	b957      	cbnz	r7, 800cbc4 <_dtoa_r+0x384>
 800cbae:	4642      	mov	r2, r8
 800cbb0:	464b      	mov	r3, r9
 800cbb2:	4650      	mov	r0, sl
 800cbb4:	4659      	mov	r1, fp
 800cbb6:	f7f3 fe51 	bl	800085c <__aeabi_ddiv>
 800cbba:	4682      	mov	sl, r0
 800cbbc:	468b      	mov	fp, r1
 800cbbe:	e028      	b.n	800cc12 <_dtoa_r+0x3d2>
 800cbc0:	2502      	movs	r5, #2
 800cbc2:	e7f2      	b.n	800cbaa <_dtoa_r+0x36a>
 800cbc4:	07f9      	lsls	r1, r7, #31
 800cbc6:	d508      	bpl.n	800cbda <_dtoa_r+0x39a>
 800cbc8:	4640      	mov	r0, r8
 800cbca:	4649      	mov	r1, r9
 800cbcc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cbd0:	f7f3 fd1a 	bl	8000608 <__aeabi_dmul>
 800cbd4:	3501      	adds	r5, #1
 800cbd6:	4680      	mov	r8, r0
 800cbd8:	4689      	mov	r9, r1
 800cbda:	107f      	asrs	r7, r7, #1
 800cbdc:	3608      	adds	r6, #8
 800cbde:	e7e5      	b.n	800cbac <_dtoa_r+0x36c>
 800cbe0:	f000 809b 	beq.w	800cd1a <_dtoa_r+0x4da>
 800cbe4:	9b00      	ldr	r3, [sp, #0]
 800cbe6:	4f9d      	ldr	r7, [pc, #628]	; (800ce5c <_dtoa_r+0x61c>)
 800cbe8:	425e      	negs	r6, r3
 800cbea:	4b9b      	ldr	r3, [pc, #620]	; (800ce58 <_dtoa_r+0x618>)
 800cbec:	f006 020f 	and.w	r2, r6, #15
 800cbf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf8:	ec51 0b19 	vmov	r0, r1, d9
 800cbfc:	f7f3 fd04 	bl	8000608 <__aeabi_dmul>
 800cc00:	1136      	asrs	r6, r6, #4
 800cc02:	4682      	mov	sl, r0
 800cc04:	468b      	mov	fp, r1
 800cc06:	2300      	movs	r3, #0
 800cc08:	2502      	movs	r5, #2
 800cc0a:	2e00      	cmp	r6, #0
 800cc0c:	d17a      	bne.n	800cd04 <_dtoa_r+0x4c4>
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d1d3      	bne.n	800cbba <_dtoa_r+0x37a>
 800cc12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	f000 8082 	beq.w	800cd1e <_dtoa_r+0x4de>
 800cc1a:	4b91      	ldr	r3, [pc, #580]	; (800ce60 <_dtoa_r+0x620>)
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	4650      	mov	r0, sl
 800cc20:	4659      	mov	r1, fp
 800cc22:	f7f3 ff63 	bl	8000aec <__aeabi_dcmplt>
 800cc26:	2800      	cmp	r0, #0
 800cc28:	d079      	beq.n	800cd1e <_dtoa_r+0x4de>
 800cc2a:	9b03      	ldr	r3, [sp, #12]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d076      	beq.n	800cd1e <_dtoa_r+0x4de>
 800cc30:	9b02      	ldr	r3, [sp, #8]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	dd36      	ble.n	800cca4 <_dtoa_r+0x464>
 800cc36:	9b00      	ldr	r3, [sp, #0]
 800cc38:	4650      	mov	r0, sl
 800cc3a:	4659      	mov	r1, fp
 800cc3c:	1e5f      	subs	r7, r3, #1
 800cc3e:	2200      	movs	r2, #0
 800cc40:	4b88      	ldr	r3, [pc, #544]	; (800ce64 <_dtoa_r+0x624>)
 800cc42:	f7f3 fce1 	bl	8000608 <__aeabi_dmul>
 800cc46:	9e02      	ldr	r6, [sp, #8]
 800cc48:	4682      	mov	sl, r0
 800cc4a:	468b      	mov	fp, r1
 800cc4c:	3501      	adds	r5, #1
 800cc4e:	4628      	mov	r0, r5
 800cc50:	f7f3 fc70 	bl	8000534 <__aeabi_i2d>
 800cc54:	4652      	mov	r2, sl
 800cc56:	465b      	mov	r3, fp
 800cc58:	f7f3 fcd6 	bl	8000608 <__aeabi_dmul>
 800cc5c:	4b82      	ldr	r3, [pc, #520]	; (800ce68 <_dtoa_r+0x628>)
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f7f3 fb1c 	bl	800029c <__adddf3>
 800cc64:	46d0      	mov	r8, sl
 800cc66:	46d9      	mov	r9, fp
 800cc68:	4682      	mov	sl, r0
 800cc6a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cc6e:	2e00      	cmp	r6, #0
 800cc70:	d158      	bne.n	800cd24 <_dtoa_r+0x4e4>
 800cc72:	4b7e      	ldr	r3, [pc, #504]	; (800ce6c <_dtoa_r+0x62c>)
 800cc74:	2200      	movs	r2, #0
 800cc76:	4640      	mov	r0, r8
 800cc78:	4649      	mov	r1, r9
 800cc7a:	f7f3 fb0d 	bl	8000298 <__aeabi_dsub>
 800cc7e:	4652      	mov	r2, sl
 800cc80:	465b      	mov	r3, fp
 800cc82:	4680      	mov	r8, r0
 800cc84:	4689      	mov	r9, r1
 800cc86:	f7f3 ff4f 	bl	8000b28 <__aeabi_dcmpgt>
 800cc8a:	2800      	cmp	r0, #0
 800cc8c:	f040 8295 	bne.w	800d1ba <_dtoa_r+0x97a>
 800cc90:	4652      	mov	r2, sl
 800cc92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cc96:	4640      	mov	r0, r8
 800cc98:	4649      	mov	r1, r9
 800cc9a:	f7f3 ff27 	bl	8000aec <__aeabi_dcmplt>
 800cc9e:	2800      	cmp	r0, #0
 800cca0:	f040 8289 	bne.w	800d1b6 <_dtoa_r+0x976>
 800cca4:	ec5b ab19 	vmov	sl, fp, d9
 800cca8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	f2c0 8148 	blt.w	800cf40 <_dtoa_r+0x700>
 800ccb0:	9a00      	ldr	r2, [sp, #0]
 800ccb2:	2a0e      	cmp	r2, #14
 800ccb4:	f300 8144 	bgt.w	800cf40 <_dtoa_r+0x700>
 800ccb8:	4b67      	ldr	r3, [pc, #412]	; (800ce58 <_dtoa_r+0x618>)
 800ccba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ccc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	f280 80d5 	bge.w	800ce74 <_dtoa_r+0x634>
 800ccca:	9b03      	ldr	r3, [sp, #12]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	f300 80d1 	bgt.w	800ce74 <_dtoa_r+0x634>
 800ccd2:	f040 826f 	bne.w	800d1b4 <_dtoa_r+0x974>
 800ccd6:	4b65      	ldr	r3, [pc, #404]	; (800ce6c <_dtoa_r+0x62c>)
 800ccd8:	2200      	movs	r2, #0
 800ccda:	4640      	mov	r0, r8
 800ccdc:	4649      	mov	r1, r9
 800ccde:	f7f3 fc93 	bl	8000608 <__aeabi_dmul>
 800cce2:	4652      	mov	r2, sl
 800cce4:	465b      	mov	r3, fp
 800cce6:	f7f3 ff15 	bl	8000b14 <__aeabi_dcmpge>
 800ccea:	9e03      	ldr	r6, [sp, #12]
 800ccec:	4637      	mov	r7, r6
 800ccee:	2800      	cmp	r0, #0
 800ccf0:	f040 8245 	bne.w	800d17e <_dtoa_r+0x93e>
 800ccf4:	9d01      	ldr	r5, [sp, #4]
 800ccf6:	2331      	movs	r3, #49	; 0x31
 800ccf8:	f805 3b01 	strb.w	r3, [r5], #1
 800ccfc:	9b00      	ldr	r3, [sp, #0]
 800ccfe:	3301      	adds	r3, #1
 800cd00:	9300      	str	r3, [sp, #0]
 800cd02:	e240      	b.n	800d186 <_dtoa_r+0x946>
 800cd04:	07f2      	lsls	r2, r6, #31
 800cd06:	d505      	bpl.n	800cd14 <_dtoa_r+0x4d4>
 800cd08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd0c:	f7f3 fc7c 	bl	8000608 <__aeabi_dmul>
 800cd10:	3501      	adds	r5, #1
 800cd12:	2301      	movs	r3, #1
 800cd14:	1076      	asrs	r6, r6, #1
 800cd16:	3708      	adds	r7, #8
 800cd18:	e777      	b.n	800cc0a <_dtoa_r+0x3ca>
 800cd1a:	2502      	movs	r5, #2
 800cd1c:	e779      	b.n	800cc12 <_dtoa_r+0x3d2>
 800cd1e:	9f00      	ldr	r7, [sp, #0]
 800cd20:	9e03      	ldr	r6, [sp, #12]
 800cd22:	e794      	b.n	800cc4e <_dtoa_r+0x40e>
 800cd24:	9901      	ldr	r1, [sp, #4]
 800cd26:	4b4c      	ldr	r3, [pc, #304]	; (800ce58 <_dtoa_r+0x618>)
 800cd28:	4431      	add	r1, r6
 800cd2a:	910d      	str	r1, [sp, #52]	; 0x34
 800cd2c:	9908      	ldr	r1, [sp, #32]
 800cd2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cd32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cd36:	2900      	cmp	r1, #0
 800cd38:	d043      	beq.n	800cdc2 <_dtoa_r+0x582>
 800cd3a:	494d      	ldr	r1, [pc, #308]	; (800ce70 <_dtoa_r+0x630>)
 800cd3c:	2000      	movs	r0, #0
 800cd3e:	f7f3 fd8d 	bl	800085c <__aeabi_ddiv>
 800cd42:	4652      	mov	r2, sl
 800cd44:	465b      	mov	r3, fp
 800cd46:	f7f3 faa7 	bl	8000298 <__aeabi_dsub>
 800cd4a:	9d01      	ldr	r5, [sp, #4]
 800cd4c:	4682      	mov	sl, r0
 800cd4e:	468b      	mov	fp, r1
 800cd50:	4649      	mov	r1, r9
 800cd52:	4640      	mov	r0, r8
 800cd54:	f7f3 ff08 	bl	8000b68 <__aeabi_d2iz>
 800cd58:	4606      	mov	r6, r0
 800cd5a:	f7f3 fbeb 	bl	8000534 <__aeabi_i2d>
 800cd5e:	4602      	mov	r2, r0
 800cd60:	460b      	mov	r3, r1
 800cd62:	4640      	mov	r0, r8
 800cd64:	4649      	mov	r1, r9
 800cd66:	f7f3 fa97 	bl	8000298 <__aeabi_dsub>
 800cd6a:	3630      	adds	r6, #48	; 0x30
 800cd6c:	f805 6b01 	strb.w	r6, [r5], #1
 800cd70:	4652      	mov	r2, sl
 800cd72:	465b      	mov	r3, fp
 800cd74:	4680      	mov	r8, r0
 800cd76:	4689      	mov	r9, r1
 800cd78:	f7f3 feb8 	bl	8000aec <__aeabi_dcmplt>
 800cd7c:	2800      	cmp	r0, #0
 800cd7e:	d163      	bne.n	800ce48 <_dtoa_r+0x608>
 800cd80:	4642      	mov	r2, r8
 800cd82:	464b      	mov	r3, r9
 800cd84:	4936      	ldr	r1, [pc, #216]	; (800ce60 <_dtoa_r+0x620>)
 800cd86:	2000      	movs	r0, #0
 800cd88:	f7f3 fa86 	bl	8000298 <__aeabi_dsub>
 800cd8c:	4652      	mov	r2, sl
 800cd8e:	465b      	mov	r3, fp
 800cd90:	f7f3 feac 	bl	8000aec <__aeabi_dcmplt>
 800cd94:	2800      	cmp	r0, #0
 800cd96:	f040 80b5 	bne.w	800cf04 <_dtoa_r+0x6c4>
 800cd9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd9c:	429d      	cmp	r5, r3
 800cd9e:	d081      	beq.n	800cca4 <_dtoa_r+0x464>
 800cda0:	4b30      	ldr	r3, [pc, #192]	; (800ce64 <_dtoa_r+0x624>)
 800cda2:	2200      	movs	r2, #0
 800cda4:	4650      	mov	r0, sl
 800cda6:	4659      	mov	r1, fp
 800cda8:	f7f3 fc2e 	bl	8000608 <__aeabi_dmul>
 800cdac:	4b2d      	ldr	r3, [pc, #180]	; (800ce64 <_dtoa_r+0x624>)
 800cdae:	4682      	mov	sl, r0
 800cdb0:	468b      	mov	fp, r1
 800cdb2:	4640      	mov	r0, r8
 800cdb4:	4649      	mov	r1, r9
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	f7f3 fc26 	bl	8000608 <__aeabi_dmul>
 800cdbc:	4680      	mov	r8, r0
 800cdbe:	4689      	mov	r9, r1
 800cdc0:	e7c6      	b.n	800cd50 <_dtoa_r+0x510>
 800cdc2:	4650      	mov	r0, sl
 800cdc4:	4659      	mov	r1, fp
 800cdc6:	f7f3 fc1f 	bl	8000608 <__aeabi_dmul>
 800cdca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cdcc:	9d01      	ldr	r5, [sp, #4]
 800cdce:	930f      	str	r3, [sp, #60]	; 0x3c
 800cdd0:	4682      	mov	sl, r0
 800cdd2:	468b      	mov	fp, r1
 800cdd4:	4649      	mov	r1, r9
 800cdd6:	4640      	mov	r0, r8
 800cdd8:	f7f3 fec6 	bl	8000b68 <__aeabi_d2iz>
 800cddc:	4606      	mov	r6, r0
 800cdde:	f7f3 fba9 	bl	8000534 <__aeabi_i2d>
 800cde2:	3630      	adds	r6, #48	; 0x30
 800cde4:	4602      	mov	r2, r0
 800cde6:	460b      	mov	r3, r1
 800cde8:	4640      	mov	r0, r8
 800cdea:	4649      	mov	r1, r9
 800cdec:	f7f3 fa54 	bl	8000298 <__aeabi_dsub>
 800cdf0:	f805 6b01 	strb.w	r6, [r5], #1
 800cdf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cdf6:	429d      	cmp	r5, r3
 800cdf8:	4680      	mov	r8, r0
 800cdfa:	4689      	mov	r9, r1
 800cdfc:	f04f 0200 	mov.w	r2, #0
 800ce00:	d124      	bne.n	800ce4c <_dtoa_r+0x60c>
 800ce02:	4b1b      	ldr	r3, [pc, #108]	; (800ce70 <_dtoa_r+0x630>)
 800ce04:	4650      	mov	r0, sl
 800ce06:	4659      	mov	r1, fp
 800ce08:	f7f3 fa48 	bl	800029c <__adddf3>
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	460b      	mov	r3, r1
 800ce10:	4640      	mov	r0, r8
 800ce12:	4649      	mov	r1, r9
 800ce14:	f7f3 fe88 	bl	8000b28 <__aeabi_dcmpgt>
 800ce18:	2800      	cmp	r0, #0
 800ce1a:	d173      	bne.n	800cf04 <_dtoa_r+0x6c4>
 800ce1c:	4652      	mov	r2, sl
 800ce1e:	465b      	mov	r3, fp
 800ce20:	4913      	ldr	r1, [pc, #76]	; (800ce70 <_dtoa_r+0x630>)
 800ce22:	2000      	movs	r0, #0
 800ce24:	f7f3 fa38 	bl	8000298 <__aeabi_dsub>
 800ce28:	4602      	mov	r2, r0
 800ce2a:	460b      	mov	r3, r1
 800ce2c:	4640      	mov	r0, r8
 800ce2e:	4649      	mov	r1, r9
 800ce30:	f7f3 fe5c 	bl	8000aec <__aeabi_dcmplt>
 800ce34:	2800      	cmp	r0, #0
 800ce36:	f43f af35 	beq.w	800cca4 <_dtoa_r+0x464>
 800ce3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ce3c:	1e6b      	subs	r3, r5, #1
 800ce3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce40:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ce44:	2b30      	cmp	r3, #48	; 0x30
 800ce46:	d0f8      	beq.n	800ce3a <_dtoa_r+0x5fa>
 800ce48:	9700      	str	r7, [sp, #0]
 800ce4a:	e049      	b.n	800cee0 <_dtoa_r+0x6a0>
 800ce4c:	4b05      	ldr	r3, [pc, #20]	; (800ce64 <_dtoa_r+0x624>)
 800ce4e:	f7f3 fbdb 	bl	8000608 <__aeabi_dmul>
 800ce52:	4680      	mov	r8, r0
 800ce54:	4689      	mov	r9, r1
 800ce56:	e7bd      	b.n	800cdd4 <_dtoa_r+0x594>
 800ce58:	0800ee90 	.word	0x0800ee90
 800ce5c:	0800ee68 	.word	0x0800ee68
 800ce60:	3ff00000 	.word	0x3ff00000
 800ce64:	40240000 	.word	0x40240000
 800ce68:	401c0000 	.word	0x401c0000
 800ce6c:	40140000 	.word	0x40140000
 800ce70:	3fe00000 	.word	0x3fe00000
 800ce74:	9d01      	ldr	r5, [sp, #4]
 800ce76:	4656      	mov	r6, sl
 800ce78:	465f      	mov	r7, fp
 800ce7a:	4642      	mov	r2, r8
 800ce7c:	464b      	mov	r3, r9
 800ce7e:	4630      	mov	r0, r6
 800ce80:	4639      	mov	r1, r7
 800ce82:	f7f3 fceb 	bl	800085c <__aeabi_ddiv>
 800ce86:	f7f3 fe6f 	bl	8000b68 <__aeabi_d2iz>
 800ce8a:	4682      	mov	sl, r0
 800ce8c:	f7f3 fb52 	bl	8000534 <__aeabi_i2d>
 800ce90:	4642      	mov	r2, r8
 800ce92:	464b      	mov	r3, r9
 800ce94:	f7f3 fbb8 	bl	8000608 <__aeabi_dmul>
 800ce98:	4602      	mov	r2, r0
 800ce9a:	460b      	mov	r3, r1
 800ce9c:	4630      	mov	r0, r6
 800ce9e:	4639      	mov	r1, r7
 800cea0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cea4:	f7f3 f9f8 	bl	8000298 <__aeabi_dsub>
 800cea8:	f805 6b01 	strb.w	r6, [r5], #1
 800ceac:	9e01      	ldr	r6, [sp, #4]
 800ceae:	9f03      	ldr	r7, [sp, #12]
 800ceb0:	1bae      	subs	r6, r5, r6
 800ceb2:	42b7      	cmp	r7, r6
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	460b      	mov	r3, r1
 800ceb8:	d135      	bne.n	800cf26 <_dtoa_r+0x6e6>
 800ceba:	f7f3 f9ef 	bl	800029c <__adddf3>
 800cebe:	4642      	mov	r2, r8
 800cec0:	464b      	mov	r3, r9
 800cec2:	4606      	mov	r6, r0
 800cec4:	460f      	mov	r7, r1
 800cec6:	f7f3 fe2f 	bl	8000b28 <__aeabi_dcmpgt>
 800ceca:	b9d0      	cbnz	r0, 800cf02 <_dtoa_r+0x6c2>
 800cecc:	4642      	mov	r2, r8
 800cece:	464b      	mov	r3, r9
 800ced0:	4630      	mov	r0, r6
 800ced2:	4639      	mov	r1, r7
 800ced4:	f7f3 fe00 	bl	8000ad8 <__aeabi_dcmpeq>
 800ced8:	b110      	cbz	r0, 800cee0 <_dtoa_r+0x6a0>
 800ceda:	f01a 0f01 	tst.w	sl, #1
 800cede:	d110      	bne.n	800cf02 <_dtoa_r+0x6c2>
 800cee0:	4620      	mov	r0, r4
 800cee2:	ee18 1a10 	vmov	r1, s16
 800cee6:	f000 fae5 	bl	800d4b4 <_Bfree>
 800ceea:	2300      	movs	r3, #0
 800ceec:	9800      	ldr	r0, [sp, #0]
 800ceee:	702b      	strb	r3, [r5, #0]
 800cef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cef2:	3001      	adds	r0, #1
 800cef4:	6018      	str	r0, [r3, #0]
 800cef6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	f43f acf1 	beq.w	800c8e0 <_dtoa_r+0xa0>
 800cefe:	601d      	str	r5, [r3, #0]
 800cf00:	e4ee      	b.n	800c8e0 <_dtoa_r+0xa0>
 800cf02:	9f00      	ldr	r7, [sp, #0]
 800cf04:	462b      	mov	r3, r5
 800cf06:	461d      	mov	r5, r3
 800cf08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf0c:	2a39      	cmp	r2, #57	; 0x39
 800cf0e:	d106      	bne.n	800cf1e <_dtoa_r+0x6de>
 800cf10:	9a01      	ldr	r2, [sp, #4]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d1f7      	bne.n	800cf06 <_dtoa_r+0x6c6>
 800cf16:	9901      	ldr	r1, [sp, #4]
 800cf18:	2230      	movs	r2, #48	; 0x30
 800cf1a:	3701      	adds	r7, #1
 800cf1c:	700a      	strb	r2, [r1, #0]
 800cf1e:	781a      	ldrb	r2, [r3, #0]
 800cf20:	3201      	adds	r2, #1
 800cf22:	701a      	strb	r2, [r3, #0]
 800cf24:	e790      	b.n	800ce48 <_dtoa_r+0x608>
 800cf26:	4ba6      	ldr	r3, [pc, #664]	; (800d1c0 <_dtoa_r+0x980>)
 800cf28:	2200      	movs	r2, #0
 800cf2a:	f7f3 fb6d 	bl	8000608 <__aeabi_dmul>
 800cf2e:	2200      	movs	r2, #0
 800cf30:	2300      	movs	r3, #0
 800cf32:	4606      	mov	r6, r0
 800cf34:	460f      	mov	r7, r1
 800cf36:	f7f3 fdcf 	bl	8000ad8 <__aeabi_dcmpeq>
 800cf3a:	2800      	cmp	r0, #0
 800cf3c:	d09d      	beq.n	800ce7a <_dtoa_r+0x63a>
 800cf3e:	e7cf      	b.n	800cee0 <_dtoa_r+0x6a0>
 800cf40:	9a08      	ldr	r2, [sp, #32]
 800cf42:	2a00      	cmp	r2, #0
 800cf44:	f000 80d7 	beq.w	800d0f6 <_dtoa_r+0x8b6>
 800cf48:	9a06      	ldr	r2, [sp, #24]
 800cf4a:	2a01      	cmp	r2, #1
 800cf4c:	f300 80ba 	bgt.w	800d0c4 <_dtoa_r+0x884>
 800cf50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf52:	2a00      	cmp	r2, #0
 800cf54:	f000 80b2 	beq.w	800d0bc <_dtoa_r+0x87c>
 800cf58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cf5c:	9e07      	ldr	r6, [sp, #28]
 800cf5e:	9d04      	ldr	r5, [sp, #16]
 800cf60:	9a04      	ldr	r2, [sp, #16]
 800cf62:	441a      	add	r2, r3
 800cf64:	9204      	str	r2, [sp, #16]
 800cf66:	9a05      	ldr	r2, [sp, #20]
 800cf68:	2101      	movs	r1, #1
 800cf6a:	441a      	add	r2, r3
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	9205      	str	r2, [sp, #20]
 800cf70:	f000 fb58 	bl	800d624 <__i2b>
 800cf74:	4607      	mov	r7, r0
 800cf76:	2d00      	cmp	r5, #0
 800cf78:	dd0c      	ble.n	800cf94 <_dtoa_r+0x754>
 800cf7a:	9b05      	ldr	r3, [sp, #20]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	dd09      	ble.n	800cf94 <_dtoa_r+0x754>
 800cf80:	42ab      	cmp	r3, r5
 800cf82:	9a04      	ldr	r2, [sp, #16]
 800cf84:	bfa8      	it	ge
 800cf86:	462b      	movge	r3, r5
 800cf88:	1ad2      	subs	r2, r2, r3
 800cf8a:	9204      	str	r2, [sp, #16]
 800cf8c:	9a05      	ldr	r2, [sp, #20]
 800cf8e:	1aed      	subs	r5, r5, r3
 800cf90:	1ad3      	subs	r3, r2, r3
 800cf92:	9305      	str	r3, [sp, #20]
 800cf94:	9b07      	ldr	r3, [sp, #28]
 800cf96:	b31b      	cbz	r3, 800cfe0 <_dtoa_r+0x7a0>
 800cf98:	9b08      	ldr	r3, [sp, #32]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	f000 80af 	beq.w	800d0fe <_dtoa_r+0x8be>
 800cfa0:	2e00      	cmp	r6, #0
 800cfa2:	dd13      	ble.n	800cfcc <_dtoa_r+0x78c>
 800cfa4:	4639      	mov	r1, r7
 800cfa6:	4632      	mov	r2, r6
 800cfa8:	4620      	mov	r0, r4
 800cfaa:	f000 fbfb 	bl	800d7a4 <__pow5mult>
 800cfae:	ee18 2a10 	vmov	r2, s16
 800cfb2:	4601      	mov	r1, r0
 800cfb4:	4607      	mov	r7, r0
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	f000 fb4a 	bl	800d650 <__multiply>
 800cfbc:	ee18 1a10 	vmov	r1, s16
 800cfc0:	4680      	mov	r8, r0
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	f000 fa76 	bl	800d4b4 <_Bfree>
 800cfc8:	ee08 8a10 	vmov	s16, r8
 800cfcc:	9b07      	ldr	r3, [sp, #28]
 800cfce:	1b9a      	subs	r2, r3, r6
 800cfd0:	d006      	beq.n	800cfe0 <_dtoa_r+0x7a0>
 800cfd2:	ee18 1a10 	vmov	r1, s16
 800cfd6:	4620      	mov	r0, r4
 800cfd8:	f000 fbe4 	bl	800d7a4 <__pow5mult>
 800cfdc:	ee08 0a10 	vmov	s16, r0
 800cfe0:	2101      	movs	r1, #1
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	f000 fb1e 	bl	800d624 <__i2b>
 800cfe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	4606      	mov	r6, r0
 800cfee:	f340 8088 	ble.w	800d102 <_dtoa_r+0x8c2>
 800cff2:	461a      	mov	r2, r3
 800cff4:	4601      	mov	r1, r0
 800cff6:	4620      	mov	r0, r4
 800cff8:	f000 fbd4 	bl	800d7a4 <__pow5mult>
 800cffc:	9b06      	ldr	r3, [sp, #24]
 800cffe:	2b01      	cmp	r3, #1
 800d000:	4606      	mov	r6, r0
 800d002:	f340 8081 	ble.w	800d108 <_dtoa_r+0x8c8>
 800d006:	f04f 0800 	mov.w	r8, #0
 800d00a:	6933      	ldr	r3, [r6, #16]
 800d00c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d010:	6918      	ldr	r0, [r3, #16]
 800d012:	f000 fab7 	bl	800d584 <__hi0bits>
 800d016:	f1c0 0020 	rsb	r0, r0, #32
 800d01a:	9b05      	ldr	r3, [sp, #20]
 800d01c:	4418      	add	r0, r3
 800d01e:	f010 001f 	ands.w	r0, r0, #31
 800d022:	f000 8092 	beq.w	800d14a <_dtoa_r+0x90a>
 800d026:	f1c0 0320 	rsb	r3, r0, #32
 800d02a:	2b04      	cmp	r3, #4
 800d02c:	f340 808a 	ble.w	800d144 <_dtoa_r+0x904>
 800d030:	f1c0 001c 	rsb	r0, r0, #28
 800d034:	9b04      	ldr	r3, [sp, #16]
 800d036:	4403      	add	r3, r0
 800d038:	9304      	str	r3, [sp, #16]
 800d03a:	9b05      	ldr	r3, [sp, #20]
 800d03c:	4403      	add	r3, r0
 800d03e:	4405      	add	r5, r0
 800d040:	9305      	str	r3, [sp, #20]
 800d042:	9b04      	ldr	r3, [sp, #16]
 800d044:	2b00      	cmp	r3, #0
 800d046:	dd07      	ble.n	800d058 <_dtoa_r+0x818>
 800d048:	ee18 1a10 	vmov	r1, s16
 800d04c:	461a      	mov	r2, r3
 800d04e:	4620      	mov	r0, r4
 800d050:	f000 fc02 	bl	800d858 <__lshift>
 800d054:	ee08 0a10 	vmov	s16, r0
 800d058:	9b05      	ldr	r3, [sp, #20]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	dd05      	ble.n	800d06a <_dtoa_r+0x82a>
 800d05e:	4631      	mov	r1, r6
 800d060:	461a      	mov	r2, r3
 800d062:	4620      	mov	r0, r4
 800d064:	f000 fbf8 	bl	800d858 <__lshift>
 800d068:	4606      	mov	r6, r0
 800d06a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d06e      	beq.n	800d14e <_dtoa_r+0x90e>
 800d070:	ee18 0a10 	vmov	r0, s16
 800d074:	4631      	mov	r1, r6
 800d076:	f000 fc5f 	bl	800d938 <__mcmp>
 800d07a:	2800      	cmp	r0, #0
 800d07c:	da67      	bge.n	800d14e <_dtoa_r+0x90e>
 800d07e:	9b00      	ldr	r3, [sp, #0]
 800d080:	3b01      	subs	r3, #1
 800d082:	ee18 1a10 	vmov	r1, s16
 800d086:	9300      	str	r3, [sp, #0]
 800d088:	220a      	movs	r2, #10
 800d08a:	2300      	movs	r3, #0
 800d08c:	4620      	mov	r0, r4
 800d08e:	f000 fa33 	bl	800d4f8 <__multadd>
 800d092:	9b08      	ldr	r3, [sp, #32]
 800d094:	ee08 0a10 	vmov	s16, r0
 800d098:	2b00      	cmp	r3, #0
 800d09a:	f000 81b1 	beq.w	800d400 <_dtoa_r+0xbc0>
 800d09e:	2300      	movs	r3, #0
 800d0a0:	4639      	mov	r1, r7
 800d0a2:	220a      	movs	r2, #10
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	f000 fa27 	bl	800d4f8 <__multadd>
 800d0aa:	9b02      	ldr	r3, [sp, #8]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	4607      	mov	r7, r0
 800d0b0:	f300 808e 	bgt.w	800d1d0 <_dtoa_r+0x990>
 800d0b4:	9b06      	ldr	r3, [sp, #24]
 800d0b6:	2b02      	cmp	r3, #2
 800d0b8:	dc51      	bgt.n	800d15e <_dtoa_r+0x91e>
 800d0ba:	e089      	b.n	800d1d0 <_dtoa_r+0x990>
 800d0bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d0be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d0c2:	e74b      	b.n	800cf5c <_dtoa_r+0x71c>
 800d0c4:	9b03      	ldr	r3, [sp, #12]
 800d0c6:	1e5e      	subs	r6, r3, #1
 800d0c8:	9b07      	ldr	r3, [sp, #28]
 800d0ca:	42b3      	cmp	r3, r6
 800d0cc:	bfbf      	itttt	lt
 800d0ce:	9b07      	ldrlt	r3, [sp, #28]
 800d0d0:	9607      	strlt	r6, [sp, #28]
 800d0d2:	1af2      	sublt	r2, r6, r3
 800d0d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d0d6:	bfb6      	itet	lt
 800d0d8:	189b      	addlt	r3, r3, r2
 800d0da:	1b9e      	subge	r6, r3, r6
 800d0dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d0de:	9b03      	ldr	r3, [sp, #12]
 800d0e0:	bfb8      	it	lt
 800d0e2:	2600      	movlt	r6, #0
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	bfb7      	itett	lt
 800d0e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d0ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d0f0:	1a9d      	sublt	r5, r3, r2
 800d0f2:	2300      	movlt	r3, #0
 800d0f4:	e734      	b.n	800cf60 <_dtoa_r+0x720>
 800d0f6:	9e07      	ldr	r6, [sp, #28]
 800d0f8:	9d04      	ldr	r5, [sp, #16]
 800d0fa:	9f08      	ldr	r7, [sp, #32]
 800d0fc:	e73b      	b.n	800cf76 <_dtoa_r+0x736>
 800d0fe:	9a07      	ldr	r2, [sp, #28]
 800d100:	e767      	b.n	800cfd2 <_dtoa_r+0x792>
 800d102:	9b06      	ldr	r3, [sp, #24]
 800d104:	2b01      	cmp	r3, #1
 800d106:	dc18      	bgt.n	800d13a <_dtoa_r+0x8fa>
 800d108:	f1ba 0f00 	cmp.w	sl, #0
 800d10c:	d115      	bne.n	800d13a <_dtoa_r+0x8fa>
 800d10e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d112:	b993      	cbnz	r3, 800d13a <_dtoa_r+0x8fa>
 800d114:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d118:	0d1b      	lsrs	r3, r3, #20
 800d11a:	051b      	lsls	r3, r3, #20
 800d11c:	b183      	cbz	r3, 800d140 <_dtoa_r+0x900>
 800d11e:	9b04      	ldr	r3, [sp, #16]
 800d120:	3301      	adds	r3, #1
 800d122:	9304      	str	r3, [sp, #16]
 800d124:	9b05      	ldr	r3, [sp, #20]
 800d126:	3301      	adds	r3, #1
 800d128:	9305      	str	r3, [sp, #20]
 800d12a:	f04f 0801 	mov.w	r8, #1
 800d12e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d130:	2b00      	cmp	r3, #0
 800d132:	f47f af6a 	bne.w	800d00a <_dtoa_r+0x7ca>
 800d136:	2001      	movs	r0, #1
 800d138:	e76f      	b.n	800d01a <_dtoa_r+0x7da>
 800d13a:	f04f 0800 	mov.w	r8, #0
 800d13e:	e7f6      	b.n	800d12e <_dtoa_r+0x8ee>
 800d140:	4698      	mov	r8, r3
 800d142:	e7f4      	b.n	800d12e <_dtoa_r+0x8ee>
 800d144:	f43f af7d 	beq.w	800d042 <_dtoa_r+0x802>
 800d148:	4618      	mov	r0, r3
 800d14a:	301c      	adds	r0, #28
 800d14c:	e772      	b.n	800d034 <_dtoa_r+0x7f4>
 800d14e:	9b03      	ldr	r3, [sp, #12]
 800d150:	2b00      	cmp	r3, #0
 800d152:	dc37      	bgt.n	800d1c4 <_dtoa_r+0x984>
 800d154:	9b06      	ldr	r3, [sp, #24]
 800d156:	2b02      	cmp	r3, #2
 800d158:	dd34      	ble.n	800d1c4 <_dtoa_r+0x984>
 800d15a:	9b03      	ldr	r3, [sp, #12]
 800d15c:	9302      	str	r3, [sp, #8]
 800d15e:	9b02      	ldr	r3, [sp, #8]
 800d160:	b96b      	cbnz	r3, 800d17e <_dtoa_r+0x93e>
 800d162:	4631      	mov	r1, r6
 800d164:	2205      	movs	r2, #5
 800d166:	4620      	mov	r0, r4
 800d168:	f000 f9c6 	bl	800d4f8 <__multadd>
 800d16c:	4601      	mov	r1, r0
 800d16e:	4606      	mov	r6, r0
 800d170:	ee18 0a10 	vmov	r0, s16
 800d174:	f000 fbe0 	bl	800d938 <__mcmp>
 800d178:	2800      	cmp	r0, #0
 800d17a:	f73f adbb 	bgt.w	800ccf4 <_dtoa_r+0x4b4>
 800d17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d180:	9d01      	ldr	r5, [sp, #4]
 800d182:	43db      	mvns	r3, r3
 800d184:	9300      	str	r3, [sp, #0]
 800d186:	f04f 0800 	mov.w	r8, #0
 800d18a:	4631      	mov	r1, r6
 800d18c:	4620      	mov	r0, r4
 800d18e:	f000 f991 	bl	800d4b4 <_Bfree>
 800d192:	2f00      	cmp	r7, #0
 800d194:	f43f aea4 	beq.w	800cee0 <_dtoa_r+0x6a0>
 800d198:	f1b8 0f00 	cmp.w	r8, #0
 800d19c:	d005      	beq.n	800d1aa <_dtoa_r+0x96a>
 800d19e:	45b8      	cmp	r8, r7
 800d1a0:	d003      	beq.n	800d1aa <_dtoa_r+0x96a>
 800d1a2:	4641      	mov	r1, r8
 800d1a4:	4620      	mov	r0, r4
 800d1a6:	f000 f985 	bl	800d4b4 <_Bfree>
 800d1aa:	4639      	mov	r1, r7
 800d1ac:	4620      	mov	r0, r4
 800d1ae:	f000 f981 	bl	800d4b4 <_Bfree>
 800d1b2:	e695      	b.n	800cee0 <_dtoa_r+0x6a0>
 800d1b4:	2600      	movs	r6, #0
 800d1b6:	4637      	mov	r7, r6
 800d1b8:	e7e1      	b.n	800d17e <_dtoa_r+0x93e>
 800d1ba:	9700      	str	r7, [sp, #0]
 800d1bc:	4637      	mov	r7, r6
 800d1be:	e599      	b.n	800ccf4 <_dtoa_r+0x4b4>
 800d1c0:	40240000 	.word	0x40240000
 800d1c4:	9b08      	ldr	r3, [sp, #32]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	f000 80ca 	beq.w	800d360 <_dtoa_r+0xb20>
 800d1cc:	9b03      	ldr	r3, [sp, #12]
 800d1ce:	9302      	str	r3, [sp, #8]
 800d1d0:	2d00      	cmp	r5, #0
 800d1d2:	dd05      	ble.n	800d1e0 <_dtoa_r+0x9a0>
 800d1d4:	4639      	mov	r1, r7
 800d1d6:	462a      	mov	r2, r5
 800d1d8:	4620      	mov	r0, r4
 800d1da:	f000 fb3d 	bl	800d858 <__lshift>
 800d1de:	4607      	mov	r7, r0
 800d1e0:	f1b8 0f00 	cmp.w	r8, #0
 800d1e4:	d05b      	beq.n	800d29e <_dtoa_r+0xa5e>
 800d1e6:	6879      	ldr	r1, [r7, #4]
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	f000 f923 	bl	800d434 <_Balloc>
 800d1ee:	4605      	mov	r5, r0
 800d1f0:	b928      	cbnz	r0, 800d1fe <_dtoa_r+0x9be>
 800d1f2:	4b87      	ldr	r3, [pc, #540]	; (800d410 <_dtoa_r+0xbd0>)
 800d1f4:	4602      	mov	r2, r0
 800d1f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d1fa:	f7ff bb3b 	b.w	800c874 <_dtoa_r+0x34>
 800d1fe:	693a      	ldr	r2, [r7, #16]
 800d200:	3202      	adds	r2, #2
 800d202:	0092      	lsls	r2, r2, #2
 800d204:	f107 010c 	add.w	r1, r7, #12
 800d208:	300c      	adds	r0, #12
 800d20a:	f7fe fd5f 	bl	800bccc <memcpy>
 800d20e:	2201      	movs	r2, #1
 800d210:	4629      	mov	r1, r5
 800d212:	4620      	mov	r0, r4
 800d214:	f000 fb20 	bl	800d858 <__lshift>
 800d218:	9b01      	ldr	r3, [sp, #4]
 800d21a:	f103 0901 	add.w	r9, r3, #1
 800d21e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d222:	4413      	add	r3, r2
 800d224:	9305      	str	r3, [sp, #20]
 800d226:	f00a 0301 	and.w	r3, sl, #1
 800d22a:	46b8      	mov	r8, r7
 800d22c:	9304      	str	r3, [sp, #16]
 800d22e:	4607      	mov	r7, r0
 800d230:	4631      	mov	r1, r6
 800d232:	ee18 0a10 	vmov	r0, s16
 800d236:	f7ff fa75 	bl	800c724 <quorem>
 800d23a:	4641      	mov	r1, r8
 800d23c:	9002      	str	r0, [sp, #8]
 800d23e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d242:	ee18 0a10 	vmov	r0, s16
 800d246:	f000 fb77 	bl	800d938 <__mcmp>
 800d24a:	463a      	mov	r2, r7
 800d24c:	9003      	str	r0, [sp, #12]
 800d24e:	4631      	mov	r1, r6
 800d250:	4620      	mov	r0, r4
 800d252:	f000 fb8d 	bl	800d970 <__mdiff>
 800d256:	68c2      	ldr	r2, [r0, #12]
 800d258:	f109 3bff 	add.w	fp, r9, #4294967295
 800d25c:	4605      	mov	r5, r0
 800d25e:	bb02      	cbnz	r2, 800d2a2 <_dtoa_r+0xa62>
 800d260:	4601      	mov	r1, r0
 800d262:	ee18 0a10 	vmov	r0, s16
 800d266:	f000 fb67 	bl	800d938 <__mcmp>
 800d26a:	4602      	mov	r2, r0
 800d26c:	4629      	mov	r1, r5
 800d26e:	4620      	mov	r0, r4
 800d270:	9207      	str	r2, [sp, #28]
 800d272:	f000 f91f 	bl	800d4b4 <_Bfree>
 800d276:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d27a:	ea43 0102 	orr.w	r1, r3, r2
 800d27e:	9b04      	ldr	r3, [sp, #16]
 800d280:	430b      	orrs	r3, r1
 800d282:	464d      	mov	r5, r9
 800d284:	d10f      	bne.n	800d2a6 <_dtoa_r+0xa66>
 800d286:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d28a:	d02a      	beq.n	800d2e2 <_dtoa_r+0xaa2>
 800d28c:	9b03      	ldr	r3, [sp, #12]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	dd02      	ble.n	800d298 <_dtoa_r+0xa58>
 800d292:	9b02      	ldr	r3, [sp, #8]
 800d294:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d298:	f88b a000 	strb.w	sl, [fp]
 800d29c:	e775      	b.n	800d18a <_dtoa_r+0x94a>
 800d29e:	4638      	mov	r0, r7
 800d2a0:	e7ba      	b.n	800d218 <_dtoa_r+0x9d8>
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	e7e2      	b.n	800d26c <_dtoa_r+0xa2c>
 800d2a6:	9b03      	ldr	r3, [sp, #12]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	db04      	blt.n	800d2b6 <_dtoa_r+0xa76>
 800d2ac:	9906      	ldr	r1, [sp, #24]
 800d2ae:	430b      	orrs	r3, r1
 800d2b0:	9904      	ldr	r1, [sp, #16]
 800d2b2:	430b      	orrs	r3, r1
 800d2b4:	d122      	bne.n	800d2fc <_dtoa_r+0xabc>
 800d2b6:	2a00      	cmp	r2, #0
 800d2b8:	ddee      	ble.n	800d298 <_dtoa_r+0xa58>
 800d2ba:	ee18 1a10 	vmov	r1, s16
 800d2be:	2201      	movs	r2, #1
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	f000 fac9 	bl	800d858 <__lshift>
 800d2c6:	4631      	mov	r1, r6
 800d2c8:	ee08 0a10 	vmov	s16, r0
 800d2cc:	f000 fb34 	bl	800d938 <__mcmp>
 800d2d0:	2800      	cmp	r0, #0
 800d2d2:	dc03      	bgt.n	800d2dc <_dtoa_r+0xa9c>
 800d2d4:	d1e0      	bne.n	800d298 <_dtoa_r+0xa58>
 800d2d6:	f01a 0f01 	tst.w	sl, #1
 800d2da:	d0dd      	beq.n	800d298 <_dtoa_r+0xa58>
 800d2dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d2e0:	d1d7      	bne.n	800d292 <_dtoa_r+0xa52>
 800d2e2:	2339      	movs	r3, #57	; 0x39
 800d2e4:	f88b 3000 	strb.w	r3, [fp]
 800d2e8:	462b      	mov	r3, r5
 800d2ea:	461d      	mov	r5, r3
 800d2ec:	3b01      	subs	r3, #1
 800d2ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d2f2:	2a39      	cmp	r2, #57	; 0x39
 800d2f4:	d071      	beq.n	800d3da <_dtoa_r+0xb9a>
 800d2f6:	3201      	adds	r2, #1
 800d2f8:	701a      	strb	r2, [r3, #0]
 800d2fa:	e746      	b.n	800d18a <_dtoa_r+0x94a>
 800d2fc:	2a00      	cmp	r2, #0
 800d2fe:	dd07      	ble.n	800d310 <_dtoa_r+0xad0>
 800d300:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d304:	d0ed      	beq.n	800d2e2 <_dtoa_r+0xaa2>
 800d306:	f10a 0301 	add.w	r3, sl, #1
 800d30a:	f88b 3000 	strb.w	r3, [fp]
 800d30e:	e73c      	b.n	800d18a <_dtoa_r+0x94a>
 800d310:	9b05      	ldr	r3, [sp, #20]
 800d312:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d316:	4599      	cmp	r9, r3
 800d318:	d047      	beq.n	800d3aa <_dtoa_r+0xb6a>
 800d31a:	ee18 1a10 	vmov	r1, s16
 800d31e:	2300      	movs	r3, #0
 800d320:	220a      	movs	r2, #10
 800d322:	4620      	mov	r0, r4
 800d324:	f000 f8e8 	bl	800d4f8 <__multadd>
 800d328:	45b8      	cmp	r8, r7
 800d32a:	ee08 0a10 	vmov	s16, r0
 800d32e:	f04f 0300 	mov.w	r3, #0
 800d332:	f04f 020a 	mov.w	r2, #10
 800d336:	4641      	mov	r1, r8
 800d338:	4620      	mov	r0, r4
 800d33a:	d106      	bne.n	800d34a <_dtoa_r+0xb0a>
 800d33c:	f000 f8dc 	bl	800d4f8 <__multadd>
 800d340:	4680      	mov	r8, r0
 800d342:	4607      	mov	r7, r0
 800d344:	f109 0901 	add.w	r9, r9, #1
 800d348:	e772      	b.n	800d230 <_dtoa_r+0x9f0>
 800d34a:	f000 f8d5 	bl	800d4f8 <__multadd>
 800d34e:	4639      	mov	r1, r7
 800d350:	4680      	mov	r8, r0
 800d352:	2300      	movs	r3, #0
 800d354:	220a      	movs	r2, #10
 800d356:	4620      	mov	r0, r4
 800d358:	f000 f8ce 	bl	800d4f8 <__multadd>
 800d35c:	4607      	mov	r7, r0
 800d35e:	e7f1      	b.n	800d344 <_dtoa_r+0xb04>
 800d360:	9b03      	ldr	r3, [sp, #12]
 800d362:	9302      	str	r3, [sp, #8]
 800d364:	9d01      	ldr	r5, [sp, #4]
 800d366:	ee18 0a10 	vmov	r0, s16
 800d36a:	4631      	mov	r1, r6
 800d36c:	f7ff f9da 	bl	800c724 <quorem>
 800d370:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d374:	9b01      	ldr	r3, [sp, #4]
 800d376:	f805 ab01 	strb.w	sl, [r5], #1
 800d37a:	1aea      	subs	r2, r5, r3
 800d37c:	9b02      	ldr	r3, [sp, #8]
 800d37e:	4293      	cmp	r3, r2
 800d380:	dd09      	ble.n	800d396 <_dtoa_r+0xb56>
 800d382:	ee18 1a10 	vmov	r1, s16
 800d386:	2300      	movs	r3, #0
 800d388:	220a      	movs	r2, #10
 800d38a:	4620      	mov	r0, r4
 800d38c:	f000 f8b4 	bl	800d4f8 <__multadd>
 800d390:	ee08 0a10 	vmov	s16, r0
 800d394:	e7e7      	b.n	800d366 <_dtoa_r+0xb26>
 800d396:	9b02      	ldr	r3, [sp, #8]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	bfc8      	it	gt
 800d39c:	461d      	movgt	r5, r3
 800d39e:	9b01      	ldr	r3, [sp, #4]
 800d3a0:	bfd8      	it	le
 800d3a2:	2501      	movle	r5, #1
 800d3a4:	441d      	add	r5, r3
 800d3a6:	f04f 0800 	mov.w	r8, #0
 800d3aa:	ee18 1a10 	vmov	r1, s16
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	4620      	mov	r0, r4
 800d3b2:	f000 fa51 	bl	800d858 <__lshift>
 800d3b6:	4631      	mov	r1, r6
 800d3b8:	ee08 0a10 	vmov	s16, r0
 800d3bc:	f000 fabc 	bl	800d938 <__mcmp>
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	dc91      	bgt.n	800d2e8 <_dtoa_r+0xaa8>
 800d3c4:	d102      	bne.n	800d3cc <_dtoa_r+0xb8c>
 800d3c6:	f01a 0f01 	tst.w	sl, #1
 800d3ca:	d18d      	bne.n	800d2e8 <_dtoa_r+0xaa8>
 800d3cc:	462b      	mov	r3, r5
 800d3ce:	461d      	mov	r5, r3
 800d3d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d3d4:	2a30      	cmp	r2, #48	; 0x30
 800d3d6:	d0fa      	beq.n	800d3ce <_dtoa_r+0xb8e>
 800d3d8:	e6d7      	b.n	800d18a <_dtoa_r+0x94a>
 800d3da:	9a01      	ldr	r2, [sp, #4]
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d184      	bne.n	800d2ea <_dtoa_r+0xaaa>
 800d3e0:	9b00      	ldr	r3, [sp, #0]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	9300      	str	r3, [sp, #0]
 800d3e6:	2331      	movs	r3, #49	; 0x31
 800d3e8:	7013      	strb	r3, [r2, #0]
 800d3ea:	e6ce      	b.n	800d18a <_dtoa_r+0x94a>
 800d3ec:	4b09      	ldr	r3, [pc, #36]	; (800d414 <_dtoa_r+0xbd4>)
 800d3ee:	f7ff ba95 	b.w	800c91c <_dtoa_r+0xdc>
 800d3f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	f47f aa6e 	bne.w	800c8d6 <_dtoa_r+0x96>
 800d3fa:	4b07      	ldr	r3, [pc, #28]	; (800d418 <_dtoa_r+0xbd8>)
 800d3fc:	f7ff ba8e 	b.w	800c91c <_dtoa_r+0xdc>
 800d400:	9b02      	ldr	r3, [sp, #8]
 800d402:	2b00      	cmp	r3, #0
 800d404:	dcae      	bgt.n	800d364 <_dtoa_r+0xb24>
 800d406:	9b06      	ldr	r3, [sp, #24]
 800d408:	2b02      	cmp	r3, #2
 800d40a:	f73f aea8 	bgt.w	800d15e <_dtoa_r+0x91e>
 800d40e:	e7a9      	b.n	800d364 <_dtoa_r+0xb24>
 800d410:	0800edf4 	.word	0x0800edf4
 800d414:	0800ec50 	.word	0x0800ec50
 800d418:	0800ed75 	.word	0x0800ed75

0800d41c <_localeconv_r>:
 800d41c:	4800      	ldr	r0, [pc, #0]	; (800d420 <_localeconv_r+0x4>)
 800d41e:	4770      	bx	lr
 800d420:	20000250 	.word	0x20000250

0800d424 <malloc>:
 800d424:	4b02      	ldr	r3, [pc, #8]	; (800d430 <malloc+0xc>)
 800d426:	4601      	mov	r1, r0
 800d428:	6818      	ldr	r0, [r3, #0]
 800d42a:	f000 bc09 	b.w	800dc40 <_malloc_r>
 800d42e:	bf00      	nop
 800d430:	200000fc 	.word	0x200000fc

0800d434 <_Balloc>:
 800d434:	b570      	push	{r4, r5, r6, lr}
 800d436:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d438:	4604      	mov	r4, r0
 800d43a:	460d      	mov	r5, r1
 800d43c:	b976      	cbnz	r6, 800d45c <_Balloc+0x28>
 800d43e:	2010      	movs	r0, #16
 800d440:	f7ff fff0 	bl	800d424 <malloc>
 800d444:	4602      	mov	r2, r0
 800d446:	6260      	str	r0, [r4, #36]	; 0x24
 800d448:	b920      	cbnz	r0, 800d454 <_Balloc+0x20>
 800d44a:	4b18      	ldr	r3, [pc, #96]	; (800d4ac <_Balloc+0x78>)
 800d44c:	4818      	ldr	r0, [pc, #96]	; (800d4b0 <_Balloc+0x7c>)
 800d44e:	2166      	movs	r1, #102	; 0x66
 800d450:	f000 fdd6 	bl	800e000 <__assert_func>
 800d454:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d458:	6006      	str	r6, [r0, #0]
 800d45a:	60c6      	str	r6, [r0, #12]
 800d45c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d45e:	68f3      	ldr	r3, [r6, #12]
 800d460:	b183      	cbz	r3, 800d484 <_Balloc+0x50>
 800d462:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d464:	68db      	ldr	r3, [r3, #12]
 800d466:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d46a:	b9b8      	cbnz	r0, 800d49c <_Balloc+0x68>
 800d46c:	2101      	movs	r1, #1
 800d46e:	fa01 f605 	lsl.w	r6, r1, r5
 800d472:	1d72      	adds	r2, r6, #5
 800d474:	0092      	lsls	r2, r2, #2
 800d476:	4620      	mov	r0, r4
 800d478:	f000 fb60 	bl	800db3c <_calloc_r>
 800d47c:	b160      	cbz	r0, 800d498 <_Balloc+0x64>
 800d47e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d482:	e00e      	b.n	800d4a2 <_Balloc+0x6e>
 800d484:	2221      	movs	r2, #33	; 0x21
 800d486:	2104      	movs	r1, #4
 800d488:	4620      	mov	r0, r4
 800d48a:	f000 fb57 	bl	800db3c <_calloc_r>
 800d48e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d490:	60f0      	str	r0, [r6, #12]
 800d492:	68db      	ldr	r3, [r3, #12]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d1e4      	bne.n	800d462 <_Balloc+0x2e>
 800d498:	2000      	movs	r0, #0
 800d49a:	bd70      	pop	{r4, r5, r6, pc}
 800d49c:	6802      	ldr	r2, [r0, #0]
 800d49e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d4a8:	e7f7      	b.n	800d49a <_Balloc+0x66>
 800d4aa:	bf00      	nop
 800d4ac:	0800ed82 	.word	0x0800ed82
 800d4b0:	0800ee05 	.word	0x0800ee05

0800d4b4 <_Bfree>:
 800d4b4:	b570      	push	{r4, r5, r6, lr}
 800d4b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d4b8:	4605      	mov	r5, r0
 800d4ba:	460c      	mov	r4, r1
 800d4bc:	b976      	cbnz	r6, 800d4dc <_Bfree+0x28>
 800d4be:	2010      	movs	r0, #16
 800d4c0:	f7ff ffb0 	bl	800d424 <malloc>
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	6268      	str	r0, [r5, #36]	; 0x24
 800d4c8:	b920      	cbnz	r0, 800d4d4 <_Bfree+0x20>
 800d4ca:	4b09      	ldr	r3, [pc, #36]	; (800d4f0 <_Bfree+0x3c>)
 800d4cc:	4809      	ldr	r0, [pc, #36]	; (800d4f4 <_Bfree+0x40>)
 800d4ce:	218a      	movs	r1, #138	; 0x8a
 800d4d0:	f000 fd96 	bl	800e000 <__assert_func>
 800d4d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4d8:	6006      	str	r6, [r0, #0]
 800d4da:	60c6      	str	r6, [r0, #12]
 800d4dc:	b13c      	cbz	r4, 800d4ee <_Bfree+0x3a>
 800d4de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d4e0:	6862      	ldr	r2, [r4, #4]
 800d4e2:	68db      	ldr	r3, [r3, #12]
 800d4e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d4e8:	6021      	str	r1, [r4, #0]
 800d4ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d4ee:	bd70      	pop	{r4, r5, r6, pc}
 800d4f0:	0800ed82 	.word	0x0800ed82
 800d4f4:	0800ee05 	.word	0x0800ee05

0800d4f8 <__multadd>:
 800d4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4fc:	690d      	ldr	r5, [r1, #16]
 800d4fe:	4607      	mov	r7, r0
 800d500:	460c      	mov	r4, r1
 800d502:	461e      	mov	r6, r3
 800d504:	f101 0c14 	add.w	ip, r1, #20
 800d508:	2000      	movs	r0, #0
 800d50a:	f8dc 3000 	ldr.w	r3, [ip]
 800d50e:	b299      	uxth	r1, r3
 800d510:	fb02 6101 	mla	r1, r2, r1, r6
 800d514:	0c1e      	lsrs	r6, r3, #16
 800d516:	0c0b      	lsrs	r3, r1, #16
 800d518:	fb02 3306 	mla	r3, r2, r6, r3
 800d51c:	b289      	uxth	r1, r1
 800d51e:	3001      	adds	r0, #1
 800d520:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d524:	4285      	cmp	r5, r0
 800d526:	f84c 1b04 	str.w	r1, [ip], #4
 800d52a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d52e:	dcec      	bgt.n	800d50a <__multadd+0x12>
 800d530:	b30e      	cbz	r6, 800d576 <__multadd+0x7e>
 800d532:	68a3      	ldr	r3, [r4, #8]
 800d534:	42ab      	cmp	r3, r5
 800d536:	dc19      	bgt.n	800d56c <__multadd+0x74>
 800d538:	6861      	ldr	r1, [r4, #4]
 800d53a:	4638      	mov	r0, r7
 800d53c:	3101      	adds	r1, #1
 800d53e:	f7ff ff79 	bl	800d434 <_Balloc>
 800d542:	4680      	mov	r8, r0
 800d544:	b928      	cbnz	r0, 800d552 <__multadd+0x5a>
 800d546:	4602      	mov	r2, r0
 800d548:	4b0c      	ldr	r3, [pc, #48]	; (800d57c <__multadd+0x84>)
 800d54a:	480d      	ldr	r0, [pc, #52]	; (800d580 <__multadd+0x88>)
 800d54c:	21b5      	movs	r1, #181	; 0xb5
 800d54e:	f000 fd57 	bl	800e000 <__assert_func>
 800d552:	6922      	ldr	r2, [r4, #16]
 800d554:	3202      	adds	r2, #2
 800d556:	f104 010c 	add.w	r1, r4, #12
 800d55a:	0092      	lsls	r2, r2, #2
 800d55c:	300c      	adds	r0, #12
 800d55e:	f7fe fbb5 	bl	800bccc <memcpy>
 800d562:	4621      	mov	r1, r4
 800d564:	4638      	mov	r0, r7
 800d566:	f7ff ffa5 	bl	800d4b4 <_Bfree>
 800d56a:	4644      	mov	r4, r8
 800d56c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d570:	3501      	adds	r5, #1
 800d572:	615e      	str	r6, [r3, #20]
 800d574:	6125      	str	r5, [r4, #16]
 800d576:	4620      	mov	r0, r4
 800d578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d57c:	0800edf4 	.word	0x0800edf4
 800d580:	0800ee05 	.word	0x0800ee05

0800d584 <__hi0bits>:
 800d584:	0c03      	lsrs	r3, r0, #16
 800d586:	041b      	lsls	r3, r3, #16
 800d588:	b9d3      	cbnz	r3, 800d5c0 <__hi0bits+0x3c>
 800d58a:	0400      	lsls	r0, r0, #16
 800d58c:	2310      	movs	r3, #16
 800d58e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d592:	bf04      	itt	eq
 800d594:	0200      	lsleq	r0, r0, #8
 800d596:	3308      	addeq	r3, #8
 800d598:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d59c:	bf04      	itt	eq
 800d59e:	0100      	lsleq	r0, r0, #4
 800d5a0:	3304      	addeq	r3, #4
 800d5a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d5a6:	bf04      	itt	eq
 800d5a8:	0080      	lsleq	r0, r0, #2
 800d5aa:	3302      	addeq	r3, #2
 800d5ac:	2800      	cmp	r0, #0
 800d5ae:	db05      	blt.n	800d5bc <__hi0bits+0x38>
 800d5b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d5b4:	f103 0301 	add.w	r3, r3, #1
 800d5b8:	bf08      	it	eq
 800d5ba:	2320      	moveq	r3, #32
 800d5bc:	4618      	mov	r0, r3
 800d5be:	4770      	bx	lr
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	e7e4      	b.n	800d58e <__hi0bits+0xa>

0800d5c4 <__lo0bits>:
 800d5c4:	6803      	ldr	r3, [r0, #0]
 800d5c6:	f013 0207 	ands.w	r2, r3, #7
 800d5ca:	4601      	mov	r1, r0
 800d5cc:	d00b      	beq.n	800d5e6 <__lo0bits+0x22>
 800d5ce:	07da      	lsls	r2, r3, #31
 800d5d0:	d423      	bmi.n	800d61a <__lo0bits+0x56>
 800d5d2:	0798      	lsls	r0, r3, #30
 800d5d4:	bf49      	itett	mi
 800d5d6:	085b      	lsrmi	r3, r3, #1
 800d5d8:	089b      	lsrpl	r3, r3, #2
 800d5da:	2001      	movmi	r0, #1
 800d5dc:	600b      	strmi	r3, [r1, #0]
 800d5de:	bf5c      	itt	pl
 800d5e0:	600b      	strpl	r3, [r1, #0]
 800d5e2:	2002      	movpl	r0, #2
 800d5e4:	4770      	bx	lr
 800d5e6:	b298      	uxth	r0, r3
 800d5e8:	b9a8      	cbnz	r0, 800d616 <__lo0bits+0x52>
 800d5ea:	0c1b      	lsrs	r3, r3, #16
 800d5ec:	2010      	movs	r0, #16
 800d5ee:	b2da      	uxtb	r2, r3
 800d5f0:	b90a      	cbnz	r2, 800d5f6 <__lo0bits+0x32>
 800d5f2:	3008      	adds	r0, #8
 800d5f4:	0a1b      	lsrs	r3, r3, #8
 800d5f6:	071a      	lsls	r2, r3, #28
 800d5f8:	bf04      	itt	eq
 800d5fa:	091b      	lsreq	r3, r3, #4
 800d5fc:	3004      	addeq	r0, #4
 800d5fe:	079a      	lsls	r2, r3, #30
 800d600:	bf04      	itt	eq
 800d602:	089b      	lsreq	r3, r3, #2
 800d604:	3002      	addeq	r0, #2
 800d606:	07da      	lsls	r2, r3, #31
 800d608:	d403      	bmi.n	800d612 <__lo0bits+0x4e>
 800d60a:	085b      	lsrs	r3, r3, #1
 800d60c:	f100 0001 	add.w	r0, r0, #1
 800d610:	d005      	beq.n	800d61e <__lo0bits+0x5a>
 800d612:	600b      	str	r3, [r1, #0]
 800d614:	4770      	bx	lr
 800d616:	4610      	mov	r0, r2
 800d618:	e7e9      	b.n	800d5ee <__lo0bits+0x2a>
 800d61a:	2000      	movs	r0, #0
 800d61c:	4770      	bx	lr
 800d61e:	2020      	movs	r0, #32
 800d620:	4770      	bx	lr
	...

0800d624 <__i2b>:
 800d624:	b510      	push	{r4, lr}
 800d626:	460c      	mov	r4, r1
 800d628:	2101      	movs	r1, #1
 800d62a:	f7ff ff03 	bl	800d434 <_Balloc>
 800d62e:	4602      	mov	r2, r0
 800d630:	b928      	cbnz	r0, 800d63e <__i2b+0x1a>
 800d632:	4b05      	ldr	r3, [pc, #20]	; (800d648 <__i2b+0x24>)
 800d634:	4805      	ldr	r0, [pc, #20]	; (800d64c <__i2b+0x28>)
 800d636:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d63a:	f000 fce1 	bl	800e000 <__assert_func>
 800d63e:	2301      	movs	r3, #1
 800d640:	6144      	str	r4, [r0, #20]
 800d642:	6103      	str	r3, [r0, #16]
 800d644:	bd10      	pop	{r4, pc}
 800d646:	bf00      	nop
 800d648:	0800edf4 	.word	0x0800edf4
 800d64c:	0800ee05 	.word	0x0800ee05

0800d650 <__multiply>:
 800d650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d654:	4691      	mov	r9, r2
 800d656:	690a      	ldr	r2, [r1, #16]
 800d658:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d65c:	429a      	cmp	r2, r3
 800d65e:	bfb8      	it	lt
 800d660:	460b      	movlt	r3, r1
 800d662:	460c      	mov	r4, r1
 800d664:	bfbc      	itt	lt
 800d666:	464c      	movlt	r4, r9
 800d668:	4699      	movlt	r9, r3
 800d66a:	6927      	ldr	r7, [r4, #16]
 800d66c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d670:	68a3      	ldr	r3, [r4, #8]
 800d672:	6861      	ldr	r1, [r4, #4]
 800d674:	eb07 060a 	add.w	r6, r7, sl
 800d678:	42b3      	cmp	r3, r6
 800d67a:	b085      	sub	sp, #20
 800d67c:	bfb8      	it	lt
 800d67e:	3101      	addlt	r1, #1
 800d680:	f7ff fed8 	bl	800d434 <_Balloc>
 800d684:	b930      	cbnz	r0, 800d694 <__multiply+0x44>
 800d686:	4602      	mov	r2, r0
 800d688:	4b44      	ldr	r3, [pc, #272]	; (800d79c <__multiply+0x14c>)
 800d68a:	4845      	ldr	r0, [pc, #276]	; (800d7a0 <__multiply+0x150>)
 800d68c:	f240 115d 	movw	r1, #349	; 0x15d
 800d690:	f000 fcb6 	bl	800e000 <__assert_func>
 800d694:	f100 0514 	add.w	r5, r0, #20
 800d698:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d69c:	462b      	mov	r3, r5
 800d69e:	2200      	movs	r2, #0
 800d6a0:	4543      	cmp	r3, r8
 800d6a2:	d321      	bcc.n	800d6e8 <__multiply+0x98>
 800d6a4:	f104 0314 	add.w	r3, r4, #20
 800d6a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d6ac:	f109 0314 	add.w	r3, r9, #20
 800d6b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d6b4:	9202      	str	r2, [sp, #8]
 800d6b6:	1b3a      	subs	r2, r7, r4
 800d6b8:	3a15      	subs	r2, #21
 800d6ba:	f022 0203 	bic.w	r2, r2, #3
 800d6be:	3204      	adds	r2, #4
 800d6c0:	f104 0115 	add.w	r1, r4, #21
 800d6c4:	428f      	cmp	r7, r1
 800d6c6:	bf38      	it	cc
 800d6c8:	2204      	movcc	r2, #4
 800d6ca:	9201      	str	r2, [sp, #4]
 800d6cc:	9a02      	ldr	r2, [sp, #8]
 800d6ce:	9303      	str	r3, [sp, #12]
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d80c      	bhi.n	800d6ee <__multiply+0x9e>
 800d6d4:	2e00      	cmp	r6, #0
 800d6d6:	dd03      	ble.n	800d6e0 <__multiply+0x90>
 800d6d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d05a      	beq.n	800d796 <__multiply+0x146>
 800d6e0:	6106      	str	r6, [r0, #16]
 800d6e2:	b005      	add	sp, #20
 800d6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6e8:	f843 2b04 	str.w	r2, [r3], #4
 800d6ec:	e7d8      	b.n	800d6a0 <__multiply+0x50>
 800d6ee:	f8b3 a000 	ldrh.w	sl, [r3]
 800d6f2:	f1ba 0f00 	cmp.w	sl, #0
 800d6f6:	d024      	beq.n	800d742 <__multiply+0xf2>
 800d6f8:	f104 0e14 	add.w	lr, r4, #20
 800d6fc:	46a9      	mov	r9, r5
 800d6fe:	f04f 0c00 	mov.w	ip, #0
 800d702:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d706:	f8d9 1000 	ldr.w	r1, [r9]
 800d70a:	fa1f fb82 	uxth.w	fp, r2
 800d70e:	b289      	uxth	r1, r1
 800d710:	fb0a 110b 	mla	r1, sl, fp, r1
 800d714:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d718:	f8d9 2000 	ldr.w	r2, [r9]
 800d71c:	4461      	add	r1, ip
 800d71e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d722:	fb0a c20b 	mla	r2, sl, fp, ip
 800d726:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d72a:	b289      	uxth	r1, r1
 800d72c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d730:	4577      	cmp	r7, lr
 800d732:	f849 1b04 	str.w	r1, [r9], #4
 800d736:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d73a:	d8e2      	bhi.n	800d702 <__multiply+0xb2>
 800d73c:	9a01      	ldr	r2, [sp, #4]
 800d73e:	f845 c002 	str.w	ip, [r5, r2]
 800d742:	9a03      	ldr	r2, [sp, #12]
 800d744:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d748:	3304      	adds	r3, #4
 800d74a:	f1b9 0f00 	cmp.w	r9, #0
 800d74e:	d020      	beq.n	800d792 <__multiply+0x142>
 800d750:	6829      	ldr	r1, [r5, #0]
 800d752:	f104 0c14 	add.w	ip, r4, #20
 800d756:	46ae      	mov	lr, r5
 800d758:	f04f 0a00 	mov.w	sl, #0
 800d75c:	f8bc b000 	ldrh.w	fp, [ip]
 800d760:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d764:	fb09 220b 	mla	r2, r9, fp, r2
 800d768:	4492      	add	sl, r2
 800d76a:	b289      	uxth	r1, r1
 800d76c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d770:	f84e 1b04 	str.w	r1, [lr], #4
 800d774:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d778:	f8be 1000 	ldrh.w	r1, [lr]
 800d77c:	0c12      	lsrs	r2, r2, #16
 800d77e:	fb09 1102 	mla	r1, r9, r2, r1
 800d782:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d786:	4567      	cmp	r7, ip
 800d788:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d78c:	d8e6      	bhi.n	800d75c <__multiply+0x10c>
 800d78e:	9a01      	ldr	r2, [sp, #4]
 800d790:	50a9      	str	r1, [r5, r2]
 800d792:	3504      	adds	r5, #4
 800d794:	e79a      	b.n	800d6cc <__multiply+0x7c>
 800d796:	3e01      	subs	r6, #1
 800d798:	e79c      	b.n	800d6d4 <__multiply+0x84>
 800d79a:	bf00      	nop
 800d79c:	0800edf4 	.word	0x0800edf4
 800d7a0:	0800ee05 	.word	0x0800ee05

0800d7a4 <__pow5mult>:
 800d7a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7a8:	4615      	mov	r5, r2
 800d7aa:	f012 0203 	ands.w	r2, r2, #3
 800d7ae:	4606      	mov	r6, r0
 800d7b0:	460f      	mov	r7, r1
 800d7b2:	d007      	beq.n	800d7c4 <__pow5mult+0x20>
 800d7b4:	4c25      	ldr	r4, [pc, #148]	; (800d84c <__pow5mult+0xa8>)
 800d7b6:	3a01      	subs	r2, #1
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d7be:	f7ff fe9b 	bl	800d4f8 <__multadd>
 800d7c2:	4607      	mov	r7, r0
 800d7c4:	10ad      	asrs	r5, r5, #2
 800d7c6:	d03d      	beq.n	800d844 <__pow5mult+0xa0>
 800d7c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d7ca:	b97c      	cbnz	r4, 800d7ec <__pow5mult+0x48>
 800d7cc:	2010      	movs	r0, #16
 800d7ce:	f7ff fe29 	bl	800d424 <malloc>
 800d7d2:	4602      	mov	r2, r0
 800d7d4:	6270      	str	r0, [r6, #36]	; 0x24
 800d7d6:	b928      	cbnz	r0, 800d7e4 <__pow5mult+0x40>
 800d7d8:	4b1d      	ldr	r3, [pc, #116]	; (800d850 <__pow5mult+0xac>)
 800d7da:	481e      	ldr	r0, [pc, #120]	; (800d854 <__pow5mult+0xb0>)
 800d7dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d7e0:	f000 fc0e 	bl	800e000 <__assert_func>
 800d7e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d7e8:	6004      	str	r4, [r0, #0]
 800d7ea:	60c4      	str	r4, [r0, #12]
 800d7ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d7f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d7f4:	b94c      	cbnz	r4, 800d80a <__pow5mult+0x66>
 800d7f6:	f240 2171 	movw	r1, #625	; 0x271
 800d7fa:	4630      	mov	r0, r6
 800d7fc:	f7ff ff12 	bl	800d624 <__i2b>
 800d800:	2300      	movs	r3, #0
 800d802:	f8c8 0008 	str.w	r0, [r8, #8]
 800d806:	4604      	mov	r4, r0
 800d808:	6003      	str	r3, [r0, #0]
 800d80a:	f04f 0900 	mov.w	r9, #0
 800d80e:	07eb      	lsls	r3, r5, #31
 800d810:	d50a      	bpl.n	800d828 <__pow5mult+0x84>
 800d812:	4639      	mov	r1, r7
 800d814:	4622      	mov	r2, r4
 800d816:	4630      	mov	r0, r6
 800d818:	f7ff ff1a 	bl	800d650 <__multiply>
 800d81c:	4639      	mov	r1, r7
 800d81e:	4680      	mov	r8, r0
 800d820:	4630      	mov	r0, r6
 800d822:	f7ff fe47 	bl	800d4b4 <_Bfree>
 800d826:	4647      	mov	r7, r8
 800d828:	106d      	asrs	r5, r5, #1
 800d82a:	d00b      	beq.n	800d844 <__pow5mult+0xa0>
 800d82c:	6820      	ldr	r0, [r4, #0]
 800d82e:	b938      	cbnz	r0, 800d840 <__pow5mult+0x9c>
 800d830:	4622      	mov	r2, r4
 800d832:	4621      	mov	r1, r4
 800d834:	4630      	mov	r0, r6
 800d836:	f7ff ff0b 	bl	800d650 <__multiply>
 800d83a:	6020      	str	r0, [r4, #0]
 800d83c:	f8c0 9000 	str.w	r9, [r0]
 800d840:	4604      	mov	r4, r0
 800d842:	e7e4      	b.n	800d80e <__pow5mult+0x6a>
 800d844:	4638      	mov	r0, r7
 800d846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d84a:	bf00      	nop
 800d84c:	0800ef58 	.word	0x0800ef58
 800d850:	0800ed82 	.word	0x0800ed82
 800d854:	0800ee05 	.word	0x0800ee05

0800d858 <__lshift>:
 800d858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d85c:	460c      	mov	r4, r1
 800d85e:	6849      	ldr	r1, [r1, #4]
 800d860:	6923      	ldr	r3, [r4, #16]
 800d862:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d866:	68a3      	ldr	r3, [r4, #8]
 800d868:	4607      	mov	r7, r0
 800d86a:	4691      	mov	r9, r2
 800d86c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d870:	f108 0601 	add.w	r6, r8, #1
 800d874:	42b3      	cmp	r3, r6
 800d876:	db0b      	blt.n	800d890 <__lshift+0x38>
 800d878:	4638      	mov	r0, r7
 800d87a:	f7ff fddb 	bl	800d434 <_Balloc>
 800d87e:	4605      	mov	r5, r0
 800d880:	b948      	cbnz	r0, 800d896 <__lshift+0x3e>
 800d882:	4602      	mov	r2, r0
 800d884:	4b2a      	ldr	r3, [pc, #168]	; (800d930 <__lshift+0xd8>)
 800d886:	482b      	ldr	r0, [pc, #172]	; (800d934 <__lshift+0xdc>)
 800d888:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d88c:	f000 fbb8 	bl	800e000 <__assert_func>
 800d890:	3101      	adds	r1, #1
 800d892:	005b      	lsls	r3, r3, #1
 800d894:	e7ee      	b.n	800d874 <__lshift+0x1c>
 800d896:	2300      	movs	r3, #0
 800d898:	f100 0114 	add.w	r1, r0, #20
 800d89c:	f100 0210 	add.w	r2, r0, #16
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	4553      	cmp	r3, sl
 800d8a4:	db37      	blt.n	800d916 <__lshift+0xbe>
 800d8a6:	6920      	ldr	r0, [r4, #16]
 800d8a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d8ac:	f104 0314 	add.w	r3, r4, #20
 800d8b0:	f019 091f 	ands.w	r9, r9, #31
 800d8b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d8b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d8bc:	d02f      	beq.n	800d91e <__lshift+0xc6>
 800d8be:	f1c9 0e20 	rsb	lr, r9, #32
 800d8c2:	468a      	mov	sl, r1
 800d8c4:	f04f 0c00 	mov.w	ip, #0
 800d8c8:	681a      	ldr	r2, [r3, #0]
 800d8ca:	fa02 f209 	lsl.w	r2, r2, r9
 800d8ce:	ea42 020c 	orr.w	r2, r2, ip
 800d8d2:	f84a 2b04 	str.w	r2, [sl], #4
 800d8d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8da:	4298      	cmp	r0, r3
 800d8dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d8e0:	d8f2      	bhi.n	800d8c8 <__lshift+0x70>
 800d8e2:	1b03      	subs	r3, r0, r4
 800d8e4:	3b15      	subs	r3, #21
 800d8e6:	f023 0303 	bic.w	r3, r3, #3
 800d8ea:	3304      	adds	r3, #4
 800d8ec:	f104 0215 	add.w	r2, r4, #21
 800d8f0:	4290      	cmp	r0, r2
 800d8f2:	bf38      	it	cc
 800d8f4:	2304      	movcc	r3, #4
 800d8f6:	f841 c003 	str.w	ip, [r1, r3]
 800d8fa:	f1bc 0f00 	cmp.w	ip, #0
 800d8fe:	d001      	beq.n	800d904 <__lshift+0xac>
 800d900:	f108 0602 	add.w	r6, r8, #2
 800d904:	3e01      	subs	r6, #1
 800d906:	4638      	mov	r0, r7
 800d908:	612e      	str	r6, [r5, #16]
 800d90a:	4621      	mov	r1, r4
 800d90c:	f7ff fdd2 	bl	800d4b4 <_Bfree>
 800d910:	4628      	mov	r0, r5
 800d912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d916:	f842 0f04 	str.w	r0, [r2, #4]!
 800d91a:	3301      	adds	r3, #1
 800d91c:	e7c1      	b.n	800d8a2 <__lshift+0x4a>
 800d91e:	3904      	subs	r1, #4
 800d920:	f853 2b04 	ldr.w	r2, [r3], #4
 800d924:	f841 2f04 	str.w	r2, [r1, #4]!
 800d928:	4298      	cmp	r0, r3
 800d92a:	d8f9      	bhi.n	800d920 <__lshift+0xc8>
 800d92c:	e7ea      	b.n	800d904 <__lshift+0xac>
 800d92e:	bf00      	nop
 800d930:	0800edf4 	.word	0x0800edf4
 800d934:	0800ee05 	.word	0x0800ee05

0800d938 <__mcmp>:
 800d938:	b530      	push	{r4, r5, lr}
 800d93a:	6902      	ldr	r2, [r0, #16]
 800d93c:	690c      	ldr	r4, [r1, #16]
 800d93e:	1b12      	subs	r2, r2, r4
 800d940:	d10e      	bne.n	800d960 <__mcmp+0x28>
 800d942:	f100 0314 	add.w	r3, r0, #20
 800d946:	3114      	adds	r1, #20
 800d948:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d94c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d950:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d954:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d958:	42a5      	cmp	r5, r4
 800d95a:	d003      	beq.n	800d964 <__mcmp+0x2c>
 800d95c:	d305      	bcc.n	800d96a <__mcmp+0x32>
 800d95e:	2201      	movs	r2, #1
 800d960:	4610      	mov	r0, r2
 800d962:	bd30      	pop	{r4, r5, pc}
 800d964:	4283      	cmp	r3, r0
 800d966:	d3f3      	bcc.n	800d950 <__mcmp+0x18>
 800d968:	e7fa      	b.n	800d960 <__mcmp+0x28>
 800d96a:	f04f 32ff 	mov.w	r2, #4294967295
 800d96e:	e7f7      	b.n	800d960 <__mcmp+0x28>

0800d970 <__mdiff>:
 800d970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d974:	460c      	mov	r4, r1
 800d976:	4606      	mov	r6, r0
 800d978:	4611      	mov	r1, r2
 800d97a:	4620      	mov	r0, r4
 800d97c:	4690      	mov	r8, r2
 800d97e:	f7ff ffdb 	bl	800d938 <__mcmp>
 800d982:	1e05      	subs	r5, r0, #0
 800d984:	d110      	bne.n	800d9a8 <__mdiff+0x38>
 800d986:	4629      	mov	r1, r5
 800d988:	4630      	mov	r0, r6
 800d98a:	f7ff fd53 	bl	800d434 <_Balloc>
 800d98e:	b930      	cbnz	r0, 800d99e <__mdiff+0x2e>
 800d990:	4b3a      	ldr	r3, [pc, #232]	; (800da7c <__mdiff+0x10c>)
 800d992:	4602      	mov	r2, r0
 800d994:	f240 2132 	movw	r1, #562	; 0x232
 800d998:	4839      	ldr	r0, [pc, #228]	; (800da80 <__mdiff+0x110>)
 800d99a:	f000 fb31 	bl	800e000 <__assert_func>
 800d99e:	2301      	movs	r3, #1
 800d9a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d9a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9a8:	bfa4      	itt	ge
 800d9aa:	4643      	movge	r3, r8
 800d9ac:	46a0      	movge	r8, r4
 800d9ae:	4630      	mov	r0, r6
 800d9b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d9b4:	bfa6      	itte	ge
 800d9b6:	461c      	movge	r4, r3
 800d9b8:	2500      	movge	r5, #0
 800d9ba:	2501      	movlt	r5, #1
 800d9bc:	f7ff fd3a 	bl	800d434 <_Balloc>
 800d9c0:	b920      	cbnz	r0, 800d9cc <__mdiff+0x5c>
 800d9c2:	4b2e      	ldr	r3, [pc, #184]	; (800da7c <__mdiff+0x10c>)
 800d9c4:	4602      	mov	r2, r0
 800d9c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d9ca:	e7e5      	b.n	800d998 <__mdiff+0x28>
 800d9cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d9d0:	6926      	ldr	r6, [r4, #16]
 800d9d2:	60c5      	str	r5, [r0, #12]
 800d9d4:	f104 0914 	add.w	r9, r4, #20
 800d9d8:	f108 0514 	add.w	r5, r8, #20
 800d9dc:	f100 0e14 	add.w	lr, r0, #20
 800d9e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d9e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d9e8:	f108 0210 	add.w	r2, r8, #16
 800d9ec:	46f2      	mov	sl, lr
 800d9ee:	2100      	movs	r1, #0
 800d9f0:	f859 3b04 	ldr.w	r3, [r9], #4
 800d9f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d9f8:	fa1f f883 	uxth.w	r8, r3
 800d9fc:	fa11 f18b 	uxtah	r1, r1, fp
 800da00:	0c1b      	lsrs	r3, r3, #16
 800da02:	eba1 0808 	sub.w	r8, r1, r8
 800da06:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800da0a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800da0e:	fa1f f888 	uxth.w	r8, r8
 800da12:	1419      	asrs	r1, r3, #16
 800da14:	454e      	cmp	r6, r9
 800da16:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800da1a:	f84a 3b04 	str.w	r3, [sl], #4
 800da1e:	d8e7      	bhi.n	800d9f0 <__mdiff+0x80>
 800da20:	1b33      	subs	r3, r6, r4
 800da22:	3b15      	subs	r3, #21
 800da24:	f023 0303 	bic.w	r3, r3, #3
 800da28:	3304      	adds	r3, #4
 800da2a:	3415      	adds	r4, #21
 800da2c:	42a6      	cmp	r6, r4
 800da2e:	bf38      	it	cc
 800da30:	2304      	movcc	r3, #4
 800da32:	441d      	add	r5, r3
 800da34:	4473      	add	r3, lr
 800da36:	469e      	mov	lr, r3
 800da38:	462e      	mov	r6, r5
 800da3a:	4566      	cmp	r6, ip
 800da3c:	d30e      	bcc.n	800da5c <__mdiff+0xec>
 800da3e:	f10c 0203 	add.w	r2, ip, #3
 800da42:	1b52      	subs	r2, r2, r5
 800da44:	f022 0203 	bic.w	r2, r2, #3
 800da48:	3d03      	subs	r5, #3
 800da4a:	45ac      	cmp	ip, r5
 800da4c:	bf38      	it	cc
 800da4e:	2200      	movcc	r2, #0
 800da50:	441a      	add	r2, r3
 800da52:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800da56:	b17b      	cbz	r3, 800da78 <__mdiff+0x108>
 800da58:	6107      	str	r7, [r0, #16]
 800da5a:	e7a3      	b.n	800d9a4 <__mdiff+0x34>
 800da5c:	f856 8b04 	ldr.w	r8, [r6], #4
 800da60:	fa11 f288 	uxtah	r2, r1, r8
 800da64:	1414      	asrs	r4, r2, #16
 800da66:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800da6a:	b292      	uxth	r2, r2
 800da6c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800da70:	f84e 2b04 	str.w	r2, [lr], #4
 800da74:	1421      	asrs	r1, r4, #16
 800da76:	e7e0      	b.n	800da3a <__mdiff+0xca>
 800da78:	3f01      	subs	r7, #1
 800da7a:	e7ea      	b.n	800da52 <__mdiff+0xe2>
 800da7c:	0800edf4 	.word	0x0800edf4
 800da80:	0800ee05 	.word	0x0800ee05

0800da84 <__d2b>:
 800da84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800da88:	4689      	mov	r9, r1
 800da8a:	2101      	movs	r1, #1
 800da8c:	ec57 6b10 	vmov	r6, r7, d0
 800da90:	4690      	mov	r8, r2
 800da92:	f7ff fccf 	bl	800d434 <_Balloc>
 800da96:	4604      	mov	r4, r0
 800da98:	b930      	cbnz	r0, 800daa8 <__d2b+0x24>
 800da9a:	4602      	mov	r2, r0
 800da9c:	4b25      	ldr	r3, [pc, #148]	; (800db34 <__d2b+0xb0>)
 800da9e:	4826      	ldr	r0, [pc, #152]	; (800db38 <__d2b+0xb4>)
 800daa0:	f240 310a 	movw	r1, #778	; 0x30a
 800daa4:	f000 faac 	bl	800e000 <__assert_func>
 800daa8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800daac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dab0:	bb35      	cbnz	r5, 800db00 <__d2b+0x7c>
 800dab2:	2e00      	cmp	r6, #0
 800dab4:	9301      	str	r3, [sp, #4]
 800dab6:	d028      	beq.n	800db0a <__d2b+0x86>
 800dab8:	4668      	mov	r0, sp
 800daba:	9600      	str	r6, [sp, #0]
 800dabc:	f7ff fd82 	bl	800d5c4 <__lo0bits>
 800dac0:	9900      	ldr	r1, [sp, #0]
 800dac2:	b300      	cbz	r0, 800db06 <__d2b+0x82>
 800dac4:	9a01      	ldr	r2, [sp, #4]
 800dac6:	f1c0 0320 	rsb	r3, r0, #32
 800daca:	fa02 f303 	lsl.w	r3, r2, r3
 800dace:	430b      	orrs	r3, r1
 800dad0:	40c2      	lsrs	r2, r0
 800dad2:	6163      	str	r3, [r4, #20]
 800dad4:	9201      	str	r2, [sp, #4]
 800dad6:	9b01      	ldr	r3, [sp, #4]
 800dad8:	61a3      	str	r3, [r4, #24]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	bf14      	ite	ne
 800dade:	2202      	movne	r2, #2
 800dae0:	2201      	moveq	r2, #1
 800dae2:	6122      	str	r2, [r4, #16]
 800dae4:	b1d5      	cbz	r5, 800db1c <__d2b+0x98>
 800dae6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800daea:	4405      	add	r5, r0
 800daec:	f8c9 5000 	str.w	r5, [r9]
 800daf0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800daf4:	f8c8 0000 	str.w	r0, [r8]
 800daf8:	4620      	mov	r0, r4
 800dafa:	b003      	add	sp, #12
 800dafc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db04:	e7d5      	b.n	800dab2 <__d2b+0x2e>
 800db06:	6161      	str	r1, [r4, #20]
 800db08:	e7e5      	b.n	800dad6 <__d2b+0x52>
 800db0a:	a801      	add	r0, sp, #4
 800db0c:	f7ff fd5a 	bl	800d5c4 <__lo0bits>
 800db10:	9b01      	ldr	r3, [sp, #4]
 800db12:	6163      	str	r3, [r4, #20]
 800db14:	2201      	movs	r2, #1
 800db16:	6122      	str	r2, [r4, #16]
 800db18:	3020      	adds	r0, #32
 800db1a:	e7e3      	b.n	800dae4 <__d2b+0x60>
 800db1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800db20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800db24:	f8c9 0000 	str.w	r0, [r9]
 800db28:	6918      	ldr	r0, [r3, #16]
 800db2a:	f7ff fd2b 	bl	800d584 <__hi0bits>
 800db2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800db32:	e7df      	b.n	800daf4 <__d2b+0x70>
 800db34:	0800edf4 	.word	0x0800edf4
 800db38:	0800ee05 	.word	0x0800ee05

0800db3c <_calloc_r>:
 800db3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db3e:	fba1 2402 	umull	r2, r4, r1, r2
 800db42:	b94c      	cbnz	r4, 800db58 <_calloc_r+0x1c>
 800db44:	4611      	mov	r1, r2
 800db46:	9201      	str	r2, [sp, #4]
 800db48:	f000 f87a 	bl	800dc40 <_malloc_r>
 800db4c:	9a01      	ldr	r2, [sp, #4]
 800db4e:	4605      	mov	r5, r0
 800db50:	b930      	cbnz	r0, 800db60 <_calloc_r+0x24>
 800db52:	4628      	mov	r0, r5
 800db54:	b003      	add	sp, #12
 800db56:	bd30      	pop	{r4, r5, pc}
 800db58:	220c      	movs	r2, #12
 800db5a:	6002      	str	r2, [r0, #0]
 800db5c:	2500      	movs	r5, #0
 800db5e:	e7f8      	b.n	800db52 <_calloc_r+0x16>
 800db60:	4621      	mov	r1, r4
 800db62:	f7fe f8c1 	bl	800bce8 <memset>
 800db66:	e7f4      	b.n	800db52 <_calloc_r+0x16>

0800db68 <_free_r>:
 800db68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db6a:	2900      	cmp	r1, #0
 800db6c:	d044      	beq.n	800dbf8 <_free_r+0x90>
 800db6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db72:	9001      	str	r0, [sp, #4]
 800db74:	2b00      	cmp	r3, #0
 800db76:	f1a1 0404 	sub.w	r4, r1, #4
 800db7a:	bfb8      	it	lt
 800db7c:	18e4      	addlt	r4, r4, r3
 800db7e:	f000 fa9b 	bl	800e0b8 <__malloc_lock>
 800db82:	4a1e      	ldr	r2, [pc, #120]	; (800dbfc <_free_r+0x94>)
 800db84:	9801      	ldr	r0, [sp, #4]
 800db86:	6813      	ldr	r3, [r2, #0]
 800db88:	b933      	cbnz	r3, 800db98 <_free_r+0x30>
 800db8a:	6063      	str	r3, [r4, #4]
 800db8c:	6014      	str	r4, [r2, #0]
 800db8e:	b003      	add	sp, #12
 800db90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db94:	f000 ba96 	b.w	800e0c4 <__malloc_unlock>
 800db98:	42a3      	cmp	r3, r4
 800db9a:	d908      	bls.n	800dbae <_free_r+0x46>
 800db9c:	6825      	ldr	r5, [r4, #0]
 800db9e:	1961      	adds	r1, r4, r5
 800dba0:	428b      	cmp	r3, r1
 800dba2:	bf01      	itttt	eq
 800dba4:	6819      	ldreq	r1, [r3, #0]
 800dba6:	685b      	ldreq	r3, [r3, #4]
 800dba8:	1949      	addeq	r1, r1, r5
 800dbaa:	6021      	streq	r1, [r4, #0]
 800dbac:	e7ed      	b.n	800db8a <_free_r+0x22>
 800dbae:	461a      	mov	r2, r3
 800dbb0:	685b      	ldr	r3, [r3, #4]
 800dbb2:	b10b      	cbz	r3, 800dbb8 <_free_r+0x50>
 800dbb4:	42a3      	cmp	r3, r4
 800dbb6:	d9fa      	bls.n	800dbae <_free_r+0x46>
 800dbb8:	6811      	ldr	r1, [r2, #0]
 800dbba:	1855      	adds	r5, r2, r1
 800dbbc:	42a5      	cmp	r5, r4
 800dbbe:	d10b      	bne.n	800dbd8 <_free_r+0x70>
 800dbc0:	6824      	ldr	r4, [r4, #0]
 800dbc2:	4421      	add	r1, r4
 800dbc4:	1854      	adds	r4, r2, r1
 800dbc6:	42a3      	cmp	r3, r4
 800dbc8:	6011      	str	r1, [r2, #0]
 800dbca:	d1e0      	bne.n	800db8e <_free_r+0x26>
 800dbcc:	681c      	ldr	r4, [r3, #0]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	6053      	str	r3, [r2, #4]
 800dbd2:	4421      	add	r1, r4
 800dbd4:	6011      	str	r1, [r2, #0]
 800dbd6:	e7da      	b.n	800db8e <_free_r+0x26>
 800dbd8:	d902      	bls.n	800dbe0 <_free_r+0x78>
 800dbda:	230c      	movs	r3, #12
 800dbdc:	6003      	str	r3, [r0, #0]
 800dbde:	e7d6      	b.n	800db8e <_free_r+0x26>
 800dbe0:	6825      	ldr	r5, [r4, #0]
 800dbe2:	1961      	adds	r1, r4, r5
 800dbe4:	428b      	cmp	r3, r1
 800dbe6:	bf04      	itt	eq
 800dbe8:	6819      	ldreq	r1, [r3, #0]
 800dbea:	685b      	ldreq	r3, [r3, #4]
 800dbec:	6063      	str	r3, [r4, #4]
 800dbee:	bf04      	itt	eq
 800dbf0:	1949      	addeq	r1, r1, r5
 800dbf2:	6021      	streq	r1, [r4, #0]
 800dbf4:	6054      	str	r4, [r2, #4]
 800dbf6:	e7ca      	b.n	800db8e <_free_r+0x26>
 800dbf8:	b003      	add	sp, #12
 800dbfa:	bd30      	pop	{r4, r5, pc}
 800dbfc:	20002324 	.word	0x20002324

0800dc00 <sbrk_aligned>:
 800dc00:	b570      	push	{r4, r5, r6, lr}
 800dc02:	4e0e      	ldr	r6, [pc, #56]	; (800dc3c <sbrk_aligned+0x3c>)
 800dc04:	460c      	mov	r4, r1
 800dc06:	6831      	ldr	r1, [r6, #0]
 800dc08:	4605      	mov	r5, r0
 800dc0a:	b911      	cbnz	r1, 800dc12 <sbrk_aligned+0x12>
 800dc0c:	f000 f9e8 	bl	800dfe0 <_sbrk_r>
 800dc10:	6030      	str	r0, [r6, #0]
 800dc12:	4621      	mov	r1, r4
 800dc14:	4628      	mov	r0, r5
 800dc16:	f000 f9e3 	bl	800dfe0 <_sbrk_r>
 800dc1a:	1c43      	adds	r3, r0, #1
 800dc1c:	d00a      	beq.n	800dc34 <sbrk_aligned+0x34>
 800dc1e:	1cc4      	adds	r4, r0, #3
 800dc20:	f024 0403 	bic.w	r4, r4, #3
 800dc24:	42a0      	cmp	r0, r4
 800dc26:	d007      	beq.n	800dc38 <sbrk_aligned+0x38>
 800dc28:	1a21      	subs	r1, r4, r0
 800dc2a:	4628      	mov	r0, r5
 800dc2c:	f000 f9d8 	bl	800dfe0 <_sbrk_r>
 800dc30:	3001      	adds	r0, #1
 800dc32:	d101      	bne.n	800dc38 <sbrk_aligned+0x38>
 800dc34:	f04f 34ff 	mov.w	r4, #4294967295
 800dc38:	4620      	mov	r0, r4
 800dc3a:	bd70      	pop	{r4, r5, r6, pc}
 800dc3c:	20002328 	.word	0x20002328

0800dc40 <_malloc_r>:
 800dc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc44:	1ccd      	adds	r5, r1, #3
 800dc46:	f025 0503 	bic.w	r5, r5, #3
 800dc4a:	3508      	adds	r5, #8
 800dc4c:	2d0c      	cmp	r5, #12
 800dc4e:	bf38      	it	cc
 800dc50:	250c      	movcc	r5, #12
 800dc52:	2d00      	cmp	r5, #0
 800dc54:	4607      	mov	r7, r0
 800dc56:	db01      	blt.n	800dc5c <_malloc_r+0x1c>
 800dc58:	42a9      	cmp	r1, r5
 800dc5a:	d905      	bls.n	800dc68 <_malloc_r+0x28>
 800dc5c:	230c      	movs	r3, #12
 800dc5e:	603b      	str	r3, [r7, #0]
 800dc60:	2600      	movs	r6, #0
 800dc62:	4630      	mov	r0, r6
 800dc64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc68:	4e2e      	ldr	r6, [pc, #184]	; (800dd24 <_malloc_r+0xe4>)
 800dc6a:	f000 fa25 	bl	800e0b8 <__malloc_lock>
 800dc6e:	6833      	ldr	r3, [r6, #0]
 800dc70:	461c      	mov	r4, r3
 800dc72:	bb34      	cbnz	r4, 800dcc2 <_malloc_r+0x82>
 800dc74:	4629      	mov	r1, r5
 800dc76:	4638      	mov	r0, r7
 800dc78:	f7ff ffc2 	bl	800dc00 <sbrk_aligned>
 800dc7c:	1c43      	adds	r3, r0, #1
 800dc7e:	4604      	mov	r4, r0
 800dc80:	d14d      	bne.n	800dd1e <_malloc_r+0xde>
 800dc82:	6834      	ldr	r4, [r6, #0]
 800dc84:	4626      	mov	r6, r4
 800dc86:	2e00      	cmp	r6, #0
 800dc88:	d140      	bne.n	800dd0c <_malloc_r+0xcc>
 800dc8a:	6823      	ldr	r3, [r4, #0]
 800dc8c:	4631      	mov	r1, r6
 800dc8e:	4638      	mov	r0, r7
 800dc90:	eb04 0803 	add.w	r8, r4, r3
 800dc94:	f000 f9a4 	bl	800dfe0 <_sbrk_r>
 800dc98:	4580      	cmp	r8, r0
 800dc9a:	d13a      	bne.n	800dd12 <_malloc_r+0xd2>
 800dc9c:	6821      	ldr	r1, [r4, #0]
 800dc9e:	3503      	adds	r5, #3
 800dca0:	1a6d      	subs	r5, r5, r1
 800dca2:	f025 0503 	bic.w	r5, r5, #3
 800dca6:	3508      	adds	r5, #8
 800dca8:	2d0c      	cmp	r5, #12
 800dcaa:	bf38      	it	cc
 800dcac:	250c      	movcc	r5, #12
 800dcae:	4629      	mov	r1, r5
 800dcb0:	4638      	mov	r0, r7
 800dcb2:	f7ff ffa5 	bl	800dc00 <sbrk_aligned>
 800dcb6:	3001      	adds	r0, #1
 800dcb8:	d02b      	beq.n	800dd12 <_malloc_r+0xd2>
 800dcba:	6823      	ldr	r3, [r4, #0]
 800dcbc:	442b      	add	r3, r5
 800dcbe:	6023      	str	r3, [r4, #0]
 800dcc0:	e00e      	b.n	800dce0 <_malloc_r+0xa0>
 800dcc2:	6822      	ldr	r2, [r4, #0]
 800dcc4:	1b52      	subs	r2, r2, r5
 800dcc6:	d41e      	bmi.n	800dd06 <_malloc_r+0xc6>
 800dcc8:	2a0b      	cmp	r2, #11
 800dcca:	d916      	bls.n	800dcfa <_malloc_r+0xba>
 800dccc:	1961      	adds	r1, r4, r5
 800dcce:	42a3      	cmp	r3, r4
 800dcd0:	6025      	str	r5, [r4, #0]
 800dcd2:	bf18      	it	ne
 800dcd4:	6059      	strne	r1, [r3, #4]
 800dcd6:	6863      	ldr	r3, [r4, #4]
 800dcd8:	bf08      	it	eq
 800dcda:	6031      	streq	r1, [r6, #0]
 800dcdc:	5162      	str	r2, [r4, r5]
 800dcde:	604b      	str	r3, [r1, #4]
 800dce0:	4638      	mov	r0, r7
 800dce2:	f104 060b 	add.w	r6, r4, #11
 800dce6:	f000 f9ed 	bl	800e0c4 <__malloc_unlock>
 800dcea:	f026 0607 	bic.w	r6, r6, #7
 800dcee:	1d23      	adds	r3, r4, #4
 800dcf0:	1af2      	subs	r2, r6, r3
 800dcf2:	d0b6      	beq.n	800dc62 <_malloc_r+0x22>
 800dcf4:	1b9b      	subs	r3, r3, r6
 800dcf6:	50a3      	str	r3, [r4, r2]
 800dcf8:	e7b3      	b.n	800dc62 <_malloc_r+0x22>
 800dcfa:	6862      	ldr	r2, [r4, #4]
 800dcfc:	42a3      	cmp	r3, r4
 800dcfe:	bf0c      	ite	eq
 800dd00:	6032      	streq	r2, [r6, #0]
 800dd02:	605a      	strne	r2, [r3, #4]
 800dd04:	e7ec      	b.n	800dce0 <_malloc_r+0xa0>
 800dd06:	4623      	mov	r3, r4
 800dd08:	6864      	ldr	r4, [r4, #4]
 800dd0a:	e7b2      	b.n	800dc72 <_malloc_r+0x32>
 800dd0c:	4634      	mov	r4, r6
 800dd0e:	6876      	ldr	r6, [r6, #4]
 800dd10:	e7b9      	b.n	800dc86 <_malloc_r+0x46>
 800dd12:	230c      	movs	r3, #12
 800dd14:	603b      	str	r3, [r7, #0]
 800dd16:	4638      	mov	r0, r7
 800dd18:	f000 f9d4 	bl	800e0c4 <__malloc_unlock>
 800dd1c:	e7a1      	b.n	800dc62 <_malloc_r+0x22>
 800dd1e:	6025      	str	r5, [r4, #0]
 800dd20:	e7de      	b.n	800dce0 <_malloc_r+0xa0>
 800dd22:	bf00      	nop
 800dd24:	20002324 	.word	0x20002324

0800dd28 <__ssputs_r>:
 800dd28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd2c:	688e      	ldr	r6, [r1, #8]
 800dd2e:	429e      	cmp	r6, r3
 800dd30:	4682      	mov	sl, r0
 800dd32:	460c      	mov	r4, r1
 800dd34:	4690      	mov	r8, r2
 800dd36:	461f      	mov	r7, r3
 800dd38:	d838      	bhi.n	800ddac <__ssputs_r+0x84>
 800dd3a:	898a      	ldrh	r2, [r1, #12]
 800dd3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dd40:	d032      	beq.n	800dda8 <__ssputs_r+0x80>
 800dd42:	6825      	ldr	r5, [r4, #0]
 800dd44:	6909      	ldr	r1, [r1, #16]
 800dd46:	eba5 0901 	sub.w	r9, r5, r1
 800dd4a:	6965      	ldr	r5, [r4, #20]
 800dd4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd54:	3301      	adds	r3, #1
 800dd56:	444b      	add	r3, r9
 800dd58:	106d      	asrs	r5, r5, #1
 800dd5a:	429d      	cmp	r5, r3
 800dd5c:	bf38      	it	cc
 800dd5e:	461d      	movcc	r5, r3
 800dd60:	0553      	lsls	r3, r2, #21
 800dd62:	d531      	bpl.n	800ddc8 <__ssputs_r+0xa0>
 800dd64:	4629      	mov	r1, r5
 800dd66:	f7ff ff6b 	bl	800dc40 <_malloc_r>
 800dd6a:	4606      	mov	r6, r0
 800dd6c:	b950      	cbnz	r0, 800dd84 <__ssputs_r+0x5c>
 800dd6e:	230c      	movs	r3, #12
 800dd70:	f8ca 3000 	str.w	r3, [sl]
 800dd74:	89a3      	ldrh	r3, [r4, #12]
 800dd76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd7a:	81a3      	strh	r3, [r4, #12]
 800dd7c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd84:	6921      	ldr	r1, [r4, #16]
 800dd86:	464a      	mov	r2, r9
 800dd88:	f7fd ffa0 	bl	800bccc <memcpy>
 800dd8c:	89a3      	ldrh	r3, [r4, #12]
 800dd8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dd92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd96:	81a3      	strh	r3, [r4, #12]
 800dd98:	6126      	str	r6, [r4, #16]
 800dd9a:	6165      	str	r5, [r4, #20]
 800dd9c:	444e      	add	r6, r9
 800dd9e:	eba5 0509 	sub.w	r5, r5, r9
 800dda2:	6026      	str	r6, [r4, #0]
 800dda4:	60a5      	str	r5, [r4, #8]
 800dda6:	463e      	mov	r6, r7
 800dda8:	42be      	cmp	r6, r7
 800ddaa:	d900      	bls.n	800ddae <__ssputs_r+0x86>
 800ddac:	463e      	mov	r6, r7
 800ddae:	6820      	ldr	r0, [r4, #0]
 800ddb0:	4632      	mov	r2, r6
 800ddb2:	4641      	mov	r1, r8
 800ddb4:	f000 f966 	bl	800e084 <memmove>
 800ddb8:	68a3      	ldr	r3, [r4, #8]
 800ddba:	1b9b      	subs	r3, r3, r6
 800ddbc:	60a3      	str	r3, [r4, #8]
 800ddbe:	6823      	ldr	r3, [r4, #0]
 800ddc0:	4433      	add	r3, r6
 800ddc2:	6023      	str	r3, [r4, #0]
 800ddc4:	2000      	movs	r0, #0
 800ddc6:	e7db      	b.n	800dd80 <__ssputs_r+0x58>
 800ddc8:	462a      	mov	r2, r5
 800ddca:	f000 f981 	bl	800e0d0 <_realloc_r>
 800ddce:	4606      	mov	r6, r0
 800ddd0:	2800      	cmp	r0, #0
 800ddd2:	d1e1      	bne.n	800dd98 <__ssputs_r+0x70>
 800ddd4:	6921      	ldr	r1, [r4, #16]
 800ddd6:	4650      	mov	r0, sl
 800ddd8:	f7ff fec6 	bl	800db68 <_free_r>
 800dddc:	e7c7      	b.n	800dd6e <__ssputs_r+0x46>
	...

0800dde0 <_svfiprintf_r>:
 800dde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde4:	4698      	mov	r8, r3
 800dde6:	898b      	ldrh	r3, [r1, #12]
 800dde8:	061b      	lsls	r3, r3, #24
 800ddea:	b09d      	sub	sp, #116	; 0x74
 800ddec:	4607      	mov	r7, r0
 800ddee:	460d      	mov	r5, r1
 800ddf0:	4614      	mov	r4, r2
 800ddf2:	d50e      	bpl.n	800de12 <_svfiprintf_r+0x32>
 800ddf4:	690b      	ldr	r3, [r1, #16]
 800ddf6:	b963      	cbnz	r3, 800de12 <_svfiprintf_r+0x32>
 800ddf8:	2140      	movs	r1, #64	; 0x40
 800ddfa:	f7ff ff21 	bl	800dc40 <_malloc_r>
 800ddfe:	6028      	str	r0, [r5, #0]
 800de00:	6128      	str	r0, [r5, #16]
 800de02:	b920      	cbnz	r0, 800de0e <_svfiprintf_r+0x2e>
 800de04:	230c      	movs	r3, #12
 800de06:	603b      	str	r3, [r7, #0]
 800de08:	f04f 30ff 	mov.w	r0, #4294967295
 800de0c:	e0d1      	b.n	800dfb2 <_svfiprintf_r+0x1d2>
 800de0e:	2340      	movs	r3, #64	; 0x40
 800de10:	616b      	str	r3, [r5, #20]
 800de12:	2300      	movs	r3, #0
 800de14:	9309      	str	r3, [sp, #36]	; 0x24
 800de16:	2320      	movs	r3, #32
 800de18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800de20:	2330      	movs	r3, #48	; 0x30
 800de22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dfcc <_svfiprintf_r+0x1ec>
 800de26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de2a:	f04f 0901 	mov.w	r9, #1
 800de2e:	4623      	mov	r3, r4
 800de30:	469a      	mov	sl, r3
 800de32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de36:	b10a      	cbz	r2, 800de3c <_svfiprintf_r+0x5c>
 800de38:	2a25      	cmp	r2, #37	; 0x25
 800de3a:	d1f9      	bne.n	800de30 <_svfiprintf_r+0x50>
 800de3c:	ebba 0b04 	subs.w	fp, sl, r4
 800de40:	d00b      	beq.n	800de5a <_svfiprintf_r+0x7a>
 800de42:	465b      	mov	r3, fp
 800de44:	4622      	mov	r2, r4
 800de46:	4629      	mov	r1, r5
 800de48:	4638      	mov	r0, r7
 800de4a:	f7ff ff6d 	bl	800dd28 <__ssputs_r>
 800de4e:	3001      	adds	r0, #1
 800de50:	f000 80aa 	beq.w	800dfa8 <_svfiprintf_r+0x1c8>
 800de54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de56:	445a      	add	r2, fp
 800de58:	9209      	str	r2, [sp, #36]	; 0x24
 800de5a:	f89a 3000 	ldrb.w	r3, [sl]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	f000 80a2 	beq.w	800dfa8 <_svfiprintf_r+0x1c8>
 800de64:	2300      	movs	r3, #0
 800de66:	f04f 32ff 	mov.w	r2, #4294967295
 800de6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de6e:	f10a 0a01 	add.w	sl, sl, #1
 800de72:	9304      	str	r3, [sp, #16]
 800de74:	9307      	str	r3, [sp, #28]
 800de76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de7a:	931a      	str	r3, [sp, #104]	; 0x68
 800de7c:	4654      	mov	r4, sl
 800de7e:	2205      	movs	r2, #5
 800de80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de84:	4851      	ldr	r0, [pc, #324]	; (800dfcc <_svfiprintf_r+0x1ec>)
 800de86:	f7f2 f9b3 	bl	80001f0 <memchr>
 800de8a:	9a04      	ldr	r2, [sp, #16]
 800de8c:	b9d8      	cbnz	r0, 800dec6 <_svfiprintf_r+0xe6>
 800de8e:	06d0      	lsls	r0, r2, #27
 800de90:	bf44      	itt	mi
 800de92:	2320      	movmi	r3, #32
 800de94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de98:	0711      	lsls	r1, r2, #28
 800de9a:	bf44      	itt	mi
 800de9c:	232b      	movmi	r3, #43	; 0x2b
 800de9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dea2:	f89a 3000 	ldrb.w	r3, [sl]
 800dea6:	2b2a      	cmp	r3, #42	; 0x2a
 800dea8:	d015      	beq.n	800ded6 <_svfiprintf_r+0xf6>
 800deaa:	9a07      	ldr	r2, [sp, #28]
 800deac:	4654      	mov	r4, sl
 800deae:	2000      	movs	r0, #0
 800deb0:	f04f 0c0a 	mov.w	ip, #10
 800deb4:	4621      	mov	r1, r4
 800deb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800deba:	3b30      	subs	r3, #48	; 0x30
 800debc:	2b09      	cmp	r3, #9
 800debe:	d94e      	bls.n	800df5e <_svfiprintf_r+0x17e>
 800dec0:	b1b0      	cbz	r0, 800def0 <_svfiprintf_r+0x110>
 800dec2:	9207      	str	r2, [sp, #28]
 800dec4:	e014      	b.n	800def0 <_svfiprintf_r+0x110>
 800dec6:	eba0 0308 	sub.w	r3, r0, r8
 800deca:	fa09 f303 	lsl.w	r3, r9, r3
 800dece:	4313      	orrs	r3, r2
 800ded0:	9304      	str	r3, [sp, #16]
 800ded2:	46a2      	mov	sl, r4
 800ded4:	e7d2      	b.n	800de7c <_svfiprintf_r+0x9c>
 800ded6:	9b03      	ldr	r3, [sp, #12]
 800ded8:	1d19      	adds	r1, r3, #4
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	9103      	str	r1, [sp, #12]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	bfbb      	ittet	lt
 800dee2:	425b      	neglt	r3, r3
 800dee4:	f042 0202 	orrlt.w	r2, r2, #2
 800dee8:	9307      	strge	r3, [sp, #28]
 800deea:	9307      	strlt	r3, [sp, #28]
 800deec:	bfb8      	it	lt
 800deee:	9204      	strlt	r2, [sp, #16]
 800def0:	7823      	ldrb	r3, [r4, #0]
 800def2:	2b2e      	cmp	r3, #46	; 0x2e
 800def4:	d10c      	bne.n	800df10 <_svfiprintf_r+0x130>
 800def6:	7863      	ldrb	r3, [r4, #1]
 800def8:	2b2a      	cmp	r3, #42	; 0x2a
 800defa:	d135      	bne.n	800df68 <_svfiprintf_r+0x188>
 800defc:	9b03      	ldr	r3, [sp, #12]
 800defe:	1d1a      	adds	r2, r3, #4
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	9203      	str	r2, [sp, #12]
 800df04:	2b00      	cmp	r3, #0
 800df06:	bfb8      	it	lt
 800df08:	f04f 33ff 	movlt.w	r3, #4294967295
 800df0c:	3402      	adds	r4, #2
 800df0e:	9305      	str	r3, [sp, #20]
 800df10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dfdc <_svfiprintf_r+0x1fc>
 800df14:	7821      	ldrb	r1, [r4, #0]
 800df16:	2203      	movs	r2, #3
 800df18:	4650      	mov	r0, sl
 800df1a:	f7f2 f969 	bl	80001f0 <memchr>
 800df1e:	b140      	cbz	r0, 800df32 <_svfiprintf_r+0x152>
 800df20:	2340      	movs	r3, #64	; 0x40
 800df22:	eba0 000a 	sub.w	r0, r0, sl
 800df26:	fa03 f000 	lsl.w	r0, r3, r0
 800df2a:	9b04      	ldr	r3, [sp, #16]
 800df2c:	4303      	orrs	r3, r0
 800df2e:	3401      	adds	r4, #1
 800df30:	9304      	str	r3, [sp, #16]
 800df32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df36:	4826      	ldr	r0, [pc, #152]	; (800dfd0 <_svfiprintf_r+0x1f0>)
 800df38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df3c:	2206      	movs	r2, #6
 800df3e:	f7f2 f957 	bl	80001f0 <memchr>
 800df42:	2800      	cmp	r0, #0
 800df44:	d038      	beq.n	800dfb8 <_svfiprintf_r+0x1d8>
 800df46:	4b23      	ldr	r3, [pc, #140]	; (800dfd4 <_svfiprintf_r+0x1f4>)
 800df48:	bb1b      	cbnz	r3, 800df92 <_svfiprintf_r+0x1b2>
 800df4a:	9b03      	ldr	r3, [sp, #12]
 800df4c:	3307      	adds	r3, #7
 800df4e:	f023 0307 	bic.w	r3, r3, #7
 800df52:	3308      	adds	r3, #8
 800df54:	9303      	str	r3, [sp, #12]
 800df56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df58:	4433      	add	r3, r6
 800df5a:	9309      	str	r3, [sp, #36]	; 0x24
 800df5c:	e767      	b.n	800de2e <_svfiprintf_r+0x4e>
 800df5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800df62:	460c      	mov	r4, r1
 800df64:	2001      	movs	r0, #1
 800df66:	e7a5      	b.n	800deb4 <_svfiprintf_r+0xd4>
 800df68:	2300      	movs	r3, #0
 800df6a:	3401      	adds	r4, #1
 800df6c:	9305      	str	r3, [sp, #20]
 800df6e:	4619      	mov	r1, r3
 800df70:	f04f 0c0a 	mov.w	ip, #10
 800df74:	4620      	mov	r0, r4
 800df76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df7a:	3a30      	subs	r2, #48	; 0x30
 800df7c:	2a09      	cmp	r2, #9
 800df7e:	d903      	bls.n	800df88 <_svfiprintf_r+0x1a8>
 800df80:	2b00      	cmp	r3, #0
 800df82:	d0c5      	beq.n	800df10 <_svfiprintf_r+0x130>
 800df84:	9105      	str	r1, [sp, #20]
 800df86:	e7c3      	b.n	800df10 <_svfiprintf_r+0x130>
 800df88:	fb0c 2101 	mla	r1, ip, r1, r2
 800df8c:	4604      	mov	r4, r0
 800df8e:	2301      	movs	r3, #1
 800df90:	e7f0      	b.n	800df74 <_svfiprintf_r+0x194>
 800df92:	ab03      	add	r3, sp, #12
 800df94:	9300      	str	r3, [sp, #0]
 800df96:	462a      	mov	r2, r5
 800df98:	4b0f      	ldr	r3, [pc, #60]	; (800dfd8 <_svfiprintf_r+0x1f8>)
 800df9a:	a904      	add	r1, sp, #16
 800df9c:	4638      	mov	r0, r7
 800df9e:	f7fd ff4b 	bl	800be38 <_printf_float>
 800dfa2:	1c42      	adds	r2, r0, #1
 800dfa4:	4606      	mov	r6, r0
 800dfa6:	d1d6      	bne.n	800df56 <_svfiprintf_r+0x176>
 800dfa8:	89ab      	ldrh	r3, [r5, #12]
 800dfaa:	065b      	lsls	r3, r3, #25
 800dfac:	f53f af2c 	bmi.w	800de08 <_svfiprintf_r+0x28>
 800dfb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfb2:	b01d      	add	sp, #116	; 0x74
 800dfb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfb8:	ab03      	add	r3, sp, #12
 800dfba:	9300      	str	r3, [sp, #0]
 800dfbc:	462a      	mov	r2, r5
 800dfbe:	4b06      	ldr	r3, [pc, #24]	; (800dfd8 <_svfiprintf_r+0x1f8>)
 800dfc0:	a904      	add	r1, sp, #16
 800dfc2:	4638      	mov	r0, r7
 800dfc4:	f7fe f9dc 	bl	800c380 <_printf_i>
 800dfc8:	e7eb      	b.n	800dfa2 <_svfiprintf_r+0x1c2>
 800dfca:	bf00      	nop
 800dfcc:	0800ef64 	.word	0x0800ef64
 800dfd0:	0800ef6e 	.word	0x0800ef6e
 800dfd4:	0800be39 	.word	0x0800be39
 800dfd8:	0800dd29 	.word	0x0800dd29
 800dfdc:	0800ef6a 	.word	0x0800ef6a

0800dfe0 <_sbrk_r>:
 800dfe0:	b538      	push	{r3, r4, r5, lr}
 800dfe2:	4d06      	ldr	r5, [pc, #24]	; (800dffc <_sbrk_r+0x1c>)
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	4604      	mov	r4, r0
 800dfe8:	4608      	mov	r0, r1
 800dfea:	602b      	str	r3, [r5, #0]
 800dfec:	f7f3 ffd0 	bl	8001f90 <_sbrk>
 800dff0:	1c43      	adds	r3, r0, #1
 800dff2:	d102      	bne.n	800dffa <_sbrk_r+0x1a>
 800dff4:	682b      	ldr	r3, [r5, #0]
 800dff6:	b103      	cbz	r3, 800dffa <_sbrk_r+0x1a>
 800dff8:	6023      	str	r3, [r4, #0]
 800dffa:	bd38      	pop	{r3, r4, r5, pc}
 800dffc:	2000232c 	.word	0x2000232c

0800e000 <__assert_func>:
 800e000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e002:	4614      	mov	r4, r2
 800e004:	461a      	mov	r2, r3
 800e006:	4b09      	ldr	r3, [pc, #36]	; (800e02c <__assert_func+0x2c>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	4605      	mov	r5, r0
 800e00c:	68d8      	ldr	r0, [r3, #12]
 800e00e:	b14c      	cbz	r4, 800e024 <__assert_func+0x24>
 800e010:	4b07      	ldr	r3, [pc, #28]	; (800e030 <__assert_func+0x30>)
 800e012:	9100      	str	r1, [sp, #0]
 800e014:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e018:	4906      	ldr	r1, [pc, #24]	; (800e034 <__assert_func+0x34>)
 800e01a:	462b      	mov	r3, r5
 800e01c:	f000 f80e 	bl	800e03c <fiprintf>
 800e020:	f000 faac 	bl	800e57c <abort>
 800e024:	4b04      	ldr	r3, [pc, #16]	; (800e038 <__assert_func+0x38>)
 800e026:	461c      	mov	r4, r3
 800e028:	e7f3      	b.n	800e012 <__assert_func+0x12>
 800e02a:	bf00      	nop
 800e02c:	200000fc 	.word	0x200000fc
 800e030:	0800ef75 	.word	0x0800ef75
 800e034:	0800ef82 	.word	0x0800ef82
 800e038:	0800efb0 	.word	0x0800efb0

0800e03c <fiprintf>:
 800e03c:	b40e      	push	{r1, r2, r3}
 800e03e:	b503      	push	{r0, r1, lr}
 800e040:	4601      	mov	r1, r0
 800e042:	ab03      	add	r3, sp, #12
 800e044:	4805      	ldr	r0, [pc, #20]	; (800e05c <fiprintf+0x20>)
 800e046:	f853 2b04 	ldr.w	r2, [r3], #4
 800e04a:	6800      	ldr	r0, [r0, #0]
 800e04c:	9301      	str	r3, [sp, #4]
 800e04e:	f000 f897 	bl	800e180 <_vfiprintf_r>
 800e052:	b002      	add	sp, #8
 800e054:	f85d eb04 	ldr.w	lr, [sp], #4
 800e058:	b003      	add	sp, #12
 800e05a:	4770      	bx	lr
 800e05c:	200000fc 	.word	0x200000fc

0800e060 <__ascii_mbtowc>:
 800e060:	b082      	sub	sp, #8
 800e062:	b901      	cbnz	r1, 800e066 <__ascii_mbtowc+0x6>
 800e064:	a901      	add	r1, sp, #4
 800e066:	b142      	cbz	r2, 800e07a <__ascii_mbtowc+0x1a>
 800e068:	b14b      	cbz	r3, 800e07e <__ascii_mbtowc+0x1e>
 800e06a:	7813      	ldrb	r3, [r2, #0]
 800e06c:	600b      	str	r3, [r1, #0]
 800e06e:	7812      	ldrb	r2, [r2, #0]
 800e070:	1e10      	subs	r0, r2, #0
 800e072:	bf18      	it	ne
 800e074:	2001      	movne	r0, #1
 800e076:	b002      	add	sp, #8
 800e078:	4770      	bx	lr
 800e07a:	4610      	mov	r0, r2
 800e07c:	e7fb      	b.n	800e076 <__ascii_mbtowc+0x16>
 800e07e:	f06f 0001 	mvn.w	r0, #1
 800e082:	e7f8      	b.n	800e076 <__ascii_mbtowc+0x16>

0800e084 <memmove>:
 800e084:	4288      	cmp	r0, r1
 800e086:	b510      	push	{r4, lr}
 800e088:	eb01 0402 	add.w	r4, r1, r2
 800e08c:	d902      	bls.n	800e094 <memmove+0x10>
 800e08e:	4284      	cmp	r4, r0
 800e090:	4623      	mov	r3, r4
 800e092:	d807      	bhi.n	800e0a4 <memmove+0x20>
 800e094:	1e43      	subs	r3, r0, #1
 800e096:	42a1      	cmp	r1, r4
 800e098:	d008      	beq.n	800e0ac <memmove+0x28>
 800e09a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e09e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e0a2:	e7f8      	b.n	800e096 <memmove+0x12>
 800e0a4:	4402      	add	r2, r0
 800e0a6:	4601      	mov	r1, r0
 800e0a8:	428a      	cmp	r2, r1
 800e0aa:	d100      	bne.n	800e0ae <memmove+0x2a>
 800e0ac:	bd10      	pop	{r4, pc}
 800e0ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e0b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e0b6:	e7f7      	b.n	800e0a8 <memmove+0x24>

0800e0b8 <__malloc_lock>:
 800e0b8:	4801      	ldr	r0, [pc, #4]	; (800e0c0 <__malloc_lock+0x8>)
 800e0ba:	f000 bc1f 	b.w	800e8fc <__retarget_lock_acquire_recursive>
 800e0be:	bf00      	nop
 800e0c0:	20002330 	.word	0x20002330

0800e0c4 <__malloc_unlock>:
 800e0c4:	4801      	ldr	r0, [pc, #4]	; (800e0cc <__malloc_unlock+0x8>)
 800e0c6:	f000 bc1a 	b.w	800e8fe <__retarget_lock_release_recursive>
 800e0ca:	bf00      	nop
 800e0cc:	20002330 	.word	0x20002330

0800e0d0 <_realloc_r>:
 800e0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0d4:	4680      	mov	r8, r0
 800e0d6:	4614      	mov	r4, r2
 800e0d8:	460e      	mov	r6, r1
 800e0da:	b921      	cbnz	r1, 800e0e6 <_realloc_r+0x16>
 800e0dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0e0:	4611      	mov	r1, r2
 800e0e2:	f7ff bdad 	b.w	800dc40 <_malloc_r>
 800e0e6:	b92a      	cbnz	r2, 800e0f4 <_realloc_r+0x24>
 800e0e8:	f7ff fd3e 	bl	800db68 <_free_r>
 800e0ec:	4625      	mov	r5, r4
 800e0ee:	4628      	mov	r0, r5
 800e0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0f4:	f000 fc6a 	bl	800e9cc <_malloc_usable_size_r>
 800e0f8:	4284      	cmp	r4, r0
 800e0fa:	4607      	mov	r7, r0
 800e0fc:	d802      	bhi.n	800e104 <_realloc_r+0x34>
 800e0fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e102:	d812      	bhi.n	800e12a <_realloc_r+0x5a>
 800e104:	4621      	mov	r1, r4
 800e106:	4640      	mov	r0, r8
 800e108:	f7ff fd9a 	bl	800dc40 <_malloc_r>
 800e10c:	4605      	mov	r5, r0
 800e10e:	2800      	cmp	r0, #0
 800e110:	d0ed      	beq.n	800e0ee <_realloc_r+0x1e>
 800e112:	42bc      	cmp	r4, r7
 800e114:	4622      	mov	r2, r4
 800e116:	4631      	mov	r1, r6
 800e118:	bf28      	it	cs
 800e11a:	463a      	movcs	r2, r7
 800e11c:	f7fd fdd6 	bl	800bccc <memcpy>
 800e120:	4631      	mov	r1, r6
 800e122:	4640      	mov	r0, r8
 800e124:	f7ff fd20 	bl	800db68 <_free_r>
 800e128:	e7e1      	b.n	800e0ee <_realloc_r+0x1e>
 800e12a:	4635      	mov	r5, r6
 800e12c:	e7df      	b.n	800e0ee <_realloc_r+0x1e>

0800e12e <__sfputc_r>:
 800e12e:	6893      	ldr	r3, [r2, #8]
 800e130:	3b01      	subs	r3, #1
 800e132:	2b00      	cmp	r3, #0
 800e134:	b410      	push	{r4}
 800e136:	6093      	str	r3, [r2, #8]
 800e138:	da08      	bge.n	800e14c <__sfputc_r+0x1e>
 800e13a:	6994      	ldr	r4, [r2, #24]
 800e13c:	42a3      	cmp	r3, r4
 800e13e:	db01      	blt.n	800e144 <__sfputc_r+0x16>
 800e140:	290a      	cmp	r1, #10
 800e142:	d103      	bne.n	800e14c <__sfputc_r+0x1e>
 800e144:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e148:	f000 b94a 	b.w	800e3e0 <__swbuf_r>
 800e14c:	6813      	ldr	r3, [r2, #0]
 800e14e:	1c58      	adds	r0, r3, #1
 800e150:	6010      	str	r0, [r2, #0]
 800e152:	7019      	strb	r1, [r3, #0]
 800e154:	4608      	mov	r0, r1
 800e156:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e15a:	4770      	bx	lr

0800e15c <__sfputs_r>:
 800e15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e15e:	4606      	mov	r6, r0
 800e160:	460f      	mov	r7, r1
 800e162:	4614      	mov	r4, r2
 800e164:	18d5      	adds	r5, r2, r3
 800e166:	42ac      	cmp	r4, r5
 800e168:	d101      	bne.n	800e16e <__sfputs_r+0x12>
 800e16a:	2000      	movs	r0, #0
 800e16c:	e007      	b.n	800e17e <__sfputs_r+0x22>
 800e16e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e172:	463a      	mov	r2, r7
 800e174:	4630      	mov	r0, r6
 800e176:	f7ff ffda 	bl	800e12e <__sfputc_r>
 800e17a:	1c43      	adds	r3, r0, #1
 800e17c:	d1f3      	bne.n	800e166 <__sfputs_r+0xa>
 800e17e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e180 <_vfiprintf_r>:
 800e180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e184:	460d      	mov	r5, r1
 800e186:	b09d      	sub	sp, #116	; 0x74
 800e188:	4614      	mov	r4, r2
 800e18a:	4698      	mov	r8, r3
 800e18c:	4606      	mov	r6, r0
 800e18e:	b118      	cbz	r0, 800e198 <_vfiprintf_r+0x18>
 800e190:	6983      	ldr	r3, [r0, #24]
 800e192:	b90b      	cbnz	r3, 800e198 <_vfiprintf_r+0x18>
 800e194:	f000 fb14 	bl	800e7c0 <__sinit>
 800e198:	4b89      	ldr	r3, [pc, #548]	; (800e3c0 <_vfiprintf_r+0x240>)
 800e19a:	429d      	cmp	r5, r3
 800e19c:	d11b      	bne.n	800e1d6 <_vfiprintf_r+0x56>
 800e19e:	6875      	ldr	r5, [r6, #4]
 800e1a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e1a2:	07d9      	lsls	r1, r3, #31
 800e1a4:	d405      	bmi.n	800e1b2 <_vfiprintf_r+0x32>
 800e1a6:	89ab      	ldrh	r3, [r5, #12]
 800e1a8:	059a      	lsls	r2, r3, #22
 800e1aa:	d402      	bmi.n	800e1b2 <_vfiprintf_r+0x32>
 800e1ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e1ae:	f000 fba5 	bl	800e8fc <__retarget_lock_acquire_recursive>
 800e1b2:	89ab      	ldrh	r3, [r5, #12]
 800e1b4:	071b      	lsls	r3, r3, #28
 800e1b6:	d501      	bpl.n	800e1bc <_vfiprintf_r+0x3c>
 800e1b8:	692b      	ldr	r3, [r5, #16]
 800e1ba:	b9eb      	cbnz	r3, 800e1f8 <_vfiprintf_r+0x78>
 800e1bc:	4629      	mov	r1, r5
 800e1be:	4630      	mov	r0, r6
 800e1c0:	f000 f96e 	bl	800e4a0 <__swsetup_r>
 800e1c4:	b1c0      	cbz	r0, 800e1f8 <_vfiprintf_r+0x78>
 800e1c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e1c8:	07dc      	lsls	r4, r3, #31
 800e1ca:	d50e      	bpl.n	800e1ea <_vfiprintf_r+0x6a>
 800e1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e1d0:	b01d      	add	sp, #116	; 0x74
 800e1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1d6:	4b7b      	ldr	r3, [pc, #492]	; (800e3c4 <_vfiprintf_r+0x244>)
 800e1d8:	429d      	cmp	r5, r3
 800e1da:	d101      	bne.n	800e1e0 <_vfiprintf_r+0x60>
 800e1dc:	68b5      	ldr	r5, [r6, #8]
 800e1de:	e7df      	b.n	800e1a0 <_vfiprintf_r+0x20>
 800e1e0:	4b79      	ldr	r3, [pc, #484]	; (800e3c8 <_vfiprintf_r+0x248>)
 800e1e2:	429d      	cmp	r5, r3
 800e1e4:	bf08      	it	eq
 800e1e6:	68f5      	ldreq	r5, [r6, #12]
 800e1e8:	e7da      	b.n	800e1a0 <_vfiprintf_r+0x20>
 800e1ea:	89ab      	ldrh	r3, [r5, #12]
 800e1ec:	0598      	lsls	r0, r3, #22
 800e1ee:	d4ed      	bmi.n	800e1cc <_vfiprintf_r+0x4c>
 800e1f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e1f2:	f000 fb84 	bl	800e8fe <__retarget_lock_release_recursive>
 800e1f6:	e7e9      	b.n	800e1cc <_vfiprintf_r+0x4c>
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	9309      	str	r3, [sp, #36]	; 0x24
 800e1fc:	2320      	movs	r3, #32
 800e1fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e202:	f8cd 800c 	str.w	r8, [sp, #12]
 800e206:	2330      	movs	r3, #48	; 0x30
 800e208:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e3cc <_vfiprintf_r+0x24c>
 800e20c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e210:	f04f 0901 	mov.w	r9, #1
 800e214:	4623      	mov	r3, r4
 800e216:	469a      	mov	sl, r3
 800e218:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e21c:	b10a      	cbz	r2, 800e222 <_vfiprintf_r+0xa2>
 800e21e:	2a25      	cmp	r2, #37	; 0x25
 800e220:	d1f9      	bne.n	800e216 <_vfiprintf_r+0x96>
 800e222:	ebba 0b04 	subs.w	fp, sl, r4
 800e226:	d00b      	beq.n	800e240 <_vfiprintf_r+0xc0>
 800e228:	465b      	mov	r3, fp
 800e22a:	4622      	mov	r2, r4
 800e22c:	4629      	mov	r1, r5
 800e22e:	4630      	mov	r0, r6
 800e230:	f7ff ff94 	bl	800e15c <__sfputs_r>
 800e234:	3001      	adds	r0, #1
 800e236:	f000 80aa 	beq.w	800e38e <_vfiprintf_r+0x20e>
 800e23a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e23c:	445a      	add	r2, fp
 800e23e:	9209      	str	r2, [sp, #36]	; 0x24
 800e240:	f89a 3000 	ldrb.w	r3, [sl]
 800e244:	2b00      	cmp	r3, #0
 800e246:	f000 80a2 	beq.w	800e38e <_vfiprintf_r+0x20e>
 800e24a:	2300      	movs	r3, #0
 800e24c:	f04f 32ff 	mov.w	r2, #4294967295
 800e250:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e254:	f10a 0a01 	add.w	sl, sl, #1
 800e258:	9304      	str	r3, [sp, #16]
 800e25a:	9307      	str	r3, [sp, #28]
 800e25c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e260:	931a      	str	r3, [sp, #104]	; 0x68
 800e262:	4654      	mov	r4, sl
 800e264:	2205      	movs	r2, #5
 800e266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e26a:	4858      	ldr	r0, [pc, #352]	; (800e3cc <_vfiprintf_r+0x24c>)
 800e26c:	f7f1 ffc0 	bl	80001f0 <memchr>
 800e270:	9a04      	ldr	r2, [sp, #16]
 800e272:	b9d8      	cbnz	r0, 800e2ac <_vfiprintf_r+0x12c>
 800e274:	06d1      	lsls	r1, r2, #27
 800e276:	bf44      	itt	mi
 800e278:	2320      	movmi	r3, #32
 800e27a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e27e:	0713      	lsls	r3, r2, #28
 800e280:	bf44      	itt	mi
 800e282:	232b      	movmi	r3, #43	; 0x2b
 800e284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e288:	f89a 3000 	ldrb.w	r3, [sl]
 800e28c:	2b2a      	cmp	r3, #42	; 0x2a
 800e28e:	d015      	beq.n	800e2bc <_vfiprintf_r+0x13c>
 800e290:	9a07      	ldr	r2, [sp, #28]
 800e292:	4654      	mov	r4, sl
 800e294:	2000      	movs	r0, #0
 800e296:	f04f 0c0a 	mov.w	ip, #10
 800e29a:	4621      	mov	r1, r4
 800e29c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2a0:	3b30      	subs	r3, #48	; 0x30
 800e2a2:	2b09      	cmp	r3, #9
 800e2a4:	d94e      	bls.n	800e344 <_vfiprintf_r+0x1c4>
 800e2a6:	b1b0      	cbz	r0, 800e2d6 <_vfiprintf_r+0x156>
 800e2a8:	9207      	str	r2, [sp, #28]
 800e2aa:	e014      	b.n	800e2d6 <_vfiprintf_r+0x156>
 800e2ac:	eba0 0308 	sub.w	r3, r0, r8
 800e2b0:	fa09 f303 	lsl.w	r3, r9, r3
 800e2b4:	4313      	orrs	r3, r2
 800e2b6:	9304      	str	r3, [sp, #16]
 800e2b8:	46a2      	mov	sl, r4
 800e2ba:	e7d2      	b.n	800e262 <_vfiprintf_r+0xe2>
 800e2bc:	9b03      	ldr	r3, [sp, #12]
 800e2be:	1d19      	adds	r1, r3, #4
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	9103      	str	r1, [sp, #12]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	bfbb      	ittet	lt
 800e2c8:	425b      	neglt	r3, r3
 800e2ca:	f042 0202 	orrlt.w	r2, r2, #2
 800e2ce:	9307      	strge	r3, [sp, #28]
 800e2d0:	9307      	strlt	r3, [sp, #28]
 800e2d2:	bfb8      	it	lt
 800e2d4:	9204      	strlt	r2, [sp, #16]
 800e2d6:	7823      	ldrb	r3, [r4, #0]
 800e2d8:	2b2e      	cmp	r3, #46	; 0x2e
 800e2da:	d10c      	bne.n	800e2f6 <_vfiprintf_r+0x176>
 800e2dc:	7863      	ldrb	r3, [r4, #1]
 800e2de:	2b2a      	cmp	r3, #42	; 0x2a
 800e2e0:	d135      	bne.n	800e34e <_vfiprintf_r+0x1ce>
 800e2e2:	9b03      	ldr	r3, [sp, #12]
 800e2e4:	1d1a      	adds	r2, r3, #4
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	9203      	str	r2, [sp, #12]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	bfb8      	it	lt
 800e2ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800e2f2:	3402      	adds	r4, #2
 800e2f4:	9305      	str	r3, [sp, #20]
 800e2f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e3dc <_vfiprintf_r+0x25c>
 800e2fa:	7821      	ldrb	r1, [r4, #0]
 800e2fc:	2203      	movs	r2, #3
 800e2fe:	4650      	mov	r0, sl
 800e300:	f7f1 ff76 	bl	80001f0 <memchr>
 800e304:	b140      	cbz	r0, 800e318 <_vfiprintf_r+0x198>
 800e306:	2340      	movs	r3, #64	; 0x40
 800e308:	eba0 000a 	sub.w	r0, r0, sl
 800e30c:	fa03 f000 	lsl.w	r0, r3, r0
 800e310:	9b04      	ldr	r3, [sp, #16]
 800e312:	4303      	orrs	r3, r0
 800e314:	3401      	adds	r4, #1
 800e316:	9304      	str	r3, [sp, #16]
 800e318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e31c:	482c      	ldr	r0, [pc, #176]	; (800e3d0 <_vfiprintf_r+0x250>)
 800e31e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e322:	2206      	movs	r2, #6
 800e324:	f7f1 ff64 	bl	80001f0 <memchr>
 800e328:	2800      	cmp	r0, #0
 800e32a:	d03f      	beq.n	800e3ac <_vfiprintf_r+0x22c>
 800e32c:	4b29      	ldr	r3, [pc, #164]	; (800e3d4 <_vfiprintf_r+0x254>)
 800e32e:	bb1b      	cbnz	r3, 800e378 <_vfiprintf_r+0x1f8>
 800e330:	9b03      	ldr	r3, [sp, #12]
 800e332:	3307      	adds	r3, #7
 800e334:	f023 0307 	bic.w	r3, r3, #7
 800e338:	3308      	adds	r3, #8
 800e33a:	9303      	str	r3, [sp, #12]
 800e33c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e33e:	443b      	add	r3, r7
 800e340:	9309      	str	r3, [sp, #36]	; 0x24
 800e342:	e767      	b.n	800e214 <_vfiprintf_r+0x94>
 800e344:	fb0c 3202 	mla	r2, ip, r2, r3
 800e348:	460c      	mov	r4, r1
 800e34a:	2001      	movs	r0, #1
 800e34c:	e7a5      	b.n	800e29a <_vfiprintf_r+0x11a>
 800e34e:	2300      	movs	r3, #0
 800e350:	3401      	adds	r4, #1
 800e352:	9305      	str	r3, [sp, #20]
 800e354:	4619      	mov	r1, r3
 800e356:	f04f 0c0a 	mov.w	ip, #10
 800e35a:	4620      	mov	r0, r4
 800e35c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e360:	3a30      	subs	r2, #48	; 0x30
 800e362:	2a09      	cmp	r2, #9
 800e364:	d903      	bls.n	800e36e <_vfiprintf_r+0x1ee>
 800e366:	2b00      	cmp	r3, #0
 800e368:	d0c5      	beq.n	800e2f6 <_vfiprintf_r+0x176>
 800e36a:	9105      	str	r1, [sp, #20]
 800e36c:	e7c3      	b.n	800e2f6 <_vfiprintf_r+0x176>
 800e36e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e372:	4604      	mov	r4, r0
 800e374:	2301      	movs	r3, #1
 800e376:	e7f0      	b.n	800e35a <_vfiprintf_r+0x1da>
 800e378:	ab03      	add	r3, sp, #12
 800e37a:	9300      	str	r3, [sp, #0]
 800e37c:	462a      	mov	r2, r5
 800e37e:	4b16      	ldr	r3, [pc, #88]	; (800e3d8 <_vfiprintf_r+0x258>)
 800e380:	a904      	add	r1, sp, #16
 800e382:	4630      	mov	r0, r6
 800e384:	f7fd fd58 	bl	800be38 <_printf_float>
 800e388:	4607      	mov	r7, r0
 800e38a:	1c78      	adds	r0, r7, #1
 800e38c:	d1d6      	bne.n	800e33c <_vfiprintf_r+0x1bc>
 800e38e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e390:	07d9      	lsls	r1, r3, #31
 800e392:	d405      	bmi.n	800e3a0 <_vfiprintf_r+0x220>
 800e394:	89ab      	ldrh	r3, [r5, #12]
 800e396:	059a      	lsls	r2, r3, #22
 800e398:	d402      	bmi.n	800e3a0 <_vfiprintf_r+0x220>
 800e39a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e39c:	f000 faaf 	bl	800e8fe <__retarget_lock_release_recursive>
 800e3a0:	89ab      	ldrh	r3, [r5, #12]
 800e3a2:	065b      	lsls	r3, r3, #25
 800e3a4:	f53f af12 	bmi.w	800e1cc <_vfiprintf_r+0x4c>
 800e3a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e3aa:	e711      	b.n	800e1d0 <_vfiprintf_r+0x50>
 800e3ac:	ab03      	add	r3, sp, #12
 800e3ae:	9300      	str	r3, [sp, #0]
 800e3b0:	462a      	mov	r2, r5
 800e3b2:	4b09      	ldr	r3, [pc, #36]	; (800e3d8 <_vfiprintf_r+0x258>)
 800e3b4:	a904      	add	r1, sp, #16
 800e3b6:	4630      	mov	r0, r6
 800e3b8:	f7fd ffe2 	bl	800c380 <_printf_i>
 800e3bc:	e7e4      	b.n	800e388 <_vfiprintf_r+0x208>
 800e3be:	bf00      	nop
 800e3c0:	0800efdc 	.word	0x0800efdc
 800e3c4:	0800effc 	.word	0x0800effc
 800e3c8:	0800efbc 	.word	0x0800efbc
 800e3cc:	0800ef64 	.word	0x0800ef64
 800e3d0:	0800ef6e 	.word	0x0800ef6e
 800e3d4:	0800be39 	.word	0x0800be39
 800e3d8:	0800e15d 	.word	0x0800e15d
 800e3dc:	0800ef6a 	.word	0x0800ef6a

0800e3e0 <__swbuf_r>:
 800e3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3e2:	460e      	mov	r6, r1
 800e3e4:	4614      	mov	r4, r2
 800e3e6:	4605      	mov	r5, r0
 800e3e8:	b118      	cbz	r0, 800e3f2 <__swbuf_r+0x12>
 800e3ea:	6983      	ldr	r3, [r0, #24]
 800e3ec:	b90b      	cbnz	r3, 800e3f2 <__swbuf_r+0x12>
 800e3ee:	f000 f9e7 	bl	800e7c0 <__sinit>
 800e3f2:	4b21      	ldr	r3, [pc, #132]	; (800e478 <__swbuf_r+0x98>)
 800e3f4:	429c      	cmp	r4, r3
 800e3f6:	d12b      	bne.n	800e450 <__swbuf_r+0x70>
 800e3f8:	686c      	ldr	r4, [r5, #4]
 800e3fa:	69a3      	ldr	r3, [r4, #24]
 800e3fc:	60a3      	str	r3, [r4, #8]
 800e3fe:	89a3      	ldrh	r3, [r4, #12]
 800e400:	071a      	lsls	r2, r3, #28
 800e402:	d52f      	bpl.n	800e464 <__swbuf_r+0x84>
 800e404:	6923      	ldr	r3, [r4, #16]
 800e406:	b36b      	cbz	r3, 800e464 <__swbuf_r+0x84>
 800e408:	6923      	ldr	r3, [r4, #16]
 800e40a:	6820      	ldr	r0, [r4, #0]
 800e40c:	1ac0      	subs	r0, r0, r3
 800e40e:	6963      	ldr	r3, [r4, #20]
 800e410:	b2f6      	uxtb	r6, r6
 800e412:	4283      	cmp	r3, r0
 800e414:	4637      	mov	r7, r6
 800e416:	dc04      	bgt.n	800e422 <__swbuf_r+0x42>
 800e418:	4621      	mov	r1, r4
 800e41a:	4628      	mov	r0, r5
 800e41c:	f000 f93c 	bl	800e698 <_fflush_r>
 800e420:	bb30      	cbnz	r0, 800e470 <__swbuf_r+0x90>
 800e422:	68a3      	ldr	r3, [r4, #8]
 800e424:	3b01      	subs	r3, #1
 800e426:	60a3      	str	r3, [r4, #8]
 800e428:	6823      	ldr	r3, [r4, #0]
 800e42a:	1c5a      	adds	r2, r3, #1
 800e42c:	6022      	str	r2, [r4, #0]
 800e42e:	701e      	strb	r6, [r3, #0]
 800e430:	6963      	ldr	r3, [r4, #20]
 800e432:	3001      	adds	r0, #1
 800e434:	4283      	cmp	r3, r0
 800e436:	d004      	beq.n	800e442 <__swbuf_r+0x62>
 800e438:	89a3      	ldrh	r3, [r4, #12]
 800e43a:	07db      	lsls	r3, r3, #31
 800e43c:	d506      	bpl.n	800e44c <__swbuf_r+0x6c>
 800e43e:	2e0a      	cmp	r6, #10
 800e440:	d104      	bne.n	800e44c <__swbuf_r+0x6c>
 800e442:	4621      	mov	r1, r4
 800e444:	4628      	mov	r0, r5
 800e446:	f000 f927 	bl	800e698 <_fflush_r>
 800e44a:	b988      	cbnz	r0, 800e470 <__swbuf_r+0x90>
 800e44c:	4638      	mov	r0, r7
 800e44e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e450:	4b0a      	ldr	r3, [pc, #40]	; (800e47c <__swbuf_r+0x9c>)
 800e452:	429c      	cmp	r4, r3
 800e454:	d101      	bne.n	800e45a <__swbuf_r+0x7a>
 800e456:	68ac      	ldr	r4, [r5, #8]
 800e458:	e7cf      	b.n	800e3fa <__swbuf_r+0x1a>
 800e45a:	4b09      	ldr	r3, [pc, #36]	; (800e480 <__swbuf_r+0xa0>)
 800e45c:	429c      	cmp	r4, r3
 800e45e:	bf08      	it	eq
 800e460:	68ec      	ldreq	r4, [r5, #12]
 800e462:	e7ca      	b.n	800e3fa <__swbuf_r+0x1a>
 800e464:	4621      	mov	r1, r4
 800e466:	4628      	mov	r0, r5
 800e468:	f000 f81a 	bl	800e4a0 <__swsetup_r>
 800e46c:	2800      	cmp	r0, #0
 800e46e:	d0cb      	beq.n	800e408 <__swbuf_r+0x28>
 800e470:	f04f 37ff 	mov.w	r7, #4294967295
 800e474:	e7ea      	b.n	800e44c <__swbuf_r+0x6c>
 800e476:	bf00      	nop
 800e478:	0800efdc 	.word	0x0800efdc
 800e47c:	0800effc 	.word	0x0800effc
 800e480:	0800efbc 	.word	0x0800efbc

0800e484 <__ascii_wctomb>:
 800e484:	b149      	cbz	r1, 800e49a <__ascii_wctomb+0x16>
 800e486:	2aff      	cmp	r2, #255	; 0xff
 800e488:	bf85      	ittet	hi
 800e48a:	238a      	movhi	r3, #138	; 0x8a
 800e48c:	6003      	strhi	r3, [r0, #0]
 800e48e:	700a      	strbls	r2, [r1, #0]
 800e490:	f04f 30ff 	movhi.w	r0, #4294967295
 800e494:	bf98      	it	ls
 800e496:	2001      	movls	r0, #1
 800e498:	4770      	bx	lr
 800e49a:	4608      	mov	r0, r1
 800e49c:	4770      	bx	lr
	...

0800e4a0 <__swsetup_r>:
 800e4a0:	4b32      	ldr	r3, [pc, #200]	; (800e56c <__swsetup_r+0xcc>)
 800e4a2:	b570      	push	{r4, r5, r6, lr}
 800e4a4:	681d      	ldr	r5, [r3, #0]
 800e4a6:	4606      	mov	r6, r0
 800e4a8:	460c      	mov	r4, r1
 800e4aa:	b125      	cbz	r5, 800e4b6 <__swsetup_r+0x16>
 800e4ac:	69ab      	ldr	r3, [r5, #24]
 800e4ae:	b913      	cbnz	r3, 800e4b6 <__swsetup_r+0x16>
 800e4b0:	4628      	mov	r0, r5
 800e4b2:	f000 f985 	bl	800e7c0 <__sinit>
 800e4b6:	4b2e      	ldr	r3, [pc, #184]	; (800e570 <__swsetup_r+0xd0>)
 800e4b8:	429c      	cmp	r4, r3
 800e4ba:	d10f      	bne.n	800e4dc <__swsetup_r+0x3c>
 800e4bc:	686c      	ldr	r4, [r5, #4]
 800e4be:	89a3      	ldrh	r3, [r4, #12]
 800e4c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e4c4:	0719      	lsls	r1, r3, #28
 800e4c6:	d42c      	bmi.n	800e522 <__swsetup_r+0x82>
 800e4c8:	06dd      	lsls	r5, r3, #27
 800e4ca:	d411      	bmi.n	800e4f0 <__swsetup_r+0x50>
 800e4cc:	2309      	movs	r3, #9
 800e4ce:	6033      	str	r3, [r6, #0]
 800e4d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e4d4:	81a3      	strh	r3, [r4, #12]
 800e4d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e4da:	e03e      	b.n	800e55a <__swsetup_r+0xba>
 800e4dc:	4b25      	ldr	r3, [pc, #148]	; (800e574 <__swsetup_r+0xd4>)
 800e4de:	429c      	cmp	r4, r3
 800e4e0:	d101      	bne.n	800e4e6 <__swsetup_r+0x46>
 800e4e2:	68ac      	ldr	r4, [r5, #8]
 800e4e4:	e7eb      	b.n	800e4be <__swsetup_r+0x1e>
 800e4e6:	4b24      	ldr	r3, [pc, #144]	; (800e578 <__swsetup_r+0xd8>)
 800e4e8:	429c      	cmp	r4, r3
 800e4ea:	bf08      	it	eq
 800e4ec:	68ec      	ldreq	r4, [r5, #12]
 800e4ee:	e7e6      	b.n	800e4be <__swsetup_r+0x1e>
 800e4f0:	0758      	lsls	r0, r3, #29
 800e4f2:	d512      	bpl.n	800e51a <__swsetup_r+0x7a>
 800e4f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4f6:	b141      	cbz	r1, 800e50a <__swsetup_r+0x6a>
 800e4f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4fc:	4299      	cmp	r1, r3
 800e4fe:	d002      	beq.n	800e506 <__swsetup_r+0x66>
 800e500:	4630      	mov	r0, r6
 800e502:	f7ff fb31 	bl	800db68 <_free_r>
 800e506:	2300      	movs	r3, #0
 800e508:	6363      	str	r3, [r4, #52]	; 0x34
 800e50a:	89a3      	ldrh	r3, [r4, #12]
 800e50c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e510:	81a3      	strh	r3, [r4, #12]
 800e512:	2300      	movs	r3, #0
 800e514:	6063      	str	r3, [r4, #4]
 800e516:	6923      	ldr	r3, [r4, #16]
 800e518:	6023      	str	r3, [r4, #0]
 800e51a:	89a3      	ldrh	r3, [r4, #12]
 800e51c:	f043 0308 	orr.w	r3, r3, #8
 800e520:	81a3      	strh	r3, [r4, #12]
 800e522:	6923      	ldr	r3, [r4, #16]
 800e524:	b94b      	cbnz	r3, 800e53a <__swsetup_r+0x9a>
 800e526:	89a3      	ldrh	r3, [r4, #12]
 800e528:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e52c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e530:	d003      	beq.n	800e53a <__swsetup_r+0x9a>
 800e532:	4621      	mov	r1, r4
 800e534:	4630      	mov	r0, r6
 800e536:	f000 fa09 	bl	800e94c <__smakebuf_r>
 800e53a:	89a0      	ldrh	r0, [r4, #12]
 800e53c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e540:	f010 0301 	ands.w	r3, r0, #1
 800e544:	d00a      	beq.n	800e55c <__swsetup_r+0xbc>
 800e546:	2300      	movs	r3, #0
 800e548:	60a3      	str	r3, [r4, #8]
 800e54a:	6963      	ldr	r3, [r4, #20]
 800e54c:	425b      	negs	r3, r3
 800e54e:	61a3      	str	r3, [r4, #24]
 800e550:	6923      	ldr	r3, [r4, #16]
 800e552:	b943      	cbnz	r3, 800e566 <__swsetup_r+0xc6>
 800e554:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e558:	d1ba      	bne.n	800e4d0 <__swsetup_r+0x30>
 800e55a:	bd70      	pop	{r4, r5, r6, pc}
 800e55c:	0781      	lsls	r1, r0, #30
 800e55e:	bf58      	it	pl
 800e560:	6963      	ldrpl	r3, [r4, #20]
 800e562:	60a3      	str	r3, [r4, #8]
 800e564:	e7f4      	b.n	800e550 <__swsetup_r+0xb0>
 800e566:	2000      	movs	r0, #0
 800e568:	e7f7      	b.n	800e55a <__swsetup_r+0xba>
 800e56a:	bf00      	nop
 800e56c:	200000fc 	.word	0x200000fc
 800e570:	0800efdc 	.word	0x0800efdc
 800e574:	0800effc 	.word	0x0800effc
 800e578:	0800efbc 	.word	0x0800efbc

0800e57c <abort>:
 800e57c:	b508      	push	{r3, lr}
 800e57e:	2006      	movs	r0, #6
 800e580:	f000 fa54 	bl	800ea2c <raise>
 800e584:	2001      	movs	r0, #1
 800e586:	f7f3 fc8b 	bl	8001ea0 <_exit>
	...

0800e58c <__sflush_r>:
 800e58c:	898a      	ldrh	r2, [r1, #12]
 800e58e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e592:	4605      	mov	r5, r0
 800e594:	0710      	lsls	r0, r2, #28
 800e596:	460c      	mov	r4, r1
 800e598:	d458      	bmi.n	800e64c <__sflush_r+0xc0>
 800e59a:	684b      	ldr	r3, [r1, #4]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	dc05      	bgt.n	800e5ac <__sflush_r+0x20>
 800e5a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	dc02      	bgt.n	800e5ac <__sflush_r+0x20>
 800e5a6:	2000      	movs	r0, #0
 800e5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e5ae:	2e00      	cmp	r6, #0
 800e5b0:	d0f9      	beq.n	800e5a6 <__sflush_r+0x1a>
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e5b8:	682f      	ldr	r7, [r5, #0]
 800e5ba:	602b      	str	r3, [r5, #0]
 800e5bc:	d032      	beq.n	800e624 <__sflush_r+0x98>
 800e5be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e5c0:	89a3      	ldrh	r3, [r4, #12]
 800e5c2:	075a      	lsls	r2, r3, #29
 800e5c4:	d505      	bpl.n	800e5d2 <__sflush_r+0x46>
 800e5c6:	6863      	ldr	r3, [r4, #4]
 800e5c8:	1ac0      	subs	r0, r0, r3
 800e5ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e5cc:	b10b      	cbz	r3, 800e5d2 <__sflush_r+0x46>
 800e5ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e5d0:	1ac0      	subs	r0, r0, r3
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	4602      	mov	r2, r0
 800e5d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e5d8:	6a21      	ldr	r1, [r4, #32]
 800e5da:	4628      	mov	r0, r5
 800e5dc:	47b0      	blx	r6
 800e5de:	1c43      	adds	r3, r0, #1
 800e5e0:	89a3      	ldrh	r3, [r4, #12]
 800e5e2:	d106      	bne.n	800e5f2 <__sflush_r+0x66>
 800e5e4:	6829      	ldr	r1, [r5, #0]
 800e5e6:	291d      	cmp	r1, #29
 800e5e8:	d82c      	bhi.n	800e644 <__sflush_r+0xb8>
 800e5ea:	4a2a      	ldr	r2, [pc, #168]	; (800e694 <__sflush_r+0x108>)
 800e5ec:	40ca      	lsrs	r2, r1
 800e5ee:	07d6      	lsls	r6, r2, #31
 800e5f0:	d528      	bpl.n	800e644 <__sflush_r+0xb8>
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	6062      	str	r2, [r4, #4]
 800e5f6:	04d9      	lsls	r1, r3, #19
 800e5f8:	6922      	ldr	r2, [r4, #16]
 800e5fa:	6022      	str	r2, [r4, #0]
 800e5fc:	d504      	bpl.n	800e608 <__sflush_r+0x7c>
 800e5fe:	1c42      	adds	r2, r0, #1
 800e600:	d101      	bne.n	800e606 <__sflush_r+0x7a>
 800e602:	682b      	ldr	r3, [r5, #0]
 800e604:	b903      	cbnz	r3, 800e608 <__sflush_r+0x7c>
 800e606:	6560      	str	r0, [r4, #84]	; 0x54
 800e608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e60a:	602f      	str	r7, [r5, #0]
 800e60c:	2900      	cmp	r1, #0
 800e60e:	d0ca      	beq.n	800e5a6 <__sflush_r+0x1a>
 800e610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e614:	4299      	cmp	r1, r3
 800e616:	d002      	beq.n	800e61e <__sflush_r+0x92>
 800e618:	4628      	mov	r0, r5
 800e61a:	f7ff faa5 	bl	800db68 <_free_r>
 800e61e:	2000      	movs	r0, #0
 800e620:	6360      	str	r0, [r4, #52]	; 0x34
 800e622:	e7c1      	b.n	800e5a8 <__sflush_r+0x1c>
 800e624:	6a21      	ldr	r1, [r4, #32]
 800e626:	2301      	movs	r3, #1
 800e628:	4628      	mov	r0, r5
 800e62a:	47b0      	blx	r6
 800e62c:	1c41      	adds	r1, r0, #1
 800e62e:	d1c7      	bne.n	800e5c0 <__sflush_r+0x34>
 800e630:	682b      	ldr	r3, [r5, #0]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d0c4      	beq.n	800e5c0 <__sflush_r+0x34>
 800e636:	2b1d      	cmp	r3, #29
 800e638:	d001      	beq.n	800e63e <__sflush_r+0xb2>
 800e63a:	2b16      	cmp	r3, #22
 800e63c:	d101      	bne.n	800e642 <__sflush_r+0xb6>
 800e63e:	602f      	str	r7, [r5, #0]
 800e640:	e7b1      	b.n	800e5a6 <__sflush_r+0x1a>
 800e642:	89a3      	ldrh	r3, [r4, #12]
 800e644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e648:	81a3      	strh	r3, [r4, #12]
 800e64a:	e7ad      	b.n	800e5a8 <__sflush_r+0x1c>
 800e64c:	690f      	ldr	r7, [r1, #16]
 800e64e:	2f00      	cmp	r7, #0
 800e650:	d0a9      	beq.n	800e5a6 <__sflush_r+0x1a>
 800e652:	0793      	lsls	r3, r2, #30
 800e654:	680e      	ldr	r6, [r1, #0]
 800e656:	bf08      	it	eq
 800e658:	694b      	ldreq	r3, [r1, #20]
 800e65a:	600f      	str	r7, [r1, #0]
 800e65c:	bf18      	it	ne
 800e65e:	2300      	movne	r3, #0
 800e660:	eba6 0807 	sub.w	r8, r6, r7
 800e664:	608b      	str	r3, [r1, #8]
 800e666:	f1b8 0f00 	cmp.w	r8, #0
 800e66a:	dd9c      	ble.n	800e5a6 <__sflush_r+0x1a>
 800e66c:	6a21      	ldr	r1, [r4, #32]
 800e66e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e670:	4643      	mov	r3, r8
 800e672:	463a      	mov	r2, r7
 800e674:	4628      	mov	r0, r5
 800e676:	47b0      	blx	r6
 800e678:	2800      	cmp	r0, #0
 800e67a:	dc06      	bgt.n	800e68a <__sflush_r+0xfe>
 800e67c:	89a3      	ldrh	r3, [r4, #12]
 800e67e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e682:	81a3      	strh	r3, [r4, #12]
 800e684:	f04f 30ff 	mov.w	r0, #4294967295
 800e688:	e78e      	b.n	800e5a8 <__sflush_r+0x1c>
 800e68a:	4407      	add	r7, r0
 800e68c:	eba8 0800 	sub.w	r8, r8, r0
 800e690:	e7e9      	b.n	800e666 <__sflush_r+0xda>
 800e692:	bf00      	nop
 800e694:	20400001 	.word	0x20400001

0800e698 <_fflush_r>:
 800e698:	b538      	push	{r3, r4, r5, lr}
 800e69a:	690b      	ldr	r3, [r1, #16]
 800e69c:	4605      	mov	r5, r0
 800e69e:	460c      	mov	r4, r1
 800e6a0:	b913      	cbnz	r3, 800e6a8 <_fflush_r+0x10>
 800e6a2:	2500      	movs	r5, #0
 800e6a4:	4628      	mov	r0, r5
 800e6a6:	bd38      	pop	{r3, r4, r5, pc}
 800e6a8:	b118      	cbz	r0, 800e6b2 <_fflush_r+0x1a>
 800e6aa:	6983      	ldr	r3, [r0, #24]
 800e6ac:	b90b      	cbnz	r3, 800e6b2 <_fflush_r+0x1a>
 800e6ae:	f000 f887 	bl	800e7c0 <__sinit>
 800e6b2:	4b14      	ldr	r3, [pc, #80]	; (800e704 <_fflush_r+0x6c>)
 800e6b4:	429c      	cmp	r4, r3
 800e6b6:	d11b      	bne.n	800e6f0 <_fflush_r+0x58>
 800e6b8:	686c      	ldr	r4, [r5, #4]
 800e6ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d0ef      	beq.n	800e6a2 <_fflush_r+0xa>
 800e6c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e6c4:	07d0      	lsls	r0, r2, #31
 800e6c6:	d404      	bmi.n	800e6d2 <_fflush_r+0x3a>
 800e6c8:	0599      	lsls	r1, r3, #22
 800e6ca:	d402      	bmi.n	800e6d2 <_fflush_r+0x3a>
 800e6cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e6ce:	f000 f915 	bl	800e8fc <__retarget_lock_acquire_recursive>
 800e6d2:	4628      	mov	r0, r5
 800e6d4:	4621      	mov	r1, r4
 800e6d6:	f7ff ff59 	bl	800e58c <__sflush_r>
 800e6da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e6dc:	07da      	lsls	r2, r3, #31
 800e6de:	4605      	mov	r5, r0
 800e6e0:	d4e0      	bmi.n	800e6a4 <_fflush_r+0xc>
 800e6e2:	89a3      	ldrh	r3, [r4, #12]
 800e6e4:	059b      	lsls	r3, r3, #22
 800e6e6:	d4dd      	bmi.n	800e6a4 <_fflush_r+0xc>
 800e6e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e6ea:	f000 f908 	bl	800e8fe <__retarget_lock_release_recursive>
 800e6ee:	e7d9      	b.n	800e6a4 <_fflush_r+0xc>
 800e6f0:	4b05      	ldr	r3, [pc, #20]	; (800e708 <_fflush_r+0x70>)
 800e6f2:	429c      	cmp	r4, r3
 800e6f4:	d101      	bne.n	800e6fa <_fflush_r+0x62>
 800e6f6:	68ac      	ldr	r4, [r5, #8]
 800e6f8:	e7df      	b.n	800e6ba <_fflush_r+0x22>
 800e6fa:	4b04      	ldr	r3, [pc, #16]	; (800e70c <_fflush_r+0x74>)
 800e6fc:	429c      	cmp	r4, r3
 800e6fe:	bf08      	it	eq
 800e700:	68ec      	ldreq	r4, [r5, #12]
 800e702:	e7da      	b.n	800e6ba <_fflush_r+0x22>
 800e704:	0800efdc 	.word	0x0800efdc
 800e708:	0800effc 	.word	0x0800effc
 800e70c:	0800efbc 	.word	0x0800efbc

0800e710 <std>:
 800e710:	2300      	movs	r3, #0
 800e712:	b510      	push	{r4, lr}
 800e714:	4604      	mov	r4, r0
 800e716:	e9c0 3300 	strd	r3, r3, [r0]
 800e71a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e71e:	6083      	str	r3, [r0, #8]
 800e720:	8181      	strh	r1, [r0, #12]
 800e722:	6643      	str	r3, [r0, #100]	; 0x64
 800e724:	81c2      	strh	r2, [r0, #14]
 800e726:	6183      	str	r3, [r0, #24]
 800e728:	4619      	mov	r1, r3
 800e72a:	2208      	movs	r2, #8
 800e72c:	305c      	adds	r0, #92	; 0x5c
 800e72e:	f7fd fadb 	bl	800bce8 <memset>
 800e732:	4b05      	ldr	r3, [pc, #20]	; (800e748 <std+0x38>)
 800e734:	6263      	str	r3, [r4, #36]	; 0x24
 800e736:	4b05      	ldr	r3, [pc, #20]	; (800e74c <std+0x3c>)
 800e738:	62a3      	str	r3, [r4, #40]	; 0x28
 800e73a:	4b05      	ldr	r3, [pc, #20]	; (800e750 <std+0x40>)
 800e73c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e73e:	4b05      	ldr	r3, [pc, #20]	; (800e754 <std+0x44>)
 800e740:	6224      	str	r4, [r4, #32]
 800e742:	6323      	str	r3, [r4, #48]	; 0x30
 800e744:	bd10      	pop	{r4, pc}
 800e746:	bf00      	nop
 800e748:	0800ea65 	.word	0x0800ea65
 800e74c:	0800ea87 	.word	0x0800ea87
 800e750:	0800eabf 	.word	0x0800eabf
 800e754:	0800eae3 	.word	0x0800eae3

0800e758 <_cleanup_r>:
 800e758:	4901      	ldr	r1, [pc, #4]	; (800e760 <_cleanup_r+0x8>)
 800e75a:	f000 b8af 	b.w	800e8bc <_fwalk_reent>
 800e75e:	bf00      	nop
 800e760:	0800e699 	.word	0x0800e699

0800e764 <__sfmoreglue>:
 800e764:	b570      	push	{r4, r5, r6, lr}
 800e766:	2268      	movs	r2, #104	; 0x68
 800e768:	1e4d      	subs	r5, r1, #1
 800e76a:	4355      	muls	r5, r2
 800e76c:	460e      	mov	r6, r1
 800e76e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e772:	f7ff fa65 	bl	800dc40 <_malloc_r>
 800e776:	4604      	mov	r4, r0
 800e778:	b140      	cbz	r0, 800e78c <__sfmoreglue+0x28>
 800e77a:	2100      	movs	r1, #0
 800e77c:	e9c0 1600 	strd	r1, r6, [r0]
 800e780:	300c      	adds	r0, #12
 800e782:	60a0      	str	r0, [r4, #8]
 800e784:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e788:	f7fd faae 	bl	800bce8 <memset>
 800e78c:	4620      	mov	r0, r4
 800e78e:	bd70      	pop	{r4, r5, r6, pc}

0800e790 <__sfp_lock_acquire>:
 800e790:	4801      	ldr	r0, [pc, #4]	; (800e798 <__sfp_lock_acquire+0x8>)
 800e792:	f000 b8b3 	b.w	800e8fc <__retarget_lock_acquire_recursive>
 800e796:	bf00      	nop
 800e798:	20002331 	.word	0x20002331

0800e79c <__sfp_lock_release>:
 800e79c:	4801      	ldr	r0, [pc, #4]	; (800e7a4 <__sfp_lock_release+0x8>)
 800e79e:	f000 b8ae 	b.w	800e8fe <__retarget_lock_release_recursive>
 800e7a2:	bf00      	nop
 800e7a4:	20002331 	.word	0x20002331

0800e7a8 <__sinit_lock_acquire>:
 800e7a8:	4801      	ldr	r0, [pc, #4]	; (800e7b0 <__sinit_lock_acquire+0x8>)
 800e7aa:	f000 b8a7 	b.w	800e8fc <__retarget_lock_acquire_recursive>
 800e7ae:	bf00      	nop
 800e7b0:	20002332 	.word	0x20002332

0800e7b4 <__sinit_lock_release>:
 800e7b4:	4801      	ldr	r0, [pc, #4]	; (800e7bc <__sinit_lock_release+0x8>)
 800e7b6:	f000 b8a2 	b.w	800e8fe <__retarget_lock_release_recursive>
 800e7ba:	bf00      	nop
 800e7bc:	20002332 	.word	0x20002332

0800e7c0 <__sinit>:
 800e7c0:	b510      	push	{r4, lr}
 800e7c2:	4604      	mov	r4, r0
 800e7c4:	f7ff fff0 	bl	800e7a8 <__sinit_lock_acquire>
 800e7c8:	69a3      	ldr	r3, [r4, #24]
 800e7ca:	b11b      	cbz	r3, 800e7d4 <__sinit+0x14>
 800e7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7d0:	f7ff bff0 	b.w	800e7b4 <__sinit_lock_release>
 800e7d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e7d8:	6523      	str	r3, [r4, #80]	; 0x50
 800e7da:	4b13      	ldr	r3, [pc, #76]	; (800e828 <__sinit+0x68>)
 800e7dc:	4a13      	ldr	r2, [pc, #76]	; (800e82c <__sinit+0x6c>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	62a2      	str	r2, [r4, #40]	; 0x28
 800e7e2:	42a3      	cmp	r3, r4
 800e7e4:	bf04      	itt	eq
 800e7e6:	2301      	moveq	r3, #1
 800e7e8:	61a3      	streq	r3, [r4, #24]
 800e7ea:	4620      	mov	r0, r4
 800e7ec:	f000 f820 	bl	800e830 <__sfp>
 800e7f0:	6060      	str	r0, [r4, #4]
 800e7f2:	4620      	mov	r0, r4
 800e7f4:	f000 f81c 	bl	800e830 <__sfp>
 800e7f8:	60a0      	str	r0, [r4, #8]
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	f000 f818 	bl	800e830 <__sfp>
 800e800:	2200      	movs	r2, #0
 800e802:	60e0      	str	r0, [r4, #12]
 800e804:	2104      	movs	r1, #4
 800e806:	6860      	ldr	r0, [r4, #4]
 800e808:	f7ff ff82 	bl	800e710 <std>
 800e80c:	68a0      	ldr	r0, [r4, #8]
 800e80e:	2201      	movs	r2, #1
 800e810:	2109      	movs	r1, #9
 800e812:	f7ff ff7d 	bl	800e710 <std>
 800e816:	68e0      	ldr	r0, [r4, #12]
 800e818:	2202      	movs	r2, #2
 800e81a:	2112      	movs	r1, #18
 800e81c:	f7ff ff78 	bl	800e710 <std>
 800e820:	2301      	movs	r3, #1
 800e822:	61a3      	str	r3, [r4, #24]
 800e824:	e7d2      	b.n	800e7cc <__sinit+0xc>
 800e826:	bf00      	nop
 800e828:	0800ec3c 	.word	0x0800ec3c
 800e82c:	0800e759 	.word	0x0800e759

0800e830 <__sfp>:
 800e830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e832:	4607      	mov	r7, r0
 800e834:	f7ff ffac 	bl	800e790 <__sfp_lock_acquire>
 800e838:	4b1e      	ldr	r3, [pc, #120]	; (800e8b4 <__sfp+0x84>)
 800e83a:	681e      	ldr	r6, [r3, #0]
 800e83c:	69b3      	ldr	r3, [r6, #24]
 800e83e:	b913      	cbnz	r3, 800e846 <__sfp+0x16>
 800e840:	4630      	mov	r0, r6
 800e842:	f7ff ffbd 	bl	800e7c0 <__sinit>
 800e846:	3648      	adds	r6, #72	; 0x48
 800e848:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e84c:	3b01      	subs	r3, #1
 800e84e:	d503      	bpl.n	800e858 <__sfp+0x28>
 800e850:	6833      	ldr	r3, [r6, #0]
 800e852:	b30b      	cbz	r3, 800e898 <__sfp+0x68>
 800e854:	6836      	ldr	r6, [r6, #0]
 800e856:	e7f7      	b.n	800e848 <__sfp+0x18>
 800e858:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e85c:	b9d5      	cbnz	r5, 800e894 <__sfp+0x64>
 800e85e:	4b16      	ldr	r3, [pc, #88]	; (800e8b8 <__sfp+0x88>)
 800e860:	60e3      	str	r3, [r4, #12]
 800e862:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e866:	6665      	str	r5, [r4, #100]	; 0x64
 800e868:	f000 f847 	bl	800e8fa <__retarget_lock_init_recursive>
 800e86c:	f7ff ff96 	bl	800e79c <__sfp_lock_release>
 800e870:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e874:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e878:	6025      	str	r5, [r4, #0]
 800e87a:	61a5      	str	r5, [r4, #24]
 800e87c:	2208      	movs	r2, #8
 800e87e:	4629      	mov	r1, r5
 800e880:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e884:	f7fd fa30 	bl	800bce8 <memset>
 800e888:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e88c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e890:	4620      	mov	r0, r4
 800e892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e894:	3468      	adds	r4, #104	; 0x68
 800e896:	e7d9      	b.n	800e84c <__sfp+0x1c>
 800e898:	2104      	movs	r1, #4
 800e89a:	4638      	mov	r0, r7
 800e89c:	f7ff ff62 	bl	800e764 <__sfmoreglue>
 800e8a0:	4604      	mov	r4, r0
 800e8a2:	6030      	str	r0, [r6, #0]
 800e8a4:	2800      	cmp	r0, #0
 800e8a6:	d1d5      	bne.n	800e854 <__sfp+0x24>
 800e8a8:	f7ff ff78 	bl	800e79c <__sfp_lock_release>
 800e8ac:	230c      	movs	r3, #12
 800e8ae:	603b      	str	r3, [r7, #0]
 800e8b0:	e7ee      	b.n	800e890 <__sfp+0x60>
 800e8b2:	bf00      	nop
 800e8b4:	0800ec3c 	.word	0x0800ec3c
 800e8b8:	ffff0001 	.word	0xffff0001

0800e8bc <_fwalk_reent>:
 800e8bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8c0:	4606      	mov	r6, r0
 800e8c2:	4688      	mov	r8, r1
 800e8c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e8c8:	2700      	movs	r7, #0
 800e8ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e8ce:	f1b9 0901 	subs.w	r9, r9, #1
 800e8d2:	d505      	bpl.n	800e8e0 <_fwalk_reent+0x24>
 800e8d4:	6824      	ldr	r4, [r4, #0]
 800e8d6:	2c00      	cmp	r4, #0
 800e8d8:	d1f7      	bne.n	800e8ca <_fwalk_reent+0xe>
 800e8da:	4638      	mov	r0, r7
 800e8dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8e0:	89ab      	ldrh	r3, [r5, #12]
 800e8e2:	2b01      	cmp	r3, #1
 800e8e4:	d907      	bls.n	800e8f6 <_fwalk_reent+0x3a>
 800e8e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e8ea:	3301      	adds	r3, #1
 800e8ec:	d003      	beq.n	800e8f6 <_fwalk_reent+0x3a>
 800e8ee:	4629      	mov	r1, r5
 800e8f0:	4630      	mov	r0, r6
 800e8f2:	47c0      	blx	r8
 800e8f4:	4307      	orrs	r7, r0
 800e8f6:	3568      	adds	r5, #104	; 0x68
 800e8f8:	e7e9      	b.n	800e8ce <_fwalk_reent+0x12>

0800e8fa <__retarget_lock_init_recursive>:
 800e8fa:	4770      	bx	lr

0800e8fc <__retarget_lock_acquire_recursive>:
 800e8fc:	4770      	bx	lr

0800e8fe <__retarget_lock_release_recursive>:
 800e8fe:	4770      	bx	lr

0800e900 <__swhatbuf_r>:
 800e900:	b570      	push	{r4, r5, r6, lr}
 800e902:	460e      	mov	r6, r1
 800e904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e908:	2900      	cmp	r1, #0
 800e90a:	b096      	sub	sp, #88	; 0x58
 800e90c:	4614      	mov	r4, r2
 800e90e:	461d      	mov	r5, r3
 800e910:	da08      	bge.n	800e924 <__swhatbuf_r+0x24>
 800e912:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e916:	2200      	movs	r2, #0
 800e918:	602a      	str	r2, [r5, #0]
 800e91a:	061a      	lsls	r2, r3, #24
 800e91c:	d410      	bmi.n	800e940 <__swhatbuf_r+0x40>
 800e91e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e922:	e00e      	b.n	800e942 <__swhatbuf_r+0x42>
 800e924:	466a      	mov	r2, sp
 800e926:	f000 f903 	bl	800eb30 <_fstat_r>
 800e92a:	2800      	cmp	r0, #0
 800e92c:	dbf1      	blt.n	800e912 <__swhatbuf_r+0x12>
 800e92e:	9a01      	ldr	r2, [sp, #4]
 800e930:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e934:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e938:	425a      	negs	r2, r3
 800e93a:	415a      	adcs	r2, r3
 800e93c:	602a      	str	r2, [r5, #0]
 800e93e:	e7ee      	b.n	800e91e <__swhatbuf_r+0x1e>
 800e940:	2340      	movs	r3, #64	; 0x40
 800e942:	2000      	movs	r0, #0
 800e944:	6023      	str	r3, [r4, #0]
 800e946:	b016      	add	sp, #88	; 0x58
 800e948:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e94c <__smakebuf_r>:
 800e94c:	898b      	ldrh	r3, [r1, #12]
 800e94e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e950:	079d      	lsls	r5, r3, #30
 800e952:	4606      	mov	r6, r0
 800e954:	460c      	mov	r4, r1
 800e956:	d507      	bpl.n	800e968 <__smakebuf_r+0x1c>
 800e958:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e95c:	6023      	str	r3, [r4, #0]
 800e95e:	6123      	str	r3, [r4, #16]
 800e960:	2301      	movs	r3, #1
 800e962:	6163      	str	r3, [r4, #20]
 800e964:	b002      	add	sp, #8
 800e966:	bd70      	pop	{r4, r5, r6, pc}
 800e968:	ab01      	add	r3, sp, #4
 800e96a:	466a      	mov	r2, sp
 800e96c:	f7ff ffc8 	bl	800e900 <__swhatbuf_r>
 800e970:	9900      	ldr	r1, [sp, #0]
 800e972:	4605      	mov	r5, r0
 800e974:	4630      	mov	r0, r6
 800e976:	f7ff f963 	bl	800dc40 <_malloc_r>
 800e97a:	b948      	cbnz	r0, 800e990 <__smakebuf_r+0x44>
 800e97c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e980:	059a      	lsls	r2, r3, #22
 800e982:	d4ef      	bmi.n	800e964 <__smakebuf_r+0x18>
 800e984:	f023 0303 	bic.w	r3, r3, #3
 800e988:	f043 0302 	orr.w	r3, r3, #2
 800e98c:	81a3      	strh	r3, [r4, #12]
 800e98e:	e7e3      	b.n	800e958 <__smakebuf_r+0xc>
 800e990:	4b0d      	ldr	r3, [pc, #52]	; (800e9c8 <__smakebuf_r+0x7c>)
 800e992:	62b3      	str	r3, [r6, #40]	; 0x28
 800e994:	89a3      	ldrh	r3, [r4, #12]
 800e996:	6020      	str	r0, [r4, #0]
 800e998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e99c:	81a3      	strh	r3, [r4, #12]
 800e99e:	9b00      	ldr	r3, [sp, #0]
 800e9a0:	6163      	str	r3, [r4, #20]
 800e9a2:	9b01      	ldr	r3, [sp, #4]
 800e9a4:	6120      	str	r0, [r4, #16]
 800e9a6:	b15b      	cbz	r3, 800e9c0 <__smakebuf_r+0x74>
 800e9a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9ac:	4630      	mov	r0, r6
 800e9ae:	f000 f8d1 	bl	800eb54 <_isatty_r>
 800e9b2:	b128      	cbz	r0, 800e9c0 <__smakebuf_r+0x74>
 800e9b4:	89a3      	ldrh	r3, [r4, #12]
 800e9b6:	f023 0303 	bic.w	r3, r3, #3
 800e9ba:	f043 0301 	orr.w	r3, r3, #1
 800e9be:	81a3      	strh	r3, [r4, #12]
 800e9c0:	89a0      	ldrh	r0, [r4, #12]
 800e9c2:	4305      	orrs	r5, r0
 800e9c4:	81a5      	strh	r5, [r4, #12]
 800e9c6:	e7cd      	b.n	800e964 <__smakebuf_r+0x18>
 800e9c8:	0800e759 	.word	0x0800e759

0800e9cc <_malloc_usable_size_r>:
 800e9cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9d0:	1f18      	subs	r0, r3, #4
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	bfbc      	itt	lt
 800e9d6:	580b      	ldrlt	r3, [r1, r0]
 800e9d8:	18c0      	addlt	r0, r0, r3
 800e9da:	4770      	bx	lr

0800e9dc <_raise_r>:
 800e9dc:	291f      	cmp	r1, #31
 800e9de:	b538      	push	{r3, r4, r5, lr}
 800e9e0:	4604      	mov	r4, r0
 800e9e2:	460d      	mov	r5, r1
 800e9e4:	d904      	bls.n	800e9f0 <_raise_r+0x14>
 800e9e6:	2316      	movs	r3, #22
 800e9e8:	6003      	str	r3, [r0, #0]
 800e9ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e9ee:	bd38      	pop	{r3, r4, r5, pc}
 800e9f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e9f2:	b112      	cbz	r2, 800e9fa <_raise_r+0x1e>
 800e9f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e9f8:	b94b      	cbnz	r3, 800ea0e <_raise_r+0x32>
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	f000 f830 	bl	800ea60 <_getpid_r>
 800ea00:	462a      	mov	r2, r5
 800ea02:	4601      	mov	r1, r0
 800ea04:	4620      	mov	r0, r4
 800ea06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea0a:	f000 b817 	b.w	800ea3c <_kill_r>
 800ea0e:	2b01      	cmp	r3, #1
 800ea10:	d00a      	beq.n	800ea28 <_raise_r+0x4c>
 800ea12:	1c59      	adds	r1, r3, #1
 800ea14:	d103      	bne.n	800ea1e <_raise_r+0x42>
 800ea16:	2316      	movs	r3, #22
 800ea18:	6003      	str	r3, [r0, #0]
 800ea1a:	2001      	movs	r0, #1
 800ea1c:	e7e7      	b.n	800e9ee <_raise_r+0x12>
 800ea1e:	2400      	movs	r4, #0
 800ea20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ea24:	4628      	mov	r0, r5
 800ea26:	4798      	blx	r3
 800ea28:	2000      	movs	r0, #0
 800ea2a:	e7e0      	b.n	800e9ee <_raise_r+0x12>

0800ea2c <raise>:
 800ea2c:	4b02      	ldr	r3, [pc, #8]	; (800ea38 <raise+0xc>)
 800ea2e:	4601      	mov	r1, r0
 800ea30:	6818      	ldr	r0, [r3, #0]
 800ea32:	f7ff bfd3 	b.w	800e9dc <_raise_r>
 800ea36:	bf00      	nop
 800ea38:	200000fc 	.word	0x200000fc

0800ea3c <_kill_r>:
 800ea3c:	b538      	push	{r3, r4, r5, lr}
 800ea3e:	4d07      	ldr	r5, [pc, #28]	; (800ea5c <_kill_r+0x20>)
 800ea40:	2300      	movs	r3, #0
 800ea42:	4604      	mov	r4, r0
 800ea44:	4608      	mov	r0, r1
 800ea46:	4611      	mov	r1, r2
 800ea48:	602b      	str	r3, [r5, #0]
 800ea4a:	f7f3 fa19 	bl	8001e80 <_kill>
 800ea4e:	1c43      	adds	r3, r0, #1
 800ea50:	d102      	bne.n	800ea58 <_kill_r+0x1c>
 800ea52:	682b      	ldr	r3, [r5, #0]
 800ea54:	b103      	cbz	r3, 800ea58 <_kill_r+0x1c>
 800ea56:	6023      	str	r3, [r4, #0]
 800ea58:	bd38      	pop	{r3, r4, r5, pc}
 800ea5a:	bf00      	nop
 800ea5c:	2000232c 	.word	0x2000232c

0800ea60 <_getpid_r>:
 800ea60:	f7f3 ba06 	b.w	8001e70 <_getpid>

0800ea64 <__sread>:
 800ea64:	b510      	push	{r4, lr}
 800ea66:	460c      	mov	r4, r1
 800ea68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea6c:	f000 f894 	bl	800eb98 <_read_r>
 800ea70:	2800      	cmp	r0, #0
 800ea72:	bfab      	itete	ge
 800ea74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ea76:	89a3      	ldrhlt	r3, [r4, #12]
 800ea78:	181b      	addge	r3, r3, r0
 800ea7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ea7e:	bfac      	ite	ge
 800ea80:	6563      	strge	r3, [r4, #84]	; 0x54
 800ea82:	81a3      	strhlt	r3, [r4, #12]
 800ea84:	bd10      	pop	{r4, pc}

0800ea86 <__swrite>:
 800ea86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea8a:	461f      	mov	r7, r3
 800ea8c:	898b      	ldrh	r3, [r1, #12]
 800ea8e:	05db      	lsls	r3, r3, #23
 800ea90:	4605      	mov	r5, r0
 800ea92:	460c      	mov	r4, r1
 800ea94:	4616      	mov	r6, r2
 800ea96:	d505      	bpl.n	800eaa4 <__swrite+0x1e>
 800ea98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea9c:	2302      	movs	r3, #2
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	f000 f868 	bl	800eb74 <_lseek_r>
 800eaa4:	89a3      	ldrh	r3, [r4, #12]
 800eaa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eaaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eaae:	81a3      	strh	r3, [r4, #12]
 800eab0:	4632      	mov	r2, r6
 800eab2:	463b      	mov	r3, r7
 800eab4:	4628      	mov	r0, r5
 800eab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eaba:	f000 b817 	b.w	800eaec <_write_r>

0800eabe <__sseek>:
 800eabe:	b510      	push	{r4, lr}
 800eac0:	460c      	mov	r4, r1
 800eac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eac6:	f000 f855 	bl	800eb74 <_lseek_r>
 800eaca:	1c43      	adds	r3, r0, #1
 800eacc:	89a3      	ldrh	r3, [r4, #12]
 800eace:	bf15      	itete	ne
 800ead0:	6560      	strne	r0, [r4, #84]	; 0x54
 800ead2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ead6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eada:	81a3      	strheq	r3, [r4, #12]
 800eadc:	bf18      	it	ne
 800eade:	81a3      	strhne	r3, [r4, #12]
 800eae0:	bd10      	pop	{r4, pc}

0800eae2 <__sclose>:
 800eae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eae6:	f000 b813 	b.w	800eb10 <_close_r>
	...

0800eaec <_write_r>:
 800eaec:	b538      	push	{r3, r4, r5, lr}
 800eaee:	4d07      	ldr	r5, [pc, #28]	; (800eb0c <_write_r+0x20>)
 800eaf0:	4604      	mov	r4, r0
 800eaf2:	4608      	mov	r0, r1
 800eaf4:	4611      	mov	r1, r2
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	602a      	str	r2, [r5, #0]
 800eafa:	461a      	mov	r2, r3
 800eafc:	f7f3 f9f7 	bl	8001eee <_write>
 800eb00:	1c43      	adds	r3, r0, #1
 800eb02:	d102      	bne.n	800eb0a <_write_r+0x1e>
 800eb04:	682b      	ldr	r3, [r5, #0]
 800eb06:	b103      	cbz	r3, 800eb0a <_write_r+0x1e>
 800eb08:	6023      	str	r3, [r4, #0]
 800eb0a:	bd38      	pop	{r3, r4, r5, pc}
 800eb0c:	2000232c 	.word	0x2000232c

0800eb10 <_close_r>:
 800eb10:	b538      	push	{r3, r4, r5, lr}
 800eb12:	4d06      	ldr	r5, [pc, #24]	; (800eb2c <_close_r+0x1c>)
 800eb14:	2300      	movs	r3, #0
 800eb16:	4604      	mov	r4, r0
 800eb18:	4608      	mov	r0, r1
 800eb1a:	602b      	str	r3, [r5, #0]
 800eb1c:	f7f3 fa03 	bl	8001f26 <_close>
 800eb20:	1c43      	adds	r3, r0, #1
 800eb22:	d102      	bne.n	800eb2a <_close_r+0x1a>
 800eb24:	682b      	ldr	r3, [r5, #0]
 800eb26:	b103      	cbz	r3, 800eb2a <_close_r+0x1a>
 800eb28:	6023      	str	r3, [r4, #0]
 800eb2a:	bd38      	pop	{r3, r4, r5, pc}
 800eb2c:	2000232c 	.word	0x2000232c

0800eb30 <_fstat_r>:
 800eb30:	b538      	push	{r3, r4, r5, lr}
 800eb32:	4d07      	ldr	r5, [pc, #28]	; (800eb50 <_fstat_r+0x20>)
 800eb34:	2300      	movs	r3, #0
 800eb36:	4604      	mov	r4, r0
 800eb38:	4608      	mov	r0, r1
 800eb3a:	4611      	mov	r1, r2
 800eb3c:	602b      	str	r3, [r5, #0]
 800eb3e:	f7f3 f9fe 	bl	8001f3e <_fstat>
 800eb42:	1c43      	adds	r3, r0, #1
 800eb44:	d102      	bne.n	800eb4c <_fstat_r+0x1c>
 800eb46:	682b      	ldr	r3, [r5, #0]
 800eb48:	b103      	cbz	r3, 800eb4c <_fstat_r+0x1c>
 800eb4a:	6023      	str	r3, [r4, #0]
 800eb4c:	bd38      	pop	{r3, r4, r5, pc}
 800eb4e:	bf00      	nop
 800eb50:	2000232c 	.word	0x2000232c

0800eb54 <_isatty_r>:
 800eb54:	b538      	push	{r3, r4, r5, lr}
 800eb56:	4d06      	ldr	r5, [pc, #24]	; (800eb70 <_isatty_r+0x1c>)
 800eb58:	2300      	movs	r3, #0
 800eb5a:	4604      	mov	r4, r0
 800eb5c:	4608      	mov	r0, r1
 800eb5e:	602b      	str	r3, [r5, #0]
 800eb60:	f7f3 f9fd 	bl	8001f5e <_isatty>
 800eb64:	1c43      	adds	r3, r0, #1
 800eb66:	d102      	bne.n	800eb6e <_isatty_r+0x1a>
 800eb68:	682b      	ldr	r3, [r5, #0]
 800eb6a:	b103      	cbz	r3, 800eb6e <_isatty_r+0x1a>
 800eb6c:	6023      	str	r3, [r4, #0]
 800eb6e:	bd38      	pop	{r3, r4, r5, pc}
 800eb70:	2000232c 	.word	0x2000232c

0800eb74 <_lseek_r>:
 800eb74:	b538      	push	{r3, r4, r5, lr}
 800eb76:	4d07      	ldr	r5, [pc, #28]	; (800eb94 <_lseek_r+0x20>)
 800eb78:	4604      	mov	r4, r0
 800eb7a:	4608      	mov	r0, r1
 800eb7c:	4611      	mov	r1, r2
 800eb7e:	2200      	movs	r2, #0
 800eb80:	602a      	str	r2, [r5, #0]
 800eb82:	461a      	mov	r2, r3
 800eb84:	f7f3 f9f6 	bl	8001f74 <_lseek>
 800eb88:	1c43      	adds	r3, r0, #1
 800eb8a:	d102      	bne.n	800eb92 <_lseek_r+0x1e>
 800eb8c:	682b      	ldr	r3, [r5, #0]
 800eb8e:	b103      	cbz	r3, 800eb92 <_lseek_r+0x1e>
 800eb90:	6023      	str	r3, [r4, #0]
 800eb92:	bd38      	pop	{r3, r4, r5, pc}
 800eb94:	2000232c 	.word	0x2000232c

0800eb98 <_read_r>:
 800eb98:	b538      	push	{r3, r4, r5, lr}
 800eb9a:	4d07      	ldr	r5, [pc, #28]	; (800ebb8 <_read_r+0x20>)
 800eb9c:	4604      	mov	r4, r0
 800eb9e:	4608      	mov	r0, r1
 800eba0:	4611      	mov	r1, r2
 800eba2:	2200      	movs	r2, #0
 800eba4:	602a      	str	r2, [r5, #0]
 800eba6:	461a      	mov	r2, r3
 800eba8:	f7f3 f984 	bl	8001eb4 <_read>
 800ebac:	1c43      	adds	r3, r0, #1
 800ebae:	d102      	bne.n	800ebb6 <_read_r+0x1e>
 800ebb0:	682b      	ldr	r3, [r5, #0]
 800ebb2:	b103      	cbz	r3, 800ebb6 <_read_r+0x1e>
 800ebb4:	6023      	str	r3, [r4, #0]
 800ebb6:	bd38      	pop	{r3, r4, r5, pc}
 800ebb8:	2000232c 	.word	0x2000232c

0800ebbc <_init>:
 800ebbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebbe:	bf00      	nop
 800ebc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebc2:	bc08      	pop	{r3}
 800ebc4:	469e      	mov	lr, r3
 800ebc6:	4770      	bx	lr

0800ebc8 <_fini>:
 800ebc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebca:	bf00      	nop
 800ebcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebce:	bc08      	pop	{r3}
 800ebd0:	469e      	mov	lr, r3
 800ebd2:	4770      	bx	lr
