
asvcargo_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  0800de20  0800de20  0001de20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e25c  0800e25c  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e25c  0800e25c  0001e25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e264  0800e264  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e264  0800e264  0001e264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e268  0800e268  0001e268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800e26c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fd8  200002cc  0800e538  000202cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022a4  0800e538  000222a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d9d1  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046b7  00000000  00000000  0003dccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001828  00000000  00000000  00042388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001630  00000000  00000000  00043bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d208  00000000  00000000  000451e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fead  00000000  00000000  000623e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0622  00000000  00000000  00082295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001228b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007484  00000000  00000000  00122908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800de04 	.word	0x0800de04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	0800de04 	.word	0x0800de04

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ece:	4b21      	ldr	r3, [pc, #132]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000ed0:	4a21      	ldr	r2, [pc, #132]	; (8000f58 <MX_ADC1_Init+0x9c>)
 8000ed2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eda:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ee0:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ef4:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000efc:	4a17      	ldr	r2, [pc, #92]	; (8000f5c <MX_ADC1_Init+0xa0>)
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f1a:	480e      	ldr	r0, [pc, #56]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000f1c:	f001 fc0e 	bl	800273c <HAL_ADC_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f26:	f000 fa8b 	bl	8001440 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f36:	463b      	mov	r3, r7
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4806      	ldr	r0, [pc, #24]	; (8000f54 <MX_ADC1_Init+0x98>)
 8000f3c:	f001 fc42 	bl	80027c4 <HAL_ADC_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f46:	f000 fa7b 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200002e8 	.word	0x200002e8
 8000f58:	40012000 	.word	0x40012000
 8000f5c:	0f000001 	.word	0x0f000001

08000f60 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a17      	ldr	r2, [pc, #92]	; (8000fdc <HAL_ADC_MspInit+0x7c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d127      	bne.n	8000fd2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <HAL_ADC_MspInit+0x80>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a15      	ldr	r2, [pc, #84]	; (8000fe0 <HAL_ADC_MspInit+0x80>)
 8000f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <HAL_ADC_MspInit+0x80>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <HAL_ADC_MspInit+0x80>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <HAL_ADC_MspInit+0x80>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <HAL_ADC_MspInit+0x80>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <HAL_ADC_MspInit+0x84>)
 8000fce:	f002 fa99 	bl	8003504 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	; 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40012000 	.word	0x40012000
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40020000 	.word	0x40020000

08000fe8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <MX_DMA_Init+0x3c>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <MX_DMA_Init+0x3c>)
 8000ff8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_DMA_Init+0x3c>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	203a      	movs	r0, #58	; 0x3a
 8001010:	f001 fed1 	bl	8002db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001014:	203a      	movs	r0, #58	; 0x3a
 8001016:	f001 feea 	bl	8002dee <HAL_NVIC_EnableIRQ>

}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800

08001028 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	4b34      	ldr	r3, [pc, #208]	; (8001114 <MX_GPIO_Init+0xec>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a33      	ldr	r2, [pc, #204]	; (8001114 <MX_GPIO_Init+0xec>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b31      	ldr	r3, [pc, #196]	; (8001114 <MX_GPIO_Init+0xec>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <MX_GPIO_Init+0xec>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a2c      	ldr	r2, [pc, #176]	; (8001114 <MX_GPIO_Init+0xec>)
 8001064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <MX_GPIO_Init+0xec>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	4b26      	ldr	r3, [pc, #152]	; (8001114 <MX_GPIO_Init+0xec>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a25      	ldr	r2, [pc, #148]	; (8001114 <MX_GPIO_Init+0xec>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b23      	ldr	r3, [pc, #140]	; (8001114 <MX_GPIO_Init+0xec>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <MX_GPIO_Init+0xec>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a1e      	ldr	r2, [pc, #120]	; (8001114 <MX_GPIO_Init+0xec>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <MX_GPIO_Init+0xec>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15
 80010ae:	2200      	movs	r2, #0
 80010b0:	f24c 2126 	movw	r1, #49702	; 0xc226
 80010b4:	4818      	ldr	r0, [pc, #96]	; (8001118 <MX_GPIO_Init+0xf0>)
 80010b6:	f002 fba9 	bl	800380c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010ba:	2301      	movs	r3, #1
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	4812      	ldr	r0, [pc, #72]	; (8001118 <MX_GPIO_Init+0xf0>)
 80010d0:	f002 fa18 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB15
                           PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15
 80010d4:	f24c 2326 	movw	r3, #49702	; 0xc226
 80010d8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	480a      	ldr	r0, [pc, #40]	; (8001118 <MX_GPIO_Init+0xf0>)
 80010ee:	f002 fa09 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010f2:	2308      	movs	r3, #8
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <MX_GPIO_Init+0xf0>)
 8001106:	f002 f9fd 	bl	8003504 <HAL_GPIO_Init>

}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	; 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800
 8001118:	40020400 	.word	0x40020400

0800111c <RCUpdate>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void RCUpdate(){
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
	if(rc_data.rawdata[7] < 1000)	rc.autonomous_mode = ASV_AUTO;
 8001120:	4b4c      	ldr	r3, [pc, #304]	; (8001254 <RCUpdate+0x138>)
 8001122:	89db      	ldrh	r3, [r3, #14]
 8001124:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001128:	d202      	bcs.n	8001130 <RCUpdate+0x14>
 800112a:	4b4b      	ldr	r3, [pc, #300]	; (8001258 <RCUpdate+0x13c>)
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]
	if(rc_data.rawdata[7] > 1000)	rc.autonomous_mode = ASV_MANUAL;
 8001130:	4b48      	ldr	r3, [pc, #288]	; (8001254 <RCUpdate+0x138>)
 8001132:	89db      	ldrh	r3, [r3, #14]
 8001134:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001138:	d902      	bls.n	8001140 <RCUpdate+0x24>
 800113a:	4b47      	ldr	r3, [pc, #284]	; (8001258 <RCUpdate+0x13c>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
	if(rc_data.rawdata[6] < 1000)	rc.fan_mode = FAN_ON;
 8001140:	4b44      	ldr	r3, [pc, #272]	; (8001254 <RCUpdate+0x138>)
 8001142:	899b      	ldrh	r3, [r3, #12]
 8001144:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001148:	d202      	bcs.n	8001150 <RCUpdate+0x34>
 800114a:	4b43      	ldr	r3, [pc, #268]	; (8001258 <RCUpdate+0x13c>)
 800114c:	2201      	movs	r2, #1
 800114e:	709a      	strb	r2, [r3, #2]
	if(rc_data.rawdata[6] > 1000)	rc.fan_mode = FAN_OFF;
 8001150:	4b40      	ldr	r3, [pc, #256]	; (8001254 <RCUpdate+0x138>)
 8001152:	899b      	ldrh	r3, [r3, #12]
 8001154:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001158:	d902      	bls.n	8001160 <RCUpdate+0x44>
 800115a:	4b3f      	ldr	r3, [pc, #252]	; (8001258 <RCUpdate+0x13c>)
 800115c:	2200      	movs	r2, #0
 800115e:	709a      	strb	r2, [r3, #2]
	if(rc_data.rawdata[5] < 1000)	rc.actuator_mode = ACTUATOR_ENABLE;
 8001160:	4b3c      	ldr	r3, [pc, #240]	; (8001254 <RCUpdate+0x138>)
 8001162:	895b      	ldrh	r3, [r3, #10]
 8001164:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001168:	d202      	bcs.n	8001170 <RCUpdate+0x54>
 800116a:	4b3b      	ldr	r3, [pc, #236]	; (8001258 <RCUpdate+0x13c>)
 800116c:	2201      	movs	r2, #1
 800116e:	705a      	strb	r2, [r3, #1]
	if(rc_data.rawdata[5] > 1000)	rc.actuator_mode = ACTUATOR_DISABLE;
 8001170:	4b38      	ldr	r3, [pc, #224]	; (8001254 <RCUpdate+0x138>)
 8001172:	895b      	ldrh	r3, [r3, #10]
 8001174:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001178:	d902      	bls.n	8001180 <RCUpdate+0x64>
 800117a:	4b37      	ldr	r3, [pc, #220]	; (8001258 <RCUpdate+0x13c>)
 800117c:	2200      	movs	r2, #0
 800117e:	705a      	strb	r2, [r3, #1]

	rc.stk_y = rc_data.rawdata[1];
 8001180:	4b34      	ldr	r3, [pc, #208]	; (8001254 <RCUpdate+0x138>)
 8001182:	885b      	ldrh	r3, [r3, #2]
 8001184:	ee07 3a90 	vmov	s15, r3
 8001188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800118c:	4b32      	ldr	r3, [pc, #200]	; (8001258 <RCUpdate+0x13c>)
 800118e:	edc3 7a02 	vstr	s15, [r3, #8]
	rc.stk_x = rc_data.rawdata[0];
 8001192:	4b30      	ldr	r3, [pc, #192]	; (8001254 <RCUpdate+0x138>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	ee07 3a90 	vmov	s15, r3
 800119a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800119e:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <RCUpdate+0x13c>)
 80011a0:	edc3 7a01 	vstr	s15, [r3, #4]

	rc.stk_y = (1035 - rc.stk_y)/ 695.0;
 80011a4:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <RCUpdate+0x13c>)
 80011a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80011aa:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800125c <RCUpdate+0x140>
 80011ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011b2:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8001260 <RCUpdate+0x144>
 80011b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ba:	4b27      	ldr	r3, [pc, #156]	; (8001258 <RCUpdate+0x13c>)
 80011bc:	edc3 7a02 	vstr	s15, [r3, #8]
	rc.stk_x = (1000 - rc.stk_x)/ 693.0;
 80011c0:	4b25      	ldr	r3, [pc, #148]	; (8001258 <RCUpdate+0x13c>)
 80011c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80011c6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001264 <RCUpdate+0x148>
 80011ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001268 <RCUpdate+0x14c>
 80011d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <RCUpdate+0x13c>)
 80011d8:	edc3 7a01 	vstr	s15, [r3, #4]

	if(rc.stk_y > 1) rc.stk_y = 1;
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <RCUpdate+0x13c>)
 80011de:	edd3 7a02 	vldr	s15, [r3, #8]
 80011e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ee:	dd03      	ble.n	80011f8 <RCUpdate+0xdc>
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <RCUpdate+0x13c>)
 80011f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80011f6:	609a      	str	r2, [r3, #8]
	if(rc.stk_y < -1) rc.stk_y = -1;
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <RCUpdate+0x13c>)
 80011fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80011fe:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120a:	d502      	bpl.n	8001212 <RCUpdate+0xf6>
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <RCUpdate+0x13c>)
 800120e:	4a17      	ldr	r2, [pc, #92]	; (800126c <RCUpdate+0x150>)
 8001210:	609a      	str	r2, [r3, #8]
	if(rc.stk_x > 1) rc.stk_x = 1;
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <RCUpdate+0x13c>)
 8001214:	edd3 7a01 	vldr	s15, [r3, #4]
 8001218:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800121c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001224:	dd03      	ble.n	800122e <RCUpdate+0x112>
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <RCUpdate+0x13c>)
 8001228:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800122c:	605a      	str	r2, [r3, #4]
	if(rc.stk_x < -1) rc.stk_x = -1;
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <RCUpdate+0x13c>)
 8001230:	edd3 7a01 	vldr	s15, [r3, #4]
 8001234:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800123c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001240:	d400      	bmi.n	8001244 <RCUpdate+0x128>
}
 8001242:	e002      	b.n	800124a <RCUpdate+0x12e>
	if(rc.stk_x < -1) rc.stk_x = -1;
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <RCUpdate+0x13c>)
 8001246:	4a09      	ldr	r2, [pc, #36]	; (800126c <RCUpdate+0x150>)
 8001248:	605a      	str	r2, [r3, #4]
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	20000388 	.word	0x20000388
 8001258:	20000374 	.word	0x20000374
 800125c:	44816000 	.word	0x44816000
 8001260:	442dc000 	.word	0x442dc000
 8001264:	447a0000 	.word	0x447a0000
 8001268:	442d4000 	.word	0x442d4000
 800126c:	bf800000 	.word	0xbf800000

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001274:	f001 f9cc 	bl	8002610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001278:	f000 f840 	bl	80012fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127c:	f7ff fed4 	bl	8001028 <MX_GPIO_Init>
  MX_DMA_Init();
 8001280:	f7ff feb2 	bl	8000fe8 <MX_DMA_Init>
  MX_SPI1_Init();
 8001284:	f000 faea 	bl	800185c <MX_SPI1_Init>
  MX_TIM1_Init();
 8001288:	f000 fdb4 	bl	8001df4 <MX_TIM1_Init>
  MX_TIM3_Init();
 800128c:	f000 fe62 	bl	8001f54 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001290:	f000 feba 	bl	8002008 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001294:	f001 f88a 	bl	80023ac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001298:	f001 f8b4 	bl	8002404 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800129c:	f7ff fe0e 	bl	8000ebc <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80012a0:	f009 fada 	bl	800a858 <MX_USB_DEVICE_Init>
  MX_TIM10_Init();
 80012a4:	f000 ff0a 	bl	80020bc <MX_TIM10_Init>
  MX_TIM2_Init();
 80012a8:	f000 fdfc 	bl	8001ea4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <main+0x70>)
 80012ae:	f004 fa73 	bl	8005798 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart1, sbus_buf, sizeof(sbus_buf));
 80012b2:	2219      	movs	r2, #25
 80012b4:	490b      	ldr	r1, [pc, #44]	; (80012e4 <main+0x74>)
 80012b6:	480c      	ldr	r0, [pc, #48]	; (80012e8 <main+0x78>)
 80012b8:	f005 fa17 	bl	80066ea <HAL_UART_Receive_DMA>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //STEER
 80012bc:	2100      	movs	r1, #0
 80012be:	480b      	ldr	r0, [pc, #44]	; (80012ec <main+0x7c>)
 80012c0:	f004 fb1c 	bl	80058fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //THRUST
 80012c4:	2108      	movs	r1, #8
 80012c6:	480a      	ldr	r0, [pc, #40]	; (80012f0 <main+0x80>)
 80012c8:	f004 fb18 	bl	80058fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //THRUST
 80012cc:	2100      	movs	r1, #0
 80012ce:	4809      	ldr	r0, [pc, #36]	; (80012f4 <main+0x84>)
 80012d0:	f004 fb14 	bl	80058fc <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 80012d4:	213c      	movs	r1, #60	; 0x3c
 80012d6:	4808      	ldr	r0, [pc, #32]	; (80012f8 <main+0x88>)
 80012d8:	f004 fc66 	bl	8005ba8 <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <main+0x6c>
 80012de:	bf00      	nop
 80012e0:	20000554 	.word	0x20000554
 80012e4:	20000350 	.word	0x20000350
 80012e8:	2000059c 	.word	0x2000059c
 80012ec:	200004c4 	.word	0x200004c4
 80012f0:	2000050c 	.word	0x2000050c
 80012f4:	2000047c 	.word	0x2000047c
 80012f8:	20000434 	.word	0x20000434

080012fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b094      	sub	sp, #80	; 0x50
 8001300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001302:	f107 0320 	add.w	r3, r7, #32
 8001306:	2230      	movs	r2, #48	; 0x30
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f009 ffde 	bl	800b2cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001320:	2300      	movs	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <SystemClock_Config+0xd4>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	4a29      	ldr	r2, [pc, #164]	; (80013d0 <SystemClock_Config+0xd4>)
 800132a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132e:	6413      	str	r3, [r2, #64]	; 0x40
 8001330:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <SystemClock_Config+0xd4>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800133c:	2300      	movs	r3, #0
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <SystemClock_Config+0xd8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001348:	4a22      	ldr	r2, [pc, #136]	; (80013d4 <SystemClock_Config+0xd8>)
 800134a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <SystemClock_Config+0xd8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800135c:	2303      	movs	r3, #3
 800135e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001360:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001366:	2301      	movs	r3, #1
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800136a:	2310      	movs	r3, #16
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136e:	2302      	movs	r3, #2
 8001370:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001372:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001376:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001378:	230f      	movs	r3, #15
 800137a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800137c:	2390      	movs	r3, #144	; 0x90
 800137e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001380:	2302      	movs	r3, #2
 8001382:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001384:	2305      	movs	r3, #5
 8001386:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001388:	f107 0320 	add.w	r3, r7, #32
 800138c:	4618      	mov	r0, r3
 800138e:	f003 fcd3 	bl	8004d38 <HAL_RCC_OscConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001398:	f000 f852 	bl	8001440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139c:	230f      	movs	r3, #15
 800139e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f003 ff36 	bl	8005228 <HAL_RCC_ClockConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80013c2:	f000 f83d 	bl	8001440 <Error_Handler>
  }
}
 80013c6:	bf00      	nop
 80013c8:	3750      	adds	r7, #80	; 0x50
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40007000 	.word	0x40007000

080013d8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a05      	ldr	r2, [pc, #20]	; (80013fc <HAL_UART_RxCpltCallback+0x24>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d103      	bne.n	80013f2 <HAL_UART_RxCpltCallback+0x1a>
		sbus_decoder_get_buf(sbus_buf, sizeof(sbus_buf));
 80013ea:	2119      	movs	r1, #25
 80013ec:	4804      	ldr	r0, [pc, #16]	; (8001400 <HAL_UART_RxCpltCallback+0x28>)
 80013ee:	f000 fa19 	bl	8001824 <sbus_decoder_get_buf>
	}
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40011000 	.word	0x40011000
 8001400:	20000350 	.word	0x20000350

08001404 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	if(htim->Instance){
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d009      	beq.n	8001428 <HAL_TIM_IC_CaptureCallback+0x24>
		counter = __HAL_TIM_GET_COUNTER(&htim1);
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <HAL_TIM_IC_CaptureCallback+0x30>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	4a07      	ldr	r2, [pc, #28]	; (8001438 <HAL_TIM_IC_CaptureCallback+0x34>)
 800141c:	6013      	str	r3, [r2, #0]
		enc_count = (int16_t)counter;
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_TIM_IC_CaptureCallback+0x34>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	b21a      	sxth	r2, r3
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <HAL_TIM_IC_CaptureCallback+0x38>)
 8001426:	801a      	strh	r2, [r3, #0]
	}
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	20000434 	.word	0x20000434
 8001438:	2000036c 	.word	0x2000036c
 800143c:	20000370 	.word	0x20000370

08001440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001444:	b672      	cpsid	i
}
 8001446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001448:	e7fe      	b.n	8001448 <Error_Handler+0x8>
	...

0800144c <sbus_decoder_get_frame>:
#include <stdio.h>

rc_data_t rc_data;

static void sbus_decoder_get_frame(uint8_t* buf)        //传入一帧数据，解析成各个通道数据，一帧长度必然是25字节
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
    rc_data.rawdata[0]  = ((buf[1]| buf[2]<<8)                 & 0x07FF);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3301      	adds	r3, #1
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b21a      	sxth	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3302      	adds	r3, #2
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	b21b      	sxth	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b21b      	sxth	r3, r3
 800146a:	b29b      	uxth	r3, r3
 800146c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001470:	b29a      	uxth	r2, r3
 8001472:	4b9c      	ldr	r3, [pc, #624]	; (80016e4 <sbus_decoder_get_frame+0x298>)
 8001474:	801a      	strh	r2, [r3, #0]
    rc_data.rawdata[1]  = ((buf[2]>>3 |buf[3]<<5)              & 0x07FF);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3302      	adds	r3, #2
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	08db      	lsrs	r3, r3, #3
 800147e:	b2db      	uxtb	r3, r3
 8001480:	b21a      	sxth	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3303      	adds	r3, #3
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	015b      	lsls	r3, r3, #5
 800148a:	b21b      	sxth	r3, r3
 800148c:	4313      	orrs	r3, r2
 800148e:	b21b      	sxth	r3, r3
 8001490:	b29b      	uxth	r3, r3
 8001492:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001496:	b29a      	uxth	r2, r3
 8001498:	4b92      	ldr	r3, [pc, #584]	; (80016e4 <sbus_decoder_get_frame+0x298>)
 800149a:	805a      	strh	r2, [r3, #2]
    rc_data.rawdata[2]  = ((buf[3]>>6 |buf[4]<<2 |buf[5]<<10)  & 0x07FF);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3303      	adds	r3, #3
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	099b      	lsrs	r3, r3, #6
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	b21a      	sxth	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3304      	adds	r3, #4
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	4313      	orrs	r3, r2
 80014b4:	b21a      	sxth	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3305      	adds	r3, #5
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	029b      	lsls	r3, r3, #10
 80014be:	b21b      	sxth	r3, r3
 80014c0:	4313      	orrs	r3, r2
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	4b85      	ldr	r3, [pc, #532]	; (80016e4 <sbus_decoder_get_frame+0x298>)
 80014ce:	809a      	strh	r2, [r3, #4]
    rc_data.rawdata[3]  = ((buf[5]>>1 |buf[6]<<7)              & 0x07FF);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3305      	adds	r3, #5
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	085b      	lsrs	r3, r3, #1
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	b21a      	sxth	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3306      	adds	r3, #6
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	01db      	lsls	r3, r3, #7
 80014e4:	b21b      	sxth	r3, r3
 80014e6:	4313      	orrs	r3, r2
 80014e8:	b21b      	sxth	r3, r3
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	4b7c      	ldr	r3, [pc, #496]	; (80016e4 <sbus_decoder_get_frame+0x298>)
 80014f4:	80da      	strh	r2, [r3, #6]
    rc_data.rawdata[4]  = ((buf[6]>>4 |buf[7]<<4)              & 0x07FF);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3306      	adds	r3, #6
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	b21a      	sxth	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3307      	adds	r3, #7
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	b21b      	sxth	r3, r3
 800150c:	4313      	orrs	r3, r2
 800150e:	b21b      	sxth	r3, r3
 8001510:	b29b      	uxth	r3, r3
 8001512:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001516:	b29a      	uxth	r2, r3
 8001518:	4b72      	ldr	r3, [pc, #456]	; (80016e4 <sbus_decoder_get_frame+0x298>)
 800151a:	811a      	strh	r2, [r3, #8]
    rc_data.rawdata[5]  = ((buf[7]>>7 |buf[8]<<1 |buf[9]<<9)   & 0x07FF);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3307      	adds	r3, #7
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	09db      	lsrs	r3, r3, #7
 8001524:	b2db      	uxtb	r3, r3
 8001526:	b21a      	sxth	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3308      	adds	r3, #8
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	b21b      	sxth	r3, r3
 8001532:	4313      	orrs	r3, r2
 8001534:	b21a      	sxth	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3309      	adds	r3, #9
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	025b      	lsls	r3, r3, #9
 800153e:	b21b      	sxth	r3, r3
 8001540:	4313      	orrs	r3, r2
 8001542:	b21b      	sxth	r3, r3
 8001544:	b29b      	uxth	r3, r3
 8001546:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800154a:	b29a      	uxth	r2, r3
 800154c:	4b65      	ldr	r3, [pc, #404]	; (80016e4 <sbus_decoder_get_frame+0x298>)
 800154e:	815a      	strh	r2, [r3, #10]
    rc_data.rawdata[6]  = ((buf[9]>>2 |buf[10]<<6)             & 0x07FF);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3309      	adds	r3, #9
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	089b      	lsrs	r3, r3, #2
 8001558:	b2db      	uxtb	r3, r3
 800155a:	b21a      	sxth	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	330a      	adds	r3, #10
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	019b      	lsls	r3, r3, #6
 8001564:	b21b      	sxth	r3, r3
 8001566:	4313      	orrs	r3, r2
 8001568:	b21b      	sxth	r3, r3
 800156a:	b29b      	uxth	r3, r3
 800156c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001570:	b29a      	uxth	r2, r3
 8001572:	4b5c      	ldr	r3, [pc, #368]	; (80016e4 <sbus_decoder_get_frame+0x298>)
 8001574:	819a      	strh	r2, [r3, #12]
    rc_data.rawdata[7]  = ((buf[10]>>5|buf[11]<<3)             & 0x07FF);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	330a      	adds	r3, #10
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	095b      	lsrs	r3, r3, #5
 800157e:	b2db      	uxtb	r3, r3
 8001580:	b21a      	sxth	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	330b      	adds	r3, #11
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	b21b      	sxth	r3, r3
 800158c:	4313      	orrs	r3, r2
 800158e:	b21b      	sxth	r3, r3
 8001590:	b29b      	uxth	r3, r3
 8001592:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001596:	b29a      	uxth	r2, r3
 8001598:	4b52      	ldr	r3, [pc, #328]	; (80016e4 <sbus_decoder_get_frame+0x298>)
 800159a:	81da      	strh	r2, [r3, #14]
    rc_data.rawdata[8]  = ((buf[12]   |buf[13]<<8)             & 0x07FF);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	330c      	adds	r3, #12
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	330d      	adds	r3, #13
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <sbus_decoder_get_frame+0x298>)
 80015bc:	821a      	strh	r2, [r3, #16]
    rc_data.rawdata[9]  = ((buf[13]>>3|buf[14]<<5)             & 0x07FF);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	330d      	adds	r3, #13
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	08db      	lsrs	r3, r3, #3
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	330e      	adds	r3, #14
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	015b      	lsls	r3, r3, #5
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	b29b      	uxth	r3, r3
 80015da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015de:	b29a      	uxth	r2, r3
 80015e0:	4b40      	ldr	r3, [pc, #256]	; (80016e4 <sbus_decoder_get_frame+0x298>)
 80015e2:	825a      	strh	r2, [r3, #18]
    rc_data.rawdata[10] = ((buf[14]>>6|buf[15]<<2|buf[16]<<10) & 0x07FF);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	330e      	adds	r3, #14
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	099b      	lsrs	r3, r3, #6
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	330f      	adds	r3, #15
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3310      	adds	r3, #16
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	029b      	lsls	r3, r3, #10
 8001606:	b21b      	sxth	r3, r3
 8001608:	4313      	orrs	r3, r2
 800160a:	b21b      	sxth	r3, r3
 800160c:	b29b      	uxth	r3, r3
 800160e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001612:	b29a      	uxth	r2, r3
 8001614:	4b33      	ldr	r3, [pc, #204]	; (80016e4 <sbus_decoder_get_frame+0x298>)
 8001616:	829a      	strh	r2, [r3, #20]
    rc_data.rawdata[11] = ((buf[16]>>1|buf[17]<<7)             & 0x07FF);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3310      	adds	r3, #16
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	085b      	lsrs	r3, r3, #1
 8001620:	b2db      	uxtb	r3, r3
 8001622:	b21a      	sxth	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3311      	adds	r3, #17
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	01db      	lsls	r3, r3, #7
 800162c:	b21b      	sxth	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	b21b      	sxth	r3, r3
 8001632:	b29b      	uxth	r3, r3
 8001634:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001638:	b29a      	uxth	r2, r3
 800163a:	4b2a      	ldr	r3, [pc, #168]	; (80016e4 <sbus_decoder_get_frame+0x298>)
 800163c:	82da      	strh	r2, [r3, #22]
    rc_data.rawdata[12] = ((buf[17]>>4|buf[18]<<4)             & 0x07FF);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3311      	adds	r3, #17
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	b2db      	uxtb	r3, r3
 8001648:	b21a      	sxth	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3312      	adds	r3, #18
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	b21b      	sxth	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b21b      	sxth	r3, r3
 8001658:	b29b      	uxth	r3, r3
 800165a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800165e:	b29a      	uxth	r2, r3
 8001660:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <sbus_decoder_get_frame+0x298>)
 8001662:	831a      	strh	r2, [r3, #24]
    rc_data.rawdata[13] = ((buf[18]>>7|buf[19]<<1|buf[20]<<9)  & 0x07FF);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3312      	adds	r3, #18
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	09db      	lsrs	r3, r3, #7
 800166c:	b2db      	uxtb	r3, r3
 800166e:	b21a      	sxth	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3313      	adds	r3, #19
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	b21b      	sxth	r3, r3
 800167a:	4313      	orrs	r3, r2
 800167c:	b21a      	sxth	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3314      	adds	r3, #20
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	025b      	lsls	r3, r3, #9
 8001686:	b21b      	sxth	r3, r3
 8001688:	4313      	orrs	r3, r2
 800168a:	b21b      	sxth	r3, r3
 800168c:	b29b      	uxth	r3, r3
 800168e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001692:	b29a      	uxth	r2, r3
 8001694:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <sbus_decoder_get_frame+0x298>)
 8001696:	835a      	strh	r2, [r3, #26]
    rc_data.rawdata[14] = ((buf[20]>>2|buf[21]<<6)             & 0x07FF);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3314      	adds	r3, #20
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	b21a      	sxth	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3315      	adds	r3, #21
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	019b      	lsls	r3, r3, #6
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <sbus_decoder_get_frame+0x298>)
 80016bc:	839a      	strh	r2, [r3, #28]
    rc_data.rawdata[15] = ((buf[21]>>5|buf[22]<<3)             & 0x07FF);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3315      	adds	r3, #21
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	095b      	lsrs	r3, r3, #5
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	b21a      	sxth	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3316      	adds	r3, #22
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	4313      	orrs	r3, r2
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	b29b      	uxth	r3, r3
 80016da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016de:	b29a      	uxth	r2, r3
 80016e0:	e002      	b.n	80016e8 <sbus_decoder_get_frame+0x29c>
 80016e2:	bf00      	nop
 80016e4:	20000388 	.word	0x20000388
 80016e8:	4b15      	ldr	r3, [pc, #84]	; (8001740 <sbus_decoder_get_frame+0x2f4>)
 80016ea:	83da      	strh	r2, [r3, #30]
    uint8_t i;
    for(i=0;i<16;i++) {
 80016ec:	2300      	movs	r3, #0
 80016ee:	73fb      	strb	r3, [r7, #15]
 80016f0:	e018      	b.n	8001724 <sbus_decoder_get_frame+0x2d8>
        rc_data.percent[i] = (rc_data.rawdata[i]-340)*100/(1704-340);
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	4a12      	ldr	r2, [pc, #72]	; (8001740 <sbus_decoder_get_frame+0x2f4>)
 80016f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016fa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80016fe:	2264      	movs	r2, #100	; 0x64
 8001700:	fb02 f303 	mul.w	r3, r2, r3
 8001704:	4a0f      	ldr	r2, [pc, #60]	; (8001744 <sbus_decoder_get_frame+0x2f8>)
 8001706:	fb82 1203 	smull	r1, r2, r2, r3
 800170a:	1212      	asrs	r2, r2, #8
 800170c:	17db      	asrs	r3, r3, #31
 800170e:	1ad2      	subs	r2, r2, r3
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	b2d1      	uxtb	r1, r2
 8001714:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <sbus_decoder_get_frame+0x2f4>)
 8001716:	4413      	add	r3, r2
 8001718:	460a      	mov	r2, r1
 800171a:	f883 2020 	strb.w	r2, [r3, #32]
    for(i=0;i<16;i++) {
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	3301      	adds	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	2b0f      	cmp	r3, #15
 8001728:	d9e3      	bls.n	80016f2 <sbus_decoder_get_frame+0x2a6>
    }
    rc_data.flag_refresh = 1;
 800172a:	4b05      	ldr	r3, [pc, #20]	; (8001740 <sbus_decoder_get_frame+0x2f4>)
 800172c:	2201      	movs	r2, #1
 800172e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000388 	.word	0x20000388
 8001744:	300c0301 	.word	0x300c0301

08001748 <sbus_decoder_get_byte>:

static uint8_t buf[25]={0}; //保存一帧数据
static int8_t p = 0;   //指向下个字节将要保存的位置
void sbus_decoder_get_byte(uint8_t data)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
    int8_t q;
    buf[p] = data;
 8001752:	4b32      	ldr	r3, [pc, #200]	; (800181c <sbus_decoder_get_byte+0xd4>)
 8001754:	f993 3000 	ldrsb.w	r3, [r3]
 8001758:	4619      	mov	r1, r3
 800175a:	4a31      	ldr	r2, [pc, #196]	; (8001820 <sbus_decoder_get_byte+0xd8>)
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	5453      	strb	r3, [r2, r1]
    //判断当前缓存是否满足一帧的格式
    q = p+1;
 8001760:	4b2e      	ldr	r3, [pc, #184]	; (800181c <sbus_decoder_get_byte+0xd4>)
 8001762:	f993 3000 	ldrsb.w	r3, [r3]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	3301      	adds	r3, #1
 800176a:	b2db      	uxtb	r3, r3
 800176c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(q == 25) {
 8001770:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001774:	2b19      	cmp	r3, #25
 8001776:	d102      	bne.n	800177e <sbus_decoder_get_byte+0x36>
        q = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    if(buf[p] == 0x00 && buf[q] == 0x0f) {      //当前缓存数据满足0x0f开头且0x00结尾
 800177e:	4b27      	ldr	r3, [pc, #156]	; (800181c <sbus_decoder_get_byte+0xd4>)
 8001780:	f993 3000 	ldrsb.w	r3, [r3]
 8001784:	461a      	mov	r2, r3
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <sbus_decoder_get_byte+0xd8>)
 8001788:	5c9b      	ldrb	r3, [r3, r2]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d130      	bne.n	80017f0 <sbus_decoder_get_byte+0xa8>
 800178e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001792:	4a23      	ldr	r2, [pc, #140]	; (8001820 <sbus_decoder_get_byte+0xd8>)
 8001794:	5cd3      	ldrb	r3, [r2, r3]
 8001796:	2b0f      	cmp	r3, #15
 8001798:	d12a      	bne.n	80017f0 <sbus_decoder_get_byte+0xa8>
        uint8_t buf_frame[25] = {0};
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	f107 0310 	add.w	r3, r7, #16
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	611a      	str	r2, [r3, #16]
 80017ae:	751a      	strb	r2, [r3, #20]
        memcpy(buf_frame, buf+q, 25-q);
 80017b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80017b4:	4a1a      	ldr	r2, [pc, #104]	; (8001820 <sbus_decoder_get_byte+0xd8>)
 80017b6:	1899      	adds	r1, r3, r2
 80017b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80017bc:	f1c3 0319 	rsb	r3, r3, #25
 80017c0:	461a      	mov	r2, r3
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	4618      	mov	r0, r3
 80017c8:	f009 fd72 	bl	800b2b0 <memcpy>
        memcpy(buf_frame+25-q, buf, q);
 80017cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80017d0:	f1c3 0319 	rsb	r3, r3, #25
 80017d4:	f107 020c 	add.w	r2, r7, #12
 80017d8:	4413      	add	r3, r2
 80017da:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 80017de:	4910      	ldr	r1, [pc, #64]	; (8001820 <sbus_decoder_get_byte+0xd8>)
 80017e0:	4618      	mov	r0, r3
 80017e2:	f009 fd65 	bl	800b2b0 <memcpy>
        sbus_decoder_get_frame(buf_frame);
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fe2e 	bl	800144c <sbus_decoder_get_frame>
    }

    p++;
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <sbus_decoder_get_byte+0xd4>)
 80017f2:	f993 3000 	ldrsb.w	r3, [r3]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	3301      	adds	r3, #1
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	b25a      	sxtb	r2, r3
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <sbus_decoder_get_byte+0xd4>)
 8001800:	701a      	strb	r2, [r3, #0]
    if(p == 25) {
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <sbus_decoder_get_byte+0xd4>)
 8001804:	f993 3000 	ldrsb.w	r3, [r3]
 8001808:	2b19      	cmp	r3, #25
 800180a:	d102      	bne.n	8001812 <sbus_decoder_get_byte+0xca>
        p = 0;
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <sbus_decoder_get_byte+0xd4>)
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
    }
}
 8001812:	bf00      	nop
 8001814:	3728      	adds	r7, #40	; 0x28
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200003d5 	.word	0x200003d5
 8001820:	200003bc 	.word	0x200003bc

08001824 <sbus_decoder_get_buf>:

void sbus_decoder_get_buf(uint8_t* buf, uint16_t len)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
    uint16_t i;
    for(i=0;i<len;i++) {
 8001830:	2300      	movs	r3, #0
 8001832:	81fb      	strh	r3, [r7, #14]
 8001834:	e009      	b.n	800184a <sbus_decoder_get_buf+0x26>
        sbus_decoder_get_byte(buf[i]);
 8001836:	89fb      	ldrh	r3, [r7, #14]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	4413      	add	r3, r2
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ff82 	bl	8001748 <sbus_decoder_get_byte>
    for(i=0;i<len;i++) {
 8001844:	89fb      	ldrh	r3, [r7, #14]
 8001846:	3301      	adds	r3, #1
 8001848:	81fb      	strh	r3, [r7, #14]
 800184a:	89fa      	ldrh	r2, [r7, #14]
 800184c:	887b      	ldrh	r3, [r7, #2]
 800184e:	429a      	cmp	r2, r3
 8001850:	d3f1      	bcc.n	8001836 <sbus_decoder_get_buf+0x12>
    }
}
 8001852:	bf00      	nop
 8001854:	bf00      	nop
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001860:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <MX_SPI1_Init+0x64>)
 8001862:	4a18      	ldr	r2, [pc, #96]	; (80018c4 <MX_SPI1_Init+0x68>)
 8001864:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001866:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <MX_SPI1_Init+0x64>)
 8001868:	f44f 7282 	mov.w	r2, #260	; 0x104
 800186c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800186e:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <MX_SPI1_Init+0x64>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <MX_SPI1_Init+0x64>)
 8001876:	2200      	movs	r2, #0
 8001878:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <MX_SPI1_Init+0x64>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <MX_SPI1_Init+0x64>)
 8001882:	2200      	movs	r2, #0
 8001884:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <MX_SPI1_Init+0x64>)
 8001888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800188c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <MX_SPI1_Init+0x64>)
 8001890:	2200      	movs	r2, #0
 8001892:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001894:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <MX_SPI1_Init+0x64>)
 8001896:	2200      	movs	r2, #0
 8001898:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <MX_SPI1_Init+0x64>)
 800189c:	2200      	movs	r2, #0
 800189e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <MX_SPI1_Init+0x64>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <MX_SPI1_Init+0x64>)
 80018a8:	220a      	movs	r2, #10
 80018aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018ac:	4804      	ldr	r0, [pc, #16]	; (80018c0 <MX_SPI1_Init+0x64>)
 80018ae:	f003 fe9b 	bl	80055e8 <HAL_SPI_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018b8:	f7ff fdc2 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	200003d8 	.word	0x200003d8
 80018c4:	40013000 	.word	0x40013000

080018c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a28      	ldr	r2, [pc, #160]	; (8001988 <HAL_SPI_MspInit+0xc0>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d149      	bne.n	800197e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b27      	ldr	r3, [pc, #156]	; (800198c <HAL_SPI_MspInit+0xc4>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	4a26      	ldr	r2, [pc, #152]	; (800198c <HAL_SPI_MspInit+0xc4>)
 80018f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018f8:	6453      	str	r3, [r2, #68]	; 0x44
 80018fa:	4b24      	ldr	r3, [pc, #144]	; (800198c <HAL_SPI_MspInit+0xc4>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b20      	ldr	r3, [pc, #128]	; (800198c <HAL_SPI_MspInit+0xc4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a1f      	ldr	r2, [pc, #124]	; (800198c <HAL_SPI_MspInit+0xc4>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b1d      	ldr	r3, [pc, #116]	; (800198c <HAL_SPI_MspInit+0xc4>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	4b19      	ldr	r3, [pc, #100]	; (800198c <HAL_SPI_MspInit+0xc4>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a18      	ldr	r2, [pc, #96]	; (800198c <HAL_SPI_MspInit+0xc4>)
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b16      	ldr	r3, [pc, #88]	; (800198c <HAL_SPI_MspInit+0xc4>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800193e:	23a0      	movs	r3, #160	; 0xa0
 8001940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800194e:	2305      	movs	r3, #5
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	4619      	mov	r1, r3
 8001958:	480d      	ldr	r0, [pc, #52]	; (8001990 <HAL_SPI_MspInit+0xc8>)
 800195a:	f001 fdd3 	bl	8003504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800195e:	2310      	movs	r3, #16
 8001960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800196e:	2305      	movs	r3, #5
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	4806      	ldr	r0, [pc, #24]	; (8001994 <HAL_SPI_MspInit+0xcc>)
 800197a:	f001 fdc3 	bl	8003504 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800197e:	bf00      	nop
 8001980:	3728      	adds	r7, #40	; 0x28
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40013000 	.word	0x40013000
 800198c:	40023800 	.word	0x40023800
 8001990:	40020000 	.word	0x40020000
 8001994:	40020400 	.word	0x40020400

08001998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <HAL_MspInit+0x4c>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	4a0f      	ldr	r2, [pc, #60]	; (80019e4 <HAL_MspInit+0x4c>)
 80019a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ac:	6453      	str	r3, [r2, #68]	; 0x44
 80019ae:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <HAL_MspInit+0x4c>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_MspInit+0x4c>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <HAL_MspInit+0x4c>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_MspInit+0x4c>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800

080019e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <NMI_Handler+0x4>

080019ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <HardFault_Handler+0x4>

080019f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <MemManage_Handler+0x4>

080019fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <BusFault_Handler+0x4>

08001a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <UsageFault_Handler+0x4>

08001a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a34:	f000 fe3e 	bl	80026b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	RCUpdate();
 8001a40:	f7ff fb6c 	bl	800111c <RCUpdate>
	if(rc.autonomous_mode == ASV_AUTO){
 8001a44:	4b60      	ldr	r3, [pc, #384]	; (8001bc8 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d145      	bne.n	8001ad8 <TIM1_UP_TIM10_IRQHandler+0x9c>
		if(hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED){
 8001a4c:	4b5f      	ldr	r3, [pc, #380]	; (8001bcc <TIM1_UP_TIM10_IRQHandler+0x190>)
 8001a4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	d132      	bne.n	8001abe <TIM1_UP_TIM10_IRQHandler+0x82>
			if(usbd_buf_recv[0] == 'A' && usbd_buf_recv[1] == 'B' && usbd_buf_recv[11] == 'B' && usbd_buf_recv[12] == 'A'){
 8001a58:	4b5d      	ldr	r3, [pc, #372]	; (8001bd0 <TIM1_UP_TIM10_IRQHandler+0x194>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b41      	cmp	r3, #65	; 0x41
 8001a5e:	d15d      	bne.n	8001b1c <TIM1_UP_TIM10_IRQHandler+0xe0>
 8001a60:	4b5b      	ldr	r3, [pc, #364]	; (8001bd0 <TIM1_UP_TIM10_IRQHandler+0x194>)
 8001a62:	785b      	ldrb	r3, [r3, #1]
 8001a64:	2b42      	cmp	r3, #66	; 0x42
 8001a66:	d159      	bne.n	8001b1c <TIM1_UP_TIM10_IRQHandler+0xe0>
 8001a68:	4b59      	ldr	r3, [pc, #356]	; (8001bd0 <TIM1_UP_TIM10_IRQHandler+0x194>)
 8001a6a:	7adb      	ldrb	r3, [r3, #11]
 8001a6c:	2b42      	cmp	r3, #66	; 0x42
 8001a6e:	d155      	bne.n	8001b1c <TIM1_UP_TIM10_IRQHandler+0xe0>
 8001a70:	4b57      	ldr	r3, [pc, #348]	; (8001bd0 <TIM1_UP_TIM10_IRQHandler+0x194>)
 8001a72:	7b1b      	ldrb	r3, [r3, #12]
 8001a74:	2b41      	cmp	r3, #65	; 0x41
 8001a76:	d151      	bne.n	8001b1c <TIM1_UP_TIM10_IRQHandler+0xe0>
				memcpy(pc_rudder, usbd_buf_recv + 2, 4);
 8001a78:	4b56      	ldr	r3, [pc, #344]	; (8001bd4 <TIM1_UP_TIM10_IRQHandler+0x198>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b56      	ldr	r3, [pc, #344]	; (8001bd8 <TIM1_UP_TIM10_IRQHandler+0x19c>)
 8001a80:	601a      	str	r2, [r3, #0]
				pc_rudder[4] = 0;
 8001a82:	4b55      	ldr	r3, [pc, #340]	; (8001bd8 <TIM1_UP_TIM10_IRQHandler+0x19c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	711a      	strb	r2, [r3, #4]
				memcpy(pc_thrust, usbd_buf_recv + 7, 4);
 8001a88:	4b54      	ldr	r3, [pc, #336]	; (8001bdc <TIM1_UP_TIM10_IRQHandler+0x1a0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b54      	ldr	r3, [pc, #336]	; (8001be0 <TIM1_UP_TIM10_IRQHandler+0x1a4>)
 8001a90:	601a      	str	r2, [r3, #0]
				pc_thrust[4] = 0;
 8001a92:	4b53      	ldr	r3, [pc, #332]	; (8001be0 <TIM1_UP_TIM10_IRQHandler+0x1a4>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	711a      	strb	r2, [r3, #4]
				asv.thrust = atoi(pc_thrust);
 8001a98:	4851      	ldr	r0, [pc, #324]	; (8001be0 <TIM1_UP_TIM10_IRQHandler+0x1a4>)
 8001a9a:	f009 fbdb 	bl	800b254 <atoi>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	4a50      	ldr	r2, [pc, #320]	; (8001be4 <TIM1_UP_TIM10_IRQHandler+0x1a8>)
 8001aa2:	6013      	str	r3, [r2, #0]
				asv.thrust = asv.thrust - 1500;
 8001aa4:	4b4f      	ldr	r3, [pc, #316]	; (8001be4 <TIM1_UP_TIM10_IRQHandler+0x1a8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001aac:	4a4d      	ldr	r2, [pc, #308]	; (8001be4 <TIM1_UP_TIM10_IRQHandler+0x1a8>)
 8001aae:	6013      	str	r3, [r2, #0]
				asv.steer = atoi(pc_rudder);
 8001ab0:	4849      	ldr	r0, [pc, #292]	; (8001bd8 <TIM1_UP_TIM10_IRQHandler+0x19c>)
 8001ab2:	f009 fbcf 	bl	800b254 <atoi>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4a4a      	ldr	r2, [pc, #296]	; (8001be4 <TIM1_UP_TIM10_IRQHandler+0x1a8>)
 8001aba:	6053      	str	r3, [r2, #4]
 8001abc:	e02e      	b.n	8001b1c <TIM1_UP_TIM10_IRQHandler+0xe0>
			}
	//		memset(usbd_buf_recv, NULL, sizeof(usbd_buf_recv));
		}else{
			memset(usbd_buf_recv, NULL, sizeof(usbd_buf_recv));
 8001abe:	220d      	movs	r2, #13
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4843      	ldr	r0, [pc, #268]	; (8001bd0 <TIM1_UP_TIM10_IRQHandler+0x194>)
 8001ac4:	f009 fc02 	bl	800b2cc <memset>
			asv.thrust = 0;
 8001ac8:	4b46      	ldr	r3, [pc, #280]	; (8001be4 <TIM1_UP_TIM10_IRQHandler+0x1a8>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
			asv.steer = 1500;
 8001ace:	4b45      	ldr	r3, [pc, #276]	; (8001be4 <TIM1_UP_TIM10_IRQHandler+0x1a8>)
 8001ad0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	e021      	b.n	8001b1c <TIM1_UP_TIM10_IRQHandler+0xe0>
		}

	}else if(rc.autonomous_mode == ASV_MANUAL){
 8001ad8:	4b3b      	ldr	r3, [pc, #236]	; (8001bc8 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d11d      	bne.n	8001b1c <TIM1_UP_TIM10_IRQHandler+0xe0>
		asv.thrust = rc.stk_y * 500;
 8001ae0:	4b39      	ldr	r3, [pc, #228]	; (8001bc8 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 8001ae2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ae6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001be8 <TIM1_UP_TIM10_IRQHandler+0x1ac>
 8001aea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001af2:	ee17 2a90 	vmov	r2, s15
 8001af6:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <TIM1_UP_TIM10_IRQHandler+0x1a8>)
 8001af8:	601a      	str	r2, [r3, #0]
		asv.steer = (rc.stk_x * 500) + 1500;
 8001afa:	4b33      	ldr	r3, [pc, #204]	; (8001bc8 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 8001afc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b00:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001be8 <TIM1_UP_TIM10_IRQHandler+0x1ac>
 8001b04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b08:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001bec <TIM1_UP_TIM10_IRQHandler+0x1b0>
 8001b0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b14:	ee17 2a90 	vmov	r2, s15
 8001b18:	4b32      	ldr	r3, [pc, #200]	; (8001be4 <TIM1_UP_TIM10_IRQHandler+0x1a8>)
 8001b1a:	605a      	str	r2, [r3, #4]
	}

	if(rc.fan_mode == FAN_ON){
 8001b1c:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 8001b1e:	789b      	ldrb	r3, [r3, #2]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d106      	bne.n	8001b32 <TIM1_UP_TIM10_IRQHandler+0xf6>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001b24:	2201      	movs	r2, #1
 8001b26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b2a:	4831      	ldr	r0, [pc, #196]	; (8001bf0 <TIM1_UP_TIM10_IRQHandler+0x1b4>)
 8001b2c:	f001 fe6e 	bl	800380c <HAL_GPIO_WritePin>
 8001b30:	e009      	b.n	8001b46 <TIM1_UP_TIM10_IRQHandler+0x10a>
	}else if(rc.fan_mode == FAN_OFF){
 8001b32:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 8001b34:	789b      	ldrb	r3, [r3, #2]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d105      	bne.n	8001b46 <TIM1_UP_TIM10_IRQHandler+0x10a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b40:	482b      	ldr	r0, [pc, #172]	; (8001bf0 <TIM1_UP_TIM10_IRQHandler+0x1b4>)
 8001b42:	f001 fe63 	bl	800380c <HAL_GPIO_WritePin>
	}

	if(rc.actuator_mode == ACTUATOR_ENABLE){
 8001b46:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 8001b48:	785b      	ldrb	r3, [r3, #1]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d105      	bne.n	8001b5a <TIM1_UP_TIM10_IRQHandler+0x11e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	2102      	movs	r1, #2
 8001b52:	4827      	ldr	r0, [pc, #156]	; (8001bf0 <TIM1_UP_TIM10_IRQHandler+0x1b4>)
 8001b54:	f001 fe5a 	bl	800380c <HAL_GPIO_WritePin>
 8001b58:	e008      	b.n	8001b6c <TIM1_UP_TIM10_IRQHandler+0x130>
	}else if(rc.actuator_mode == ACTUATOR_DISABLE){
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 8001b5c:	785b      	ldrb	r3, [r3, #1]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d104      	bne.n	8001b6c <TIM1_UP_TIM10_IRQHandler+0x130>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2102      	movs	r1, #2
 8001b66:	4822      	ldr	r0, [pc, #136]	; (8001bf0 <TIM1_UP_TIM10_IRQHandler+0x1b4>)
 8001b68:	f001 fe50 	bl	800380c <HAL_GPIO_WritePin>
	}

	if(asv.thrust >= 0){
 8001b6c:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <TIM1_UP_TIM10_IRQHandler+0x1a8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	db09      	blt.n	8001b88 <TIM1_UP_TIM10_IRQHandler+0x14c>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, asv.thrust);
 8001b74:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <TIM1_UP_TIM10_IRQHandler+0x1a8>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <TIM1_UP_TIM10_IRQHandler+0x1b8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001b7e:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <TIM1_UP_TIM10_IRQHandler+0x1bc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2200      	movs	r2, #0
 8001b84:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b86:	e011      	b.n	8001bac <TIM1_UP_TIM10_IRQHandler+0x170>
	}else if(asv.thrust < 0){
 8001b88:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <TIM1_UP_TIM10_IRQHandler+0x1a8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	da0d      	bge.n	8001bac <TIM1_UP_TIM10_IRQHandler+0x170>
		asv.thrust = asv.thrust * (-1);
 8001b90:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <TIM1_UP_TIM10_IRQHandler+0x1a8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	425b      	negs	r3, r3
 8001b96:	4a13      	ldr	r2, [pc, #76]	; (8001be4 <TIM1_UP_TIM10_IRQHandler+0x1a8>)
 8001b98:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, asv.thrust);
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <TIM1_UP_TIM10_IRQHandler+0x1a8>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <TIM1_UP_TIM10_IRQHandler+0x1bc>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <TIM1_UP_TIM10_IRQHandler+0x1b8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	635a      	str	r2, [r3, #52]	; 0x34
	}

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, asv.steer);
 8001bac:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <TIM1_UP_TIM10_IRQHandler+0x1a8>)
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <TIM1_UP_TIM10_IRQHandler+0x1c0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bb6:	4812      	ldr	r0, [pc, #72]	; (8001c00 <TIM1_UP_TIM10_IRQHandler+0x1c4>)
 8001bb8:	f004 f8a4 	bl	8005d04 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001bbc:	4811      	ldr	r0, [pc, #68]	; (8001c04 <TIM1_UP_TIM10_IRQHandler+0x1c8>)
 8001bbe:	f004 f8a1 	bl	8005d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000374 	.word	0x20000374
 8001bcc:	2000068c 	.word	0x2000068c
 8001bd0:	20000330 	.word	0x20000330
 8001bd4:	20000332 	.word	0x20000332
 8001bd8:	20000348 	.word	0x20000348
 8001bdc:	20000337 	.word	0x20000337
 8001be0:	20000340 	.word	0x20000340
 8001be4:	20000380 	.word	0x20000380
 8001be8:	43fa0000 	.word	0x43fa0000
 8001bec:	44bb8000 	.word	0x44bb8000
 8001bf0:	40020400 	.word	0x40020400
 8001bf4:	2000047c 	.word	0x2000047c
 8001bf8:	2000050c 	.word	0x2000050c
 8001bfc:	200004c4 	.word	0x200004c4
 8001c00:	20000434 	.word	0x20000434
 8001c04:	20000554 	.word	0x20000554

08001c08 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <TIM1_CC_IRQHandler+0x10>)
 8001c0e:	f004 f879 	bl	8005d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000434 	.word	0x20000434

08001c1c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <DMA2_Stream2_IRQHandler+0x10>)
 8001c22:	f001 fa05 	bl	8003030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000624 	.word	0x20000624

08001c30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c34:	4802      	ldr	r0, [pc, #8]	; (8001c40 <OTG_FS_IRQHandler+0x10>)
 8001c36:	f001 ff52 	bl	8003ade <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20001b68 	.word	0x20001b68

08001c44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
	return 1;
 8001c48:	2301      	movs	r3, #1
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <_kill>:

int _kill(int pid, int sig)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c5e:	f009 fafd 	bl	800b25c <__errno>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2216      	movs	r2, #22
 8001c66:	601a      	str	r2, [r3, #0]
	return -1;
 8001c68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <_exit>:

void _exit (int status)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ffe7 	bl	8001c54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c86:	e7fe      	b.n	8001c86 <_exit+0x12>

08001c88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	e00a      	b.n	8001cb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c9a:	f3af 8000 	nop.w
 8001c9e:	4601      	mov	r1, r0
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	60ba      	str	r2, [r7, #8]
 8001ca6:	b2ca      	uxtb	r2, r1
 8001ca8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	3301      	adds	r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	dbf0      	blt.n	8001c9a <_read+0x12>
	}

return len;
 8001cb8:	687b      	ldr	r3, [r7, #4]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b086      	sub	sp, #24
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	e009      	b.n	8001ce8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	60ba      	str	r2, [r7, #8]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	dbf1      	blt.n	8001cd4 <_write+0x12>
	}
	return len;
 8001cf0:	687b      	ldr	r3, [r7, #4]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <_close>:

int _close(int file)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
	return -1;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d22:	605a      	str	r2, [r3, #4]
	return 0;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <_isatty>:

int _isatty(int file)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
	return 1;
 8001d3a:	2301      	movs	r3, #1
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
	return 0;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d6c:	4a14      	ldr	r2, [pc, #80]	; (8001dc0 <_sbrk+0x5c>)
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <_sbrk+0x60>)
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d78:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <_sbrk+0x64>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d102      	bne.n	8001d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <_sbrk+0x64>)
 8001d82:	4a12      	ldr	r2, [pc, #72]	; (8001dcc <_sbrk+0x68>)
 8001d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d86:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <_sbrk+0x64>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d207      	bcs.n	8001da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d94:	f009 fa62 	bl	800b25c <__errno>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	220c      	movs	r2, #12
 8001d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001da2:	e009      	b.n	8001db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <_sbrk+0x64>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <_sbrk+0x64>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	4a05      	ldr	r2, [pc, #20]	; (8001dc8 <_sbrk+0x64>)
 8001db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001db6:	68fb      	ldr	r3, [r7, #12]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20018000 	.word	0x20018000
 8001dc4:	00000400 	.word	0x00000400
 8001dc8:	20000430 	.word	0x20000430
 8001dcc:	200022a8 	.word	0x200022a8

08001dd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <SystemInit+0x20>)
 8001dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dda:	4a05      	ldr	r2, [pc, #20]	; (8001df0 <SystemInit+0x20>)
 8001ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08c      	sub	sp, #48	; 0x30
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dfa:	f107 030c 	add.w	r3, r7, #12
 8001dfe:	2224      	movs	r2, #36	; 0x24
 8001e00:	2100      	movs	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f009 fa62 	bl	800b2cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e10:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <MX_TIM1_Init+0xa8>)
 8001e12:	4a23      	ldr	r2, [pc, #140]	; (8001ea0 <MX_TIM1_Init+0xac>)
 8001e14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e16:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <MX_TIM1_Init+0xa8>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1c:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <MX_TIM1_Init+0xa8>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e22:	4b1e      	ldr	r3, [pc, #120]	; (8001e9c <MX_TIM1_Init+0xa8>)
 8001e24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2a:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <MX_TIM1_Init+0xa8>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e30:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <MX_TIM1_Init+0xa8>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e36:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <MX_TIM1_Init+0xa8>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001e40:	2302      	movs	r3, #2
 8001e42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e44:	2301      	movs	r3, #1
 8001e46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001e50:	2302      	movs	r3, #2
 8001e52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e54:	2301      	movs	r3, #1
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	4619      	mov	r1, r3
 8001e66:	480d      	ldr	r0, [pc, #52]	; (8001e9c <MX_TIM1_Init+0xa8>)
 8001e68:	f003 fdf8 	bl	8005a5c <HAL_TIM_Encoder_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001e72:	f7ff fae5 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	4619      	mov	r1, r3
 8001e82:	4806      	ldr	r0, [pc, #24]	; (8001e9c <MX_TIM1_Init+0xa8>)
 8001e84:	f004 fb62 	bl	800654c <HAL_TIMEx_MasterConfigSynchronization>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001e8e:	f7ff fad7 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e92:	bf00      	nop
 8001e94:	3730      	adds	r7, #48	; 0x30
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000434 	.word	0x20000434
 8001ea0:	40010000 	.word	0x40010000

08001ea4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eaa:	f107 0320 	add.w	r3, r7, #32
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]
 8001ec0:	611a      	str	r2, [r3, #16]
 8001ec2:	615a      	str	r2, [r3, #20]
 8001ec4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ec6:	4b22      	ldr	r3, [pc, #136]	; (8001f50 <MX_TIM2_Init+0xac>)
 8001ec8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ecc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ece:	4b20      	ldr	r3, [pc, #128]	; (8001f50 <MX_TIM2_Init+0xac>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed4:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <MX_TIM2_Init+0xac>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8001eda:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <MX_TIM2_Init+0xac>)
 8001edc:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001ee0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee2:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <MX_TIM2_Init+0xac>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee8:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <MX_TIM2_Init+0xac>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001eee:	4818      	ldr	r0, [pc, #96]	; (8001f50 <MX_TIM2_Init+0xac>)
 8001ef0:	f003 fcb4 	bl	800585c <HAL_TIM_PWM_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001efa:	f7ff faa1 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f06:	f107 0320 	add.w	r3, r7, #32
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4810      	ldr	r0, [pc, #64]	; (8001f50 <MX_TIM2_Init+0xac>)
 8001f0e:	f004 fb1d 	bl	800654c <HAL_TIMEx_MasterConfigSynchronization>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001f18:	f7ff fa92 	bl	8001440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f1c:	2360      	movs	r3, #96	; 0x60
 8001f1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	2200      	movs	r2, #0
 8001f30:	4619      	mov	r1, r3
 8001f32:	4807      	ldr	r0, [pc, #28]	; (8001f50 <MX_TIM2_Init+0xac>)
 8001f34:	f003 ffee 	bl	8005f14 <HAL_TIM_PWM_ConfigChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001f3e:	f7ff fa7f 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f42:	4803      	ldr	r0, [pc, #12]	; (8001f50 <MX_TIM2_Init+0xac>)
 8001f44:	f000 f9aa 	bl	800229c <HAL_TIM_MspPostInit>

}
 8001f48:	bf00      	nop
 8001f4a:	3728      	adds	r7, #40	; 0x28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	2000047c 	.word	0x2000047c

08001f54 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f5a:	f107 0320 	add.w	r3, r7, #32
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
 8001f6e:	60da      	str	r2, [r3, #12]
 8001f70:	611a      	str	r2, [r3, #16]
 8001f72:	615a      	str	r2, [r3, #20]
 8001f74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f76:	4b22      	ldr	r3, [pc, #136]	; (8002000 <MX_TIM3_Init+0xac>)
 8001f78:	4a22      	ldr	r2, [pc, #136]	; (8002004 <MX_TIM3_Init+0xb0>)
 8001f7a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8001f7c:	4b20      	ldr	r3, [pc, #128]	; (8002000 <MX_TIM3_Init+0xac>)
 8001f7e:	220f      	movs	r2, #15
 8001f80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f82:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <MX_TIM3_Init+0xac>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001f88:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <MX_TIM3_Init+0xac>)
 8001f8a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001f8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f90:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <MX_TIM3_Init+0xac>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f96:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <MX_TIM3_Init+0xac>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f9c:	4818      	ldr	r0, [pc, #96]	; (8002000 <MX_TIM3_Init+0xac>)
 8001f9e:	f003 fc5d 	bl	800585c <HAL_TIM_PWM_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001fa8:	f7ff fa4a 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fac:	2300      	movs	r3, #0
 8001fae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fb4:	f107 0320 	add.w	r3, r7, #32
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4811      	ldr	r0, [pc, #68]	; (8002000 <MX_TIM3_Init+0xac>)
 8001fbc:	f004 fac6 	bl	800654c <HAL_TIMEx_MasterConfigSynchronization>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001fc6:	f7ff fa3b 	bl	8001440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fca:	2360      	movs	r3, #96	; 0x60
 8001fcc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8001fce:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001fd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	2200      	movs	r2, #0
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4807      	ldr	r0, [pc, #28]	; (8002000 <MX_TIM3_Init+0xac>)
 8001fe4:	f003 ff96 	bl	8005f14 <HAL_TIM_PWM_ConfigChannel>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001fee:	f7ff fa27 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ff2:	4803      	ldr	r0, [pc, #12]	; (8002000 <MX_TIM3_Init+0xac>)
 8001ff4:	f000 f952 	bl	800229c <HAL_TIM_MspPostInit>

}
 8001ff8:	bf00      	nop
 8001ffa:	3728      	adds	r7, #40	; 0x28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	200004c4 	.word	0x200004c4
 8002004:	40000400 	.word	0x40000400

08002008 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800200e:	f107 0320 	add.w	r3, r7, #32
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002018:	1d3b      	adds	r3, r7, #4
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
 8002024:	611a      	str	r2, [r3, #16]
 8002026:	615a      	str	r2, [r3, #20]
 8002028:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800202a:	4b22      	ldr	r3, [pc, #136]	; (80020b4 <MX_TIM4_Init+0xac>)
 800202c:	4a22      	ldr	r2, [pc, #136]	; (80020b8 <MX_TIM4_Init+0xb0>)
 800202e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002030:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <MX_TIM4_Init+0xac>)
 8002032:	2200      	movs	r2, #0
 8002034:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002036:	4b1f      	ldr	r3, [pc, #124]	; (80020b4 <MX_TIM4_Init+0xac>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500-1;
 800203c:	4b1d      	ldr	r3, [pc, #116]	; (80020b4 <MX_TIM4_Init+0xac>)
 800203e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002042:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002044:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <MX_TIM4_Init+0xac>)
 8002046:	2200      	movs	r2, #0
 8002048:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204a:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <MX_TIM4_Init+0xac>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002050:	4818      	ldr	r0, [pc, #96]	; (80020b4 <MX_TIM4_Init+0xac>)
 8002052:	f003 fc03 	bl	800585c <HAL_TIM_PWM_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800205c:	f7ff f9f0 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002060:	2300      	movs	r3, #0
 8002062:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002064:	2300      	movs	r3, #0
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002068:	f107 0320 	add.w	r3, r7, #32
 800206c:	4619      	mov	r1, r3
 800206e:	4811      	ldr	r0, [pc, #68]	; (80020b4 <MX_TIM4_Init+0xac>)
 8002070:	f004 fa6c 	bl	800654c <HAL_TIMEx_MasterConfigSynchronization>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800207a:	f7ff f9e1 	bl	8001440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800207e:	2360      	movs	r3, #96	; 0x60
 8002080:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	2208      	movs	r2, #8
 8002092:	4619      	mov	r1, r3
 8002094:	4807      	ldr	r0, [pc, #28]	; (80020b4 <MX_TIM4_Init+0xac>)
 8002096:	f003 ff3d 	bl	8005f14 <HAL_TIM_PWM_ConfigChannel>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80020a0:	f7ff f9ce 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80020a4:	4803      	ldr	r0, [pc, #12]	; (80020b4 <MX_TIM4_Init+0xac>)
 80020a6:	f000 f8f9 	bl	800229c <HAL_TIM_MspPostInit>

}
 80020aa:	bf00      	nop
 80020ac:	3728      	adds	r7, #40	; 0x28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	2000050c 	.word	0x2000050c
 80020b8:	40000800 	.word	0x40000800

080020bc <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80020c0:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <MX_TIM10_Init+0x40>)
 80020c2:	4a0f      	ldr	r2, [pc, #60]	; (8002100 <MX_TIM10_Init+0x44>)
 80020c4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16-1;
 80020c6:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <MX_TIM10_Init+0x40>)
 80020c8:	220f      	movs	r2, #15
 80020ca:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <MX_TIM10_Init+0x40>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 20000-1;
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <MX_TIM10_Init+0x40>)
 80020d4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80020d8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020da:	4b08      	ldr	r3, [pc, #32]	; (80020fc <MX_TIM10_Init+0x40>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <MX_TIM10_Init+0x40>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80020e6:	4805      	ldr	r0, [pc, #20]	; (80020fc <MX_TIM10_Init+0x40>)
 80020e8:	f003 fb07 	bl	80056fa <HAL_TIM_Base_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80020f2:	f7ff f9a5 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000554 	.word	0x20000554
 8002100:	40014400 	.word	0x40014400

08002104 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a21      	ldr	r2, [pc, #132]	; (80021a8 <HAL_TIM_Encoder_MspInit+0xa4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d13c      	bne.n	80021a0 <HAL_TIM_Encoder_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	4b20      	ldr	r3, [pc, #128]	; (80021ac <HAL_TIM_Encoder_MspInit+0xa8>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a1f      	ldr	r2, [pc, #124]	; (80021ac <HAL_TIM_Encoder_MspInit+0xa8>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <HAL_TIM_Encoder_MspInit+0xa8>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_TIM_Encoder_MspInit+0xa8>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a18      	ldr	r2, [pc, #96]	; (80021ac <HAL_TIM_Encoder_MspInit+0xa8>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b16      	ldr	r3, [pc, #88]	; (80021ac <HAL_TIM_Encoder_MspInit+0xa8>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800215e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216c:	2300      	movs	r3, #0
 800216e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002170:	2301      	movs	r3, #1
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	4619      	mov	r1, r3
 800217a:	480d      	ldr	r0, [pc, #52]	; (80021b0 <HAL_TIM_Encoder_MspInit+0xac>)
 800217c:	f001 f9c2 	bl	8003504 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 8002180:	2200      	movs	r2, #0
 8002182:	2102      	movs	r1, #2
 8002184:	2019      	movs	r0, #25
 8002186:	f000 fe16 	bl	8002db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800218a:	2019      	movs	r0, #25
 800218c:	f000 fe2f 	bl	8002dee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002190:	2200      	movs	r2, #0
 8002192:	2100      	movs	r1, #0
 8002194:	201b      	movs	r0, #27
 8002196:	f000 fe0e 	bl	8002db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800219a:	201b      	movs	r0, #27
 800219c:	f000 fe27 	bl	8002dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80021a0:	bf00      	nop
 80021a2:	3728      	adds	r7, #40	; 0x28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40010000 	.word	0x40010000
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40020000 	.word	0x40020000

080021b4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c4:	d10e      	bne.n	80021e4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <HAL_TIM_PWM_MspInit+0x8c>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	4a1c      	ldr	r2, [pc, #112]	; (8002240 <HAL_TIM_PWM_MspInit+0x8c>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6413      	str	r3, [r2, #64]	; 0x40
 80021d6:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <HAL_TIM_PWM_MspInit+0x8c>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80021e2:	e026      	b.n	8002232 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM3)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a16      	ldr	r2, [pc, #88]	; (8002244 <HAL_TIM_PWM_MspInit+0x90>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d10e      	bne.n	800220c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	4b13      	ldr	r3, [pc, #76]	; (8002240 <HAL_TIM_PWM_MspInit+0x8c>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	4a12      	ldr	r2, [pc, #72]	; (8002240 <HAL_TIM_PWM_MspInit+0x8c>)
 80021f8:	f043 0302 	orr.w	r3, r3, #2
 80021fc:	6413      	str	r3, [r2, #64]	; 0x40
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <HAL_TIM_PWM_MspInit+0x8c>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	693b      	ldr	r3, [r7, #16]
}
 800220a:	e012      	b.n	8002232 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM4)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a0d      	ldr	r2, [pc, #52]	; (8002248 <HAL_TIM_PWM_MspInit+0x94>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d10d      	bne.n	8002232 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <HAL_TIM_PWM_MspInit+0x8c>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	4a08      	ldr	r2, [pc, #32]	; (8002240 <HAL_TIM_PWM_MspInit+0x8c>)
 8002220:	f043 0304 	orr.w	r3, r3, #4
 8002224:	6413      	str	r3, [r2, #64]	; 0x40
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_TIM_PWM_MspInit+0x8c>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
}
 8002232:	bf00      	nop
 8002234:	371c      	adds	r7, #28
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40023800 	.word	0x40023800
 8002244:	40000400 	.word	0x40000400
 8002248:	40000800 	.word	0x40000800

0800224c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a0e      	ldr	r2, [pc, #56]	; (8002294 <HAL_TIM_Base_MspInit+0x48>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d115      	bne.n	800228a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <HAL_TIM_Base_MspInit+0x4c>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	4a0c      	ldr	r2, [pc, #48]	; (8002298 <HAL_TIM_Base_MspInit+0x4c>)
 8002268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800226c:	6453      	str	r3, [r2, #68]	; 0x44
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <HAL_TIM_Base_MspInit+0x4c>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	2102      	movs	r1, #2
 800227e:	2019      	movs	r0, #25
 8002280:	f000 fd99 	bl	8002db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002284:	2019      	movs	r0, #25
 8002286:	f000 fdb2 	bl	8002dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40014400 	.word	0x40014400
 8002298:	40023800 	.word	0x40023800

0800229c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08a      	sub	sp, #40	; 0x28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022bc:	d11f      	bne.n	80022fe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	4b35      	ldr	r3, [pc, #212]	; (8002398 <HAL_TIM_MspPostInit+0xfc>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a34      	ldr	r2, [pc, #208]	; (8002398 <HAL_TIM_MspPostInit+0xfc>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b32      	ldr	r3, [pc, #200]	; (8002398 <HAL_TIM_MspPostInit+0xfc>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80022da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e8:	2300      	movs	r3, #0
 80022ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022ec:	2301      	movs	r3, #1
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	4619      	mov	r1, r3
 80022f6:	4829      	ldr	r0, [pc, #164]	; (800239c <HAL_TIM_MspPostInit+0x100>)
 80022f8:	f001 f904 	bl	8003504 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80022fc:	e047      	b.n	800238e <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a27      	ldr	r2, [pc, #156]	; (80023a0 <HAL_TIM_MspPostInit+0x104>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d11e      	bne.n	8002346 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	4b22      	ldr	r3, [pc, #136]	; (8002398 <HAL_TIM_MspPostInit+0xfc>)
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	4a21      	ldr	r2, [pc, #132]	; (8002398 <HAL_TIM_MspPostInit+0xfc>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6313      	str	r3, [r2, #48]	; 0x30
 8002318:	4b1f      	ldr	r3, [pc, #124]	; (8002398 <HAL_TIM_MspPostInit+0xfc>)
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002324:	2340      	movs	r3, #64	; 0x40
 8002326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	2302      	movs	r3, #2
 800232a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002330:	2300      	movs	r3, #0
 8002332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002334:	2302      	movs	r3, #2
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	4619      	mov	r1, r3
 800233e:	4817      	ldr	r0, [pc, #92]	; (800239c <HAL_TIM_MspPostInit+0x100>)
 8002340:	f001 f8e0 	bl	8003504 <HAL_GPIO_Init>
}
 8002344:	e023      	b.n	800238e <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM4)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a16      	ldr	r2, [pc, #88]	; (80023a4 <HAL_TIM_MspPostInit+0x108>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d11e      	bne.n	800238e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002350:	2300      	movs	r3, #0
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	4b10      	ldr	r3, [pc, #64]	; (8002398 <HAL_TIM_MspPostInit+0xfc>)
 8002356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002358:	4a0f      	ldr	r2, [pc, #60]	; (8002398 <HAL_TIM_MspPostInit+0xfc>)
 800235a:	f043 0302 	orr.w	r3, r3, #2
 800235e:	6313      	str	r3, [r2, #48]	; 0x30
 8002360:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <HAL_TIM_MspPostInit+0xfc>)
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800236c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002372:	2302      	movs	r3, #2
 8002374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237a:	2300      	movs	r3, #0
 800237c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800237e:	2302      	movs	r3, #2
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	4619      	mov	r1, r3
 8002388:	4807      	ldr	r0, [pc, #28]	; (80023a8 <HAL_TIM_MspPostInit+0x10c>)
 800238a:	f001 f8bb 	bl	8003504 <HAL_GPIO_Init>
}
 800238e:	bf00      	nop
 8002390:	3728      	adds	r7, #40	; 0x28
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40023800 	.word	0x40023800
 800239c:	40020000 	.word	0x40020000
 80023a0:	40000400 	.word	0x40000400
 80023a4:	40000800 	.word	0x40000800
 80023a8:	40020400 	.word	0x40020400

080023ac <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023b2:	4a12      	ldr	r2, [pc, #72]	; (80023fc <MX_USART1_UART_Init+0x50>)
 80023b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 80023b6:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023b8:	4a11      	ldr	r2, [pc, #68]	; (8002400 <MX_USART1_UART_Init+0x54>)
 80023ba:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023bc:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80023c2:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023d0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023d2:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023d4:	220c      	movs	r2, #12
 80023d6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023d8:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023e4:	4804      	ldr	r0, [pc, #16]	; (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023e6:	f004 f933 	bl	8006650 <HAL_UART_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 80023f0:	f7ff f826 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023f4:	bf00      	nop
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	2000059c 	.word	0x2000059c
 80023fc:	40011000 	.word	0x40011000
 8002400:	000186a0 	.word	0x000186a0

08002404 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 800240a:	4a12      	ldr	r2, [pc, #72]	; (8002454 <MX_USART2_UART_Init+0x50>)
 800240c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 8002410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002414:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 800241e:	2200      	movs	r2, #0
 8002420:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 8002424:	2200      	movs	r2, #0
 8002426:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002428:	4b09      	ldr	r3, [pc, #36]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 800242a:	220c      	movs	r2, #12
 800242c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 8002430:	2200      	movs	r2, #0
 8002432:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 8002436:	2200      	movs	r2, #0
 8002438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800243a:	4805      	ldr	r0, [pc, #20]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 800243c:	f004 f908 	bl	8006650 <HAL_UART_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002446:	f7fe fffb 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200005e0 	.word	0x200005e0
 8002454:	40004400 	.word	0x40004400

08002458 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08c      	sub	sp, #48	; 0x30
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	f107 031c 	add.w	r3, r7, #28
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a4a      	ldr	r2, [pc, #296]	; (80025a0 <HAL_UART_MspInit+0x148>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d15c      	bne.n	8002534 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	4b49      	ldr	r3, [pc, #292]	; (80025a4 <HAL_UART_MspInit+0x14c>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	4a48      	ldr	r2, [pc, #288]	; (80025a4 <HAL_UART_MspInit+0x14c>)
 8002484:	f043 0310 	orr.w	r3, r3, #16
 8002488:	6453      	str	r3, [r2, #68]	; 0x44
 800248a:	4b46      	ldr	r3, [pc, #280]	; (80025a4 <HAL_UART_MspInit+0x14c>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	61bb      	str	r3, [r7, #24]
 8002494:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	4b42      	ldr	r3, [pc, #264]	; (80025a4 <HAL_UART_MspInit+0x14c>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	4a41      	ldr	r2, [pc, #260]	; (80025a4 <HAL_UART_MspInit+0x14c>)
 80024a0:	f043 0302 	orr.w	r3, r3, #2
 80024a4:	6313      	str	r3, [r2, #48]	; 0x30
 80024a6:	4b3f      	ldr	r3, [pc, #252]	; (80025a4 <HAL_UART_MspInit+0x14c>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024b2:	23c0      	movs	r3, #192	; 0xc0
 80024b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b6:	2302      	movs	r3, #2
 80024b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024be:	2303      	movs	r3, #3
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024c2:	2307      	movs	r3, #7
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c6:	f107 031c 	add.w	r3, r7, #28
 80024ca:	4619      	mov	r1, r3
 80024cc:	4836      	ldr	r0, [pc, #216]	; (80025a8 <HAL_UART_MspInit+0x150>)
 80024ce:	f001 f819 	bl	8003504 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80024d2:	4b36      	ldr	r3, [pc, #216]	; (80025ac <HAL_UART_MspInit+0x154>)
 80024d4:	4a36      	ldr	r2, [pc, #216]	; (80025b0 <HAL_UART_MspInit+0x158>)
 80024d6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80024d8:	4b34      	ldr	r3, [pc, #208]	; (80025ac <HAL_UART_MspInit+0x154>)
 80024da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024de:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024e0:	4b32      	ldr	r3, [pc, #200]	; (80025ac <HAL_UART_MspInit+0x154>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e6:	4b31      	ldr	r3, [pc, #196]	; (80025ac <HAL_UART_MspInit+0x154>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024ec:	4b2f      	ldr	r3, [pc, #188]	; (80025ac <HAL_UART_MspInit+0x154>)
 80024ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024f2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024f4:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <HAL_UART_MspInit+0x154>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024fa:	4b2c      	ldr	r3, [pc, #176]	; (80025ac <HAL_UART_MspInit+0x154>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002500:	4b2a      	ldr	r3, [pc, #168]	; (80025ac <HAL_UART_MspInit+0x154>)
 8002502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002506:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002508:	4b28      	ldr	r3, [pc, #160]	; (80025ac <HAL_UART_MspInit+0x154>)
 800250a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800250e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002510:	4b26      	ldr	r3, [pc, #152]	; (80025ac <HAL_UART_MspInit+0x154>)
 8002512:	2200      	movs	r2, #0
 8002514:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002516:	4825      	ldr	r0, [pc, #148]	; (80025ac <HAL_UART_MspInit+0x154>)
 8002518:	f000 fc84 	bl	8002e24 <HAL_DMA_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002522:	f7fe ff8d 	bl	8001440 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a20      	ldr	r2, [pc, #128]	; (80025ac <HAL_UART_MspInit+0x154>)
 800252a:	639a      	str	r2, [r3, #56]	; 0x38
 800252c:	4a1f      	ldr	r2, [pc, #124]	; (80025ac <HAL_UART_MspInit+0x154>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002532:	e030      	b.n	8002596 <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART2)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a1e      	ldr	r2, [pc, #120]	; (80025b4 <HAL_UART_MspInit+0x15c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d12b      	bne.n	8002596 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <HAL_UART_MspInit+0x14c>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	4a17      	ldr	r2, [pc, #92]	; (80025a4 <HAL_UART_MspInit+0x14c>)
 8002548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800254c:	6413      	str	r3, [r2, #64]	; 0x40
 800254e:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <HAL_UART_MspInit+0x14c>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	613b      	str	r3, [r7, #16]
 8002558:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_UART_MspInit+0x14c>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	4a10      	ldr	r2, [pc, #64]	; (80025a4 <HAL_UART_MspInit+0x14c>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	6313      	str	r3, [r2, #48]	; 0x30
 800256a:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <HAL_UART_MspInit+0x14c>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002576:	230c      	movs	r3, #12
 8002578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257a:	2302      	movs	r3, #2
 800257c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002582:	2303      	movs	r3, #3
 8002584:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002586:	2307      	movs	r3, #7
 8002588:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258a:	f107 031c 	add.w	r3, r7, #28
 800258e:	4619      	mov	r1, r3
 8002590:	4809      	ldr	r0, [pc, #36]	; (80025b8 <HAL_UART_MspInit+0x160>)
 8002592:	f000 ffb7 	bl	8003504 <HAL_GPIO_Init>
}
 8002596:	bf00      	nop
 8002598:	3730      	adds	r7, #48	; 0x30
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40011000 	.word	0x40011000
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40020400 	.word	0x40020400
 80025ac:	20000624 	.word	0x20000624
 80025b0:	40026440 	.word	0x40026440
 80025b4:	40004400 	.word	0x40004400
 80025b8:	40020000 	.word	0x40020000

080025bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025c0:	480d      	ldr	r0, [pc, #52]	; (80025f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025c2:	490e      	ldr	r1, [pc, #56]	; (80025fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025c4:	4a0e      	ldr	r2, [pc, #56]	; (8002600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025c8:	e002      	b.n	80025d0 <LoopCopyDataInit>

080025ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ce:	3304      	adds	r3, #4

080025d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025d4:	d3f9      	bcc.n	80025ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025d6:	4a0b      	ldr	r2, [pc, #44]	; (8002604 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025d8:	4c0b      	ldr	r4, [pc, #44]	; (8002608 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025dc:	e001      	b.n	80025e2 <LoopFillZerobss>

080025de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025e0:	3204      	adds	r2, #4

080025e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025e4:	d3fb      	bcc.n	80025de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025e6:	f7ff fbf3 	bl	8001dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ea:	f008 fe3d 	bl	800b268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ee:	f7fe fe3f 	bl	8001270 <main>
  bx  lr    
 80025f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80025f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025fc:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8002600:	0800e26c 	.word	0x0800e26c
  ldr r2, =_sbss
 8002604:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8002608:	200022a4 	.word	0x200022a4

0800260c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800260c:	e7fe      	b.n	800260c <ADC_IRQHandler>
	...

08002610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <HAL_Init+0x40>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a0d      	ldr	r2, [pc, #52]	; (8002650 <HAL_Init+0x40>)
 800261a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800261e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_Init+0x40>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <HAL_Init+0x40>)
 8002626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800262a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <HAL_Init+0x40>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a07      	ldr	r2, [pc, #28]	; (8002650 <HAL_Init+0x40>)
 8002632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002636:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002638:	2003      	movs	r0, #3
 800263a:	f000 fbb1 	bl	8002da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800263e:	200f      	movs	r0, #15
 8002640:	f000 f808 	bl	8002654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002644:	f7ff f9a8 	bl	8001998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40023c00 	.word	0x40023c00

08002654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800265c:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_InitTick+0x54>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_InitTick+0x58>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	4619      	mov	r1, r3
 8002666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800266a:	fbb3 f3f1 	udiv	r3, r3, r1
 800266e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002672:	4618      	mov	r0, r3
 8002674:	f000 fbc9 	bl	8002e0a <HAL_SYSTICK_Config>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e00e      	b.n	80026a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b0f      	cmp	r3, #15
 8002686:	d80a      	bhi.n	800269e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002688:	2200      	movs	r2, #0
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	f04f 30ff 	mov.w	r0, #4294967295
 8002690:	f000 fb91 	bl	8002db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002694:	4a06      	ldr	r2, [pc, #24]	; (80026b0 <HAL_InitTick+0x5c>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	e000      	b.n	80026a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000000 	.word	0x20000000
 80026ac:	20000008 	.word	0x20000008
 80026b0:	20000004 	.word	0x20000004

080026b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <HAL_IncTick+0x20>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_IncTick+0x24>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4413      	add	r3, r2
 80026c4:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <HAL_IncTick+0x24>)
 80026c6:	6013      	str	r3, [r2, #0]
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000008 	.word	0x20000008
 80026d8:	20000684 	.word	0x20000684

080026dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  return uwTick;
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <HAL_GetTick+0x14>)
 80026e2:	681b      	ldr	r3, [r3, #0]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	20000684 	.word	0x20000684

080026f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026fc:	f7ff ffee 	bl	80026dc <HAL_GetTick>
 8002700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270c:	d005      	beq.n	800271a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800270e:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <HAL_Delay+0x44>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4413      	add	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800271a:	bf00      	nop
 800271c:	f7ff ffde 	bl	80026dc <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	429a      	cmp	r2, r3
 800272a:	d8f7      	bhi.n	800271c <HAL_Delay+0x28>
  {
  }
}
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000008 	.word	0x20000008

0800273c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e033      	b.n	80027ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7fe fc00 	bl	8000f60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	2b00      	cmp	r3, #0
 8002778:	d118      	bne.n	80027ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002782:	f023 0302 	bic.w	r3, r3, #2
 8002786:	f043 0202 	orr.w	r2, r3, #2
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f93a 	bl	8002a08 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f023 0303 	bic.w	r3, r3, #3
 80027a2:	f043 0201 	orr.w	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
 80027aa:	e001      	b.n	80027b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x1c>
 80027dc:	2302      	movs	r3, #2
 80027de:	e105      	b.n	80029ec <HAL_ADC_ConfigChannel+0x228>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b09      	cmp	r3, #9
 80027ee:	d925      	bls.n	800283c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68d9      	ldr	r1, [r3, #12]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	461a      	mov	r2, r3
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	3b1e      	subs	r3, #30
 8002806:	2207      	movs	r2, #7
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43da      	mvns	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	400a      	ands	r2, r1
 8002814:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68d9      	ldr	r1, [r3, #12]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	b29b      	uxth	r3, r3
 8002826:	4618      	mov	r0, r3
 8002828:	4603      	mov	r3, r0
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	4403      	add	r3, r0
 800282e:	3b1e      	subs	r3, #30
 8002830:	409a      	lsls	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	e022      	b.n	8002882 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6919      	ldr	r1, [r3, #16]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	b29b      	uxth	r3, r3
 8002848:	461a      	mov	r2, r3
 800284a:	4613      	mov	r3, r2
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	4413      	add	r3, r2
 8002850:	2207      	movs	r2, #7
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43da      	mvns	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	400a      	ands	r2, r1
 800285e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6919      	ldr	r1, [r3, #16]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	b29b      	uxth	r3, r3
 8002870:	4618      	mov	r0, r3
 8002872:	4603      	mov	r3, r0
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	4403      	add	r3, r0
 8002878:	409a      	lsls	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b06      	cmp	r3, #6
 8002888:	d824      	bhi.n	80028d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	3b05      	subs	r3, #5
 800289c:	221f      	movs	r2, #31
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43da      	mvns	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	400a      	ands	r2, r1
 80028aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	4618      	mov	r0, r3
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	3b05      	subs	r3, #5
 80028c6:	fa00 f203 	lsl.w	r2, r0, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	635a      	str	r2, [r3, #52]	; 0x34
 80028d2:	e04c      	b.n	800296e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b0c      	cmp	r3, #12
 80028da:	d824      	bhi.n	8002926 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	3b23      	subs	r3, #35	; 0x23
 80028ee:	221f      	movs	r2, #31
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43da      	mvns	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	400a      	ands	r2, r1
 80028fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	b29b      	uxth	r3, r3
 800290a:	4618      	mov	r0, r3
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	3b23      	subs	r3, #35	; 0x23
 8002918:	fa00 f203 	lsl.w	r2, r0, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	631a      	str	r2, [r3, #48]	; 0x30
 8002924:	e023      	b.n	800296e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	3b41      	subs	r3, #65	; 0x41
 8002938:	221f      	movs	r2, #31
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43da      	mvns	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	400a      	ands	r2, r1
 8002946:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	b29b      	uxth	r3, r3
 8002954:	4618      	mov	r0, r3
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	3b41      	subs	r3, #65	; 0x41
 8002962:	fa00 f203 	lsl.w	r2, r0, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800296e:	4b22      	ldr	r3, [pc, #136]	; (80029f8 <HAL_ADC_ConfigChannel+0x234>)
 8002970:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a21      	ldr	r2, [pc, #132]	; (80029fc <HAL_ADC_ConfigChannel+0x238>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d109      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x1cc>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b12      	cmp	r3, #18
 8002982:	d105      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a19      	ldr	r2, [pc, #100]	; (80029fc <HAL_ADC_ConfigChannel+0x238>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d123      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x21e>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b10      	cmp	r3, #16
 80029a0:	d003      	beq.n	80029aa <HAL_ADC_ConfigChannel+0x1e6>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b11      	cmp	r3, #17
 80029a8:	d11b      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b10      	cmp	r3, #16
 80029bc:	d111      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029be:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <HAL_ADC_ConfigChannel+0x23c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a10      	ldr	r2, [pc, #64]	; (8002a04 <HAL_ADC_ConfigChannel+0x240>)
 80029c4:	fba2 2303 	umull	r2, r3, r2, r3
 80029c8:	0c9a      	lsrs	r2, r3, #18
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029d4:	e002      	b.n	80029dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	3b01      	subs	r3, #1
 80029da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f9      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	40012300 	.word	0x40012300
 80029fc:	40012000 	.word	0x40012000
 8002a00:	20000000 	.word	0x20000000
 8002a04:	431bde83 	.word	0x431bde83

08002a08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a10:	4b79      	ldr	r3, [pc, #484]	; (8002bf8 <ADC_Init+0x1f0>)
 8002a12:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	021a      	lsls	r2, r3, #8
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6859      	ldr	r1, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6899      	ldr	r1, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9a:	4a58      	ldr	r2, [pc, #352]	; (8002bfc <ADC_Init+0x1f4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d022      	beq.n	8002ae6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002aae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6899      	ldr	r1, [r3, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ad0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6899      	ldr	r1, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	e00f      	b.n	8002b06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002af4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0202 	bic.w	r2, r2, #2
 8002b14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6899      	ldr	r1, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	7e1b      	ldrb	r3, [r3, #24]
 8002b20:	005a      	lsls	r2, r3, #1
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d01b      	beq.n	8002b6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6859      	ldr	r1, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	035a      	lsls	r2, r3, #13
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	e007      	b.n	8002b7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	051a      	lsls	r2, r3, #20
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6899      	ldr	r1, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bbe:	025a      	lsls	r2, r3, #9
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6899      	ldr	r1, [r3, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	029a      	lsls	r2, r3, #10
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	609a      	str	r2, [r3, #8]
}
 8002bec:	bf00      	nop
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	40012300 	.word	0x40012300
 8002bfc:	0f000001 	.word	0x0f000001

08002c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <__NVIC_SetPriorityGrouping+0x44>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c32:	4a04      	ldr	r2, [pc, #16]	; (8002c44 <__NVIC_SetPriorityGrouping+0x44>)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	60d3      	str	r3, [r2, #12]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c4c:	4b04      	ldr	r3, [pc, #16]	; (8002c60 <__NVIC_GetPriorityGrouping+0x18>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	0a1b      	lsrs	r3, r3, #8
 8002c52:	f003 0307 	and.w	r3, r3, #7
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	db0b      	blt.n	8002c8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	f003 021f 	and.w	r2, r3, #31
 8002c7c:	4907      	ldr	r1, [pc, #28]	; (8002c9c <__NVIC_EnableIRQ+0x38>)
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	2001      	movs	r0, #1
 8002c86:	fa00 f202 	lsl.w	r2, r0, r2
 8002c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	e000e100 	.word	0xe000e100

08002ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	6039      	str	r1, [r7, #0]
 8002caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	db0a      	blt.n	8002cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	490c      	ldr	r1, [pc, #48]	; (8002cec <__NVIC_SetPriority+0x4c>)
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	0112      	lsls	r2, r2, #4
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc8:	e00a      	b.n	8002ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	4908      	ldr	r1, [pc, #32]	; (8002cf0 <__NVIC_SetPriority+0x50>)
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	3b04      	subs	r3, #4
 8002cd8:	0112      	lsls	r2, r2, #4
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	440b      	add	r3, r1
 8002cde:	761a      	strb	r2, [r3, #24]
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000e100 	.word	0xe000e100
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b089      	sub	sp, #36	; 0x24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f1c3 0307 	rsb	r3, r3, #7
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	bf28      	it	cs
 8002d12:	2304      	movcs	r3, #4
 8002d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	2b06      	cmp	r3, #6
 8002d1c:	d902      	bls.n	8002d24 <NVIC_EncodePriority+0x30>
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3b03      	subs	r3, #3
 8002d22:	e000      	b.n	8002d26 <NVIC_EncodePriority+0x32>
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d28:	f04f 32ff 	mov.w	r2, #4294967295
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43da      	mvns	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	401a      	ands	r2, r3
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	fa01 f303 	lsl.w	r3, r1, r3
 8002d46:	43d9      	mvns	r1, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d4c:	4313      	orrs	r3, r2
         );
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3724      	adds	r7, #36	; 0x24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d6c:	d301      	bcc.n	8002d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e00f      	b.n	8002d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d72:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <SysTick_Config+0x40>)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d7a:	210f      	movs	r1, #15
 8002d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d80:	f7ff ff8e 	bl	8002ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <SysTick_Config+0x40>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d8a:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <SysTick_Config+0x40>)
 8002d8c:	2207      	movs	r2, #7
 8002d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	e000e010 	.word	0xe000e010

08002da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff ff29 	bl	8002c00 <__NVIC_SetPriorityGrouping>
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b086      	sub	sp, #24
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc8:	f7ff ff3e 	bl	8002c48 <__NVIC_GetPriorityGrouping>
 8002dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68b9      	ldr	r1, [r7, #8]
 8002dd2:	6978      	ldr	r0, [r7, #20]
 8002dd4:	f7ff ff8e 	bl	8002cf4 <NVIC_EncodePriority>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dde:	4611      	mov	r1, r2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff ff5d 	bl	8002ca0 <__NVIC_SetPriority>
}
 8002de6:	bf00      	nop
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	4603      	mov	r3, r0
 8002df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ff31 	bl	8002c64 <__NVIC_EnableIRQ>
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff ffa2 	bl	8002d5c <SysTick_Config>
 8002e18:	4603      	mov	r3, r0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e30:	f7ff fc54 	bl	80026dc <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e099      	b.n	8002f74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0201 	bic.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e60:	e00f      	b.n	8002e82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e62:	f7ff fc3b 	bl	80026dc <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b05      	cmp	r3, #5
 8002e6e:	d908      	bls.n	8002e82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2220      	movs	r2, #32
 8002e74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2203      	movs	r2, #3
 8002e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e078      	b.n	8002f74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e8      	bne.n	8002e62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	4b38      	ldr	r3, [pc, #224]	; (8002f7c <HAL_DMA_Init+0x158>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ec6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d107      	bne.n	8002eec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f023 0307 	bic.w	r3, r3, #7
 8002f02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d117      	bne.n	8002f46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00e      	beq.n	8002f46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fa6f 	bl	800340c <DMA_CheckFifoParam>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2240      	movs	r2, #64	; 0x40
 8002f38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f42:	2301      	movs	r3, #1
 8002f44:	e016      	b.n	8002f74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fa26 	bl	80033a0 <DMA_CalcBaseAndBitshift>
 8002f54:	4603      	mov	r3, r0
 8002f56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5c:	223f      	movs	r2, #63	; 0x3f
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	f010803f 	.word	0xf010803f

08002f80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <HAL_DMA_Start_IT+0x26>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e040      	b.n	8003028 <HAL_DMA_Start_IT+0xa8>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d12f      	bne.n	800301a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f9b8 	bl	8003344 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd8:	223f      	movs	r2, #63	; 0x3f
 8002fda:	409a      	lsls	r2, r3
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0216 	orr.w	r2, r2, #22
 8002fee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d007      	beq.n	8003008 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0208 	orr.w	r2, r2, #8
 8003006:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	e005      	b.n	8003026 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003022:	2302      	movs	r3, #2
 8003024:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003026:	7dfb      	ldrb	r3, [r7, #23]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800303c:	4b8e      	ldr	r3, [pc, #568]	; (8003278 <HAL_DMA_IRQHandler+0x248>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a8e      	ldr	r2, [pc, #568]	; (800327c <HAL_DMA_IRQHandler+0x24c>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	0a9b      	lsrs	r3, r3, #10
 8003048:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305a:	2208      	movs	r2, #8
 800305c:	409a      	lsls	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4013      	ands	r3, r2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d01a      	beq.n	800309c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d013      	beq.n	800309c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0204 	bic.w	r2, r2, #4
 8003082:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003088:	2208      	movs	r2, #8
 800308a:	409a      	lsls	r2, r3
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003094:	f043 0201 	orr.w	r2, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a0:	2201      	movs	r2, #1
 80030a2:	409a      	lsls	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d012      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00b      	beq.n	80030d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030be:	2201      	movs	r2, #1
 80030c0:	409a      	lsls	r2, r3
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	f043 0202 	orr.w	r2, r3, #2
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d6:	2204      	movs	r2, #4
 80030d8:	409a      	lsls	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4013      	ands	r3, r2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d012      	beq.n	8003108 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00b      	beq.n	8003108 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f4:	2204      	movs	r2, #4
 80030f6:	409a      	lsls	r2, r3
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003100:	f043 0204 	orr.w	r2, r3, #4
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310c:	2210      	movs	r2, #16
 800310e:	409a      	lsls	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d043      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d03c      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312a:	2210      	movs	r2, #16
 800312c:	409a      	lsls	r2, r3
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d018      	beq.n	8003172 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d108      	bne.n	8003160 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	2b00      	cmp	r3, #0
 8003154:	d024      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	4798      	blx	r3
 800315e:	e01f      	b.n	80031a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003164:	2b00      	cmp	r3, #0
 8003166:	d01b      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	4798      	blx	r3
 8003170:	e016      	b.n	80031a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d107      	bne.n	8003190 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0208 	bic.w	r2, r2, #8
 800318e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a4:	2220      	movs	r2, #32
 80031a6:	409a      	lsls	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 808f 	beq.w	80032d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 8087 	beq.w	80032d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c6:	2220      	movs	r2, #32
 80031c8:	409a      	lsls	r2, r3
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b05      	cmp	r3, #5
 80031d8:	d136      	bne.n	8003248 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0216 	bic.w	r2, r2, #22
 80031e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695a      	ldr	r2, [r3, #20]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d103      	bne.n	800320a <HAL_DMA_IRQHandler+0x1da>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003206:	2b00      	cmp	r3, #0
 8003208:	d007      	beq.n	800321a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0208 	bic.w	r2, r2, #8
 8003218:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321e:	223f      	movs	r2, #63	; 0x3f
 8003220:	409a      	lsls	r2, r3
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800323a:	2b00      	cmp	r3, #0
 800323c:	d07e      	beq.n	800333c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	4798      	blx	r3
        }
        return;
 8003246:	e079      	b.n	800333c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d01d      	beq.n	8003292 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10d      	bne.n	8003280 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	2b00      	cmp	r3, #0
 800326a:	d031      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	4798      	blx	r3
 8003274:	e02c      	b.n	80032d0 <HAL_DMA_IRQHandler+0x2a0>
 8003276:	bf00      	nop
 8003278:	20000000 	.word	0x20000000
 800327c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003284:	2b00      	cmp	r3, #0
 8003286:	d023      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	4798      	blx	r3
 8003290:	e01e      	b.n	80032d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10f      	bne.n	80032c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0210 	bic.w	r2, r2, #16
 80032ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d032      	beq.n	800333e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d022      	beq.n	800332a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2205      	movs	r2, #5
 80032e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0201 	bic.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	3301      	adds	r3, #1
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	429a      	cmp	r2, r3
 8003306:	d307      	bcc.n	8003318 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f2      	bne.n	80032fc <HAL_DMA_IRQHandler+0x2cc>
 8003316:	e000      	b.n	800331a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003318:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332e:	2b00      	cmp	r3, #0
 8003330:	d005      	beq.n	800333e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	4798      	blx	r3
 800333a:	e000      	b.n	800333e <HAL_DMA_IRQHandler+0x30e>
        return;
 800333c:	bf00      	nop
    }
  }
}
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003360:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b40      	cmp	r3, #64	; 0x40
 8003370:	d108      	bne.n	8003384 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003382:	e007      	b.n	8003394 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	60da      	str	r2, [r3, #12]
}
 8003394:	bf00      	nop
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	3b10      	subs	r3, #16
 80033b0:	4a14      	ldr	r2, [pc, #80]	; (8003404 <DMA_CalcBaseAndBitshift+0x64>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	091b      	lsrs	r3, r3, #4
 80033b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033ba:	4a13      	ldr	r2, [pc, #76]	; (8003408 <DMA_CalcBaseAndBitshift+0x68>)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4413      	add	r3, r2
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d909      	bls.n	80033e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033d6:	f023 0303 	bic.w	r3, r3, #3
 80033da:	1d1a      	adds	r2, r3, #4
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	659a      	str	r2, [r3, #88]	; 0x58
 80033e0:	e007      	b.n	80033f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033ea:	f023 0303 	bic.w	r3, r3, #3
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	aaaaaaab 	.word	0xaaaaaaab
 8003408:	0800de78 	.word	0x0800de78

0800340c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d11f      	bne.n	8003466 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b03      	cmp	r3, #3
 800342a:	d856      	bhi.n	80034da <DMA_CheckFifoParam+0xce>
 800342c:	a201      	add	r2, pc, #4	; (adr r2, 8003434 <DMA_CheckFifoParam+0x28>)
 800342e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003432:	bf00      	nop
 8003434:	08003445 	.word	0x08003445
 8003438:	08003457 	.word	0x08003457
 800343c:	08003445 	.word	0x08003445
 8003440:	080034db 	.word	0x080034db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d046      	beq.n	80034de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003454:	e043      	b.n	80034de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800345e:	d140      	bne.n	80034e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003464:	e03d      	b.n	80034e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800346e:	d121      	bne.n	80034b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b03      	cmp	r3, #3
 8003474:	d837      	bhi.n	80034e6 <DMA_CheckFifoParam+0xda>
 8003476:	a201      	add	r2, pc, #4	; (adr r2, 800347c <DMA_CheckFifoParam+0x70>)
 8003478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347c:	0800348d 	.word	0x0800348d
 8003480:	08003493 	.word	0x08003493
 8003484:	0800348d 	.word	0x0800348d
 8003488:	080034a5 	.word	0x080034a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	73fb      	strb	r3, [r7, #15]
      break;
 8003490:	e030      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d025      	beq.n	80034ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034a2:	e022      	b.n	80034ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034ac:	d11f      	bne.n	80034ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034b2:	e01c      	b.n	80034ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d903      	bls.n	80034c2 <DMA_CheckFifoParam+0xb6>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d003      	beq.n	80034c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034c0:	e018      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	73fb      	strb	r3, [r7, #15]
      break;
 80034c6:	e015      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00e      	beq.n	80034f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	73fb      	strb	r3, [r7, #15]
      break;
 80034d8:	e00b      	b.n	80034f2 <DMA_CheckFifoParam+0xe6>
      break;
 80034da:	bf00      	nop
 80034dc:	e00a      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
      break;
 80034de:	bf00      	nop
 80034e0:	e008      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
      break;
 80034e2:	bf00      	nop
 80034e4:	e006      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
      break;
 80034e6:	bf00      	nop
 80034e8:	e004      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
      break;
 80034ea:	bf00      	nop
 80034ec:	e002      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80034ee:	bf00      	nop
 80034f0:	e000      	b.n	80034f4 <DMA_CheckFifoParam+0xe8>
      break;
 80034f2:	bf00      	nop
    }
  } 
  
  return status; 
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop

08003504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003504:	b480      	push	{r7}
 8003506:	b089      	sub	sp, #36	; 0x24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003512:	2300      	movs	r3, #0
 8003514:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003516:	2300      	movs	r3, #0
 8003518:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
 800351e:	e159      	b.n	80037d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003520:	2201      	movs	r2, #1
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4013      	ands	r3, r2
 8003532:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	429a      	cmp	r2, r3
 800353a:	f040 8148 	bne.w	80037ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	2b01      	cmp	r3, #1
 8003548:	d005      	beq.n	8003556 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003552:	2b02      	cmp	r3, #2
 8003554:	d130      	bne.n	80035b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	2203      	movs	r2, #3
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43db      	mvns	r3, r3
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4013      	ands	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800358c:	2201      	movs	r2, #1
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	43db      	mvns	r3, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4013      	ands	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	091b      	lsrs	r3, r3, #4
 80035a2:	f003 0201 	and.w	r2, r3, #1
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 0303 	and.w	r3, r3, #3
 80035c0:	2b03      	cmp	r3, #3
 80035c2:	d017      	beq.n	80035f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	2203      	movs	r2, #3
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4013      	ands	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f003 0303 	and.w	r3, r3, #3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d123      	bne.n	8003648 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	08da      	lsrs	r2, r3, #3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3208      	adds	r2, #8
 8003608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800360c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	220f      	movs	r2, #15
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4013      	ands	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4313      	orrs	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	08da      	lsrs	r2, r3, #3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3208      	adds	r2, #8
 8003642:	69b9      	ldr	r1, [r7, #24]
 8003644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	2203      	movs	r2, #3
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	43db      	mvns	r3, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4013      	ands	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 0203 	and.w	r2, r3, #3
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4313      	orrs	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 80a2 	beq.w	80037ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	4b57      	ldr	r3, [pc, #348]	; (80037ec <HAL_GPIO_Init+0x2e8>)
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	4a56      	ldr	r2, [pc, #344]	; (80037ec <HAL_GPIO_Init+0x2e8>)
 8003694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003698:	6453      	str	r3, [r2, #68]	; 0x44
 800369a:	4b54      	ldr	r3, [pc, #336]	; (80037ec <HAL_GPIO_Init+0x2e8>)
 800369c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036a6:	4a52      	ldr	r2, [pc, #328]	; (80037f0 <HAL_GPIO_Init+0x2ec>)
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	089b      	lsrs	r3, r3, #2
 80036ac:	3302      	adds	r3, #2
 80036ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	220f      	movs	r2, #15
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4013      	ands	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a49      	ldr	r2, [pc, #292]	; (80037f4 <HAL_GPIO_Init+0x2f0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d019      	beq.n	8003706 <HAL_GPIO_Init+0x202>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a48      	ldr	r2, [pc, #288]	; (80037f8 <HAL_GPIO_Init+0x2f4>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d013      	beq.n	8003702 <HAL_GPIO_Init+0x1fe>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a47      	ldr	r2, [pc, #284]	; (80037fc <HAL_GPIO_Init+0x2f8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00d      	beq.n	80036fe <HAL_GPIO_Init+0x1fa>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a46      	ldr	r2, [pc, #280]	; (8003800 <HAL_GPIO_Init+0x2fc>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d007      	beq.n	80036fa <HAL_GPIO_Init+0x1f6>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a45      	ldr	r2, [pc, #276]	; (8003804 <HAL_GPIO_Init+0x300>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d101      	bne.n	80036f6 <HAL_GPIO_Init+0x1f2>
 80036f2:	2304      	movs	r3, #4
 80036f4:	e008      	b.n	8003708 <HAL_GPIO_Init+0x204>
 80036f6:	2307      	movs	r3, #7
 80036f8:	e006      	b.n	8003708 <HAL_GPIO_Init+0x204>
 80036fa:	2303      	movs	r3, #3
 80036fc:	e004      	b.n	8003708 <HAL_GPIO_Init+0x204>
 80036fe:	2302      	movs	r3, #2
 8003700:	e002      	b.n	8003708 <HAL_GPIO_Init+0x204>
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <HAL_GPIO_Init+0x204>
 8003706:	2300      	movs	r3, #0
 8003708:	69fa      	ldr	r2, [r7, #28]
 800370a:	f002 0203 	and.w	r2, r2, #3
 800370e:	0092      	lsls	r2, r2, #2
 8003710:	4093      	lsls	r3, r2
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4313      	orrs	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003718:	4935      	ldr	r1, [pc, #212]	; (80037f0 <HAL_GPIO_Init+0x2ec>)
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	089b      	lsrs	r3, r3, #2
 800371e:	3302      	adds	r3, #2
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003726:	4b38      	ldr	r3, [pc, #224]	; (8003808 <HAL_GPIO_Init+0x304>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	43db      	mvns	r3, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4013      	ands	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4313      	orrs	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800374a:	4a2f      	ldr	r2, [pc, #188]	; (8003808 <HAL_GPIO_Init+0x304>)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003750:	4b2d      	ldr	r3, [pc, #180]	; (8003808 <HAL_GPIO_Init+0x304>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	43db      	mvns	r3, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4013      	ands	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003774:	4a24      	ldr	r2, [pc, #144]	; (8003808 <HAL_GPIO_Init+0x304>)
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800377a:	4b23      	ldr	r3, [pc, #140]	; (8003808 <HAL_GPIO_Init+0x304>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	43db      	mvns	r3, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4013      	ands	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800379e:	4a1a      	ldr	r2, [pc, #104]	; (8003808 <HAL_GPIO_Init+0x304>)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037a4:	4b18      	ldr	r3, [pc, #96]	; (8003808 <HAL_GPIO_Init+0x304>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037c8:	4a0f      	ldr	r2, [pc, #60]	; (8003808 <HAL_GPIO_Init+0x304>)
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3301      	adds	r3, #1
 80037d2:	61fb      	str	r3, [r7, #28]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	2b0f      	cmp	r3, #15
 80037d8:	f67f aea2 	bls.w	8003520 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037dc:	bf00      	nop
 80037de:	bf00      	nop
 80037e0:	3724      	adds	r7, #36	; 0x24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40023800 	.word	0x40023800
 80037f0:	40013800 	.word	0x40013800
 80037f4:	40020000 	.word	0x40020000
 80037f8:	40020400 	.word	0x40020400
 80037fc:	40020800 	.word	0x40020800
 8003800:	40020c00 	.word	0x40020c00
 8003804:	40021000 	.word	0x40021000
 8003808:	40013c00 	.word	0x40013c00

0800380c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	807b      	strh	r3, [r7, #2]
 8003818:	4613      	mov	r3, r2
 800381a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800381c:	787b      	ldrb	r3, [r7, #1]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003822:	887a      	ldrh	r2, [r7, #2]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003828:	e003      	b.n	8003832 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800382a:	887b      	ldrh	r3, [r7, #2]
 800382c:	041a      	lsls	r2, r3, #16
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	619a      	str	r2, [r3, #24]
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800383e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003840:	b08f      	sub	sp, #60	; 0x3c
 8003842:	af0a      	add	r7, sp, #40	; 0x28
 8003844:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e10f      	b.n	8003a70 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d106      	bne.n	8003870 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f007 f9de 	bl	800ac2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2203      	movs	r2, #3
 8003874:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d102      	bne.n	800388a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f003 fd27 	bl	80072e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	603b      	str	r3, [r7, #0]
 800389a:	687e      	ldr	r6, [r7, #4]
 800389c:	466d      	mov	r5, sp
 800389e:	f106 0410 	add.w	r4, r6, #16
 80038a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80038b2:	1d33      	adds	r3, r6, #4
 80038b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038b6:	6838      	ldr	r0, [r7, #0]
 80038b8:	f003 fbfe 	bl	80070b8 <USB_CoreInit>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d005      	beq.n	80038ce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2202      	movs	r2, #2
 80038c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e0d0      	b.n	8003a70 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2100      	movs	r1, #0
 80038d4:	4618      	mov	r0, r3
 80038d6:	f003 fd15 	bl	8007304 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038da:	2300      	movs	r3, #0
 80038dc:	73fb      	strb	r3, [r7, #15]
 80038de:	e04a      	b.n	8003976 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038e0:	7bfa      	ldrb	r2, [r7, #15]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	333d      	adds	r3, #61	; 0x3d
 80038f0:	2201      	movs	r2, #1
 80038f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038f4:	7bfa      	ldrb	r2, [r7, #15]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4413      	add	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	333c      	adds	r3, #60	; 0x3c
 8003904:	7bfa      	ldrb	r2, [r7, #15]
 8003906:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003908:	7bfa      	ldrb	r2, [r7, #15]
 800390a:	7bfb      	ldrb	r3, [r7, #15]
 800390c:	b298      	uxth	r0, r3
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	3344      	adds	r3, #68	; 0x44
 800391c:	4602      	mov	r2, r0
 800391e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003920:	7bfa      	ldrb	r2, [r7, #15]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4413      	add	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	3340      	adds	r3, #64	; 0x40
 8003930:	2200      	movs	r2, #0
 8003932:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003934:	7bfa      	ldrb	r2, [r7, #15]
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	3348      	adds	r3, #72	; 0x48
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003948:	7bfa      	ldrb	r2, [r7, #15]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	334c      	adds	r3, #76	; 0x4c
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800395c:	7bfa      	ldrb	r2, [r7, #15]
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	3354      	adds	r3, #84	; 0x54
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	3301      	adds	r3, #1
 8003974:	73fb      	strb	r3, [r7, #15]
 8003976:	7bfa      	ldrb	r2, [r7, #15]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	429a      	cmp	r2, r3
 800397e:	d3af      	bcc.n	80038e0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003980:	2300      	movs	r3, #0
 8003982:	73fb      	strb	r3, [r7, #15]
 8003984:	e044      	b.n	8003a10 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003986:	7bfa      	ldrb	r2, [r7, #15]
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003998:	2200      	movs	r2, #0
 800399a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800399c:	7bfa      	ldrb	r2, [r7, #15]
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80039ae:	7bfa      	ldrb	r2, [r7, #15]
 80039b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039b2:	7bfa      	ldrb	r2, [r7, #15]
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80039c4:	2200      	movs	r2, #0
 80039c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039c8:	7bfa      	ldrb	r2, [r7, #15]
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039de:	7bfa      	ldrb	r2, [r7, #15]
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039f4:	7bfa      	ldrb	r2, [r7, #15]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	4413      	add	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	73fb      	strb	r3, [r7, #15]
 8003a10:	7bfa      	ldrb	r2, [r7, #15]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d3b5      	bcc.n	8003986 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	687e      	ldr	r6, [r7, #4]
 8003a22:	466d      	mov	r5, sp
 8003a24:	f106 0410 	add.w	r4, r6, #16
 8003a28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a34:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a38:	1d33      	adds	r3, r6, #4
 8003a3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a3c:	6838      	ldr	r0, [r7, #0]
 8003a3e:	f003 fcad 	bl	800739c <USB_DevInit>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e00d      	b.n	8003a70 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f004 fdfc 	bl	8008666 <USB_DevDisconnect>

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a78 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_PCD_Start+0x1c>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e020      	b.n	8003ad6 <HAL_PCD_Start+0x5e>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d109      	bne.n	8003ab8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d005      	beq.n	8003ab8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f003 fbff 	bl	80072c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f004 fdac 	bl	8008624 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ade:	b590      	push	{r4, r7, lr}
 8003ae0:	b08d      	sub	sp, #52	; 0x34
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f004 fe6a 	bl	80087ce <USB_GetMode>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f040 848a 	bne.w	8004416 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f004 fdce 	bl	80086a8 <USB_ReadInterrupts>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 8480 	beq.w	8004414 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	0a1b      	lsrs	r3, r3, #8
 8003b1e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f004 fdbb 	bl	80086a8 <USB_ReadInterrupts>
 8003b32:	4603      	mov	r3, r0
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d107      	bne.n	8003b4c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695a      	ldr	r2, [r3, #20]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f002 0202 	and.w	r2, r2, #2
 8003b4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f004 fda9 	bl	80086a8 <USB_ReadInterrupts>
 8003b56:	4603      	mov	r3, r0
 8003b58:	f003 0310 	and.w	r3, r3, #16
 8003b5c:	2b10      	cmp	r3, #16
 8003b5e:	d161      	bne.n	8003c24 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0210 	bic.w	r2, r2, #16
 8003b6e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	f003 020f 	and.w	r2, r3, #15
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	4413      	add	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	0c5b      	lsrs	r3, r3, #17
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d124      	bne.n	8003be6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d035      	beq.n	8003c14 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	091b      	lsrs	r3, r3, #4
 8003bb0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003bb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	461a      	mov	r2, r3
 8003bba:	6a38      	ldr	r0, [r7, #32]
 8003bbc:	f004 fbe0 	bl	8008380 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	691a      	ldr	r2, [r3, #16]
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	091b      	lsrs	r3, r3, #4
 8003bc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bcc:	441a      	add	r2, r3
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	6a1a      	ldr	r2, [r3, #32]
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	091b      	lsrs	r3, r3, #4
 8003bda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bde:	441a      	add	r2, r3
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	621a      	str	r2, [r3, #32]
 8003be4:	e016      	b.n	8003c14 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	0c5b      	lsrs	r3, r3, #17
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	2b06      	cmp	r3, #6
 8003bf0:	d110      	bne.n	8003c14 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003bf8:	2208      	movs	r2, #8
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	6a38      	ldr	r0, [r7, #32]
 8003bfe:	f004 fbbf 	bl	8008380 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	6a1a      	ldr	r2, [r3, #32]
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	091b      	lsrs	r3, r3, #4
 8003c0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c0e:	441a      	add	r2, r3
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699a      	ldr	r2, [r3, #24]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0210 	orr.w	r2, r2, #16
 8003c22:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f004 fd3d 	bl	80086a8 <USB_ReadInterrupts>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c38:	f040 80a7 	bne.w	8003d8a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f004 fd42 	bl	80086ce <USB_ReadDevAllOutEpInterrupt>
 8003c4a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003c4c:	e099      	b.n	8003d82 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 808e 	beq.w	8003d76 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	4611      	mov	r1, r2
 8003c64:	4618      	mov	r0, r3
 8003c66:	f004 fd66 	bl	8008736 <USB_ReadDevOutEPInterrupt>
 8003c6a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00c      	beq.n	8003c90 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c82:	461a      	mov	r2, r3
 8003c84:	2301      	movs	r3, #1
 8003c86:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003c88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 fec2 	bl	8004a14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00c      	beq.n	8003cb4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	2308      	movs	r3, #8
 8003caa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003cac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 ff98 	bl	8004be4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f003 0310 	and.w	r3, r3, #16
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cca:	461a      	mov	r2, r3
 8003ccc:	2310      	movs	r3, #16
 8003cce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d030      	beq.n	8003d3c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce2:	2b80      	cmp	r3, #128	; 0x80
 8003ce4:	d109      	bne.n	8003cfa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	69fa      	ldr	r2, [r7, #28]
 8003cf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cf8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	78db      	ldrb	r3, [r3, #3]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d108      	bne.n	8003d2a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	4619      	mov	r1, r3
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f007 f887 	bl	800ae38 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d36:	461a      	mov	r2, r3
 8003d38:	2302      	movs	r3, #2
 8003d3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f003 0320 	and.w	r3, r3, #32
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d008      	beq.n	8003d58 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d52:	461a      	mov	r2, r3
 8003d54:	2320      	movs	r3, #32
 8003d56:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d009      	beq.n	8003d76 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	015a      	lsls	r2, r3, #5
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d74:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	3301      	adds	r3, #1
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7e:	085b      	lsrs	r3, r3, #1
 8003d80:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f47f af62 	bne.w	8003c4e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f004 fc8a 	bl	80086a8 <USB_ReadInterrupts>
 8003d94:	4603      	mov	r3, r0
 8003d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d9e:	f040 80db 	bne.w	8003f58 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f004 fcab 	bl	8008702 <USB_ReadDevAllInEpInterrupt>
 8003dac:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003db2:	e0cd      	b.n	8003f50 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 80c2 	beq.w	8003f44 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	4611      	mov	r1, r2
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f004 fcd1 	bl	8008772 <USB_ReadDevInEPInterrupt>
 8003dd0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d057      	beq.n	8003e8c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	2201      	movs	r2, #1
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	43db      	mvns	r3, r3
 8003df6:	69f9      	ldr	r1, [r7, #28]
 8003df8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	2301      	movs	r3, #1
 8003e10:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d132      	bne.n	8003e80 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1e:	4613      	mov	r3, r2
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	4413      	add	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	440b      	add	r3, r1
 8003e28:	334c      	adds	r3, #76	; 0x4c
 8003e2a:	6819      	ldr	r1, [r3, #0]
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e30:	4613      	mov	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4403      	add	r3, r0
 8003e3a:	3348      	adds	r3, #72	; 0x48
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4419      	add	r1, r3
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e44:	4613      	mov	r3, r2
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	4413      	add	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4403      	add	r3, r0
 8003e4e:	334c      	adds	r3, #76	; 0x4c
 8003e50:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d113      	bne.n	8003e80 <HAL_PCD_IRQHandler+0x3a2>
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	3354      	adds	r3, #84	; 0x54
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d108      	bne.n	8003e80 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e78:	461a      	mov	r2, r3
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	f004 fcd8 	bl	8008830 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	4619      	mov	r1, r3
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f006 ff51 	bl	800ad2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d008      	beq.n	8003ea8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	2308      	movs	r3, #8
 8003ea6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f003 0310 	and.w	r3, r3, #16
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d008      	beq.n	8003ec4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	2310      	movs	r3, #16
 8003ec2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d008      	beq.n	8003ee0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eda:	461a      	mov	r2, r3
 8003edc:	2340      	movs	r3, #64	; 0x40
 8003ede:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d023      	beq.n	8003f32 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003eea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eec:	6a38      	ldr	r0, [r7, #32]
 8003eee:	f003 fbb9 	bl	8007664 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	4413      	add	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	3338      	adds	r3, #56	; 0x38
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	4413      	add	r3, r2
 8003f02:	3304      	adds	r3, #4
 8003f04:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	78db      	ldrb	r3, [r3, #3]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d108      	bne.n	8003f20 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2200      	movs	r2, #0
 8003f12:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	4619      	mov	r1, r3
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f006 ff9e 	bl	800ae5c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	2302      	movs	r3, #2
 8003f30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003f3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fcdb 	bl	80048fa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	3301      	adds	r3, #1
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4c:	085b      	lsrs	r3, r3, #1
 8003f4e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f47f af2e 	bne.w	8003db4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f004 fba3 	bl	80086a8 <USB_ReadInterrupts>
 8003f62:	4603      	mov	r3, r0
 8003f64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f6c:	d122      	bne.n	8003fb4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	69fa      	ldr	r2, [r7, #28]
 8003f78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f7c:	f023 0301 	bic.w	r3, r3, #1
 8003f80:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d108      	bne.n	8003f9e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f94:	2100      	movs	r1, #0
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 fec2 	bl	8004d20 <HAL_PCDEx_LPM_Callback>
 8003f9c:	e002      	b.n	8003fa4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f006 ff3c 	bl	800ae1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695a      	ldr	r2, [r3, #20]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003fb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f004 fb75 	bl	80086a8 <USB_ReadInterrupts>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fc8:	d112      	bne.n	8003ff0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d102      	bne.n	8003fe0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f006 fef8 	bl	800add0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695a      	ldr	r2, [r3, #20]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003fee:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f004 fb57 	bl	80086a8 <USB_ReadInterrupts>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004004:	f040 80b7 	bne.w	8004176 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	69fa      	ldr	r2, [r7, #28]
 8004012:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004016:	f023 0301 	bic.w	r3, r3, #1
 800401a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2110      	movs	r1, #16
 8004022:	4618      	mov	r0, r3
 8004024:	f003 fb1e 	bl	8007664 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004028:	2300      	movs	r3, #0
 800402a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800402c:	e046      	b.n	80040bc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800402e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	4413      	add	r3, r2
 8004036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403a:	461a      	mov	r2, r3
 800403c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004040:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	4413      	add	r3, r2
 800404a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004052:	0151      	lsls	r1, r2, #5
 8004054:	69fa      	ldr	r2, [r7, #28]
 8004056:	440a      	add	r2, r1
 8004058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800405c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004060:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004064:	015a      	lsls	r2, r3, #5
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	4413      	add	r3, r2
 800406a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406e:	461a      	mov	r2, r3
 8004070:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004074:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	4413      	add	r3, r2
 800407e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004086:	0151      	lsls	r1, r2, #5
 8004088:	69fa      	ldr	r2, [r7, #28]
 800408a:	440a      	add	r2, r1
 800408c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004090:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004094:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040a6:	0151      	lsls	r1, r2, #5
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	440a      	add	r2, r1
 80040ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040b4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b8:	3301      	adds	r3, #1
 80040ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d3b3      	bcc.n	800402e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	69fa      	ldr	r2, [r7, #28]
 80040d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040d4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80040d8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d016      	beq.n	8004110 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ec:	69fa      	ldr	r2, [r7, #28]
 80040ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040f2:	f043 030b 	orr.w	r3, r3, #11
 80040f6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004108:	f043 030b 	orr.w	r3, r3, #11
 800410c:	6453      	str	r3, [r2, #68]	; 0x44
 800410e:	e015      	b.n	800413c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	69fa      	ldr	r2, [r7, #28]
 800411a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800411e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004122:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004126:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	69fa      	ldr	r2, [r7, #28]
 8004132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004136:	f043 030b 	orr.w	r3, r3, #11
 800413a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69fa      	ldr	r2, [r7, #28]
 8004146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800414a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800414e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6818      	ldr	r0, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004160:	461a      	mov	r2, r3
 8004162:	f004 fb65 	bl	8008830 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695a      	ldr	r2, [r3, #20]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004174:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f004 fa94 	bl	80086a8 <USB_ReadInterrupts>
 8004180:	4603      	mov	r3, r0
 8004182:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800418a:	d124      	bne.n	80041d6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f004 fb2a 	bl	80087ea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f003 fadf 	bl	800775e <USB_GetDevSpeed>
 80041a0:	4603      	mov	r3, r0
 80041a2:	461a      	mov	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681c      	ldr	r4, [r3, #0]
 80041ac:	f001 f9e8 	bl	8005580 <HAL_RCC_GetHCLKFreq>
 80041b0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	461a      	mov	r2, r3
 80041ba:	4620      	mov	r0, r4
 80041bc:	f002 ffde 	bl	800717c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f006 fddc 	bl	800ad7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695a      	ldr	r2, [r3, #20]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80041d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f004 fa64 	bl	80086a8 <USB_ReadInterrupts>
 80041e0:	4603      	mov	r3, r0
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d10a      	bne.n	8004200 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f006 fdb9 	bl	800ad62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695a      	ldr	r2, [r3, #20]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f002 0208 	and.w	r2, r2, #8
 80041fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4618      	mov	r0, r3
 8004206:	f004 fa4f 	bl	80086a8 <USB_ReadInterrupts>
 800420a:	4603      	mov	r3, r0
 800420c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004210:	2b80      	cmp	r3, #128	; 0x80
 8004212:	d122      	bne.n	800425a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004220:	2301      	movs	r3, #1
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
 8004224:	e014      	b.n	8004250 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800422a:	4613      	mov	r3, r2
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	4413      	add	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	440b      	add	r3, r1
 8004234:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d105      	bne.n	800424a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	b2db      	uxtb	r3, r3
 8004242:	4619      	mov	r1, r3
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 fb27 	bl	8004898 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	3301      	adds	r3, #1
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004256:	429a      	cmp	r2, r3
 8004258:	d3e5      	bcc.n	8004226 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f004 fa22 	bl	80086a8 <USB_ReadInterrupts>
 8004264:	4603      	mov	r3, r0
 8004266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800426a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800426e:	d13b      	bne.n	80042e8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004270:	2301      	movs	r3, #1
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
 8004274:	e02b      	b.n	80042ce <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	4413      	add	r3, r2
 800427e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800428a:	4613      	mov	r3, r2
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	4413      	add	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	440b      	add	r3, r1
 8004294:	3340      	adds	r3, #64	; 0x40
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d115      	bne.n	80042c8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800429c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800429e:	2b00      	cmp	r3, #0
 80042a0:	da12      	bge.n	80042c8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a6:	4613      	mov	r3, r2
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	4413      	add	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	440b      	add	r3, r1
 80042b0:	333f      	adds	r3, #63	; 0x3f
 80042b2:	2201      	movs	r2, #1
 80042b4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	4619      	mov	r1, r3
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 fae8 	bl	8004898 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	3301      	adds	r3, #1
 80042cc:	627b      	str	r3, [r7, #36]	; 0x24
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d3ce      	bcc.n	8004276 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695a      	ldr	r2, [r3, #20]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80042e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f004 f9db 	bl	80086a8 <USB_ReadInterrupts>
 80042f2:	4603      	mov	r3, r0
 80042f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042fc:	d155      	bne.n	80043aa <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042fe:	2301      	movs	r3, #1
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
 8004302:	e045      	b.n	8004390 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004318:	4613      	mov	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d12e      	bne.n	800438a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800432c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800432e:	2b00      	cmp	r3, #0
 8004330:	da2b      	bge.n	800438a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800433e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004342:	429a      	cmp	r2, r3
 8004344:	d121      	bne.n	800438a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800434a:	4613      	mov	r3, r2
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	4413      	add	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	440b      	add	r3, r1
 8004354:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004358:	2201      	movs	r2, #1
 800435a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10a      	bne.n	800438a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	69fa      	ldr	r2, [r7, #28]
 800437e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004382:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004386:	6053      	str	r3, [r2, #4]
            break;
 8004388:	e007      	b.n	800439a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	3301      	adds	r3, #1
 800438e:	627b      	str	r3, [r7, #36]	; 0x24
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004396:	429a      	cmp	r2, r3
 8004398:	d3b4      	bcc.n	8004304 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695a      	ldr	r2, [r3, #20]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80043a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f004 f97a 	bl	80086a8 <USB_ReadInterrupts>
 80043b4:	4603      	mov	r3, r0
 80043b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043be:	d10a      	bne.n	80043d6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f006 fd5d 	bl	800ae80 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695a      	ldr	r2, [r3, #20]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80043d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f004 f964 	bl	80086a8 <USB_ReadInterrupts>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d115      	bne.n	8004416 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d002      	beq.n	8004402 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f006 fd4d 	bl	800ae9c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6859      	ldr	r1, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	430a      	orrs	r2, r1
 8004410:	605a      	str	r2, [r3, #4]
 8004412:	e000      	b.n	8004416 <HAL_PCD_IRQHandler+0x938>
      return;
 8004414:	bf00      	nop
    }
  }
}
 8004416:	3734      	adds	r7, #52	; 0x34
 8004418:	46bd      	mov	sp, r7
 800441a:	bd90      	pop	{r4, r7, pc}

0800441c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_PCD_SetAddress+0x1a>
 8004432:	2302      	movs	r3, #2
 8004434:	e013      	b.n	800445e <HAL_PCD_SetAddress+0x42>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	78fa      	ldrb	r2, [r7, #3]
 8004442:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	78fa      	ldrb	r2, [r7, #3]
 800444c:	4611      	mov	r1, r2
 800444e:	4618      	mov	r0, r3
 8004450:	f004 f8c2 	bl	80085d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	4608      	mov	r0, r1
 8004470:	4611      	mov	r1, r2
 8004472:	461a      	mov	r2, r3
 8004474:	4603      	mov	r3, r0
 8004476:	70fb      	strb	r3, [r7, #3]
 8004478:	460b      	mov	r3, r1
 800447a:	803b      	strh	r3, [r7, #0]
 800447c:	4613      	mov	r3, r2
 800447e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004480:	2300      	movs	r3, #0
 8004482:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004484:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004488:	2b00      	cmp	r3, #0
 800448a:	da0f      	bge.n	80044ac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800448c:	78fb      	ldrb	r3, [r7, #3]
 800448e:	f003 020f 	and.w	r2, r3, #15
 8004492:	4613      	mov	r3, r2
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	3338      	adds	r3, #56	; 0x38
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	4413      	add	r3, r2
 80044a0:	3304      	adds	r3, #4
 80044a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2201      	movs	r2, #1
 80044a8:	705a      	strb	r2, [r3, #1]
 80044aa:	e00f      	b.n	80044cc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044ac:	78fb      	ldrb	r3, [r7, #3]
 80044ae:	f003 020f 	and.w	r2, r3, #15
 80044b2:	4613      	mov	r3, r2
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	4413      	add	r3, r2
 80044c2:	3304      	adds	r3, #4
 80044c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80044cc:	78fb      	ldrb	r3, [r7, #3]
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80044d8:	883a      	ldrh	r2, [r7, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	78ba      	ldrb	r2, [r7, #2]
 80044e2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	785b      	ldrb	r3, [r3, #1]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d004      	beq.n	80044f6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80044f6:	78bb      	ldrb	r3, [r7, #2]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d102      	bne.n	8004502 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <HAL_PCD_EP_Open+0xaa>
 800450c:	2302      	movs	r3, #2
 800450e:	e00e      	b.n	800452e <HAL_PCD_EP_Open+0xc8>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68f9      	ldr	r1, [r7, #12]
 800451e:	4618      	mov	r0, r3
 8004520:	f003 f942 	bl	80077a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800452c:	7afb      	ldrb	r3, [r7, #11]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	460b      	mov	r3, r1
 8004540:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004542:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004546:	2b00      	cmp	r3, #0
 8004548:	da0f      	bge.n	800456a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800454a:	78fb      	ldrb	r3, [r7, #3]
 800454c:	f003 020f 	and.w	r2, r3, #15
 8004550:	4613      	mov	r3, r2
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	3338      	adds	r3, #56	; 0x38
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	4413      	add	r3, r2
 800455e:	3304      	adds	r3, #4
 8004560:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2201      	movs	r2, #1
 8004566:	705a      	strb	r2, [r3, #1]
 8004568:	e00f      	b.n	800458a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800456a:	78fb      	ldrb	r3, [r7, #3]
 800456c:	f003 020f 	and.w	r2, r3, #15
 8004570:	4613      	mov	r3, r2
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	4413      	add	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	4413      	add	r3, r2
 8004580:	3304      	adds	r3, #4
 8004582:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800458a:	78fb      	ldrb	r3, [r7, #3]
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	b2da      	uxtb	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_PCD_EP_Close+0x6e>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e00e      	b.n	80045c2 <HAL_PCD_EP_Close+0x8c>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68f9      	ldr	r1, [r7, #12]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f003 f980 	bl	80078b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b086      	sub	sp, #24
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	603b      	str	r3, [r7, #0]
 80045d6:	460b      	mov	r3, r1
 80045d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045da:	7afb      	ldrb	r3, [r7, #11]
 80045dc:	f003 020f 	and.w	r2, r3, #15
 80045e0:	4613      	mov	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4413      	add	r3, r2
 80045f0:	3304      	adds	r3, #4
 80045f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2200      	movs	r2, #0
 8004604:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2200      	movs	r2, #0
 800460a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800460c:	7afb      	ldrb	r3, [r7, #11]
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	b2da      	uxtb	r2, r3
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d102      	bne.n	8004626 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004626:	7afb      	ldrb	r3, [r7, #11]
 8004628:	f003 030f 	and.w	r3, r3, #15
 800462c:	2b00      	cmp	r3, #0
 800462e:	d109      	bne.n	8004644 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6818      	ldr	r0, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	b2db      	uxtb	r3, r3
 800463a:	461a      	mov	r2, r3
 800463c:	6979      	ldr	r1, [r7, #20]
 800463e:	f003 fc5f 	bl	8007f00 <USB_EP0StartXfer>
 8004642:	e008      	b.n	8004656 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6818      	ldr	r0, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	461a      	mov	r2, r3
 8004650:	6979      	ldr	r1, [r7, #20]
 8004652:	f003 fa0d 	bl	8007a70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	460b      	mov	r3, r1
 800466a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800466c:	78fb      	ldrb	r3, [r7, #3]
 800466e:	f003 020f 	and.w	r2, r3, #15
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	4613      	mov	r3, r2
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004682:	681b      	ldr	r3, [r3, #0]
}
 8004684:	4618      	mov	r0, r3
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	607a      	str	r2, [r7, #4]
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	460b      	mov	r3, r1
 800469e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046a0:	7afb      	ldrb	r3, [r7, #11]
 80046a2:	f003 020f 	and.w	r2, r3, #15
 80046a6:	4613      	mov	r3, r2
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	4413      	add	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	3338      	adds	r3, #56	; 0x38
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	4413      	add	r3, r2
 80046b4:	3304      	adds	r3, #4
 80046b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2200      	movs	r2, #0
 80046c8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2201      	movs	r2, #1
 80046ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046d0:	7afb      	ldrb	r3, [r7, #11]
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d102      	bne.n	80046ea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046ea:	7afb      	ldrb	r3, [r7, #11]
 80046ec:	f003 030f 	and.w	r3, r3, #15
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d109      	bne.n	8004708 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6818      	ldr	r0, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	461a      	mov	r2, r3
 8004700:	6979      	ldr	r1, [r7, #20]
 8004702:	f003 fbfd 	bl	8007f00 <USB_EP0StartXfer>
 8004706:	e008      	b.n	800471a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6818      	ldr	r0, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	6979      	ldr	r1, [r7, #20]
 8004716:	f003 f9ab 	bl	8007a70 <USB_EPStartXfer>
  }

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004730:	78fb      	ldrb	r3, [r7, #3]
 8004732:	f003 020f 	and.w	r2, r3, #15
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	429a      	cmp	r2, r3
 800473c:	d901      	bls.n	8004742 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e050      	b.n	80047e4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004742:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004746:	2b00      	cmp	r3, #0
 8004748:	da0f      	bge.n	800476a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800474a:	78fb      	ldrb	r3, [r7, #3]
 800474c:	f003 020f 	and.w	r2, r3, #15
 8004750:	4613      	mov	r3, r2
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	3338      	adds	r3, #56	; 0x38
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	4413      	add	r3, r2
 800475e:	3304      	adds	r3, #4
 8004760:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2201      	movs	r2, #1
 8004766:	705a      	strb	r2, [r3, #1]
 8004768:	e00d      	b.n	8004786 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800476a:	78fa      	ldrb	r2, [r7, #3]
 800476c:	4613      	mov	r3, r2
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	4413      	add	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	4413      	add	r3, r2
 800477c:	3304      	adds	r3, #4
 800477e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	b2da      	uxtb	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d101      	bne.n	80047a6 <HAL_PCD_EP_SetStall+0x82>
 80047a2:	2302      	movs	r3, #2
 80047a4:	e01e      	b.n	80047e4 <HAL_PCD_EP_SetStall+0xc0>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68f9      	ldr	r1, [r7, #12]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f003 fe3b 	bl	8008430 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047ba:	78fb      	ldrb	r3, [r7, #3]
 80047bc:	f003 030f 	and.w	r3, r3, #15
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10a      	bne.n	80047da <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6818      	ldr	r0, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	b2d9      	uxtb	r1, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047d4:	461a      	mov	r2, r3
 80047d6:	f004 f82b 	bl	8008830 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80047f8:	78fb      	ldrb	r3, [r7, #3]
 80047fa:	f003 020f 	and.w	r2, r3, #15
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	429a      	cmp	r2, r3
 8004804:	d901      	bls.n	800480a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e042      	b.n	8004890 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800480a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800480e:	2b00      	cmp	r3, #0
 8004810:	da0f      	bge.n	8004832 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004812:	78fb      	ldrb	r3, [r7, #3]
 8004814:	f003 020f 	and.w	r2, r3, #15
 8004818:	4613      	mov	r3, r2
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	4413      	add	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	3338      	adds	r3, #56	; 0x38
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	4413      	add	r3, r2
 8004826:	3304      	adds	r3, #4
 8004828:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2201      	movs	r2, #1
 800482e:	705a      	strb	r2, [r3, #1]
 8004830:	e00f      	b.n	8004852 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004832:	78fb      	ldrb	r3, [r7, #3]
 8004834:	f003 020f 	and.w	r2, r3, #15
 8004838:	4613      	mov	r3, r2
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	4413      	add	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	4413      	add	r3, r2
 8004848:	3304      	adds	r3, #4
 800484a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004858:	78fb      	ldrb	r3, [r7, #3]
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	b2da      	uxtb	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800486a:	2b01      	cmp	r3, #1
 800486c:	d101      	bne.n	8004872 <HAL_PCD_EP_ClrStall+0x86>
 800486e:	2302      	movs	r3, #2
 8004870:	e00e      	b.n	8004890 <HAL_PCD_EP_ClrStall+0xa4>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68f9      	ldr	r1, [r7, #12]
 8004880:	4618      	mov	r0, r3
 8004882:	f003 fe43 	bl	800850c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80048a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	da0c      	bge.n	80048c6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048ac:	78fb      	ldrb	r3, [r7, #3]
 80048ae:	f003 020f 	and.w	r2, r3, #15
 80048b2:	4613      	mov	r3, r2
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	3338      	adds	r3, #56	; 0x38
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	4413      	add	r3, r2
 80048c0:	3304      	adds	r3, #4
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	e00c      	b.n	80048e0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048c6:	78fb      	ldrb	r3, [r7, #3]
 80048c8:	f003 020f 	and.w	r2, r3, #15
 80048cc:	4613      	mov	r3, r2
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	4413      	add	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	4413      	add	r3, r2
 80048dc:	3304      	adds	r3, #4
 80048de:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68f9      	ldr	r1, [r7, #12]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f003 fc62 	bl	80081b0 <USB_EPStopXfer>
 80048ec:	4603      	mov	r3, r0
 80048ee:	72fb      	strb	r3, [r7, #11]

  return ret;
 80048f0:	7afb      	ldrb	r3, [r7, #11]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b08a      	sub	sp, #40	; 0x28
 80048fe:	af02      	add	r7, sp, #8
 8004900:	6078      	str	r0, [r7, #4]
 8004902:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	4613      	mov	r3, r2
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	4413      	add	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	3338      	adds	r3, #56	; 0x38
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	4413      	add	r3, r2
 800491e:	3304      	adds	r3, #4
 8004920:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a1a      	ldr	r2, [r3, #32]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	429a      	cmp	r2, r3
 800492c:	d901      	bls.n	8004932 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e06c      	b.n	8004a0c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	699a      	ldr	r2, [r3, #24]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	69fa      	ldr	r2, [r7, #28]
 8004944:	429a      	cmp	r2, r3
 8004946:	d902      	bls.n	800494e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	3303      	adds	r3, #3
 8004952:	089b      	lsrs	r3, r3, #2
 8004954:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004956:	e02b      	b.n	80049b0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	699a      	ldr	r2, [r3, #24]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	69fa      	ldr	r2, [r7, #28]
 800496a:	429a      	cmp	r2, r3
 800496c:	d902      	bls.n	8004974 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	3303      	adds	r3, #3
 8004978:	089b      	lsrs	r3, r3, #2
 800497a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6919      	ldr	r1, [r3, #16]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	b2da      	uxtb	r2, r3
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800498c:	b2db      	uxtb	r3, r3
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	4603      	mov	r3, r0
 8004992:	6978      	ldr	r0, [r7, #20]
 8004994:	f003 fcb6 	bl	8008304 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	691a      	ldr	r2, [r3, #16]
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	441a      	add	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a1a      	ldr	r2, [r3, #32]
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	441a      	add	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d809      	bhi.n	80049da <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a1a      	ldr	r2, [r3, #32]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d203      	bcs.n	80049da <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1be      	bne.n	8004958 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	699a      	ldr	r2, [r3, #24]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d811      	bhi.n	8004a0a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	f003 030f 	and.w	r3, r3, #15
 80049ec:	2201      	movs	r2, #1
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	43db      	mvns	r3, r3
 8004a00:	6939      	ldr	r1, [r7, #16]
 8004a02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a06:	4013      	ands	r3, r2
 8004a08:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3720      	adds	r7, #32
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b088      	sub	sp, #32
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	333c      	adds	r3, #60	; 0x3c
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d17b      	bne.n	8004b42 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f003 0308 	and.w	r3, r3, #8
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d015      	beq.n	8004a80 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	4a61      	ldr	r2, [pc, #388]	; (8004bdc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	f240 80b9 	bls.w	8004bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 80b3 	beq.w	8004bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a76:	461a      	mov	r2, r3
 8004a78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a7c:	6093      	str	r3, [r2, #8]
 8004a7e:	e0a7      	b.n	8004bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f003 0320 	and.w	r3, r3, #32
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d009      	beq.n	8004a9e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a96:	461a      	mov	r2, r3
 8004a98:	2320      	movs	r3, #32
 8004a9a:	6093      	str	r3, [r2, #8]
 8004a9c:	e098      	b.n	8004bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f040 8093 	bne.w	8004bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	4a4b      	ldr	r2, [pc, #300]	; (8004bdc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d90f      	bls.n	8004ad2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac8:	461a      	mov	r2, r3
 8004aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ace:	6093      	str	r3, [r2, #8]
 8004ad0:	e07e      	b.n	8004bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	4413      	add	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	69da      	ldr	r2, [r3, #28]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	0159      	lsls	r1, r3, #5
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	440b      	add	r3, r1
 8004af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004afe:	1ad2      	subs	r2, r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d114      	bne.n	8004b34 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d109      	bne.n	8004b26 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6818      	ldr	r0, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	2101      	movs	r1, #1
 8004b20:	f003 fe86 	bl	8008830 <USB_EP0_OutStart>
 8004b24:	e006      	b.n	8004b34 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	441a      	add	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	4619      	mov	r1, r3
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f006 f8dc 	bl	800acf8 <HAL_PCD_DataOutStageCallback>
 8004b40:	e046      	b.n	8004bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	4a26      	ldr	r2, [pc, #152]	; (8004be0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d124      	bne.n	8004b94 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b60:	461a      	mov	r2, r3
 8004b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b66:	6093      	str	r3, [r2, #8]
 8004b68:	e032      	b.n	8004bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f003 0320 	and.w	r3, r3, #32
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d008      	beq.n	8004b86 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b80:	461a      	mov	r2, r3
 8004b82:	2320      	movs	r3, #32
 8004b84:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f006 f8b3 	bl	800acf8 <HAL_PCD_DataOutStageCallback>
 8004b92:	e01d      	b.n	8004bd0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d114      	bne.n	8004bc4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	4413      	add	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	440b      	add	r3, r1
 8004ba8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d108      	bne.n	8004bc4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6818      	ldr	r0, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	f003 fe36 	bl	8008830 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	4619      	mov	r1, r3
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f006 f894 	bl	800acf8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3720      	adds	r7, #32
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	4f54300a 	.word	0x4f54300a
 8004be0:	4f54310a 	.word	0x4f54310a

08004be4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	333c      	adds	r3, #60	; 0x3c
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4a15      	ldr	r2, [pc, #84]	; (8004c6c <PCD_EP_OutSetupPacket_int+0x88>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d90e      	bls.n	8004c38 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d009      	beq.n	8004c38 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c30:	461a      	mov	r2, r3
 8004c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c36:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f006 f84b 	bl	800acd4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4a0a      	ldr	r2, [pc, #40]	; (8004c6c <PCD_EP_OutSetupPacket_int+0x88>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d90c      	bls.n	8004c60 <PCD_EP_OutSetupPacket_int+0x7c>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d108      	bne.n	8004c60 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6818      	ldr	r0, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c58:	461a      	mov	r2, r3
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	f003 fde8 	bl	8008830 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	4f54300a 	.word	0x4f54300a

08004c70 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	70fb      	strb	r3, [r7, #3]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d107      	bne.n	8004c9e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004c8e:	883b      	ldrh	r3, [r7, #0]
 8004c90:	0419      	lsls	r1, r3, #16
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	629a      	str	r2, [r3, #40]	; 0x28
 8004c9c:	e028      	b.n	8004cf0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca4:	0c1b      	lsrs	r3, r3, #16
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	4413      	add	r3, r2
 8004caa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cac:	2300      	movs	r3, #0
 8004cae:	73fb      	strb	r3, [r7, #15]
 8004cb0:	e00d      	b.n	8004cce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
 8004cb8:	3340      	adds	r3, #64	; 0x40
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	0c1b      	lsrs	r3, r3, #16
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	73fb      	strb	r3, [r7, #15]
 8004cce:	7bfa      	ldrb	r2, [r7, #15]
 8004cd0:	78fb      	ldrb	r3, [r7, #3]
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d3ec      	bcc.n	8004cb2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004cd8:	883b      	ldrh	r3, [r7, #0]
 8004cda:	0418      	lsls	r0, r3, #16
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6819      	ldr	r1, [r3, #0]
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	4302      	orrs	r2, r0
 8004ce8:	3340      	adds	r3, #64	; 0x40
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	460b      	mov	r3, r1
 8004d08:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	887a      	ldrh	r2, [r7, #2]
 8004d10:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e267      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d075      	beq.n	8004e42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d56:	4b88      	ldr	r3, [pc, #544]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 030c 	and.w	r3, r3, #12
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d00c      	beq.n	8004d7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d62:	4b85      	ldr	r3, [pc, #532]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d6a:	2b08      	cmp	r3, #8
 8004d6c:	d112      	bne.n	8004d94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d6e:	4b82      	ldr	r3, [pc, #520]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d7a:	d10b      	bne.n	8004d94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d7c:	4b7e      	ldr	r3, [pc, #504]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d05b      	beq.n	8004e40 <HAL_RCC_OscConfig+0x108>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d157      	bne.n	8004e40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e242      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d9c:	d106      	bne.n	8004dac <HAL_RCC_OscConfig+0x74>
 8004d9e:	4b76      	ldr	r3, [pc, #472]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a75      	ldr	r2, [pc, #468]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	e01d      	b.n	8004de8 <HAL_RCC_OscConfig+0xb0>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004db4:	d10c      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x98>
 8004db6:	4b70      	ldr	r3, [pc, #448]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a6f      	ldr	r2, [pc, #444]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	4b6d      	ldr	r3, [pc, #436]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a6c      	ldr	r2, [pc, #432]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	e00b      	b.n	8004de8 <HAL_RCC_OscConfig+0xb0>
 8004dd0:	4b69      	ldr	r3, [pc, #420]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a68      	ldr	r2, [pc, #416]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	4b66      	ldr	r3, [pc, #408]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a65      	ldr	r2, [pc, #404]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d013      	beq.n	8004e18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df0:	f7fd fc74 	bl	80026dc <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004df8:	f7fd fc70 	bl	80026dc <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b64      	cmp	r3, #100	; 0x64
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e207      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0a:	4b5b      	ldr	r3, [pc, #364]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0f0      	beq.n	8004df8 <HAL_RCC_OscConfig+0xc0>
 8004e16:	e014      	b.n	8004e42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e18:	f7fd fc60 	bl	80026dc <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e20:	f7fd fc5c 	bl	80026dc <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b64      	cmp	r3, #100	; 0x64
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e1f3      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e32:	4b51      	ldr	r3, [pc, #324]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f0      	bne.n	8004e20 <HAL_RCC_OscConfig+0xe8>
 8004e3e:	e000      	b.n	8004e42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d063      	beq.n	8004f16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e4e:	4b4a      	ldr	r3, [pc, #296]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 030c 	and.w	r3, r3, #12
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00b      	beq.n	8004e72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e5a:	4b47      	ldr	r3, [pc, #284]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e62:	2b08      	cmp	r3, #8
 8004e64:	d11c      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e66:	4b44      	ldr	r3, [pc, #272]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d116      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e72:	4b41      	ldr	r3, [pc, #260]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d005      	beq.n	8004e8a <HAL_RCC_OscConfig+0x152>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d001      	beq.n	8004e8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e1c7      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e8a:	4b3b      	ldr	r3, [pc, #236]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	4937      	ldr	r1, [pc, #220]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e9e:	e03a      	b.n	8004f16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d020      	beq.n	8004eea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ea8:	4b34      	ldr	r3, [pc, #208]	; (8004f7c <HAL_RCC_OscConfig+0x244>)
 8004eaa:	2201      	movs	r2, #1
 8004eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eae:	f7fd fc15 	bl	80026dc <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eb6:	f7fd fc11 	bl	80026dc <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e1a8      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ec8:	4b2b      	ldr	r3, [pc, #172]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0f0      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed4:	4b28      	ldr	r3, [pc, #160]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	4925      	ldr	r1, [pc, #148]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	600b      	str	r3, [r1, #0]
 8004ee8:	e015      	b.n	8004f16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eea:	4b24      	ldr	r3, [pc, #144]	; (8004f7c <HAL_RCC_OscConfig+0x244>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef0:	f7fd fbf4 	bl	80026dc <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ef8:	f7fd fbf0 	bl	80026dc <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e187      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f0a:	4b1b      	ldr	r3, [pc, #108]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1f0      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d036      	beq.n	8004f90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d016      	beq.n	8004f58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f2a:	4b15      	ldr	r3, [pc, #84]	; (8004f80 <HAL_RCC_OscConfig+0x248>)
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f30:	f7fd fbd4 	bl	80026dc <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f38:	f7fd fbd0 	bl	80026dc <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e167      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f4a:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <HAL_RCC_OscConfig+0x240>)
 8004f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0f0      	beq.n	8004f38 <HAL_RCC_OscConfig+0x200>
 8004f56:	e01b      	b.n	8004f90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f58:	4b09      	ldr	r3, [pc, #36]	; (8004f80 <HAL_RCC_OscConfig+0x248>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f5e:	f7fd fbbd 	bl	80026dc <HAL_GetTick>
 8004f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f64:	e00e      	b.n	8004f84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f66:	f7fd fbb9 	bl	80026dc <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d907      	bls.n	8004f84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e150      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	42470000 	.word	0x42470000
 8004f80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f84:	4b88      	ldr	r3, [pc, #544]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8004f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1ea      	bne.n	8004f66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 8097 	beq.w	80050cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fa2:	4b81      	ldr	r3, [pc, #516]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10f      	bne.n	8004fce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60bb      	str	r3, [r7, #8]
 8004fb2:	4b7d      	ldr	r3, [pc, #500]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	4a7c      	ldr	r2, [pc, #496]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8004fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8004fbe:	4b7a      	ldr	r3, [pc, #488]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc6:	60bb      	str	r3, [r7, #8]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fce:	4b77      	ldr	r3, [pc, #476]	; (80051ac <HAL_RCC_OscConfig+0x474>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d118      	bne.n	800500c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fda:	4b74      	ldr	r3, [pc, #464]	; (80051ac <HAL_RCC_OscConfig+0x474>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a73      	ldr	r2, [pc, #460]	; (80051ac <HAL_RCC_OscConfig+0x474>)
 8004fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fe6:	f7fd fb79 	bl	80026dc <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fec:	e008      	b.n	8005000 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fee:	f7fd fb75 	bl	80026dc <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e10c      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005000:	4b6a      	ldr	r3, [pc, #424]	; (80051ac <HAL_RCC_OscConfig+0x474>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0f0      	beq.n	8004fee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d106      	bne.n	8005022 <HAL_RCC_OscConfig+0x2ea>
 8005014:	4b64      	ldr	r3, [pc, #400]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8005016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005018:	4a63      	ldr	r2, [pc, #396]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 800501a:	f043 0301 	orr.w	r3, r3, #1
 800501e:	6713      	str	r3, [r2, #112]	; 0x70
 8005020:	e01c      	b.n	800505c <HAL_RCC_OscConfig+0x324>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	2b05      	cmp	r3, #5
 8005028:	d10c      	bne.n	8005044 <HAL_RCC_OscConfig+0x30c>
 800502a:	4b5f      	ldr	r3, [pc, #380]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 800502c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502e:	4a5e      	ldr	r2, [pc, #376]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8005030:	f043 0304 	orr.w	r3, r3, #4
 8005034:	6713      	str	r3, [r2, #112]	; 0x70
 8005036:	4b5c      	ldr	r3, [pc, #368]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8005038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503a:	4a5b      	ldr	r2, [pc, #364]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	6713      	str	r3, [r2, #112]	; 0x70
 8005042:	e00b      	b.n	800505c <HAL_RCC_OscConfig+0x324>
 8005044:	4b58      	ldr	r3, [pc, #352]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8005046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005048:	4a57      	ldr	r2, [pc, #348]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 800504a:	f023 0301 	bic.w	r3, r3, #1
 800504e:	6713      	str	r3, [r2, #112]	; 0x70
 8005050:	4b55      	ldr	r3, [pc, #340]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8005052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005054:	4a54      	ldr	r2, [pc, #336]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8005056:	f023 0304 	bic.w	r3, r3, #4
 800505a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d015      	beq.n	8005090 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005064:	f7fd fb3a 	bl	80026dc <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800506a:	e00a      	b.n	8005082 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800506c:	f7fd fb36 	bl	80026dc <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	f241 3288 	movw	r2, #5000	; 0x1388
 800507a:	4293      	cmp	r3, r2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e0cb      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005082:	4b49      	ldr	r3, [pc, #292]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8005084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0ee      	beq.n	800506c <HAL_RCC_OscConfig+0x334>
 800508e:	e014      	b.n	80050ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005090:	f7fd fb24 	bl	80026dc <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005096:	e00a      	b.n	80050ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005098:	f7fd fb20 	bl	80026dc <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e0b5      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050ae:	4b3e      	ldr	r3, [pc, #248]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 80050b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1ee      	bne.n	8005098 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050ba:	7dfb      	ldrb	r3, [r7, #23]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d105      	bne.n	80050cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c0:	4b39      	ldr	r3, [pc, #228]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	4a38      	ldr	r2, [pc, #224]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 80050c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 80a1 	beq.w	8005218 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050d6:	4b34      	ldr	r3, [pc, #208]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 030c 	and.w	r3, r3, #12
 80050de:	2b08      	cmp	r3, #8
 80050e0:	d05c      	beq.n	800519c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d141      	bne.n	800516e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ea:	4b31      	ldr	r3, [pc, #196]	; (80051b0 <HAL_RCC_OscConfig+0x478>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f0:	f7fd faf4 	bl	80026dc <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050f8:	f7fd faf0 	bl	80026dc <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e087      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800510a:	4b27      	ldr	r3, [pc, #156]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1f0      	bne.n	80050f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69da      	ldr	r2, [r3, #28]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	431a      	orrs	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	019b      	lsls	r3, r3, #6
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512c:	085b      	lsrs	r3, r3, #1
 800512e:	3b01      	subs	r3, #1
 8005130:	041b      	lsls	r3, r3, #16
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005138:	061b      	lsls	r3, r3, #24
 800513a:	491b      	ldr	r1, [pc, #108]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 800513c:	4313      	orrs	r3, r2
 800513e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005140:	4b1b      	ldr	r3, [pc, #108]	; (80051b0 <HAL_RCC_OscConfig+0x478>)
 8005142:	2201      	movs	r2, #1
 8005144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005146:	f7fd fac9 	bl	80026dc <HAL_GetTick>
 800514a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800514c:	e008      	b.n	8005160 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800514e:	f7fd fac5 	bl	80026dc <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e05c      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005160:	4b11      	ldr	r3, [pc, #68]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0f0      	beq.n	800514e <HAL_RCC_OscConfig+0x416>
 800516c:	e054      	b.n	8005218 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800516e:	4b10      	ldr	r3, [pc, #64]	; (80051b0 <HAL_RCC_OscConfig+0x478>)
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005174:	f7fd fab2 	bl	80026dc <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800517c:	f7fd faae 	bl	80026dc <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e045      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800518e:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <HAL_RCC_OscConfig+0x470>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1f0      	bne.n	800517c <HAL_RCC_OscConfig+0x444>
 800519a:	e03d      	b.n	8005218 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d107      	bne.n	80051b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e038      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
 80051a8:	40023800 	.word	0x40023800
 80051ac:	40007000 	.word	0x40007000
 80051b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051b4:	4b1b      	ldr	r3, [pc, #108]	; (8005224 <HAL_RCC_OscConfig+0x4ec>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d028      	beq.n	8005214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d121      	bne.n	8005214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051da:	429a      	cmp	r2, r3
 80051dc:	d11a      	bne.n	8005214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051e4:	4013      	ands	r3, r2
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d111      	bne.n	8005214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fa:	085b      	lsrs	r3, r3, #1
 80051fc:	3b01      	subs	r3, #1
 80051fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005200:	429a      	cmp	r2, r3
 8005202:	d107      	bne.n	8005214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005210:	429a      	cmp	r2, r3
 8005212:	d001      	beq.n	8005218 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e000      	b.n	800521a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	40023800 	.word	0x40023800

08005228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e0cc      	b.n	80053d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800523c:	4b68      	ldr	r3, [pc, #416]	; (80053e0 <HAL_RCC_ClockConfig+0x1b8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d90c      	bls.n	8005264 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800524a:	4b65      	ldr	r3, [pc, #404]	; (80053e0 <HAL_RCC_ClockConfig+0x1b8>)
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005252:	4b63      	ldr	r3, [pc, #396]	; (80053e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	429a      	cmp	r2, r3
 800525e:	d001      	beq.n	8005264 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e0b8      	b.n	80053d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d020      	beq.n	80052b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800527c:	4b59      	ldr	r3, [pc, #356]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	4a58      	ldr	r2, [pc, #352]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005286:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0308 	and.w	r3, r3, #8
 8005290:	2b00      	cmp	r3, #0
 8005292:	d005      	beq.n	80052a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005294:	4b53      	ldr	r3, [pc, #332]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	4a52      	ldr	r2, [pc, #328]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 800529a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800529e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052a0:	4b50      	ldr	r3, [pc, #320]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	494d      	ldr	r1, [pc, #308]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d044      	beq.n	8005348 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d107      	bne.n	80052d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052c6:	4b47      	ldr	r3, [pc, #284]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d119      	bne.n	8005306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e07f      	b.n	80053d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d003      	beq.n	80052e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	d107      	bne.n	80052f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052e6:	4b3f      	ldr	r3, [pc, #252]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d109      	bne.n	8005306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e06f      	b.n	80053d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052f6:	4b3b      	ldr	r3, [pc, #236]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e067      	b.n	80053d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005306:	4b37      	ldr	r3, [pc, #220]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f023 0203 	bic.w	r2, r3, #3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	4934      	ldr	r1, [pc, #208]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005314:	4313      	orrs	r3, r2
 8005316:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005318:	f7fd f9e0 	bl	80026dc <HAL_GetTick>
 800531c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800531e:	e00a      	b.n	8005336 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005320:	f7fd f9dc 	bl	80026dc <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	f241 3288 	movw	r2, #5000	; 0x1388
 800532e:	4293      	cmp	r3, r2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e04f      	b.n	80053d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005336:	4b2b      	ldr	r3, [pc, #172]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f003 020c 	and.w	r2, r3, #12
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	429a      	cmp	r2, r3
 8005346:	d1eb      	bne.n	8005320 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005348:	4b25      	ldr	r3, [pc, #148]	; (80053e0 <HAL_RCC_ClockConfig+0x1b8>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	429a      	cmp	r2, r3
 8005354:	d20c      	bcs.n	8005370 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005356:	4b22      	ldr	r3, [pc, #136]	; (80053e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800535e:	4b20      	ldr	r3, [pc, #128]	; (80053e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	429a      	cmp	r2, r3
 800536a:	d001      	beq.n	8005370 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e032      	b.n	80053d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b00      	cmp	r3, #0
 800537a:	d008      	beq.n	800538e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800537c:	4b19      	ldr	r3, [pc, #100]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	4916      	ldr	r1, [pc, #88]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 800538a:	4313      	orrs	r3, r2
 800538c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	2b00      	cmp	r3, #0
 8005398:	d009      	beq.n	80053ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800539a:	4b12      	ldr	r3, [pc, #72]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	490e      	ldr	r1, [pc, #56]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053ae:	f000 f821 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 80053b2:	4602      	mov	r2, r0
 80053b4:	4b0b      	ldr	r3, [pc, #44]	; (80053e4 <HAL_RCC_ClockConfig+0x1bc>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	091b      	lsrs	r3, r3, #4
 80053ba:	f003 030f 	and.w	r3, r3, #15
 80053be:	490a      	ldr	r1, [pc, #40]	; (80053e8 <HAL_RCC_ClockConfig+0x1c0>)
 80053c0:	5ccb      	ldrb	r3, [r1, r3]
 80053c2:	fa22 f303 	lsr.w	r3, r2, r3
 80053c6:	4a09      	ldr	r2, [pc, #36]	; (80053ec <HAL_RCC_ClockConfig+0x1c4>)
 80053c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053ca:	4b09      	ldr	r3, [pc, #36]	; (80053f0 <HAL_RCC_ClockConfig+0x1c8>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fd f940 	bl	8002654 <HAL_InitTick>

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40023c00 	.word	0x40023c00
 80053e4:	40023800 	.word	0x40023800
 80053e8:	0800de60 	.word	0x0800de60
 80053ec:	20000000 	.word	0x20000000
 80053f0:	20000004 	.word	0x20000004

080053f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053f8:	b090      	sub	sp, #64	; 0x40
 80053fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005400:	2300      	movs	r3, #0
 8005402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005404:	2300      	movs	r3, #0
 8005406:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800540c:	4b59      	ldr	r3, [pc, #356]	; (8005574 <HAL_RCC_GetSysClockFreq+0x180>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f003 030c 	and.w	r3, r3, #12
 8005414:	2b08      	cmp	r3, #8
 8005416:	d00d      	beq.n	8005434 <HAL_RCC_GetSysClockFreq+0x40>
 8005418:	2b08      	cmp	r3, #8
 800541a:	f200 80a1 	bhi.w	8005560 <HAL_RCC_GetSysClockFreq+0x16c>
 800541e:	2b00      	cmp	r3, #0
 8005420:	d002      	beq.n	8005428 <HAL_RCC_GetSysClockFreq+0x34>
 8005422:	2b04      	cmp	r3, #4
 8005424:	d003      	beq.n	800542e <HAL_RCC_GetSysClockFreq+0x3a>
 8005426:	e09b      	b.n	8005560 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005428:	4b53      	ldr	r3, [pc, #332]	; (8005578 <HAL_RCC_GetSysClockFreq+0x184>)
 800542a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800542c:	e09b      	b.n	8005566 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800542e:	4b53      	ldr	r3, [pc, #332]	; (800557c <HAL_RCC_GetSysClockFreq+0x188>)
 8005430:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005432:	e098      	b.n	8005566 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005434:	4b4f      	ldr	r3, [pc, #316]	; (8005574 <HAL_RCC_GetSysClockFreq+0x180>)
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800543c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800543e:	4b4d      	ldr	r3, [pc, #308]	; (8005574 <HAL_RCC_GetSysClockFreq+0x180>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d028      	beq.n	800549c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800544a:	4b4a      	ldr	r3, [pc, #296]	; (8005574 <HAL_RCC_GetSysClockFreq+0x180>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	099b      	lsrs	r3, r3, #6
 8005450:	2200      	movs	r2, #0
 8005452:	623b      	str	r3, [r7, #32]
 8005454:	627a      	str	r2, [r7, #36]	; 0x24
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800545c:	2100      	movs	r1, #0
 800545e:	4b47      	ldr	r3, [pc, #284]	; (800557c <HAL_RCC_GetSysClockFreq+0x188>)
 8005460:	fb03 f201 	mul.w	r2, r3, r1
 8005464:	2300      	movs	r3, #0
 8005466:	fb00 f303 	mul.w	r3, r0, r3
 800546a:	4413      	add	r3, r2
 800546c:	4a43      	ldr	r2, [pc, #268]	; (800557c <HAL_RCC_GetSysClockFreq+0x188>)
 800546e:	fba0 1202 	umull	r1, r2, r0, r2
 8005472:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005474:	460a      	mov	r2, r1
 8005476:	62ba      	str	r2, [r7, #40]	; 0x28
 8005478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800547a:	4413      	add	r3, r2
 800547c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800547e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005480:	2200      	movs	r2, #0
 8005482:	61bb      	str	r3, [r7, #24]
 8005484:	61fa      	str	r2, [r7, #28]
 8005486:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800548a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800548e:	f7fb fb93 	bl	8000bb8 <__aeabi_uldivmod>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	4613      	mov	r3, r2
 8005498:	63fb      	str	r3, [r7, #60]	; 0x3c
 800549a:	e053      	b.n	8005544 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800549c:	4b35      	ldr	r3, [pc, #212]	; (8005574 <HAL_RCC_GetSysClockFreq+0x180>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	099b      	lsrs	r3, r3, #6
 80054a2:	2200      	movs	r2, #0
 80054a4:	613b      	str	r3, [r7, #16]
 80054a6:	617a      	str	r2, [r7, #20]
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80054ae:	f04f 0b00 	mov.w	fp, #0
 80054b2:	4652      	mov	r2, sl
 80054b4:	465b      	mov	r3, fp
 80054b6:	f04f 0000 	mov.w	r0, #0
 80054ba:	f04f 0100 	mov.w	r1, #0
 80054be:	0159      	lsls	r1, r3, #5
 80054c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054c4:	0150      	lsls	r0, r2, #5
 80054c6:	4602      	mov	r2, r0
 80054c8:	460b      	mov	r3, r1
 80054ca:	ebb2 080a 	subs.w	r8, r2, sl
 80054ce:	eb63 090b 	sbc.w	r9, r3, fp
 80054d2:	f04f 0200 	mov.w	r2, #0
 80054d6:	f04f 0300 	mov.w	r3, #0
 80054da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80054de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80054e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80054e6:	ebb2 0408 	subs.w	r4, r2, r8
 80054ea:	eb63 0509 	sbc.w	r5, r3, r9
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	00eb      	lsls	r3, r5, #3
 80054f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054fc:	00e2      	lsls	r2, r4, #3
 80054fe:	4614      	mov	r4, r2
 8005500:	461d      	mov	r5, r3
 8005502:	eb14 030a 	adds.w	r3, r4, sl
 8005506:	603b      	str	r3, [r7, #0]
 8005508:	eb45 030b 	adc.w	r3, r5, fp
 800550c:	607b      	str	r3, [r7, #4]
 800550e:	f04f 0200 	mov.w	r2, #0
 8005512:	f04f 0300 	mov.w	r3, #0
 8005516:	e9d7 4500 	ldrd	r4, r5, [r7]
 800551a:	4629      	mov	r1, r5
 800551c:	028b      	lsls	r3, r1, #10
 800551e:	4621      	mov	r1, r4
 8005520:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005524:	4621      	mov	r1, r4
 8005526:	028a      	lsls	r2, r1, #10
 8005528:	4610      	mov	r0, r2
 800552a:	4619      	mov	r1, r3
 800552c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552e:	2200      	movs	r2, #0
 8005530:	60bb      	str	r3, [r7, #8]
 8005532:	60fa      	str	r2, [r7, #12]
 8005534:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005538:	f7fb fb3e 	bl	8000bb8 <__aeabi_uldivmod>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4613      	mov	r3, r2
 8005542:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005544:	4b0b      	ldr	r3, [pc, #44]	; (8005574 <HAL_RCC_GetSysClockFreq+0x180>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	0c1b      	lsrs	r3, r3, #16
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	3301      	adds	r3, #1
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005554:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005558:	fbb2 f3f3 	udiv	r3, r2, r3
 800555c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800555e:	e002      	b.n	8005566 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005560:	4b05      	ldr	r3, [pc, #20]	; (8005578 <HAL_RCC_GetSysClockFreq+0x184>)
 8005562:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005568:	4618      	mov	r0, r3
 800556a:	3740      	adds	r7, #64	; 0x40
 800556c:	46bd      	mov	sp, r7
 800556e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005572:	bf00      	nop
 8005574:	40023800 	.word	0x40023800
 8005578:	00f42400 	.word	0x00f42400
 800557c:	017d7840 	.word	0x017d7840

08005580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005584:	4b03      	ldr	r3, [pc, #12]	; (8005594 <HAL_RCC_GetHCLKFreq+0x14>)
 8005586:	681b      	ldr	r3, [r3, #0]
}
 8005588:	4618      	mov	r0, r3
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	20000000 	.word	0x20000000

08005598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800559c:	f7ff fff0 	bl	8005580 <HAL_RCC_GetHCLKFreq>
 80055a0:	4602      	mov	r2, r0
 80055a2:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	0a9b      	lsrs	r3, r3, #10
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	4903      	ldr	r1, [pc, #12]	; (80055bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80055ae:	5ccb      	ldrb	r3, [r1, r3]
 80055b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40023800 	.word	0x40023800
 80055bc:	0800de70 	.word	0x0800de70

080055c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80055c4:	f7ff ffdc 	bl	8005580 <HAL_RCC_GetHCLKFreq>
 80055c8:	4602      	mov	r2, r0
 80055ca:	4b05      	ldr	r3, [pc, #20]	; (80055e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	0b5b      	lsrs	r3, r3, #13
 80055d0:	f003 0307 	and.w	r3, r3, #7
 80055d4:	4903      	ldr	r1, [pc, #12]	; (80055e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055d6:	5ccb      	ldrb	r3, [r1, r3]
 80055d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055dc:	4618      	mov	r0, r3
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	40023800 	.word	0x40023800
 80055e4:	0800de70 	.word	0x0800de70

080055e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e07b      	b.n	80056f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d108      	bne.n	8005614 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800560a:	d009      	beq.n	8005620 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	61da      	str	r2, [r3, #28]
 8005612:	e005      	b.n	8005620 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d106      	bne.n	8005640 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fc f944 	bl	80018c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005656:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005668:	431a      	orrs	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005672:	431a      	orrs	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	431a      	orrs	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005690:	431a      	orrs	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a4:	ea42 0103 	orr.w	r1, r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	0c1b      	lsrs	r3, r3, #16
 80056be:	f003 0104 	and.w	r1, r3, #4
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	f003 0210 	and.w	r2, r3, #16
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69da      	ldr	r2, [r3, #28]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b082      	sub	sp, #8
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e041      	b.n	8005790 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d106      	bne.n	8005726 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f7fc fd93 	bl	800224c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2202      	movs	r2, #2
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	3304      	adds	r3, #4
 8005736:	4619      	mov	r1, r3
 8005738:	4610      	mov	r0, r2
 800573a:	f000 fcd5 	bl	80060e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d001      	beq.n	80057b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e044      	b.n	800583a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0201 	orr.w	r2, r2, #1
 80057c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a1e      	ldr	r2, [pc, #120]	; (8005848 <HAL_TIM_Base_Start_IT+0xb0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d018      	beq.n	8005804 <HAL_TIM_Base_Start_IT+0x6c>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057da:	d013      	beq.n	8005804 <HAL_TIM_Base_Start_IT+0x6c>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a1a      	ldr	r2, [pc, #104]	; (800584c <HAL_TIM_Base_Start_IT+0xb4>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00e      	beq.n	8005804 <HAL_TIM_Base_Start_IT+0x6c>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a19      	ldr	r2, [pc, #100]	; (8005850 <HAL_TIM_Base_Start_IT+0xb8>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d009      	beq.n	8005804 <HAL_TIM_Base_Start_IT+0x6c>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a17      	ldr	r2, [pc, #92]	; (8005854 <HAL_TIM_Base_Start_IT+0xbc>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d004      	beq.n	8005804 <HAL_TIM_Base_Start_IT+0x6c>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a16      	ldr	r2, [pc, #88]	; (8005858 <HAL_TIM_Base_Start_IT+0xc0>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d111      	bne.n	8005828 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b06      	cmp	r3, #6
 8005814:	d010      	beq.n	8005838 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f042 0201 	orr.w	r2, r2, #1
 8005824:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005826:	e007      	b.n	8005838 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0201 	orr.w	r2, r2, #1
 8005836:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	40010000 	.word	0x40010000
 800584c:	40000400 	.word	0x40000400
 8005850:	40000800 	.word	0x40000800
 8005854:	40000c00 	.word	0x40000c00
 8005858:	40014000 	.word	0x40014000

0800585c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e041      	b.n	80058f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d106      	bne.n	8005888 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7fc fc96 	bl	80021b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3304      	adds	r3, #4
 8005898:	4619      	mov	r1, r3
 800589a:	4610      	mov	r0, r2
 800589c:	f000 fc24 	bl	80060e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d109      	bne.n	8005920 <HAL_TIM_PWM_Start+0x24>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b01      	cmp	r3, #1
 8005916:	bf14      	ite	ne
 8005918:	2301      	movne	r3, #1
 800591a:	2300      	moveq	r3, #0
 800591c:	b2db      	uxtb	r3, r3
 800591e:	e022      	b.n	8005966 <HAL_TIM_PWM_Start+0x6a>
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2b04      	cmp	r3, #4
 8005924:	d109      	bne.n	800593a <HAL_TIM_PWM_Start+0x3e>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b01      	cmp	r3, #1
 8005930:	bf14      	ite	ne
 8005932:	2301      	movne	r3, #1
 8005934:	2300      	moveq	r3, #0
 8005936:	b2db      	uxtb	r3, r3
 8005938:	e015      	b.n	8005966 <HAL_TIM_PWM_Start+0x6a>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b08      	cmp	r3, #8
 800593e:	d109      	bne.n	8005954 <HAL_TIM_PWM_Start+0x58>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b01      	cmp	r3, #1
 800594a:	bf14      	ite	ne
 800594c:	2301      	movne	r3, #1
 800594e:	2300      	moveq	r3, #0
 8005950:	b2db      	uxtb	r3, r3
 8005952:	e008      	b.n	8005966 <HAL_TIM_PWM_Start+0x6a>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b01      	cmp	r3, #1
 800595e:	bf14      	ite	ne
 8005960:	2301      	movne	r3, #1
 8005962:	2300      	moveq	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e068      	b.n	8005a40 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d104      	bne.n	800597e <HAL_TIM_PWM_Start+0x82>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800597c:	e013      	b.n	80059a6 <HAL_TIM_PWM_Start+0xaa>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b04      	cmp	r3, #4
 8005982:	d104      	bne.n	800598e <HAL_TIM_PWM_Start+0x92>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800598c:	e00b      	b.n	80059a6 <HAL_TIM_PWM_Start+0xaa>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b08      	cmp	r3, #8
 8005992:	d104      	bne.n	800599e <HAL_TIM_PWM_Start+0xa2>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800599c:	e003      	b.n	80059a6 <HAL_TIM_PWM_Start+0xaa>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2202      	movs	r2, #2
 80059a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2201      	movs	r2, #1
 80059ac:	6839      	ldr	r1, [r7, #0]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fda6 	bl	8006500 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a23      	ldr	r2, [pc, #140]	; (8005a48 <HAL_TIM_PWM_Start+0x14c>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d107      	bne.n	80059ce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a1d      	ldr	r2, [pc, #116]	; (8005a48 <HAL_TIM_PWM_Start+0x14c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d018      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x10e>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e0:	d013      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x10e>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a19      	ldr	r2, [pc, #100]	; (8005a4c <HAL_TIM_PWM_Start+0x150>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00e      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x10e>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a17      	ldr	r2, [pc, #92]	; (8005a50 <HAL_TIM_PWM_Start+0x154>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d009      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x10e>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a16      	ldr	r2, [pc, #88]	; (8005a54 <HAL_TIM_PWM_Start+0x158>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d004      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x10e>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a14      	ldr	r2, [pc, #80]	; (8005a58 <HAL_TIM_PWM_Start+0x15c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d111      	bne.n	8005a2e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b06      	cmp	r3, #6
 8005a1a:	d010      	beq.n	8005a3e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0201 	orr.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2c:	e007      	b.n	8005a3e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f042 0201 	orr.w	r2, r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	40010000 	.word	0x40010000
 8005a4c:	40000400 	.word	0x40000400
 8005a50:	40000800 	.word	0x40000800
 8005a54:	40000c00 	.word	0x40000c00
 8005a58:	40014000 	.word	0x40014000

08005a5c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e097      	b.n	8005ba0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d106      	bne.n	8005a8a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7fc fb3d 	bl	8002104 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	6812      	ldr	r2, [r2, #0]
 8005a9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aa0:	f023 0307 	bic.w	r3, r3, #7
 8005aa4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	3304      	adds	r3, #4
 8005aae:	4619      	mov	r1, r3
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	f000 fb19 	bl	80060e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ade:	f023 0303 	bic.w	r3, r3, #3
 8005ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	021b      	lsls	r3, r3, #8
 8005aee:	4313      	orrs	r3, r2
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005afc:	f023 030c 	bic.w	r3, r3, #12
 8005b00:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	021b      	lsls	r3, r3, #8
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	011a      	lsls	r2, r3, #4
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	031b      	lsls	r3, r3, #12
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005b3a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005b42:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	011b      	lsls	r3, r3, #4
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3718      	adds	r7, #24
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bb8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005bc0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bc8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005bd0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d110      	bne.n	8005bfa <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d102      	bne.n	8005be4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bde:	7b7b      	ldrb	r3, [r7, #13]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d001      	beq.n	8005be8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e089      	b.n	8005cfc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bf8:	e031      	b.n	8005c5e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d110      	bne.n	8005c22 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c00:	7bbb      	ldrb	r3, [r7, #14]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d102      	bne.n	8005c0c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c06:	7b3b      	ldrb	r3, [r7, #12]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d001      	beq.n	8005c10 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e075      	b.n	8005cfc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c20:	e01d      	b.n	8005c5e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c22:	7bfb      	ldrb	r3, [r7, #15]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d108      	bne.n	8005c3a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c28:	7bbb      	ldrb	r3, [r7, #14]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d105      	bne.n	8005c3a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c2e:	7b7b      	ldrb	r3, [r7, #13]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d102      	bne.n	8005c3a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c34:	7b3b      	ldrb	r3, [r7, #12]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d001      	beq.n	8005c3e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e05e      	b.n	8005cfc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2202      	movs	r2, #2
 8005c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2202      	movs	r2, #2
 8005c4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2202      	movs	r2, #2
 8005c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2202      	movs	r2, #2
 8005c5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <HAL_TIM_Encoder_Start_IT+0xc4>
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	2b04      	cmp	r3, #4
 8005c68:	d010      	beq.n	8005c8c <HAL_TIM_Encoder_Start_IT+0xe4>
 8005c6a:	e01f      	b.n	8005cac <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2201      	movs	r2, #1
 8005c72:	2100      	movs	r1, #0
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 fc43 	bl	8006500 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68da      	ldr	r2, [r3, #12]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f042 0202 	orr.w	r2, r2, #2
 8005c88:	60da      	str	r2, [r3, #12]
      break;
 8005c8a:	e02e      	b.n	8005cea <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2201      	movs	r2, #1
 8005c92:	2104      	movs	r1, #4
 8005c94:	4618      	mov	r0, r3
 8005c96:	f000 fc33 	bl	8006500 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f042 0204 	orr.w	r2, r2, #4
 8005ca8:	60da      	str	r2, [r3, #12]
      break;
 8005caa:	e01e      	b.n	8005cea <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 fc23 	bl	8006500 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	2104      	movs	r1, #4
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f000 fc1c 	bl	8006500 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f042 0202 	orr.w	r2, r2, #2
 8005cd6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0204 	orr.w	r2, r2, #4
 8005ce6:	60da      	str	r2, [r3, #12]
      break;
 8005ce8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f042 0201 	orr.w	r2, r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d122      	bne.n	8005d60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d11b      	bne.n	8005d60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f06f 0202 	mvn.w	r2, #2
 8005d30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	f003 0303 	and.w	r3, r3, #3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7fb fb5c 	bl	8001404 <HAL_TIM_IC_CaptureCallback>
 8005d4c:	e005      	b.n	8005d5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f9ac 	bl	80060ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f9b3 	bl	80060c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f003 0304 	and.w	r3, r3, #4
 8005d6a:	2b04      	cmp	r3, #4
 8005d6c:	d122      	bne.n	8005db4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b04      	cmp	r3, #4
 8005d7a:	d11b      	bne.n	8005db4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f06f 0204 	mvn.w	r2, #4
 8005d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2202      	movs	r2, #2
 8005d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7fb fb32 	bl	8001404 <HAL_TIM_IC_CaptureCallback>
 8005da0:	e005      	b.n	8005dae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f982 	bl	80060ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 f989 	bl	80060c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	f003 0308 	and.w	r3, r3, #8
 8005dbe:	2b08      	cmp	r3, #8
 8005dc0:	d122      	bne.n	8005e08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f003 0308 	and.w	r3, r3, #8
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d11b      	bne.n	8005e08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f06f 0208 	mvn.w	r2, #8
 8005dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2204      	movs	r2, #4
 8005dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7fb fb08 	bl	8001404 <HAL_TIM_IC_CaptureCallback>
 8005df4:	e005      	b.n	8005e02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f958 	bl	80060ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f95f 	bl	80060c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f003 0310 	and.w	r3, r3, #16
 8005e12:	2b10      	cmp	r3, #16
 8005e14:	d122      	bne.n	8005e5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f003 0310 	and.w	r3, r3, #16
 8005e20:	2b10      	cmp	r3, #16
 8005e22:	d11b      	bne.n	8005e5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0210 	mvn.w	r2, #16
 8005e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2208      	movs	r2, #8
 8005e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7fb fade 	bl	8001404 <HAL_TIM_IC_CaptureCallback>
 8005e48:	e005      	b.n	8005e56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f92e 	bl	80060ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f935 	bl	80060c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d10e      	bne.n	8005e88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d107      	bne.n	8005e88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f06f 0201 	mvn.w	r2, #1
 8005e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f908 	bl	8006098 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e92:	2b80      	cmp	r3, #128	; 0x80
 8005e94:	d10e      	bne.n	8005eb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea0:	2b80      	cmp	r3, #128	; 0x80
 8005ea2:	d107      	bne.n	8005eb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fbc4 	bl	800663c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ebe:	2b40      	cmp	r3, #64	; 0x40
 8005ec0:	d10e      	bne.n	8005ee0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ecc:	2b40      	cmp	r3, #64	; 0x40
 8005ece:	d107      	bne.n	8005ee0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f8fa 	bl	80060d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b20      	cmp	r3, #32
 8005eec:	d10e      	bne.n	8005f0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f003 0320 	and.w	r3, r3, #32
 8005ef8:	2b20      	cmp	r3, #32
 8005efa:	d107      	bne.n	8005f0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f06f 0220 	mvn.w	r2, #32
 8005f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fb8e 	bl	8006628 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f0c:	bf00      	nop
 8005f0e:	3708      	adds	r7, #8
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d101      	bne.n	8005f32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f2e:	2302      	movs	r3, #2
 8005f30:	e0ae      	b.n	8006090 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b0c      	cmp	r3, #12
 8005f3e:	f200 809f 	bhi.w	8006080 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f42:	a201      	add	r2, pc, #4	; (adr r2, 8005f48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f48:	08005f7d 	.word	0x08005f7d
 8005f4c:	08006081 	.word	0x08006081
 8005f50:	08006081 	.word	0x08006081
 8005f54:	08006081 	.word	0x08006081
 8005f58:	08005fbd 	.word	0x08005fbd
 8005f5c:	08006081 	.word	0x08006081
 8005f60:	08006081 	.word	0x08006081
 8005f64:	08006081 	.word	0x08006081
 8005f68:	08005fff 	.word	0x08005fff
 8005f6c:	08006081 	.word	0x08006081
 8005f70:	08006081 	.word	0x08006081
 8005f74:	08006081 	.word	0x08006081
 8005f78:	0800603f 	.word	0x0800603f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68b9      	ldr	r1, [r7, #8]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 f930 	bl	80061e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699a      	ldr	r2, [r3, #24]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f042 0208 	orr.w	r2, r2, #8
 8005f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699a      	ldr	r2, [r3, #24]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0204 	bic.w	r2, r2, #4
 8005fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6999      	ldr	r1, [r3, #24]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	691a      	ldr	r2, [r3, #16]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	619a      	str	r2, [r3, #24]
      break;
 8005fba:	e064      	b.n	8006086 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68b9      	ldr	r1, [r7, #8]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 f976 	bl	80062b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	699a      	ldr	r2, [r3, #24]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	699a      	ldr	r2, [r3, #24]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6999      	ldr	r1, [r3, #24]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	021a      	lsls	r2, r3, #8
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	619a      	str	r2, [r3, #24]
      break;
 8005ffc:	e043      	b.n	8006086 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68b9      	ldr	r1, [r7, #8]
 8006004:	4618      	mov	r0, r3
 8006006:	f000 f9c1 	bl	800638c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69da      	ldr	r2, [r3, #28]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f042 0208 	orr.w	r2, r2, #8
 8006018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69da      	ldr	r2, [r3, #28]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f022 0204 	bic.w	r2, r2, #4
 8006028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	69d9      	ldr	r1, [r3, #28]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	61da      	str	r2, [r3, #28]
      break;
 800603c:	e023      	b.n	8006086 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68b9      	ldr	r1, [r7, #8]
 8006044:	4618      	mov	r0, r3
 8006046:	f000 fa0b 	bl	8006460 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	69da      	ldr	r2, [r3, #28]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69da      	ldr	r2, [r3, #28]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69d9      	ldr	r1, [r3, #28]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	021a      	lsls	r2, r3, #8
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	61da      	str	r2, [r3, #28]
      break;
 800607e:	e002      	b.n	8006086 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	75fb      	strb	r3, [r7, #23]
      break;
 8006084:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800608e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3718      	adds	r7, #24
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a34      	ldr	r2, [pc, #208]	; (80061cc <TIM_Base_SetConfig+0xe4>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d00f      	beq.n	8006120 <TIM_Base_SetConfig+0x38>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006106:	d00b      	beq.n	8006120 <TIM_Base_SetConfig+0x38>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a31      	ldr	r2, [pc, #196]	; (80061d0 <TIM_Base_SetConfig+0xe8>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d007      	beq.n	8006120 <TIM_Base_SetConfig+0x38>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a30      	ldr	r2, [pc, #192]	; (80061d4 <TIM_Base_SetConfig+0xec>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d003      	beq.n	8006120 <TIM_Base_SetConfig+0x38>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a2f      	ldr	r2, [pc, #188]	; (80061d8 <TIM_Base_SetConfig+0xf0>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d108      	bne.n	8006132 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a25      	ldr	r2, [pc, #148]	; (80061cc <TIM_Base_SetConfig+0xe4>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d01b      	beq.n	8006172 <TIM_Base_SetConfig+0x8a>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006140:	d017      	beq.n	8006172 <TIM_Base_SetConfig+0x8a>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a22      	ldr	r2, [pc, #136]	; (80061d0 <TIM_Base_SetConfig+0xe8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d013      	beq.n	8006172 <TIM_Base_SetConfig+0x8a>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a21      	ldr	r2, [pc, #132]	; (80061d4 <TIM_Base_SetConfig+0xec>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d00f      	beq.n	8006172 <TIM_Base_SetConfig+0x8a>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a20      	ldr	r2, [pc, #128]	; (80061d8 <TIM_Base_SetConfig+0xf0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d00b      	beq.n	8006172 <TIM_Base_SetConfig+0x8a>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a1f      	ldr	r2, [pc, #124]	; (80061dc <TIM_Base_SetConfig+0xf4>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d007      	beq.n	8006172 <TIM_Base_SetConfig+0x8a>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a1e      	ldr	r2, [pc, #120]	; (80061e0 <TIM_Base_SetConfig+0xf8>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d003      	beq.n	8006172 <TIM_Base_SetConfig+0x8a>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a1d      	ldr	r2, [pc, #116]	; (80061e4 <TIM_Base_SetConfig+0xfc>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d108      	bne.n	8006184 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	4313      	orrs	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a08      	ldr	r2, [pc, #32]	; (80061cc <TIM_Base_SetConfig+0xe4>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d103      	bne.n	80061b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	691a      	ldr	r2, [r3, #16]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	615a      	str	r2, [r3, #20]
}
 80061be:	bf00      	nop
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	40010000 	.word	0x40010000
 80061d0:	40000400 	.word	0x40000400
 80061d4:	40000800 	.word	0x40000800
 80061d8:	40000c00 	.word	0x40000c00
 80061dc:	40014000 	.word	0x40014000
 80061e0:	40014400 	.word	0x40014400
 80061e4:	40014800 	.word	0x40014800

080061e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	f023 0201 	bic.w	r2, r3, #1
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0303 	bic.w	r3, r3, #3
 800621e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f023 0302 	bic.w	r3, r3, #2
 8006230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	4313      	orrs	r3, r2
 800623a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a1c      	ldr	r2, [pc, #112]	; (80062b0 <TIM_OC1_SetConfig+0xc8>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d10c      	bne.n	800625e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f023 0308 	bic.w	r3, r3, #8
 800624a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	4313      	orrs	r3, r2
 8006254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f023 0304 	bic.w	r3, r3, #4
 800625c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a13      	ldr	r2, [pc, #76]	; (80062b0 <TIM_OC1_SetConfig+0xc8>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d111      	bne.n	800628a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800626c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	4313      	orrs	r3, r2
 8006288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	621a      	str	r2, [r3, #32]
}
 80062a4:	bf00      	nop
 80062a6:	371c      	adds	r7, #28
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	40010000 	.word	0x40010000

080062b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b087      	sub	sp, #28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	f023 0210 	bic.w	r2, r3, #16
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	021b      	lsls	r3, r3, #8
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	f023 0320 	bic.w	r3, r3, #32
 80062fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	011b      	lsls	r3, r3, #4
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	4313      	orrs	r3, r2
 800630a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a1e      	ldr	r2, [pc, #120]	; (8006388 <TIM_OC2_SetConfig+0xd4>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d10d      	bne.n	8006330 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800631a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	011b      	lsls	r3, r3, #4
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	4313      	orrs	r3, r2
 8006326:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800632e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a15      	ldr	r2, [pc, #84]	; (8006388 <TIM_OC2_SetConfig+0xd4>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d113      	bne.n	8006360 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800633e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006346:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	4313      	orrs	r3, r2
 800635e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	621a      	str	r2, [r3, #32]
}
 800637a:	bf00      	nop
 800637c:	371c      	adds	r7, #28
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	40010000 	.word	0x40010000

0800638c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f023 0303 	bic.w	r3, r3, #3
 80063c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	021b      	lsls	r3, r3, #8
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	4313      	orrs	r3, r2
 80063e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a1d      	ldr	r2, [pc, #116]	; (800645c <TIM_OC3_SetConfig+0xd0>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d10d      	bne.n	8006406 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	021b      	lsls	r3, r3, #8
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006404:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a14      	ldr	r2, [pc, #80]	; (800645c <TIM_OC3_SetConfig+0xd0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d113      	bne.n	8006436 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006414:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800641c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	011b      	lsls	r3, r3, #4
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	4313      	orrs	r3, r2
 8006428:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	011b      	lsls	r3, r3, #4
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	4313      	orrs	r3, r2
 8006434:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	621a      	str	r2, [r3, #32]
}
 8006450:	bf00      	nop
 8006452:	371c      	adds	r7, #28
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	40010000 	.word	0x40010000

08006460 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800648e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	021b      	lsls	r3, r3, #8
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	031b      	lsls	r3, r3, #12
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a10      	ldr	r2, [pc, #64]	; (80064fc <TIM_OC4_SetConfig+0x9c>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d109      	bne.n	80064d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	019b      	lsls	r3, r3, #6
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	621a      	str	r2, [r3, #32]
}
 80064ee:	bf00      	nop
 80064f0:	371c      	adds	r7, #28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	40010000 	.word	0x40010000

08006500 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006500:	b480      	push	{r7}
 8006502:	b087      	sub	sp, #28
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f003 031f 	and.w	r3, r3, #31
 8006512:	2201      	movs	r2, #1
 8006514:	fa02 f303 	lsl.w	r3, r2, r3
 8006518:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6a1a      	ldr	r2, [r3, #32]
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	43db      	mvns	r3, r3
 8006522:	401a      	ands	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6a1a      	ldr	r2, [r3, #32]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	f003 031f 	and.w	r3, r3, #31
 8006532:	6879      	ldr	r1, [r7, #4]
 8006534:	fa01 f303 	lsl.w	r3, r1, r3
 8006538:	431a      	orrs	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	621a      	str	r2, [r3, #32]
}
 800653e:	bf00      	nop
 8006540:	371c      	adds	r7, #28
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
	...

0800654c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800655c:	2b01      	cmp	r3, #1
 800655e:	d101      	bne.n	8006564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006560:	2302      	movs	r3, #2
 8006562:	e050      	b.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4313      	orrs	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a1c      	ldr	r2, [pc, #112]	; (8006614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d018      	beq.n	80065da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b0:	d013      	beq.n	80065da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a18      	ldr	r2, [pc, #96]	; (8006618 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d00e      	beq.n	80065da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a16      	ldr	r2, [pc, #88]	; (800661c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d009      	beq.n	80065da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a15      	ldr	r2, [pc, #84]	; (8006620 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d004      	beq.n	80065da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a13      	ldr	r2, [pc, #76]	; (8006624 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d10c      	bne.n	80065f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	40010000 	.word	0x40010000
 8006618:	40000400 	.word	0x40000400
 800661c:	40000800 	.word	0x40000800
 8006620:	40000c00 	.word	0x40000c00
 8006624:	40014000 	.word	0x40014000

08006628 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e03f      	b.n	80066e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d106      	bne.n	800667c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f7fb feee 	bl	8002458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2224      	movs	r2, #36	; 0x24
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68da      	ldr	r2, [r3, #12]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006692:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fa9b 	bl	8006bd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	691a      	ldr	r2, [r3, #16]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	695a      	ldr	r2, [r3, #20]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68da      	ldr	r2, [r3, #12]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2220      	movs	r2, #32
 80066dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3708      	adds	r7, #8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b084      	sub	sp, #16
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	60f8      	str	r0, [r7, #12]
 80066f2:	60b9      	str	r1, [r7, #8]
 80066f4:	4613      	mov	r3, r2
 80066f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b20      	cmp	r3, #32
 8006702:	d11d      	bne.n	8006740 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d002      	beq.n	8006710 <HAL_UART_Receive_DMA+0x26>
 800670a:	88fb      	ldrh	r3, [r7, #6]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d101      	bne.n	8006714 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e016      	b.n	8006742 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800671a:	2b01      	cmp	r3, #1
 800671c:	d101      	bne.n	8006722 <HAL_UART_Receive_DMA+0x38>
 800671e:	2302      	movs	r3, #2
 8006720:	e00f      	b.n	8006742 <HAL_UART_Receive_DMA+0x58>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006730:	88fb      	ldrh	r3, [r7, #6]
 8006732:	461a      	mov	r2, r3
 8006734:	68b9      	ldr	r1, [r7, #8]
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f000 f920 	bl	800697c <UART_Start_Receive_DMA>
 800673c:	4603      	mov	r3, r0
 800673e:	e000      	b.n	8006742 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006740:	2302      	movs	r3, #2
  }
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006772:	b480      	push	{r7}
 8006774:	b083      	sub	sp, #12
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	460b      	mov	r3, r1
 800677c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800677e:	bf00      	nop
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b09c      	sub	sp, #112	; 0x70
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006796:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d172      	bne.n	800688c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80067a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067a8:	2200      	movs	r2, #0
 80067aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	330c      	adds	r3, #12
 80067b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b6:	e853 3f00 	ldrex	r3, [r3]
 80067ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80067c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	330c      	adds	r3, #12
 80067ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80067cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80067ce:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067d4:	e841 2300 	strex	r3, r2, [r1]
 80067d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e5      	bne.n	80067ac <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	3314      	adds	r3, #20
 80067e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ea:	e853 3f00 	ldrex	r3, [r3]
 80067ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f2:	f023 0301 	bic.w	r3, r3, #1
 80067f6:	667b      	str	r3, [r7, #100]	; 0x64
 80067f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3314      	adds	r3, #20
 80067fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006800:	647a      	str	r2, [r7, #68]	; 0x44
 8006802:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006808:	e841 2300 	strex	r3, r2, [r1]
 800680c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800680e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1e5      	bne.n	80067e0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3314      	adds	r3, #20
 800681a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	e853 3f00 	ldrex	r3, [r3]
 8006822:	623b      	str	r3, [r7, #32]
   return(result);
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800682a:	663b      	str	r3, [r7, #96]	; 0x60
 800682c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3314      	adds	r3, #20
 8006832:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006834:	633a      	str	r2, [r7, #48]	; 0x30
 8006836:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006838:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800683a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800683c:	e841 2300 	strex	r3, r2, [r1]
 8006840:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1e5      	bne.n	8006814 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800684a:	2220      	movs	r2, #32
 800684c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006854:	2b01      	cmp	r3, #1
 8006856:	d119      	bne.n	800688c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	330c      	adds	r3, #12
 800685e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	e853 3f00 	ldrex	r3, [r3]
 8006866:	60fb      	str	r3, [r7, #12]
   return(result);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 0310 	bic.w	r3, r3, #16
 800686e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	330c      	adds	r3, #12
 8006876:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006878:	61fa      	str	r2, [r7, #28]
 800687a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687c:	69b9      	ldr	r1, [r7, #24]
 800687e:	69fa      	ldr	r2, [r7, #28]
 8006880:	e841 2300 	strex	r3, r2, [r1]
 8006884:	617b      	str	r3, [r7, #20]
   return(result);
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1e5      	bne.n	8006858 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800688c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800688e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006890:	2b01      	cmp	r3, #1
 8006892:	d106      	bne.n	80068a2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006896:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006898:	4619      	mov	r1, r3
 800689a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800689c:	f7ff ff69 	bl	8006772 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068a0:	e002      	b.n	80068a8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80068a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80068a4:	f7fa fd98 	bl	80013d8 <HAL_UART_RxCpltCallback>
}
 80068a8:	bf00      	nop
 80068aa:	3770      	adds	r7, #112	; 0x70
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068bc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d108      	bne.n	80068d8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068ca:	085b      	lsrs	r3, r3, #1
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	4619      	mov	r1, r3
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f7ff ff4e 	bl	8006772 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068d6:	e002      	b.n	80068de <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f7ff ff36 	bl	800674a <HAL_UART_RxHalfCpltCallback>
}
 80068de:	bf00      	nop
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b084      	sub	sp, #16
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006902:	2b80      	cmp	r3, #128	; 0x80
 8006904:	bf0c      	ite	eq
 8006906:	2301      	moveq	r3, #1
 8006908:	2300      	movne	r3, #0
 800690a:	b2db      	uxtb	r3, r3
 800690c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b21      	cmp	r3, #33	; 0x21
 8006918:	d108      	bne.n	800692c <UART_DMAError+0x46>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d005      	beq.n	800692c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2200      	movs	r2, #0
 8006924:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006926:	68b8      	ldr	r0, [r7, #8]
 8006928:	f000 f8c6 	bl	8006ab8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006936:	2b40      	cmp	r3, #64	; 0x40
 8006938:	bf0c      	ite	eq
 800693a:	2301      	moveq	r3, #1
 800693c:	2300      	movne	r3, #0
 800693e:	b2db      	uxtb	r3, r3
 8006940:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b22      	cmp	r3, #34	; 0x22
 800694c:	d108      	bne.n	8006960 <UART_DMAError+0x7a>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d005      	beq.n	8006960 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2200      	movs	r2, #0
 8006958:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800695a:	68b8      	ldr	r0, [r7, #8]
 800695c:	f000 f8d4 	bl	8006b08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006964:	f043 0210 	orr.w	r2, r3, #16
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800696c:	68b8      	ldr	r0, [r7, #8]
 800696e:	f7ff fef6 	bl	800675e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006972:	bf00      	nop
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
	...

0800697c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b098      	sub	sp, #96	; 0x60
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	4613      	mov	r3, r2
 8006988:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	88fa      	ldrh	r2, [r7, #6]
 8006994:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2222      	movs	r2, #34	; 0x22
 80069a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a8:	4a40      	ldr	r2, [pc, #256]	; (8006aac <UART_Start_Receive_DMA+0x130>)
 80069aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b0:	4a3f      	ldr	r2, [pc, #252]	; (8006ab0 <UART_Start_Receive_DMA+0x134>)
 80069b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b8:	4a3e      	ldr	r2, [pc, #248]	; (8006ab4 <UART_Start_Receive_DMA+0x138>)
 80069ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c0:	2200      	movs	r2, #0
 80069c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80069c4:	f107 0308 	add.w	r3, r7, #8
 80069c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	3304      	adds	r3, #4
 80069d4:	4619      	mov	r1, r3
 80069d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	88fb      	ldrh	r3, [r7, #6]
 80069dc:	f7fc fad0 	bl	8002f80 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80069e0:	2300      	movs	r3, #0
 80069e2:	613b      	str	r3, [r7, #16]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	613b      	str	r3, [r7, #16]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	613b      	str	r3, [r7, #16]
 80069f4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d019      	beq.n	8006a3a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	330c      	adds	r3, #12
 8006a0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a10:	e853 3f00 	ldrex	r3, [r3]
 8006a14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	330c      	adds	r3, #12
 8006a24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a26:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006a28:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006a2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a2e:	e841 2300 	strex	r3, r2, [r1]
 8006a32:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1e5      	bne.n	8006a06 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3314      	adds	r3, #20
 8006a40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4c:	f043 0301 	orr.w	r3, r3, #1
 8006a50:	657b      	str	r3, [r7, #84]	; 0x54
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3314      	adds	r3, #20
 8006a58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a5a:	63ba      	str	r2, [r7, #56]	; 0x38
 8006a5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006a60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e5      	bne.n	8006a3a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3314      	adds	r3, #20
 8006a74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	e853 3f00 	ldrex	r3, [r3]
 8006a7c:	617b      	str	r3, [r7, #20]
   return(result);
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a84:	653b      	str	r3, [r7, #80]	; 0x50
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3314      	adds	r3, #20
 8006a8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a8e:	627a      	str	r2, [r7, #36]	; 0x24
 8006a90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a92:	6a39      	ldr	r1, [r7, #32]
 8006a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a96:	e841 2300 	strex	r3, r2, [r1]
 8006a9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1e5      	bne.n	8006a6e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3760      	adds	r7, #96	; 0x60
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	0800678b 	.word	0x0800678b
 8006ab0:	080068b1 	.word	0x080068b1
 8006ab4:	080068e7 	.word	0x080068e7

08006ab8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b089      	sub	sp, #36	; 0x24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	330c      	adds	r3, #12
 8006ac6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	e853 3f00 	ldrex	r3, [r3]
 8006ace:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006ad6:	61fb      	str	r3, [r7, #28]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	330c      	adds	r3, #12
 8006ade:	69fa      	ldr	r2, [r7, #28]
 8006ae0:	61ba      	str	r2, [r7, #24]
 8006ae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae4:	6979      	ldr	r1, [r7, #20]
 8006ae6:	69ba      	ldr	r2, [r7, #24]
 8006ae8:	e841 2300 	strex	r3, r2, [r1]
 8006aec:	613b      	str	r3, [r7, #16]
   return(result);
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e5      	bne.n	8006ac0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2220      	movs	r2, #32
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006afc:	bf00      	nop
 8006afe:	3724      	adds	r7, #36	; 0x24
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b095      	sub	sp, #84	; 0x54
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	330c      	adds	r3, #12
 8006b16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	330c      	adds	r3, #12
 8006b2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b30:	643a      	str	r2, [r7, #64]	; 0x40
 8006b32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b38:	e841 2300 	strex	r3, r2, [r1]
 8006b3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1e5      	bne.n	8006b10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3314      	adds	r3, #20
 8006b4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	e853 3f00 	ldrex	r3, [r3]
 8006b52:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	f023 0301 	bic.w	r3, r3, #1
 8006b5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3314      	adds	r3, #20
 8006b62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b6c:	e841 2300 	strex	r3, r2, [r1]
 8006b70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1e5      	bne.n	8006b44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d119      	bne.n	8006bb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	330c      	adds	r3, #12
 8006b86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	e853 3f00 	ldrex	r3, [r3]
 8006b8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f023 0310 	bic.w	r3, r3, #16
 8006b96:	647b      	str	r3, [r7, #68]	; 0x44
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	330c      	adds	r3, #12
 8006b9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ba0:	61ba      	str	r2, [r7, #24]
 8006ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	6979      	ldr	r1, [r7, #20]
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	e841 2300 	strex	r3, r2, [r1]
 8006bac:	613b      	str	r3, [r7, #16]
   return(result);
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1e5      	bne.n	8006b80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006bc2:	bf00      	nop
 8006bc4:	3754      	adds	r7, #84	; 0x54
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
	...

08006bd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bd4:	b0c0      	sub	sp, #256	; 0x100
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bec:	68d9      	ldr	r1, [r3, #12]
 8006bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	ea40 0301 	orr.w	r3, r0, r1
 8006bf8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bfe:	689a      	ldr	r2, [r3, #8]
 8006c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	431a      	orrs	r2, r3
 8006c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c28:	f021 010c 	bic.w	r1, r1, #12
 8006c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c36:	430b      	orrs	r3, r1
 8006c38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c4a:	6999      	ldr	r1, [r3, #24]
 8006c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	ea40 0301 	orr.w	r3, r0, r1
 8006c56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	4b8f      	ldr	r3, [pc, #572]	; (8006e9c <UART_SetConfig+0x2cc>)
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d005      	beq.n	8006c70 <UART_SetConfig+0xa0>
 8006c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	4b8d      	ldr	r3, [pc, #564]	; (8006ea0 <UART_SetConfig+0x2d0>)
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d104      	bne.n	8006c7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c70:	f7fe fca6 	bl	80055c0 <HAL_RCC_GetPCLK2Freq>
 8006c74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006c78:	e003      	b.n	8006c82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c7a:	f7fe fc8d 	bl	8005598 <HAL_RCC_GetPCLK1Freq>
 8006c7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c8c:	f040 810c 	bne.w	8006ea8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c94:	2200      	movs	r2, #0
 8006c96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006c9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006ca2:	4622      	mov	r2, r4
 8006ca4:	462b      	mov	r3, r5
 8006ca6:	1891      	adds	r1, r2, r2
 8006ca8:	65b9      	str	r1, [r7, #88]	; 0x58
 8006caa:	415b      	adcs	r3, r3
 8006cac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	eb12 0801 	adds.w	r8, r2, r1
 8006cb8:	4629      	mov	r1, r5
 8006cba:	eb43 0901 	adc.w	r9, r3, r1
 8006cbe:	f04f 0200 	mov.w	r2, #0
 8006cc2:	f04f 0300 	mov.w	r3, #0
 8006cc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cd2:	4690      	mov	r8, r2
 8006cd4:	4699      	mov	r9, r3
 8006cd6:	4623      	mov	r3, r4
 8006cd8:	eb18 0303 	adds.w	r3, r8, r3
 8006cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ce0:	462b      	mov	r3, r5
 8006ce2:	eb49 0303 	adc.w	r3, r9, r3
 8006ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006cf6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006cfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006cfe:	460b      	mov	r3, r1
 8006d00:	18db      	adds	r3, r3, r3
 8006d02:	653b      	str	r3, [r7, #80]	; 0x50
 8006d04:	4613      	mov	r3, r2
 8006d06:	eb42 0303 	adc.w	r3, r2, r3
 8006d0a:	657b      	str	r3, [r7, #84]	; 0x54
 8006d0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d14:	f7f9 ff50 	bl	8000bb8 <__aeabi_uldivmod>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4b61      	ldr	r3, [pc, #388]	; (8006ea4 <UART_SetConfig+0x2d4>)
 8006d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d22:	095b      	lsrs	r3, r3, #5
 8006d24:	011c      	lsls	r4, r3, #4
 8006d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d38:	4642      	mov	r2, r8
 8006d3a:	464b      	mov	r3, r9
 8006d3c:	1891      	adds	r1, r2, r2
 8006d3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d40:	415b      	adcs	r3, r3
 8006d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d48:	4641      	mov	r1, r8
 8006d4a:	eb12 0a01 	adds.w	sl, r2, r1
 8006d4e:	4649      	mov	r1, r9
 8006d50:	eb43 0b01 	adc.w	fp, r3, r1
 8006d54:	f04f 0200 	mov.w	r2, #0
 8006d58:	f04f 0300 	mov.w	r3, #0
 8006d5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d68:	4692      	mov	sl, r2
 8006d6a:	469b      	mov	fp, r3
 8006d6c:	4643      	mov	r3, r8
 8006d6e:	eb1a 0303 	adds.w	r3, sl, r3
 8006d72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d76:	464b      	mov	r3, r9
 8006d78:	eb4b 0303 	adc.w	r3, fp, r3
 8006d7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006d90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006d94:	460b      	mov	r3, r1
 8006d96:	18db      	adds	r3, r3, r3
 8006d98:	643b      	str	r3, [r7, #64]	; 0x40
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	eb42 0303 	adc.w	r3, r2, r3
 8006da0:	647b      	str	r3, [r7, #68]	; 0x44
 8006da2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006da6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006daa:	f7f9 ff05 	bl	8000bb8 <__aeabi_uldivmod>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	4611      	mov	r1, r2
 8006db4:	4b3b      	ldr	r3, [pc, #236]	; (8006ea4 <UART_SetConfig+0x2d4>)
 8006db6:	fba3 2301 	umull	r2, r3, r3, r1
 8006dba:	095b      	lsrs	r3, r3, #5
 8006dbc:	2264      	movs	r2, #100	; 0x64
 8006dbe:	fb02 f303 	mul.w	r3, r2, r3
 8006dc2:	1acb      	subs	r3, r1, r3
 8006dc4:	00db      	lsls	r3, r3, #3
 8006dc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006dca:	4b36      	ldr	r3, [pc, #216]	; (8006ea4 <UART_SetConfig+0x2d4>)
 8006dcc:	fba3 2302 	umull	r2, r3, r3, r2
 8006dd0:	095b      	lsrs	r3, r3, #5
 8006dd2:	005b      	lsls	r3, r3, #1
 8006dd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006dd8:	441c      	add	r4, r3
 8006dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dde:	2200      	movs	r2, #0
 8006de0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006de4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006de8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006dec:	4642      	mov	r2, r8
 8006dee:	464b      	mov	r3, r9
 8006df0:	1891      	adds	r1, r2, r2
 8006df2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006df4:	415b      	adcs	r3, r3
 8006df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006df8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006dfc:	4641      	mov	r1, r8
 8006dfe:	1851      	adds	r1, r2, r1
 8006e00:	6339      	str	r1, [r7, #48]	; 0x30
 8006e02:	4649      	mov	r1, r9
 8006e04:	414b      	adcs	r3, r1
 8006e06:	637b      	str	r3, [r7, #52]	; 0x34
 8006e08:	f04f 0200 	mov.w	r2, #0
 8006e0c:	f04f 0300 	mov.w	r3, #0
 8006e10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006e14:	4659      	mov	r1, fp
 8006e16:	00cb      	lsls	r3, r1, #3
 8006e18:	4651      	mov	r1, sl
 8006e1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e1e:	4651      	mov	r1, sl
 8006e20:	00ca      	lsls	r2, r1, #3
 8006e22:	4610      	mov	r0, r2
 8006e24:	4619      	mov	r1, r3
 8006e26:	4603      	mov	r3, r0
 8006e28:	4642      	mov	r2, r8
 8006e2a:	189b      	adds	r3, r3, r2
 8006e2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e30:	464b      	mov	r3, r9
 8006e32:	460a      	mov	r2, r1
 8006e34:	eb42 0303 	adc.w	r3, r2, r3
 8006e38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e50:	460b      	mov	r3, r1
 8006e52:	18db      	adds	r3, r3, r3
 8006e54:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e56:	4613      	mov	r3, r2
 8006e58:	eb42 0303 	adc.w	r3, r2, r3
 8006e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e66:	f7f9 fea7 	bl	8000bb8 <__aeabi_uldivmod>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4b0d      	ldr	r3, [pc, #52]	; (8006ea4 <UART_SetConfig+0x2d4>)
 8006e70:	fba3 1302 	umull	r1, r3, r3, r2
 8006e74:	095b      	lsrs	r3, r3, #5
 8006e76:	2164      	movs	r1, #100	; 0x64
 8006e78:	fb01 f303 	mul.w	r3, r1, r3
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	00db      	lsls	r3, r3, #3
 8006e80:	3332      	adds	r3, #50	; 0x32
 8006e82:	4a08      	ldr	r2, [pc, #32]	; (8006ea4 <UART_SetConfig+0x2d4>)
 8006e84:	fba2 2303 	umull	r2, r3, r2, r3
 8006e88:	095b      	lsrs	r3, r3, #5
 8006e8a:	f003 0207 	and.w	r2, r3, #7
 8006e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4422      	add	r2, r4
 8006e96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e98:	e105      	b.n	80070a6 <UART_SetConfig+0x4d6>
 8006e9a:	bf00      	nop
 8006e9c:	40011000 	.word	0x40011000
 8006ea0:	40011400 	.word	0x40011400
 8006ea4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eac:	2200      	movs	r2, #0
 8006eae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006eb2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006eb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006eba:	4642      	mov	r2, r8
 8006ebc:	464b      	mov	r3, r9
 8006ebe:	1891      	adds	r1, r2, r2
 8006ec0:	6239      	str	r1, [r7, #32]
 8006ec2:	415b      	adcs	r3, r3
 8006ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ec6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006eca:	4641      	mov	r1, r8
 8006ecc:	1854      	adds	r4, r2, r1
 8006ece:	4649      	mov	r1, r9
 8006ed0:	eb43 0501 	adc.w	r5, r3, r1
 8006ed4:	f04f 0200 	mov.w	r2, #0
 8006ed8:	f04f 0300 	mov.w	r3, #0
 8006edc:	00eb      	lsls	r3, r5, #3
 8006ede:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ee2:	00e2      	lsls	r2, r4, #3
 8006ee4:	4614      	mov	r4, r2
 8006ee6:	461d      	mov	r5, r3
 8006ee8:	4643      	mov	r3, r8
 8006eea:	18e3      	adds	r3, r4, r3
 8006eec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ef0:	464b      	mov	r3, r9
 8006ef2:	eb45 0303 	adc.w	r3, r5, r3
 8006ef6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f0a:	f04f 0200 	mov.w	r2, #0
 8006f0e:	f04f 0300 	mov.w	r3, #0
 8006f12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f16:	4629      	mov	r1, r5
 8006f18:	008b      	lsls	r3, r1, #2
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f20:	4621      	mov	r1, r4
 8006f22:	008a      	lsls	r2, r1, #2
 8006f24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f28:	f7f9 fe46 	bl	8000bb8 <__aeabi_uldivmod>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4b60      	ldr	r3, [pc, #384]	; (80070b4 <UART_SetConfig+0x4e4>)
 8006f32:	fba3 2302 	umull	r2, r3, r3, r2
 8006f36:	095b      	lsrs	r3, r3, #5
 8006f38:	011c      	lsls	r4, r3, #4
 8006f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f4c:	4642      	mov	r2, r8
 8006f4e:	464b      	mov	r3, r9
 8006f50:	1891      	adds	r1, r2, r2
 8006f52:	61b9      	str	r1, [r7, #24]
 8006f54:	415b      	adcs	r3, r3
 8006f56:	61fb      	str	r3, [r7, #28]
 8006f58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f5c:	4641      	mov	r1, r8
 8006f5e:	1851      	adds	r1, r2, r1
 8006f60:	6139      	str	r1, [r7, #16]
 8006f62:	4649      	mov	r1, r9
 8006f64:	414b      	adcs	r3, r1
 8006f66:	617b      	str	r3, [r7, #20]
 8006f68:	f04f 0200 	mov.w	r2, #0
 8006f6c:	f04f 0300 	mov.w	r3, #0
 8006f70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f74:	4659      	mov	r1, fp
 8006f76:	00cb      	lsls	r3, r1, #3
 8006f78:	4651      	mov	r1, sl
 8006f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f7e:	4651      	mov	r1, sl
 8006f80:	00ca      	lsls	r2, r1, #3
 8006f82:	4610      	mov	r0, r2
 8006f84:	4619      	mov	r1, r3
 8006f86:	4603      	mov	r3, r0
 8006f88:	4642      	mov	r2, r8
 8006f8a:	189b      	adds	r3, r3, r2
 8006f8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f90:	464b      	mov	r3, r9
 8006f92:	460a      	mov	r2, r1
 8006f94:	eb42 0303 	adc.w	r3, r2, r3
 8006f98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fa6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006fa8:	f04f 0200 	mov.w	r2, #0
 8006fac:	f04f 0300 	mov.w	r3, #0
 8006fb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006fb4:	4649      	mov	r1, r9
 8006fb6:	008b      	lsls	r3, r1, #2
 8006fb8:	4641      	mov	r1, r8
 8006fba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fbe:	4641      	mov	r1, r8
 8006fc0:	008a      	lsls	r2, r1, #2
 8006fc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006fc6:	f7f9 fdf7 	bl	8000bb8 <__aeabi_uldivmod>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4b39      	ldr	r3, [pc, #228]	; (80070b4 <UART_SetConfig+0x4e4>)
 8006fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8006fd4:	095b      	lsrs	r3, r3, #5
 8006fd6:	2164      	movs	r1, #100	; 0x64
 8006fd8:	fb01 f303 	mul.w	r3, r1, r3
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	011b      	lsls	r3, r3, #4
 8006fe0:	3332      	adds	r3, #50	; 0x32
 8006fe2:	4a34      	ldr	r2, [pc, #208]	; (80070b4 <UART_SetConfig+0x4e4>)
 8006fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe8:	095b      	lsrs	r3, r3, #5
 8006fea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fee:	441c      	add	r4, r3
 8006ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	673b      	str	r3, [r7, #112]	; 0x70
 8006ff8:	677a      	str	r2, [r7, #116]	; 0x74
 8006ffa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ffe:	4642      	mov	r2, r8
 8007000:	464b      	mov	r3, r9
 8007002:	1891      	adds	r1, r2, r2
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	415b      	adcs	r3, r3
 8007008:	60fb      	str	r3, [r7, #12]
 800700a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800700e:	4641      	mov	r1, r8
 8007010:	1851      	adds	r1, r2, r1
 8007012:	6039      	str	r1, [r7, #0]
 8007014:	4649      	mov	r1, r9
 8007016:	414b      	adcs	r3, r1
 8007018:	607b      	str	r3, [r7, #4]
 800701a:	f04f 0200 	mov.w	r2, #0
 800701e:	f04f 0300 	mov.w	r3, #0
 8007022:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007026:	4659      	mov	r1, fp
 8007028:	00cb      	lsls	r3, r1, #3
 800702a:	4651      	mov	r1, sl
 800702c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007030:	4651      	mov	r1, sl
 8007032:	00ca      	lsls	r2, r1, #3
 8007034:	4610      	mov	r0, r2
 8007036:	4619      	mov	r1, r3
 8007038:	4603      	mov	r3, r0
 800703a:	4642      	mov	r2, r8
 800703c:	189b      	adds	r3, r3, r2
 800703e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007040:	464b      	mov	r3, r9
 8007042:	460a      	mov	r2, r1
 8007044:	eb42 0303 	adc.w	r3, r2, r3
 8007048:	66fb      	str	r3, [r7, #108]	; 0x6c
 800704a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	663b      	str	r3, [r7, #96]	; 0x60
 8007054:	667a      	str	r2, [r7, #100]	; 0x64
 8007056:	f04f 0200 	mov.w	r2, #0
 800705a:	f04f 0300 	mov.w	r3, #0
 800705e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007062:	4649      	mov	r1, r9
 8007064:	008b      	lsls	r3, r1, #2
 8007066:	4641      	mov	r1, r8
 8007068:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800706c:	4641      	mov	r1, r8
 800706e:	008a      	lsls	r2, r1, #2
 8007070:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007074:	f7f9 fda0 	bl	8000bb8 <__aeabi_uldivmod>
 8007078:	4602      	mov	r2, r0
 800707a:	460b      	mov	r3, r1
 800707c:	4b0d      	ldr	r3, [pc, #52]	; (80070b4 <UART_SetConfig+0x4e4>)
 800707e:	fba3 1302 	umull	r1, r3, r3, r2
 8007082:	095b      	lsrs	r3, r3, #5
 8007084:	2164      	movs	r1, #100	; 0x64
 8007086:	fb01 f303 	mul.w	r3, r1, r3
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	011b      	lsls	r3, r3, #4
 800708e:	3332      	adds	r3, #50	; 0x32
 8007090:	4a08      	ldr	r2, [pc, #32]	; (80070b4 <UART_SetConfig+0x4e4>)
 8007092:	fba2 2303 	umull	r2, r3, r2, r3
 8007096:	095b      	lsrs	r3, r3, #5
 8007098:	f003 020f 	and.w	r2, r3, #15
 800709c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4422      	add	r2, r4
 80070a4:	609a      	str	r2, [r3, #8]
}
 80070a6:	bf00      	nop
 80070a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80070ac:	46bd      	mov	sp, r7
 80070ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070b2:	bf00      	nop
 80070b4:	51eb851f 	.word	0x51eb851f

080070b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070b8:	b084      	sub	sp, #16
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	f107 001c 	add.w	r0, r7, #28
 80070c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d122      	bne.n	8007116 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80070e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80070f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d105      	bne.n	800710a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f001 fbee 	bl	80088ec <USB_CoreReset>
 8007110:	4603      	mov	r3, r0
 8007112:	73fb      	strb	r3, [r7, #15]
 8007114:	e01a      	b.n	800714c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f001 fbe2 	bl	80088ec <USB_CoreReset>
 8007128:	4603      	mov	r3, r0
 800712a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800712c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800712e:	2b00      	cmp	r3, #0
 8007130:	d106      	bne.n	8007140 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007136:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	639a      	str	r2, [r3, #56]	; 0x38
 800713e:	e005      	b.n	800714c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007144:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800714c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714e:	2b01      	cmp	r3, #1
 8007150:	d10b      	bne.n	800716a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f043 0206 	orr.w	r2, r3, #6
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f043 0220 	orr.w	r2, r3, #32
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800716a:	7bfb      	ldrb	r3, [r7, #15]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007176:	b004      	add	sp, #16
 8007178:	4770      	bx	lr
	...

0800717c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	4613      	mov	r3, r2
 8007188:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800718a:	79fb      	ldrb	r3, [r7, #7]
 800718c:	2b02      	cmp	r3, #2
 800718e:	d165      	bne.n	800725c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	4a41      	ldr	r2, [pc, #260]	; (8007298 <USB_SetTurnaroundTime+0x11c>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d906      	bls.n	80071a6 <USB_SetTurnaroundTime+0x2a>
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	4a40      	ldr	r2, [pc, #256]	; (800729c <USB_SetTurnaroundTime+0x120>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d202      	bcs.n	80071a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80071a0:	230f      	movs	r3, #15
 80071a2:	617b      	str	r3, [r7, #20]
 80071a4:	e062      	b.n	800726c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	4a3c      	ldr	r2, [pc, #240]	; (800729c <USB_SetTurnaroundTime+0x120>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d306      	bcc.n	80071bc <USB_SetTurnaroundTime+0x40>
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	4a3b      	ldr	r2, [pc, #236]	; (80072a0 <USB_SetTurnaroundTime+0x124>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d202      	bcs.n	80071bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80071b6:	230e      	movs	r3, #14
 80071b8:	617b      	str	r3, [r7, #20]
 80071ba:	e057      	b.n	800726c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	4a38      	ldr	r2, [pc, #224]	; (80072a0 <USB_SetTurnaroundTime+0x124>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d306      	bcc.n	80071d2 <USB_SetTurnaroundTime+0x56>
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	4a37      	ldr	r2, [pc, #220]	; (80072a4 <USB_SetTurnaroundTime+0x128>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d202      	bcs.n	80071d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80071cc:	230d      	movs	r3, #13
 80071ce:	617b      	str	r3, [r7, #20]
 80071d0:	e04c      	b.n	800726c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	4a33      	ldr	r2, [pc, #204]	; (80072a4 <USB_SetTurnaroundTime+0x128>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d306      	bcc.n	80071e8 <USB_SetTurnaroundTime+0x6c>
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	4a32      	ldr	r2, [pc, #200]	; (80072a8 <USB_SetTurnaroundTime+0x12c>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d802      	bhi.n	80071e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80071e2:	230c      	movs	r3, #12
 80071e4:	617b      	str	r3, [r7, #20]
 80071e6:	e041      	b.n	800726c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	4a2f      	ldr	r2, [pc, #188]	; (80072a8 <USB_SetTurnaroundTime+0x12c>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d906      	bls.n	80071fe <USB_SetTurnaroundTime+0x82>
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	4a2e      	ldr	r2, [pc, #184]	; (80072ac <USB_SetTurnaroundTime+0x130>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d802      	bhi.n	80071fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80071f8:	230b      	movs	r3, #11
 80071fa:	617b      	str	r3, [r7, #20]
 80071fc:	e036      	b.n	800726c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	4a2a      	ldr	r2, [pc, #168]	; (80072ac <USB_SetTurnaroundTime+0x130>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d906      	bls.n	8007214 <USB_SetTurnaroundTime+0x98>
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	4a29      	ldr	r2, [pc, #164]	; (80072b0 <USB_SetTurnaroundTime+0x134>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d802      	bhi.n	8007214 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800720e:	230a      	movs	r3, #10
 8007210:	617b      	str	r3, [r7, #20]
 8007212:	e02b      	b.n	800726c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	4a26      	ldr	r2, [pc, #152]	; (80072b0 <USB_SetTurnaroundTime+0x134>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d906      	bls.n	800722a <USB_SetTurnaroundTime+0xae>
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	4a25      	ldr	r2, [pc, #148]	; (80072b4 <USB_SetTurnaroundTime+0x138>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d202      	bcs.n	800722a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007224:	2309      	movs	r3, #9
 8007226:	617b      	str	r3, [r7, #20]
 8007228:	e020      	b.n	800726c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	4a21      	ldr	r2, [pc, #132]	; (80072b4 <USB_SetTurnaroundTime+0x138>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d306      	bcc.n	8007240 <USB_SetTurnaroundTime+0xc4>
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	4a20      	ldr	r2, [pc, #128]	; (80072b8 <USB_SetTurnaroundTime+0x13c>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d802      	bhi.n	8007240 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800723a:	2308      	movs	r3, #8
 800723c:	617b      	str	r3, [r7, #20]
 800723e:	e015      	b.n	800726c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	4a1d      	ldr	r2, [pc, #116]	; (80072b8 <USB_SetTurnaroundTime+0x13c>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d906      	bls.n	8007256 <USB_SetTurnaroundTime+0xda>
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	4a1c      	ldr	r2, [pc, #112]	; (80072bc <USB_SetTurnaroundTime+0x140>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d202      	bcs.n	8007256 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007250:	2307      	movs	r3, #7
 8007252:	617b      	str	r3, [r7, #20]
 8007254:	e00a      	b.n	800726c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007256:	2306      	movs	r3, #6
 8007258:	617b      	str	r3, [r7, #20]
 800725a:	e007      	b.n	800726c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800725c:	79fb      	ldrb	r3, [r7, #7]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d102      	bne.n	8007268 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007262:	2309      	movs	r3, #9
 8007264:	617b      	str	r3, [r7, #20]
 8007266:	e001      	b.n	800726c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007268:	2309      	movs	r3, #9
 800726a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	68da      	ldr	r2, [r3, #12]
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	029b      	lsls	r3, r3, #10
 8007280:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007284:	431a      	orrs	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	371c      	adds	r7, #28
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	00d8acbf 	.word	0x00d8acbf
 800729c:	00e4e1c0 	.word	0x00e4e1c0
 80072a0:	00f42400 	.word	0x00f42400
 80072a4:	01067380 	.word	0x01067380
 80072a8:	011a499f 	.word	0x011a499f
 80072ac:	01312cff 	.word	0x01312cff
 80072b0:	014ca43f 	.word	0x014ca43f
 80072b4:	016e3600 	.word	0x016e3600
 80072b8:	01a6ab1f 	.word	0x01a6ab1f
 80072bc:	01e84800 	.word	0x01e84800

080072c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f043 0201 	orr.w	r2, r3, #1
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f023 0201 	bic.w	r2, r3, #1
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007310:	2300      	movs	r3, #0
 8007312:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007320:	78fb      	ldrb	r3, [r7, #3]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d115      	bne.n	8007352 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007332:	2001      	movs	r0, #1
 8007334:	f7fb f9de 	bl	80026f4 <HAL_Delay>
      ms++;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3301      	adds	r3, #1
 800733c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f001 fa45 	bl	80087ce <USB_GetMode>
 8007344:	4603      	mov	r3, r0
 8007346:	2b01      	cmp	r3, #1
 8007348:	d01e      	beq.n	8007388 <USB_SetCurrentMode+0x84>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2b31      	cmp	r3, #49	; 0x31
 800734e:	d9f0      	bls.n	8007332 <USB_SetCurrentMode+0x2e>
 8007350:	e01a      	b.n	8007388 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007352:	78fb      	ldrb	r3, [r7, #3]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d115      	bne.n	8007384 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007364:	2001      	movs	r0, #1
 8007366:	f7fb f9c5 	bl	80026f4 <HAL_Delay>
      ms++;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	3301      	adds	r3, #1
 800736e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f001 fa2c 	bl	80087ce <USB_GetMode>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d005      	beq.n	8007388 <USB_SetCurrentMode+0x84>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2b31      	cmp	r3, #49	; 0x31
 8007380:	d9f0      	bls.n	8007364 <USB_SetCurrentMode+0x60>
 8007382:	e001      	b.n	8007388 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e005      	b.n	8007394 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2b32      	cmp	r3, #50	; 0x32
 800738c:	d101      	bne.n	8007392 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e000      	b.n	8007394 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800739c:	b084      	sub	sp, #16
 800739e:	b580      	push	{r7, lr}
 80073a0:	b086      	sub	sp, #24
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80073aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80073b6:	2300      	movs	r3, #0
 80073b8:	613b      	str	r3, [r7, #16]
 80073ba:	e009      	b.n	80073d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	3340      	adds	r3, #64	; 0x40
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4413      	add	r3, r2
 80073c6:	2200      	movs	r2, #0
 80073c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	3301      	adds	r3, #1
 80073ce:	613b      	str	r3, [r7, #16]
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	2b0e      	cmp	r3, #14
 80073d4:	d9f2      	bls.n	80073bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80073d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d11c      	bne.n	8007416 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073ea:	f043 0302 	orr.w	r3, r3, #2
 80073ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007400:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	639a      	str	r2, [r3, #56]	; 0x38
 8007414:	e00b      	b.n	800742e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007426:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007434:	461a      	mov	r2, r3
 8007436:	2300      	movs	r3, #0
 8007438:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007440:	4619      	mov	r1, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007448:	461a      	mov	r2, r3
 800744a:	680b      	ldr	r3, [r1, #0]
 800744c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800744e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007450:	2b01      	cmp	r3, #1
 8007452:	d10c      	bne.n	800746e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007456:	2b00      	cmp	r3, #0
 8007458:	d104      	bne.n	8007464 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800745a:	2100      	movs	r1, #0
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f965 	bl	800772c <USB_SetDevSpeed>
 8007462:	e008      	b.n	8007476 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007464:	2101      	movs	r1, #1
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f960 	bl	800772c <USB_SetDevSpeed>
 800746c:	e003      	b.n	8007476 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800746e:	2103      	movs	r1, #3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f95b 	bl	800772c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007476:	2110      	movs	r1, #16
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f8f3 	bl	8007664 <USB_FlushTxFifo>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d001      	beq.n	8007488 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f91f 	bl	80076cc <USB_FlushRxFifo>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800749e:	461a      	mov	r2, r3
 80074a0:	2300      	movs	r3, #0
 80074a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074aa:	461a      	mov	r2, r3
 80074ac:	2300      	movs	r3, #0
 80074ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b6:	461a      	mov	r2, r3
 80074b8:	2300      	movs	r3, #0
 80074ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074bc:	2300      	movs	r3, #0
 80074be:	613b      	str	r3, [r7, #16]
 80074c0:	e043      	b.n	800754a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074d8:	d118      	bne.n	800750c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10a      	bne.n	80074f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ec:	461a      	mov	r2, r3
 80074ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074f2:	6013      	str	r3, [r2, #0]
 80074f4:	e013      	b.n	800751e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007502:	461a      	mov	r2, r3
 8007504:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007508:	6013      	str	r3, [r2, #0]
 800750a:	e008      	b.n	800751e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	015a      	lsls	r2, r3, #5
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	4413      	add	r3, r2
 8007514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007518:	461a      	mov	r2, r3
 800751a:	2300      	movs	r3, #0
 800751c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800752a:	461a      	mov	r2, r3
 800752c:	2300      	movs	r3, #0
 800752e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	015a      	lsls	r2, r3, #5
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	4413      	add	r3, r2
 8007538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800753c:	461a      	mov	r2, r3
 800753e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007542:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	3301      	adds	r3, #1
 8007548:	613b      	str	r3, [r7, #16]
 800754a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	429a      	cmp	r2, r3
 8007550:	d3b7      	bcc.n	80074c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007552:	2300      	movs	r3, #0
 8007554:	613b      	str	r3, [r7, #16]
 8007556:	e043      	b.n	80075e0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	015a      	lsls	r2, r3, #5
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4413      	add	r3, r2
 8007560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800756a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800756e:	d118      	bne.n	80075a2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10a      	bne.n	800758c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007582:	461a      	mov	r2, r3
 8007584:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007588:	6013      	str	r3, [r2, #0]
 800758a:	e013      	b.n	80075b4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	015a      	lsls	r2, r3, #5
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	4413      	add	r3, r2
 8007594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007598:	461a      	mov	r2, r3
 800759a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800759e:	6013      	str	r3, [r2, #0]
 80075a0:	e008      	b.n	80075b4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	015a      	lsls	r2, r3, #5
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ae:	461a      	mov	r2, r3
 80075b0:	2300      	movs	r3, #0
 80075b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c0:	461a      	mov	r2, r3
 80075c2:	2300      	movs	r3, #0
 80075c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	015a      	lsls	r2, r3, #5
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	4413      	add	r3, r2
 80075ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d2:	461a      	mov	r2, r3
 80075d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	3301      	adds	r3, #1
 80075de:	613b      	str	r3, [r7, #16]
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	693a      	ldr	r2, [r7, #16]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d3b7      	bcc.n	8007558 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007608:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	2b00      	cmp	r3, #0
 800760e:	d105      	bne.n	800761c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	f043 0210 	orr.w	r2, r3, #16
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	699a      	ldr	r2, [r3, #24]
 8007620:	4b0f      	ldr	r3, [pc, #60]	; (8007660 <USB_DevInit+0x2c4>)
 8007622:	4313      	orrs	r3, r2
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800762a:	2b00      	cmp	r3, #0
 800762c:	d005      	beq.n	800763a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	f043 0208 	orr.w	r2, r3, #8
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800763a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800763c:	2b01      	cmp	r3, #1
 800763e:	d107      	bne.n	8007650 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007648:	f043 0304 	orr.w	r3, r3, #4
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007650:	7dfb      	ldrb	r3, [r7, #23]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800765c:	b004      	add	sp, #16
 800765e:	4770      	bx	lr
 8007660:	803c3800 	.word	0x803c3800

08007664 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800766e:	2300      	movs	r3, #0
 8007670:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3301      	adds	r3, #1
 8007676:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	4a13      	ldr	r2, [pc, #76]	; (80076c8 <USB_FlushTxFifo+0x64>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d901      	bls.n	8007684 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e01b      	b.n	80076bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	2b00      	cmp	r3, #0
 800768a:	daf2      	bge.n	8007672 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800768c:	2300      	movs	r3, #0
 800768e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	019b      	lsls	r3, r3, #6
 8007694:	f043 0220 	orr.w	r2, r3, #32
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	3301      	adds	r3, #1
 80076a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	4a08      	ldr	r2, [pc, #32]	; (80076c8 <USB_FlushTxFifo+0x64>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d901      	bls.n	80076ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e006      	b.n	80076bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	f003 0320 	and.w	r3, r3, #32
 80076b6:	2b20      	cmp	r3, #32
 80076b8:	d0f0      	beq.n	800769c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr
 80076c8:	00030d40 	.word	0x00030d40

080076cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076d4:	2300      	movs	r3, #0
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	3301      	adds	r3, #1
 80076dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	4a11      	ldr	r2, [pc, #68]	; (8007728 <USB_FlushRxFifo+0x5c>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d901      	bls.n	80076ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e018      	b.n	800771c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	daf2      	bge.n	80076d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2210      	movs	r2, #16
 80076fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3301      	adds	r3, #1
 8007700:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	4a08      	ldr	r2, [pc, #32]	; (8007728 <USB_FlushRxFifo+0x5c>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d901      	bls.n	800770e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e006      	b.n	800771c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	f003 0310 	and.w	r3, r3, #16
 8007716:	2b10      	cmp	r3, #16
 8007718:	d0f0      	beq.n	80076fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	00030d40 	.word	0x00030d40

0800772c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	460b      	mov	r3, r1
 8007736:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	78fb      	ldrb	r3, [r7, #3]
 8007746:	68f9      	ldr	r1, [r7, #12]
 8007748:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800774c:	4313      	orrs	r3, r2
 800774e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800775e:	b480      	push	{r7}
 8007760:	b087      	sub	sp, #28
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f003 0306 	and.w	r3, r3, #6
 8007776:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d102      	bne.n	8007784 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800777e:	2300      	movs	r3, #0
 8007780:	75fb      	strb	r3, [r7, #23]
 8007782:	e00a      	b.n	800779a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2b02      	cmp	r3, #2
 8007788:	d002      	beq.n	8007790 <USB_GetDevSpeed+0x32>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2b06      	cmp	r3, #6
 800778e:	d102      	bne.n	8007796 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007790:	2302      	movs	r3, #2
 8007792:	75fb      	strb	r3, [r7, #23]
 8007794:	e001      	b.n	800779a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007796:	230f      	movs	r3, #15
 8007798:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800779a:	7dfb      	ldrb	r3, [r7, #23]
}
 800779c:	4618      	mov	r0, r3
 800779e:	371c      	adds	r7, #28
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	785b      	ldrb	r3, [r3, #1]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d13a      	bne.n	800783a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ca:	69da      	ldr	r2, [r3, #28]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	f003 030f 	and.w	r3, r3, #15
 80077d4:	2101      	movs	r1, #1
 80077d6:	fa01 f303 	lsl.w	r3, r1, r3
 80077da:	b29b      	uxth	r3, r3
 80077dc:	68f9      	ldr	r1, [r7, #12]
 80077de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077e2:	4313      	orrs	r3, r2
 80077e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	015a      	lsls	r2, r3, #5
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	4413      	add	r3, r2
 80077ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d155      	bne.n	80078a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	015a      	lsls	r2, r3, #5
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	4413      	add	r3, r2
 8007804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	791b      	ldrb	r3, [r3, #4]
 8007816:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007818:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	059b      	lsls	r3, r3, #22
 800781e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007820:	4313      	orrs	r3, r2
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	0151      	lsls	r1, r2, #5
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	440a      	add	r2, r1
 800782a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800782e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007836:	6013      	str	r3, [r2, #0]
 8007838:	e036      	b.n	80078a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007840:	69da      	ldr	r2, [r3, #28]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	f003 030f 	and.w	r3, r3, #15
 800784a:	2101      	movs	r1, #1
 800784c:	fa01 f303 	lsl.w	r3, r1, r3
 8007850:	041b      	lsls	r3, r3, #16
 8007852:	68f9      	ldr	r1, [r7, #12]
 8007854:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007858:	4313      	orrs	r3, r2
 800785a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	015a      	lsls	r2, r3, #5
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	4413      	add	r3, r2
 8007864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800786e:	2b00      	cmp	r3, #0
 8007870:	d11a      	bne.n	80078a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	4413      	add	r3, r2
 800787a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	791b      	ldrb	r3, [r3, #4]
 800788c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800788e:	430b      	orrs	r3, r1
 8007890:	4313      	orrs	r3, r2
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	0151      	lsls	r1, r2, #5
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	440a      	add	r2, r1
 800789a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800789e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
	...

080078b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	785b      	ldrb	r3, [r3, #1]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d161      	bne.n	8007998 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078ea:	d11f      	bne.n	800792c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	0151      	lsls	r1, r2, #5
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	440a      	add	r2, r1
 8007902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007906:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800790a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	015a      	lsls	r2, r3, #5
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	4413      	add	r3, r2
 8007914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	0151      	lsls	r1, r2, #5
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	440a      	add	r2, r1
 8007922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007926:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800792a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007932:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	f003 030f 	and.w	r3, r3, #15
 800793c:	2101      	movs	r1, #1
 800793e:	fa01 f303 	lsl.w	r3, r1, r3
 8007942:	b29b      	uxth	r3, r3
 8007944:	43db      	mvns	r3, r3
 8007946:	68f9      	ldr	r1, [r7, #12]
 8007948:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800794c:	4013      	ands	r3, r2
 800794e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007956:	69da      	ldr	r2, [r3, #28]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	f003 030f 	and.w	r3, r3, #15
 8007960:	2101      	movs	r1, #1
 8007962:	fa01 f303 	lsl.w	r3, r1, r3
 8007966:	b29b      	uxth	r3, r3
 8007968:	43db      	mvns	r3, r3
 800796a:	68f9      	ldr	r1, [r7, #12]
 800796c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007970:	4013      	ands	r3, r2
 8007972:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	4413      	add	r3, r2
 800797c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	0159      	lsls	r1, r3, #5
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	440b      	add	r3, r1
 800798a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800798e:	4619      	mov	r1, r3
 8007990:	4b35      	ldr	r3, [pc, #212]	; (8007a68 <USB_DeactivateEndpoint+0x1b0>)
 8007992:	4013      	ands	r3, r2
 8007994:	600b      	str	r3, [r1, #0]
 8007996:	e060      	b.n	8007a5a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079ae:	d11f      	bne.n	80079f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	015a      	lsls	r2, r3, #5
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	4413      	add	r3, r2
 80079b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	0151      	lsls	r1, r2, #5
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	440a      	add	r2, r1
 80079c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80079ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	015a      	lsls	r2, r3, #5
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	0151      	lsls	r1, r2, #5
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	440a      	add	r2, r1
 80079e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	f003 030f 	and.w	r3, r3, #15
 8007a00:	2101      	movs	r1, #1
 8007a02:	fa01 f303 	lsl.w	r3, r1, r3
 8007a06:	041b      	lsls	r3, r3, #16
 8007a08:	43db      	mvns	r3, r3
 8007a0a:	68f9      	ldr	r1, [r7, #12]
 8007a0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a10:	4013      	ands	r3, r2
 8007a12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a1a:	69da      	ldr	r2, [r3, #28]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	f003 030f 	and.w	r3, r3, #15
 8007a24:	2101      	movs	r1, #1
 8007a26:	fa01 f303 	lsl.w	r3, r1, r3
 8007a2a:	041b      	lsls	r3, r3, #16
 8007a2c:	43db      	mvns	r3, r3
 8007a2e:	68f9      	ldr	r1, [r7, #12]
 8007a30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a34:	4013      	ands	r3, r2
 8007a36:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	0159      	lsls	r1, r3, #5
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	440b      	add	r3, r1
 8007a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a52:	4619      	mov	r1, r3
 8007a54:	4b05      	ldr	r3, [pc, #20]	; (8007a6c <USB_DeactivateEndpoint+0x1b4>)
 8007a56:	4013      	ands	r3, r2
 8007a58:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr
 8007a68:	ec337800 	.word	0xec337800
 8007a6c:	eff37800 	.word	0xeff37800

08007a70 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b08a      	sub	sp, #40	; 0x28
 8007a74:	af02      	add	r7, sp, #8
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	785b      	ldrb	r3, [r3, #1]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	f040 815c 	bne.w	8007d4a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d132      	bne.n	8007b00 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	015a      	lsls	r2, r3, #5
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	69ba      	ldr	r2, [r7, #24]
 8007aaa:	0151      	lsls	r1, r2, #5
 8007aac:	69fa      	ldr	r2, [r7, #28]
 8007aae:	440a      	add	r2, r1
 8007ab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ab4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ab8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007abc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	0151      	lsls	r1, r2, #5
 8007ad0:	69fa      	ldr	r2, [r7, #28]
 8007ad2:	440a      	add	r2, r1
 8007ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ad8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007adc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	015a      	lsls	r2, r3, #5
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	69ba      	ldr	r2, [r7, #24]
 8007aee:	0151      	lsls	r1, r2, #5
 8007af0:	69fa      	ldr	r2, [r7, #28]
 8007af2:	440a      	add	r2, r1
 8007af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007af8:	0cdb      	lsrs	r3, r3, #19
 8007afa:	04db      	lsls	r3, r3, #19
 8007afc:	6113      	str	r3, [r2, #16]
 8007afe:	e074      	b.n	8007bea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	69ba      	ldr	r2, [r7, #24]
 8007b10:	0151      	lsls	r1, r2, #5
 8007b12:	69fa      	ldr	r2, [r7, #28]
 8007b14:	440a      	add	r2, r1
 8007b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b1a:	0cdb      	lsrs	r3, r3, #19
 8007b1c:	04db      	lsls	r3, r3, #19
 8007b1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	69ba      	ldr	r2, [r7, #24]
 8007b30:	0151      	lsls	r1, r2, #5
 8007b32:	69fa      	ldr	r2, [r7, #28]
 8007b34:	440a      	add	r2, r1
 8007b36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b50:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	6999      	ldr	r1, [r3, #24]
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	440b      	add	r3, r1
 8007b5c:	1e59      	subs	r1, r3, #1
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b66:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007b68:	4b9d      	ldr	r3, [pc, #628]	; (8007de0 <USB_EPStartXfer+0x370>)
 8007b6a:	400b      	ands	r3, r1
 8007b6c:	69b9      	ldr	r1, [r7, #24]
 8007b6e:	0148      	lsls	r0, r1, #5
 8007b70:	69f9      	ldr	r1, [r7, #28]
 8007b72:	4401      	add	r1, r0
 8007b74:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	015a      	lsls	r2, r3, #5
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	4413      	add	r3, r2
 8007b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b88:	691a      	ldr	r2, [r3, #16]
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b92:	69b9      	ldr	r1, [r7, #24]
 8007b94:	0148      	lsls	r0, r1, #5
 8007b96:	69f9      	ldr	r1, [r7, #28]
 8007b98:	4401      	add	r1, r0
 8007b9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	791b      	ldrb	r3, [r3, #4]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d11f      	bne.n	8007bea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	015a      	lsls	r2, r3, #5
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	69ba      	ldr	r2, [r7, #24]
 8007bba:	0151      	lsls	r1, r2, #5
 8007bbc:	69fa      	ldr	r2, [r7, #28]
 8007bbe:	440a      	add	r2, r1
 8007bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bc4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007bc8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	015a      	lsls	r2, r3, #5
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	69ba      	ldr	r2, [r7, #24]
 8007bda:	0151      	lsls	r1, r2, #5
 8007bdc:	69fa      	ldr	r2, [r7, #28]
 8007bde:	440a      	add	r2, r1
 8007be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007be4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007be8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007bea:	79fb      	ldrb	r3, [r7, #7]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d14b      	bne.n	8007c88 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d009      	beq.n	8007c0c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	015a      	lsls	r2, r3, #5
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	4413      	add	r3, r2
 8007c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c04:	461a      	mov	r2, r3
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	791b      	ldrb	r3, [r3, #4]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d128      	bne.n	8007c66 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d110      	bne.n	8007c46 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	015a      	lsls	r2, r3, #5
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	69ba      	ldr	r2, [r7, #24]
 8007c34:	0151      	lsls	r1, r2, #5
 8007c36:	69fa      	ldr	r2, [r7, #28]
 8007c38:	440a      	add	r2, r1
 8007c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c42:	6013      	str	r3, [r2, #0]
 8007c44:	e00f      	b.n	8007c66 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	69ba      	ldr	r2, [r7, #24]
 8007c56:	0151      	lsls	r1, r2, #5
 8007c58:	69fa      	ldr	r2, [r7, #28]
 8007c5a:	440a      	add	r2, r1
 8007c5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c64:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	69ba      	ldr	r2, [r7, #24]
 8007c76:	0151      	lsls	r1, r2, #5
 8007c78:	69fa      	ldr	r2, [r7, #28]
 8007c7a:	440a      	add	r2, r1
 8007c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c84:	6013      	str	r3, [r2, #0]
 8007c86:	e133      	b.n	8007ef0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	015a      	lsls	r2, r3, #5
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	69ba      	ldr	r2, [r7, #24]
 8007c98:	0151      	lsls	r1, r2, #5
 8007c9a:	69fa      	ldr	r2, [r7, #28]
 8007c9c:	440a      	add	r2, r1
 8007c9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ca2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ca6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	791b      	ldrb	r3, [r3, #4]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d015      	beq.n	8007cdc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 811b 	beq.w	8007ef0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	f003 030f 	and.w	r3, r3, #15
 8007cca:	2101      	movs	r1, #1
 8007ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd0:	69f9      	ldr	r1, [r7, #28]
 8007cd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	634b      	str	r3, [r1, #52]	; 0x34
 8007cda:	e109      	b.n	8007ef0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d110      	bne.n	8007d0e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	015a      	lsls	r2, r3, #5
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	0151      	lsls	r1, r2, #5
 8007cfe:	69fa      	ldr	r2, [r7, #28]
 8007d00:	440a      	add	r2, r1
 8007d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d0a:	6013      	str	r3, [r2, #0]
 8007d0c:	e00f      	b.n	8007d2e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	015a      	lsls	r2, r3, #5
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	4413      	add	r3, r2
 8007d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	69ba      	ldr	r2, [r7, #24]
 8007d1e:	0151      	lsls	r1, r2, #5
 8007d20:	69fa      	ldr	r2, [r7, #28]
 8007d22:	440a      	add	r2, r1
 8007d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d2c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	6919      	ldr	r1, [r3, #16]
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	781a      	ldrb	r2, [r3, #0]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	b298      	uxth	r0, r3
 8007d3c:	79fb      	ldrb	r3, [r7, #7]
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	4603      	mov	r3, r0
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f000 fade 	bl	8008304 <USB_WritePacket>
 8007d48:	e0d2      	b.n	8007ef0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	015a      	lsls	r2, r3, #5
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	4413      	add	r3, r2
 8007d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	69ba      	ldr	r2, [r7, #24]
 8007d5a:	0151      	lsls	r1, r2, #5
 8007d5c:	69fa      	ldr	r2, [r7, #28]
 8007d5e:	440a      	add	r2, r1
 8007d60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d64:	0cdb      	lsrs	r3, r3, #19
 8007d66:	04db      	lsls	r3, r3, #19
 8007d68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	015a      	lsls	r2, r3, #5
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	69ba      	ldr	r2, [r7, #24]
 8007d7a:	0151      	lsls	r1, r2, #5
 8007d7c:	69fa      	ldr	r2, [r7, #28]
 8007d7e:	440a      	add	r2, r1
 8007d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d8c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d126      	bne.n	8007de4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	015a      	lsls	r2, r3, #5
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da2:	691a      	ldr	r2, [r3, #16]
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dac:	69b9      	ldr	r1, [r7, #24]
 8007dae:	0148      	lsls	r0, r1, #5
 8007db0:	69f9      	ldr	r1, [r7, #28]
 8007db2:	4401      	add	r1, r0
 8007db4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007db8:	4313      	orrs	r3, r2
 8007dba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	015a      	lsls	r2, r3, #5
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	69ba      	ldr	r2, [r7, #24]
 8007dcc:	0151      	lsls	r1, r2, #5
 8007dce:	69fa      	ldr	r2, [r7, #28]
 8007dd0:	440a      	add	r2, r1
 8007dd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007dda:	6113      	str	r3, [r2, #16]
 8007ddc:	e03a      	b.n	8007e54 <USB_EPStartXfer+0x3e4>
 8007dde:	bf00      	nop
 8007de0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	699a      	ldr	r2, [r3, #24]
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	4413      	add	r3, r2
 8007dee:	1e5a      	subs	r2, r3, #1
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	8afa      	ldrh	r2, [r7, #22]
 8007e00:	fb03 f202 	mul.w	r2, r3, r2
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	015a      	lsls	r2, r3, #5
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	4413      	add	r3, r2
 8007e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e14:	691a      	ldr	r2, [r3, #16]
 8007e16:	8afb      	ldrh	r3, [r7, #22]
 8007e18:	04d9      	lsls	r1, r3, #19
 8007e1a:	4b38      	ldr	r3, [pc, #224]	; (8007efc <USB_EPStartXfer+0x48c>)
 8007e1c:	400b      	ands	r3, r1
 8007e1e:	69b9      	ldr	r1, [r7, #24]
 8007e20:	0148      	lsls	r0, r1, #5
 8007e22:	69f9      	ldr	r1, [r7, #28]
 8007e24:	4401      	add	r1, r0
 8007e26:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e3a:	691a      	ldr	r2, [r3, #16]
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	69db      	ldr	r3, [r3, #28]
 8007e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e44:	69b9      	ldr	r1, [r7, #24]
 8007e46:	0148      	lsls	r0, r1, #5
 8007e48:	69f9      	ldr	r1, [r7, #28]
 8007e4a:	4401      	add	r1, r0
 8007e4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007e50:	4313      	orrs	r3, r2
 8007e52:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007e54:	79fb      	ldrb	r3, [r7, #7]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d10d      	bne.n	8007e76 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d009      	beq.n	8007e76 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	6919      	ldr	r1, [r3, #16]
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	015a      	lsls	r2, r3, #5
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e72:	460a      	mov	r2, r1
 8007e74:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	791b      	ldrb	r3, [r3, #4]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d128      	bne.n	8007ed0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d110      	bne.n	8007eb0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	69ba      	ldr	r2, [r7, #24]
 8007e9e:	0151      	lsls	r1, r2, #5
 8007ea0:	69fa      	ldr	r2, [r7, #28]
 8007ea2:	440a      	add	r2, r1
 8007ea4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ea8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007eac:	6013      	str	r3, [r2, #0]
 8007eae:	e00f      	b.n	8007ed0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	015a      	lsls	r2, r3, #5
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	0151      	lsls	r1, r2, #5
 8007ec2:	69fa      	ldr	r2, [r7, #28]
 8007ec4:	440a      	add	r2, r1
 8007ec6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ece:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	015a      	lsls	r2, r3, #5
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	0151      	lsls	r1, r2, #5
 8007ee2:	69fa      	ldr	r2, [r7, #28]
 8007ee4:	440a      	add	r2, r1
 8007ee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007eee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3720      	adds	r7, #32
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	1ff80000 	.word	0x1ff80000

08007f00 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b087      	sub	sp, #28
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	785b      	ldrb	r3, [r3, #1]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	f040 80ce 	bne.w	80080be <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d132      	bne.n	8007f90 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	015a      	lsls	r2, r3, #5
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	0151      	lsls	r1, r2, #5
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	440a      	add	r2, r1
 8007f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	015a      	lsls	r2, r3, #5
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	4413      	add	r3, r2
 8007f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	0151      	lsls	r1, r2, #5
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	440a      	add	r2, r1
 8007f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	0151      	lsls	r1, r2, #5
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	440a      	add	r2, r1
 8007f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f88:	0cdb      	lsrs	r3, r3, #19
 8007f8a:	04db      	lsls	r3, r3, #19
 8007f8c:	6113      	str	r3, [r2, #16]
 8007f8e:	e04e      	b.n	800802e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	0151      	lsls	r1, r2, #5
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	440a      	add	r2, r1
 8007fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007faa:	0cdb      	lsrs	r3, r3, #19
 8007fac:	04db      	lsls	r3, r3, #19
 8007fae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	0151      	lsls	r1, r2, #5
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	440a      	add	r2, r1
 8007fc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007fce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007fd2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	699a      	ldr	r2, [r3, #24]
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d903      	bls.n	8007fe8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	68da      	ldr	r2, [r3, #12]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	693a      	ldr	r2, [r7, #16]
 8007ff8:	0151      	lsls	r1, r2, #5
 8007ffa:	697a      	ldr	r2, [r7, #20]
 8007ffc:	440a      	add	r2, r1
 8007ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008002:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008006:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008014:	691a      	ldr	r2, [r3, #16]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	699b      	ldr	r3, [r3, #24]
 800801a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800801e:	6939      	ldr	r1, [r7, #16]
 8008020:	0148      	lsls	r0, r1, #5
 8008022:	6979      	ldr	r1, [r7, #20]
 8008024:	4401      	add	r1, r0
 8008026:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800802a:	4313      	orrs	r3, r2
 800802c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800802e:	79fb      	ldrb	r3, [r7, #7]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d11e      	bne.n	8008072 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d009      	beq.n	8008050 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	4413      	add	r3, r2
 8008044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008048:	461a      	mov	r2, r3
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	695b      	ldr	r3, [r3, #20]
 800804e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	4413      	add	r3, r2
 8008058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	0151      	lsls	r1, r2, #5
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	440a      	add	r2, r1
 8008066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800806a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800806e:	6013      	str	r3, [r2, #0]
 8008070:	e097      	b.n	80081a2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	015a      	lsls	r2, r3, #5
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	4413      	add	r3, r2
 800807a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	0151      	lsls	r1, r2, #5
 8008084:	697a      	ldr	r2, [r7, #20]
 8008086:	440a      	add	r2, r1
 8008088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800808c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008090:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	2b00      	cmp	r3, #0
 8008098:	f000 8083 	beq.w	80081a2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	f003 030f 	and.w	r3, r3, #15
 80080ac:	2101      	movs	r1, #1
 80080ae:	fa01 f303 	lsl.w	r3, r1, r3
 80080b2:	6979      	ldr	r1, [r7, #20]
 80080b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080b8:	4313      	orrs	r3, r2
 80080ba:	634b      	str	r3, [r1, #52]	; 0x34
 80080bc:	e071      	b.n	80081a2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	015a      	lsls	r2, r3, #5
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	4413      	add	r3, r2
 80080c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	0151      	lsls	r1, r2, #5
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	440a      	add	r2, r1
 80080d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080d8:	0cdb      	lsrs	r3, r3, #19
 80080da:	04db      	lsls	r3, r3, #19
 80080dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	015a      	lsls	r2, r3, #5
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	4413      	add	r3, r2
 80080e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	693a      	ldr	r2, [r7, #16]
 80080ee:	0151      	lsls	r1, r2, #5
 80080f0:	697a      	ldr	r2, [r7, #20]
 80080f2:	440a      	add	r2, r1
 80080f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80080fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008100:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d003      	beq.n	8008112 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	68da      	ldr	r2, [r3, #12]
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	68da      	ldr	r2, [r3, #12]
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	015a      	lsls	r2, r3, #5
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	4413      	add	r3, r2
 8008122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	0151      	lsls	r1, r2, #5
 800812c:	697a      	ldr	r2, [r7, #20]
 800812e:	440a      	add	r2, r1
 8008130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008134:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008138:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	015a      	lsls	r2, r3, #5
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	4413      	add	r3, r2
 8008142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008146:	691a      	ldr	r2, [r3, #16]
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	69db      	ldr	r3, [r3, #28]
 800814c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008150:	6939      	ldr	r1, [r7, #16]
 8008152:	0148      	lsls	r0, r1, #5
 8008154:	6979      	ldr	r1, [r7, #20]
 8008156:	4401      	add	r1, r0
 8008158:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800815c:	4313      	orrs	r3, r2
 800815e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008160:	79fb      	ldrb	r3, [r7, #7]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d10d      	bne.n	8008182 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d009      	beq.n	8008182 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	6919      	ldr	r1, [r3, #16]
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	015a      	lsls	r2, r3, #5
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	4413      	add	r3, r2
 800817a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800817e:	460a      	mov	r2, r1
 8008180:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	4413      	add	r3, r2
 800818a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	0151      	lsls	r1, r2, #5
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	440a      	add	r2, r1
 8008198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800819c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	371c      	adds	r7, #28
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b087      	sub	sp, #28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80081ba:	2300      	movs	r3, #0
 80081bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80081be:	2300      	movs	r3, #0
 80081c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	785b      	ldrb	r3, [r3, #1]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d14a      	bne.n	8008264 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	015a      	lsls	r2, r3, #5
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	4413      	add	r3, r2
 80081d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081e6:	f040 8086 	bne.w	80082f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	015a      	lsls	r2, r3, #5
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	4413      	add	r3, r2
 80081f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	7812      	ldrb	r2, [r2, #0]
 80081fe:	0151      	lsls	r1, r2, #5
 8008200:	693a      	ldr	r2, [r7, #16]
 8008202:	440a      	add	r2, r1
 8008204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008208:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800820c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	015a      	lsls	r2, r3, #5
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	4413      	add	r3, r2
 8008218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	7812      	ldrb	r2, [r2, #0]
 8008222:	0151      	lsls	r1, r2, #5
 8008224:	693a      	ldr	r2, [r7, #16]
 8008226:	440a      	add	r2, r1
 8008228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800822c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008230:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	3301      	adds	r3, #1
 8008236:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f242 7210 	movw	r2, #10000	; 0x2710
 800823e:	4293      	cmp	r3, r2
 8008240:	d902      	bls.n	8008248 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	75fb      	strb	r3, [r7, #23]
          break;
 8008246:	e056      	b.n	80082f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	015a      	lsls	r2, r3, #5
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	4413      	add	r3, r2
 8008252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800825c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008260:	d0e7      	beq.n	8008232 <USB_EPStopXfer+0x82>
 8008262:	e048      	b.n	80082f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	015a      	lsls	r2, r3, #5
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	4413      	add	r3, r2
 800826e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800827c:	d13b      	bne.n	80082f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	015a      	lsls	r2, r3, #5
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	4413      	add	r3, r2
 8008288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	7812      	ldrb	r2, [r2, #0]
 8008292:	0151      	lsls	r1, r2, #5
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	440a      	add	r2, r1
 8008298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800829c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80082a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	683a      	ldr	r2, [r7, #0]
 80082b4:	7812      	ldrb	r2, [r2, #0]
 80082b6:	0151      	lsls	r1, r2, #5
 80082b8:	693a      	ldr	r2, [r7, #16]
 80082ba:	440a      	add	r2, r1
 80082bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	3301      	adds	r3, #1
 80082ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d902      	bls.n	80082dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	75fb      	strb	r3, [r7, #23]
          break;
 80082da:	e00c      	b.n	80082f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	015a      	lsls	r2, r3, #5
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	4413      	add	r3, r2
 80082e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082f4:	d0e7      	beq.n	80082c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80082f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	371c      	adds	r7, #28
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008304:	b480      	push	{r7}
 8008306:	b089      	sub	sp, #36	; 0x24
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	4611      	mov	r1, r2
 8008310:	461a      	mov	r2, r3
 8008312:	460b      	mov	r3, r1
 8008314:	71fb      	strb	r3, [r7, #7]
 8008316:	4613      	mov	r3, r2
 8008318:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008322:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008326:	2b00      	cmp	r3, #0
 8008328:	d123      	bne.n	8008372 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800832a:	88bb      	ldrh	r3, [r7, #4]
 800832c:	3303      	adds	r3, #3
 800832e:	089b      	lsrs	r3, r3, #2
 8008330:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008332:	2300      	movs	r3, #0
 8008334:	61bb      	str	r3, [r7, #24]
 8008336:	e018      	b.n	800836a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008338:	79fb      	ldrb	r3, [r7, #7]
 800833a:	031a      	lsls	r2, r3, #12
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	4413      	add	r3, r2
 8008340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008344:	461a      	mov	r2, r3
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	3301      	adds	r3, #1
 8008350:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	3301      	adds	r3, #1
 8008356:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	3301      	adds	r3, #1
 800835c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	3301      	adds	r3, #1
 8008362:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	3301      	adds	r3, #1
 8008368:	61bb      	str	r3, [r7, #24]
 800836a:	69ba      	ldr	r2, [r7, #24]
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	429a      	cmp	r2, r3
 8008370:	d3e2      	bcc.n	8008338 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3724      	adds	r7, #36	; 0x24
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008380:	b480      	push	{r7}
 8008382:	b08b      	sub	sp, #44	; 0x2c
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	4613      	mov	r3, r2
 800838c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008396:	88fb      	ldrh	r3, [r7, #6]
 8008398:	089b      	lsrs	r3, r3, #2
 800839a:	b29b      	uxth	r3, r3
 800839c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800839e:	88fb      	ldrh	r3, [r7, #6]
 80083a0:	f003 0303 	and.w	r3, r3, #3
 80083a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80083a6:	2300      	movs	r3, #0
 80083a8:	623b      	str	r3, [r7, #32]
 80083aa:	e014      	b.n	80083d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80083b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ba:	3301      	adds	r3, #1
 80083bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80083be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c0:	3301      	adds	r3, #1
 80083c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	3301      	adds	r3, #1
 80083c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80083ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083cc:	3301      	adds	r3, #1
 80083ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80083d0:	6a3b      	ldr	r3, [r7, #32]
 80083d2:	3301      	adds	r3, #1
 80083d4:	623b      	str	r3, [r7, #32]
 80083d6:	6a3a      	ldr	r2, [r7, #32]
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d3e6      	bcc.n	80083ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80083de:	8bfb      	ldrh	r3, [r7, #30]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d01e      	beq.n	8008422 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80083e4:	2300      	movs	r3, #0
 80083e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083ee:	461a      	mov	r2, r3
 80083f0:	f107 0310 	add.w	r3, r7, #16
 80083f4:	6812      	ldr	r2, [r2, #0]
 80083f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80083f8:	693a      	ldr	r2, [r7, #16]
 80083fa:	6a3b      	ldr	r3, [r7, #32]
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	00db      	lsls	r3, r3, #3
 8008400:	fa22 f303 	lsr.w	r3, r2, r3
 8008404:	b2da      	uxtb	r2, r3
 8008406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008408:	701a      	strb	r2, [r3, #0]
      i++;
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	3301      	adds	r3, #1
 800840e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	3301      	adds	r3, #1
 8008414:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008416:	8bfb      	ldrh	r3, [r7, #30]
 8008418:	3b01      	subs	r3, #1
 800841a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800841c:	8bfb      	ldrh	r3, [r7, #30]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1ea      	bne.n	80083f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008424:	4618      	mov	r0, r3
 8008426:	372c      	adds	r7, #44	; 0x2c
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	785b      	ldrb	r3, [r3, #1]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d12c      	bne.n	80084a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4413      	add	r3, r2
 8008454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	db12      	blt.n	8008484 <USB_EPSetStall+0x54>
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00f      	beq.n	8008484 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	015a      	lsls	r2, r3, #5
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	4413      	add	r3, r2
 800846c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	0151      	lsls	r1, r2, #5
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	440a      	add	r2, r1
 800847a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800847e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008482:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	4413      	add	r3, r2
 800848c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	0151      	lsls	r1, r2, #5
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	440a      	add	r2, r1
 800849a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800849e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084a2:	6013      	str	r3, [r2, #0]
 80084a4:	e02b      	b.n	80084fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	db12      	blt.n	80084de <USB_EPSetStall+0xae>
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00f      	beq.n	80084de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	015a      	lsls	r2, r3, #5
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	4413      	add	r3, r2
 80084c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	0151      	lsls	r1, r2, #5
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	440a      	add	r2, r1
 80084d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80084dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	015a      	lsls	r2, r3, #5
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	4413      	add	r3, r2
 80084e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	0151      	lsls	r1, r2, #5
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	440a      	add	r2, r1
 80084f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3714      	adds	r7, #20
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	785b      	ldrb	r3, [r3, #1]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d128      	bne.n	800857a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	015a      	lsls	r2, r3, #5
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	4413      	add	r3, r2
 8008530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	0151      	lsls	r1, r2, #5
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	440a      	add	r2, r1
 800853e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008542:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008546:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	791b      	ldrb	r3, [r3, #4]
 800854c:	2b03      	cmp	r3, #3
 800854e:	d003      	beq.n	8008558 <USB_EPClearStall+0x4c>
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	791b      	ldrb	r3, [r3, #4]
 8008554:	2b02      	cmp	r3, #2
 8008556:	d138      	bne.n	80085ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	4413      	add	r3, r2
 8008560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	0151      	lsls	r1, r2, #5
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	440a      	add	r2, r1
 800856e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008576:	6013      	str	r3, [r2, #0]
 8008578:	e027      	b.n	80085ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	015a      	lsls	r2, r3, #5
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	4413      	add	r3, r2
 8008582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	0151      	lsls	r1, r2, #5
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	440a      	add	r2, r1
 8008590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008594:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008598:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	791b      	ldrb	r3, [r3, #4]
 800859e:	2b03      	cmp	r3, #3
 80085a0:	d003      	beq.n	80085aa <USB_EPClearStall+0x9e>
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	791b      	ldrb	r3, [r3, #4]
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	d10f      	bne.n	80085ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	015a      	lsls	r2, r3, #5
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	4413      	add	r3, r2
 80085b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	0151      	lsls	r1, r2, #5
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	440a      	add	r2, r1
 80085c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	460b      	mov	r3, r1
 80085e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80085fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	78fb      	ldrb	r3, [r7, #3]
 8008606:	011b      	lsls	r3, r3, #4
 8008608:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800860c:	68f9      	ldr	r1, [r7, #12]
 800860e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008612:	4313      	orrs	r3, r2
 8008614:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3714      	adds	r7, #20
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800863e:	f023 0303 	bic.w	r3, r3, #3
 8008642:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008652:	f023 0302 	bic.w	r3, r3, #2
 8008656:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr

08008666 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008666:	b480      	push	{r7}
 8008668:	b085      	sub	sp, #20
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008680:	f023 0303 	bic.w	r3, r3, #3
 8008684:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008694:	f043 0302 	orr.w	r3, r3, #2
 8008698:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	695b      	ldr	r3, [r3, #20]
 80086b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	4013      	ands	r3, r2
 80086be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80086c0:	68fb      	ldr	r3, [r7, #12]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b085      	sub	sp, #20
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086e0:	699b      	ldr	r3, [r3, #24]
 80086e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ea:	69db      	ldr	r3, [r3, #28]
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	4013      	ands	r3, r2
 80086f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	0c1b      	lsrs	r3, r3, #16
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3714      	adds	r7, #20
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008702:	b480      	push	{r7}
 8008704:	b085      	sub	sp, #20
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008714:	699b      	ldr	r3, [r3, #24]
 8008716:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800871e:	69db      	ldr	r3, [r3, #28]
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	4013      	ands	r3, r2
 8008724:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	b29b      	uxth	r3, r3
}
 800872a:	4618      	mov	r0, r3
 800872c:	3714      	adds	r7, #20
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr

08008736 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008736:	b480      	push	{r7}
 8008738:	b085      	sub	sp, #20
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	460b      	mov	r3, r1
 8008740:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008746:	78fb      	ldrb	r3, [r7, #3]
 8008748:	015a      	lsls	r2, r3, #5
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	4413      	add	r3, r2
 800874e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800875c:	695b      	ldr	r3, [r3, #20]
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	4013      	ands	r3, r2
 8008762:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008764:	68bb      	ldr	r3, [r7, #8]
}
 8008766:	4618      	mov	r0, r3
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008772:	b480      	push	{r7}
 8008774:	b087      	sub	sp, #28
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
 800877a:	460b      	mov	r3, r1
 800877c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008794:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008796:	78fb      	ldrb	r3, [r7, #3]
 8008798:	f003 030f 	and.w	r3, r3, #15
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	fa22 f303 	lsr.w	r3, r2, r3
 80087a2:	01db      	lsls	r3, r3, #7
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	693a      	ldr	r2, [r7, #16]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80087ac:	78fb      	ldrb	r3, [r7, #3]
 80087ae:	015a      	lsls	r2, r3, #5
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	4413      	add	r3, r2
 80087b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	693a      	ldr	r2, [r7, #16]
 80087bc:	4013      	ands	r3, r2
 80087be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80087c0:	68bb      	ldr	r3, [r7, #8]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	371c      	adds	r7, #28
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80087ce:	b480      	push	{r7}
 80087d0:	b083      	sub	sp, #12
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	695b      	ldr	r3, [r3, #20]
 80087da:	f003 0301 	and.w	r3, r3, #1
}
 80087de:	4618      	mov	r0, r3
 80087e0:	370c      	adds	r7, #12
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr

080087ea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b085      	sub	sp, #20
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008804:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008808:	f023 0307 	bic.w	r3, r3, #7
 800880c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800881c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008820:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3714      	adds	r7, #20
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008830:	b480      	push	{r7}
 8008832:	b087      	sub	sp, #28
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	460b      	mov	r3, r1
 800883a:	607a      	str	r2, [r7, #4]
 800883c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	333c      	adds	r3, #60	; 0x3c
 8008846:	3304      	adds	r3, #4
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	4a26      	ldr	r2, [pc, #152]	; (80088e8 <USB_EP0_OutStart+0xb8>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d90a      	bls.n	800886a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008860:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008864:	d101      	bne.n	800886a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008866:	2300      	movs	r3, #0
 8008868:	e037      	b.n	80088da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008870:	461a      	mov	r2, r3
 8008872:	2300      	movs	r3, #0
 8008874:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008884:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008888:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008898:	f043 0318 	orr.w	r3, r3, #24
 800889c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80088b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80088b2:	7afb      	ldrb	r3, [r7, #11]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d10f      	bne.n	80088d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088be:	461a      	mov	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	697a      	ldr	r2, [r7, #20]
 80088ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80088d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	371c      	adds	r7, #28
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	4f54300a 	.word	0x4f54300a

080088ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088f4:	2300      	movs	r3, #0
 80088f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	3301      	adds	r3, #1
 80088fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	4a13      	ldr	r2, [pc, #76]	; (8008950 <USB_CoreReset+0x64>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d901      	bls.n	800890a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008906:	2303      	movs	r3, #3
 8008908:	e01b      	b.n	8008942 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	2b00      	cmp	r3, #0
 8008910:	daf2      	bge.n	80088f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008912:	2300      	movs	r3, #0
 8008914:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	f043 0201 	orr.w	r2, r3, #1
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	3301      	adds	r3, #1
 8008926:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	4a09      	ldr	r2, [pc, #36]	; (8008950 <USB_CoreReset+0x64>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d901      	bls.n	8008934 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008930:	2303      	movs	r3, #3
 8008932:	e006      	b.n	8008942 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	f003 0301 	and.w	r3, r3, #1
 800893c:	2b01      	cmp	r3, #1
 800893e:	d0f0      	beq.n	8008922 <USB_CoreReset+0x36>

  return HAL_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3714      	adds	r7, #20
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	00030d40 	.word	0x00030d40

08008954 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	460b      	mov	r3, r1
 800895e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008960:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008964:	f002 fc32 	bl	800b1cc <USBD_static_malloc>
 8008968:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d109      	bne.n	8008984 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	32b0      	adds	r2, #176	; 0xb0
 800897a:	2100      	movs	r1, #0
 800897c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008980:	2302      	movs	r3, #2
 8008982:	e0d4      	b.n	8008b2e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008984:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008988:	2100      	movs	r1, #0
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f002 fc9e 	bl	800b2cc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	32b0      	adds	r2, #176	; 0xb0
 800899a:	68f9      	ldr	r1, [r7, #12]
 800899c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	32b0      	adds	r2, #176	; 0xb0
 80089aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	7c1b      	ldrb	r3, [r3, #16]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d138      	bne.n	8008a2e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80089bc:	4b5e      	ldr	r3, [pc, #376]	; (8008b38 <USBD_CDC_Init+0x1e4>)
 80089be:	7819      	ldrb	r1, [r3, #0]
 80089c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089c4:	2202      	movs	r2, #2
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f002 fadd 	bl	800af86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80089cc:	4b5a      	ldr	r3, [pc, #360]	; (8008b38 <USBD_CDC_Init+0x1e4>)
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	f003 020f 	and.w	r2, r3, #15
 80089d4:	6879      	ldr	r1, [r7, #4]
 80089d6:	4613      	mov	r3, r2
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	4413      	add	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	440b      	add	r3, r1
 80089e0:	3324      	adds	r3, #36	; 0x24
 80089e2:	2201      	movs	r2, #1
 80089e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80089e6:	4b55      	ldr	r3, [pc, #340]	; (8008b3c <USBD_CDC_Init+0x1e8>)
 80089e8:	7819      	ldrb	r1, [r3, #0]
 80089ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089ee:	2202      	movs	r2, #2
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f002 fac8 	bl	800af86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80089f6:	4b51      	ldr	r3, [pc, #324]	; (8008b3c <USBD_CDC_Init+0x1e8>)
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	f003 020f 	and.w	r2, r3, #15
 80089fe:	6879      	ldr	r1, [r7, #4]
 8008a00:	4613      	mov	r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	4413      	add	r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	440b      	add	r3, r1
 8008a0a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a0e:	2201      	movs	r2, #1
 8008a10:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008a12:	4b4b      	ldr	r3, [pc, #300]	; (8008b40 <USBD_CDC_Init+0x1ec>)
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	f003 020f 	and.w	r2, r3, #15
 8008a1a:	6879      	ldr	r1, [r7, #4]
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	4413      	add	r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	440b      	add	r3, r1
 8008a26:	3326      	adds	r3, #38	; 0x26
 8008a28:	2210      	movs	r2, #16
 8008a2a:	801a      	strh	r2, [r3, #0]
 8008a2c:	e035      	b.n	8008a9a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008a2e:	4b42      	ldr	r3, [pc, #264]	; (8008b38 <USBD_CDC_Init+0x1e4>)
 8008a30:	7819      	ldrb	r1, [r3, #0]
 8008a32:	2340      	movs	r3, #64	; 0x40
 8008a34:	2202      	movs	r2, #2
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f002 faa5 	bl	800af86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008a3c:	4b3e      	ldr	r3, [pc, #248]	; (8008b38 <USBD_CDC_Init+0x1e4>)
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	f003 020f 	and.w	r2, r3, #15
 8008a44:	6879      	ldr	r1, [r7, #4]
 8008a46:	4613      	mov	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	4413      	add	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	440b      	add	r3, r1
 8008a50:	3324      	adds	r3, #36	; 0x24
 8008a52:	2201      	movs	r2, #1
 8008a54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008a56:	4b39      	ldr	r3, [pc, #228]	; (8008b3c <USBD_CDC_Init+0x1e8>)
 8008a58:	7819      	ldrb	r1, [r3, #0]
 8008a5a:	2340      	movs	r3, #64	; 0x40
 8008a5c:	2202      	movs	r2, #2
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f002 fa91 	bl	800af86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008a64:	4b35      	ldr	r3, [pc, #212]	; (8008b3c <USBD_CDC_Init+0x1e8>)
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	f003 020f 	and.w	r2, r3, #15
 8008a6c:	6879      	ldr	r1, [r7, #4]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4413      	add	r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	440b      	add	r3, r1
 8008a78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008a80:	4b2f      	ldr	r3, [pc, #188]	; (8008b40 <USBD_CDC_Init+0x1ec>)
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	f003 020f 	and.w	r2, r3, #15
 8008a88:	6879      	ldr	r1, [r7, #4]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	440b      	add	r3, r1
 8008a94:	3326      	adds	r3, #38	; 0x26
 8008a96:	2210      	movs	r2, #16
 8008a98:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008a9a:	4b29      	ldr	r3, [pc, #164]	; (8008b40 <USBD_CDC_Init+0x1ec>)
 8008a9c:	7819      	ldrb	r1, [r3, #0]
 8008a9e:	2308      	movs	r3, #8
 8008aa0:	2203      	movs	r2, #3
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f002 fa6f 	bl	800af86 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008aa8:	4b25      	ldr	r3, [pc, #148]	; (8008b40 <USBD_CDC_Init+0x1ec>)
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	f003 020f 	and.w	r2, r3, #15
 8008ab0:	6879      	ldr	r1, [r7, #4]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	4413      	add	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	440b      	add	r3, r1
 8008abc:	3324      	adds	r3, #36	; 0x24
 8008abe:	2201      	movs	r2, #1
 8008ac0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	33b0      	adds	r3, #176	; 0xb0
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d101      	bne.n	8008afc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008af8:	2302      	movs	r3, #2
 8008afa:	e018      	b.n	8008b2e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	7c1b      	ldrb	r3, [r3, #16]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d10a      	bne.n	8008b1a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b04:	4b0d      	ldr	r3, [pc, #52]	; (8008b3c <USBD_CDC_Init+0x1e8>)
 8008b06:	7819      	ldrb	r1, [r3, #0]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f002 fb26 	bl	800b164 <USBD_LL_PrepareReceive>
 8008b18:	e008      	b.n	8008b2c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b1a:	4b08      	ldr	r3, [pc, #32]	; (8008b3c <USBD_CDC_Init+0x1e8>)
 8008b1c:	7819      	ldrb	r1, [r3, #0]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b24:	2340      	movs	r3, #64	; 0x40
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f002 fb1c 	bl	800b164 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	20000093 	.word	0x20000093
 8008b3c:	20000094 	.word	0x20000094
 8008b40:	20000095 	.word	0x20000095

08008b44 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008b50:	4b3a      	ldr	r3, [pc, #232]	; (8008c3c <USBD_CDC_DeInit+0xf8>)
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	4619      	mov	r1, r3
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f002 fa3b 	bl	800afd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008b5c:	4b37      	ldr	r3, [pc, #220]	; (8008c3c <USBD_CDC_DeInit+0xf8>)
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	f003 020f 	and.w	r2, r3, #15
 8008b64:	6879      	ldr	r1, [r7, #4]
 8008b66:	4613      	mov	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4413      	add	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	440b      	add	r3, r1
 8008b70:	3324      	adds	r3, #36	; 0x24
 8008b72:	2200      	movs	r2, #0
 8008b74:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008b76:	4b32      	ldr	r3, [pc, #200]	; (8008c40 <USBD_CDC_DeInit+0xfc>)
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f002 fa28 	bl	800afd2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008b82:	4b2f      	ldr	r3, [pc, #188]	; (8008c40 <USBD_CDC_DeInit+0xfc>)
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	f003 020f 	and.w	r2, r3, #15
 8008b8a:	6879      	ldr	r1, [r7, #4]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	440b      	add	r3, r1
 8008b96:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008b9e:	4b29      	ldr	r3, [pc, #164]	; (8008c44 <USBD_CDC_DeInit+0x100>)
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f002 fa14 	bl	800afd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008baa:	4b26      	ldr	r3, [pc, #152]	; (8008c44 <USBD_CDC_DeInit+0x100>)
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	f003 020f 	and.w	r2, r3, #15
 8008bb2:	6879      	ldr	r1, [r7, #4]
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	4413      	add	r3, r2
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	440b      	add	r3, r1
 8008bbe:	3324      	adds	r3, #36	; 0x24
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008bc4:	4b1f      	ldr	r3, [pc, #124]	; (8008c44 <USBD_CDC_DeInit+0x100>)
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	f003 020f 	and.w	r2, r3, #15
 8008bcc:	6879      	ldr	r1, [r7, #4]
 8008bce:	4613      	mov	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	4413      	add	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	440b      	add	r3, r1
 8008bd8:	3326      	adds	r3, #38	; 0x26
 8008bda:	2200      	movs	r2, #0
 8008bdc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	32b0      	adds	r2, #176	; 0xb0
 8008be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d01f      	beq.n	8008c30 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	33b0      	adds	r3, #176	; 0xb0
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	4413      	add	r3, r2
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	32b0      	adds	r2, #176	; 0xb0
 8008c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c12:	4618      	mov	r0, r3
 8008c14:	f002 fae8 	bl	800b1e8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	32b0      	adds	r2, #176	; 0xb0
 8008c22:	2100      	movs	r1, #0
 8008c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	20000093 	.word	0x20000093
 8008c40:	20000094 	.word	0x20000094
 8008c44:	20000095 	.word	0x20000095

08008c48 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b086      	sub	sp, #24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	32b0      	adds	r2, #176	; 0xb0
 8008c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c60:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008c62:	2300      	movs	r3, #0
 8008c64:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008c66:	2300      	movs	r3, #0
 8008c68:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d101      	bne.n	8008c78 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008c74:	2303      	movs	r3, #3
 8008c76:	e0bf      	b.n	8008df8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d050      	beq.n	8008d26 <USBD_CDC_Setup+0xde>
 8008c84:	2b20      	cmp	r3, #32
 8008c86:	f040 80af 	bne.w	8008de8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	88db      	ldrh	r3, [r3, #6]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d03a      	beq.n	8008d08 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	b25b      	sxtb	r3, r3
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	da1b      	bge.n	8008cd4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	33b0      	adds	r3, #176	; 0xb0
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4413      	add	r3, r2
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008cb2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008cb4:	683a      	ldr	r2, [r7, #0]
 8008cb6:	88d2      	ldrh	r2, [r2, #6]
 8008cb8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	88db      	ldrh	r3, [r3, #6]
 8008cbe:	2b07      	cmp	r3, #7
 8008cc0:	bf28      	it	cs
 8008cc2:	2307      	movcs	r3, #7
 8008cc4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	89fa      	ldrh	r2, [r7, #14]
 8008cca:	4619      	mov	r1, r3
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f001 fd43 	bl	800a758 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008cd2:	e090      	b.n	8008df6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	785a      	ldrb	r2, [r3, #1]
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	88db      	ldrh	r3, [r3, #6]
 8008ce2:	2b3f      	cmp	r3, #63	; 0x3f
 8008ce4:	d803      	bhi.n	8008cee <USBD_CDC_Setup+0xa6>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	88db      	ldrh	r3, [r3, #6]
 8008cea:	b2da      	uxtb	r2, r3
 8008cec:	e000      	b.n	8008cf0 <USBD_CDC_Setup+0xa8>
 8008cee:	2240      	movs	r2, #64	; 0x40
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008cf6:	6939      	ldr	r1, [r7, #16]
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008cfe:	461a      	mov	r2, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f001 fd55 	bl	800a7b0 <USBD_CtlPrepareRx>
      break;
 8008d06:	e076      	b.n	8008df6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	33b0      	adds	r3, #176	; 0xb0
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	4413      	add	r3, r2
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	683a      	ldr	r2, [r7, #0]
 8008d1c:	7850      	ldrb	r0, [r2, #1]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	4798      	blx	r3
      break;
 8008d24:	e067      	b.n	8008df6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	785b      	ldrb	r3, [r3, #1]
 8008d2a:	2b0b      	cmp	r3, #11
 8008d2c:	d851      	bhi.n	8008dd2 <USBD_CDC_Setup+0x18a>
 8008d2e:	a201      	add	r2, pc, #4	; (adr r2, 8008d34 <USBD_CDC_Setup+0xec>)
 8008d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d34:	08008d65 	.word	0x08008d65
 8008d38:	08008de1 	.word	0x08008de1
 8008d3c:	08008dd3 	.word	0x08008dd3
 8008d40:	08008dd3 	.word	0x08008dd3
 8008d44:	08008dd3 	.word	0x08008dd3
 8008d48:	08008dd3 	.word	0x08008dd3
 8008d4c:	08008dd3 	.word	0x08008dd3
 8008d50:	08008dd3 	.word	0x08008dd3
 8008d54:	08008dd3 	.word	0x08008dd3
 8008d58:	08008dd3 	.word	0x08008dd3
 8008d5c:	08008d8f 	.word	0x08008d8f
 8008d60:	08008db9 	.word	0x08008db9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	2b03      	cmp	r3, #3
 8008d6e:	d107      	bne.n	8008d80 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008d70:	f107 030a 	add.w	r3, r7, #10
 8008d74:	2202      	movs	r2, #2
 8008d76:	4619      	mov	r1, r3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f001 fced 	bl	800a758 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d7e:	e032      	b.n	8008de6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f001 fc77 	bl	800a676 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	75fb      	strb	r3, [r7, #23]
          break;
 8008d8c:	e02b      	b.n	8008de6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b03      	cmp	r3, #3
 8008d98:	d107      	bne.n	8008daa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008d9a:	f107 030d 	add.w	r3, r7, #13
 8008d9e:	2201      	movs	r2, #1
 8008da0:	4619      	mov	r1, r3
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f001 fcd8 	bl	800a758 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008da8:	e01d      	b.n	8008de6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f001 fc62 	bl	800a676 <USBD_CtlError>
            ret = USBD_FAIL;
 8008db2:	2303      	movs	r3, #3
 8008db4:	75fb      	strb	r3, [r7, #23]
          break;
 8008db6:	e016      	b.n	8008de6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	2b03      	cmp	r3, #3
 8008dc2:	d00f      	beq.n	8008de4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f001 fc55 	bl	800a676 <USBD_CtlError>
            ret = USBD_FAIL;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008dd0:	e008      	b.n	8008de4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008dd2:	6839      	ldr	r1, [r7, #0]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f001 fc4e 	bl	800a676 <USBD_CtlError>
          ret = USBD_FAIL;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	75fb      	strb	r3, [r7, #23]
          break;
 8008dde:	e002      	b.n	8008de6 <USBD_CDC_Setup+0x19e>
          break;
 8008de0:	bf00      	nop
 8008de2:	e008      	b.n	8008df6 <USBD_CDC_Setup+0x1ae>
          break;
 8008de4:	bf00      	nop
      }
      break;
 8008de6:	e006      	b.n	8008df6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008de8:	6839      	ldr	r1, [r7, #0]
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f001 fc43 	bl	800a676 <USBD_CtlError>
      ret = USBD_FAIL;
 8008df0:	2303      	movs	r3, #3
 8008df2:	75fb      	strb	r3, [r7, #23]
      break;
 8008df4:	bf00      	nop
  }

  return (uint8_t)ret;
 8008df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3718      	adds	r7, #24
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	460b      	mov	r3, r1
 8008e0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	32b0      	adds	r2, #176	; 0xb0
 8008e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d101      	bne.n	8008e2a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008e26:	2303      	movs	r3, #3
 8008e28:	e065      	b.n	8008ef6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	32b0      	adds	r2, #176	; 0xb0
 8008e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e38:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008e3a:	78fb      	ldrb	r3, [r7, #3]
 8008e3c:	f003 020f 	and.w	r2, r3, #15
 8008e40:	6879      	ldr	r1, [r7, #4]
 8008e42:	4613      	mov	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	440b      	add	r3, r1
 8008e4c:	3318      	adds	r3, #24
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d02f      	beq.n	8008eb4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008e54:	78fb      	ldrb	r3, [r7, #3]
 8008e56:	f003 020f 	and.w	r2, r3, #15
 8008e5a:	6879      	ldr	r1, [r7, #4]
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	4413      	add	r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	440b      	add	r3, r1
 8008e66:	3318      	adds	r3, #24
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	78fb      	ldrb	r3, [r7, #3]
 8008e6c:	f003 010f 	and.w	r1, r3, #15
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	460b      	mov	r3, r1
 8008e74:	00db      	lsls	r3, r3, #3
 8008e76:	440b      	add	r3, r1
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	4403      	add	r3, r0
 8008e7c:	3348      	adds	r3, #72	; 0x48
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	fbb2 f1f3 	udiv	r1, r2, r3
 8008e84:	fb01 f303 	mul.w	r3, r1, r3
 8008e88:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d112      	bne.n	8008eb4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008e8e:	78fb      	ldrb	r3, [r7, #3]
 8008e90:	f003 020f 	and.w	r2, r3, #15
 8008e94:	6879      	ldr	r1, [r7, #4]
 8008e96:	4613      	mov	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	440b      	add	r3, r1
 8008ea0:	3318      	adds	r3, #24
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008ea6:	78f9      	ldrb	r1, [r7, #3]
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	2200      	movs	r2, #0
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f002 f938 	bl	800b122 <USBD_LL_Transmit>
 8008eb2:	e01f      	b.n	8008ef4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	33b0      	adds	r3, #176	; 0xb0
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	4413      	add	r3, r2
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d010      	beq.n	8008ef4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	33b0      	adds	r3, #176	; 0xb0
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	4413      	add	r3, r2
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008eea:	68ba      	ldr	r2, [r7, #8]
 8008eec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008ef0:	78fa      	ldrb	r2, [r7, #3]
 8008ef2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b084      	sub	sp, #16
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
 8008f06:	460b      	mov	r3, r1
 8008f08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	32b0      	adds	r2, #176	; 0xb0
 8008f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f18:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	32b0      	adds	r2, #176	; 0xb0
 8008f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d101      	bne.n	8008f30 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	e01a      	b.n	8008f66 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008f30:	78fb      	ldrb	r3, [r7, #3]
 8008f32:	4619      	mov	r1, r3
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f002 f936 	bl	800b1a6 <USBD_LL_GetRxDataSize>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	33b0      	adds	r3, #176	; 0xb0
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	4413      	add	r3, r2
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008f60:	4611      	mov	r1, r2
 8008f62:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b084      	sub	sp, #16
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	32b0      	adds	r2, #176	; 0xb0
 8008f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f84:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d101      	bne.n	8008f90 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	e025      	b.n	8008fdc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	33b0      	adds	r3, #176	; 0xb0
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	4413      	add	r3, r2
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d01a      	beq.n	8008fda <USBD_CDC_EP0_RxReady+0x6c>
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008faa:	2bff      	cmp	r3, #255	; 0xff
 8008fac:	d015      	beq.n	8008fda <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	33b0      	adds	r3, #176	; 0xb0
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	4413      	add	r3, r2
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008fc6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008fce:	b292      	uxth	r2, r2
 8008fd0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	22ff      	movs	r2, #255	; 0xff
 8008fd6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b086      	sub	sp, #24
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008fec:	2182      	movs	r1, #130	; 0x82
 8008fee:	4818      	ldr	r0, [pc, #96]	; (8009050 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ff0:	f000 fd09 	bl	8009a06 <USBD_GetEpDesc>
 8008ff4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008ff6:	2101      	movs	r1, #1
 8008ff8:	4815      	ldr	r0, [pc, #84]	; (8009050 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ffa:	f000 fd04 	bl	8009a06 <USBD_GetEpDesc>
 8008ffe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009000:	2181      	movs	r1, #129	; 0x81
 8009002:	4813      	ldr	r0, [pc, #76]	; (8009050 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009004:	f000 fcff 	bl	8009a06 <USBD_GetEpDesc>
 8009008:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d002      	beq.n	8009016 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	2210      	movs	r2, #16
 8009014:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d006      	beq.n	800902a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	2200      	movs	r2, #0
 8009020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009024:	711a      	strb	r2, [r3, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d006      	beq.n	800903e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009038:	711a      	strb	r2, [r3, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2243      	movs	r2, #67	; 0x43
 8009042:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009044:	4b02      	ldr	r3, [pc, #8]	; (8009050 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009046:	4618      	mov	r0, r3
 8009048:	3718      	adds	r7, #24
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	20000050 	.word	0x20000050

08009054 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b086      	sub	sp, #24
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800905c:	2182      	movs	r1, #130	; 0x82
 800905e:	4818      	ldr	r0, [pc, #96]	; (80090c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009060:	f000 fcd1 	bl	8009a06 <USBD_GetEpDesc>
 8009064:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009066:	2101      	movs	r1, #1
 8009068:	4815      	ldr	r0, [pc, #84]	; (80090c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800906a:	f000 fccc 	bl	8009a06 <USBD_GetEpDesc>
 800906e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009070:	2181      	movs	r1, #129	; 0x81
 8009072:	4813      	ldr	r0, [pc, #76]	; (80090c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009074:	f000 fcc7 	bl	8009a06 <USBD_GetEpDesc>
 8009078:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d002      	beq.n	8009086 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	2210      	movs	r2, #16
 8009084:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d006      	beq.n	800909a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	2200      	movs	r2, #0
 8009090:	711a      	strb	r2, [r3, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	f042 0202 	orr.w	r2, r2, #2
 8009098:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d006      	beq.n	80090ae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	711a      	strb	r2, [r3, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f042 0202 	orr.w	r2, r2, #2
 80090ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2243      	movs	r2, #67	; 0x43
 80090b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80090b4:	4b02      	ldr	r3, [pc, #8]	; (80090c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3718      	adds	r7, #24
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	20000050 	.word	0x20000050

080090c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b086      	sub	sp, #24
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80090cc:	2182      	movs	r1, #130	; 0x82
 80090ce:	4818      	ldr	r0, [pc, #96]	; (8009130 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80090d0:	f000 fc99 	bl	8009a06 <USBD_GetEpDesc>
 80090d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80090d6:	2101      	movs	r1, #1
 80090d8:	4815      	ldr	r0, [pc, #84]	; (8009130 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80090da:	f000 fc94 	bl	8009a06 <USBD_GetEpDesc>
 80090de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80090e0:	2181      	movs	r1, #129	; 0x81
 80090e2:	4813      	ldr	r0, [pc, #76]	; (8009130 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80090e4:	f000 fc8f 	bl	8009a06 <USBD_GetEpDesc>
 80090e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d002      	beq.n	80090f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	2210      	movs	r2, #16
 80090f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d006      	beq.n	800910a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	2200      	movs	r2, #0
 8009100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009104:	711a      	strb	r2, [r3, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d006      	beq.n	800911e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009118:	711a      	strb	r2, [r3, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2243      	movs	r2, #67	; 0x43
 8009122:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009124:	4b02      	ldr	r3, [pc, #8]	; (8009130 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009126:	4618      	mov	r0, r3
 8009128:	3718      	adds	r7, #24
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	20000050 	.word	0x20000050

08009134 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	220a      	movs	r2, #10
 8009140:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009142:	4b03      	ldr	r3, [pc, #12]	; (8009150 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009144:	4618      	mov	r0, r3
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr
 8009150:	2000000c 	.word	0x2000000c

08009154 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d101      	bne.n	8009168 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009164:	2303      	movs	r3, #3
 8009166:	e009      	b.n	800917c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	33b0      	adds	r3, #176	; 0xb0
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4413      	add	r3, r2
 8009176:	683a      	ldr	r2, [r7, #0]
 8009178:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009188:	b480      	push	{r7}
 800918a:	b087      	sub	sp, #28
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	32b0      	adds	r2, #176	; 0xb0
 800919e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091a2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d101      	bne.n	80091ae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80091aa:	2303      	movs	r3, #3
 80091ac:	e008      	b.n	80091c0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	371c      	adds	r7, #28
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b085      	sub	sp, #20
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	32b0      	adds	r2, #176	; 0xb0
 80091e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d101      	bne.n	80091f0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80091ec:	2303      	movs	r3, #3
 80091ee:	e004      	b.n	80091fa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	683a      	ldr	r2, [r7, #0]
 80091f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3714      	adds	r7, #20
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
	...

08009208 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	32b0      	adds	r2, #176	; 0xb0
 800921a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800921e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	32b0      	adds	r2, #176	; 0xb0
 800922a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d101      	bne.n	8009236 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009232:	2303      	movs	r3, #3
 8009234:	e018      	b.n	8009268 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	7c1b      	ldrb	r3, [r3, #16]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10a      	bne.n	8009254 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800923e:	4b0c      	ldr	r3, [pc, #48]	; (8009270 <USBD_CDC_ReceivePacket+0x68>)
 8009240:	7819      	ldrb	r1, [r3, #0]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009248:	f44f 7300 	mov.w	r3, #512	; 0x200
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f001 ff89 	bl	800b164 <USBD_LL_PrepareReceive>
 8009252:	e008      	b.n	8009266 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009254:	4b06      	ldr	r3, [pc, #24]	; (8009270 <USBD_CDC_ReceivePacket+0x68>)
 8009256:	7819      	ldrb	r1, [r3, #0]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800925e:	2340      	movs	r3, #64	; 0x40
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f001 ff7f 	bl	800b164 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	20000094 	.word	0x20000094

08009274 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b086      	sub	sp, #24
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	4613      	mov	r3, r2
 8009280:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d101      	bne.n	800928c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009288:	2303      	movs	r3, #3
 800928a:	e01f      	b.n	80092cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2200      	movs	r2, #0
 8009298:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d003      	beq.n	80092b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	79fa      	ldrb	r2, [r7, #7]
 80092be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f001 fdf9 	bl	800aeb8 <USBD_LL_Init>
 80092c6:	4603      	mov	r3, r0
 80092c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80092ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3718      	adds	r7, #24
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092de:	2300      	movs	r3, #0
 80092e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d101      	bne.n	80092ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80092e8:	2303      	movs	r3, #3
 80092ea:	e025      	b.n	8009338 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	683a      	ldr	r2, [r7, #0]
 80092f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	32ae      	adds	r2, #174	; 0xae
 80092fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00f      	beq.n	8009328 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	32ae      	adds	r2, #174	; 0xae
 8009312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009318:	f107 020e 	add.w	r2, r7, #14
 800931c:	4610      	mov	r0, r2
 800931e:	4798      	blx	r3
 8009320:	4602      	mov	r2, r0
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800932e:	1c5a      	adds	r2, r3, #1
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f001 fe01 	bl	800af50 <USBD_LL_Start>
 800934e:	4603      	mov	r3, r0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009360:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009362:	4618      	mov	r0, r3
 8009364:	370c      	adds	r7, #12
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b084      	sub	sp, #16
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
 8009376:	460b      	mov	r3, r1
 8009378:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800937a:	2300      	movs	r3, #0
 800937c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009384:	2b00      	cmp	r3, #0
 8009386:	d009      	beq.n	800939c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	78fa      	ldrb	r2, [r7, #3]
 8009392:	4611      	mov	r1, r2
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	4798      	blx	r3
 8009398:	4603      	mov	r3, r0
 800939a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800939c:	7bfb      	ldrb	r3, [r7, #15]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b084      	sub	sp, #16
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	460b      	mov	r3, r1
 80093b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80093b2:	2300      	movs	r3, #0
 80093b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	78fa      	ldrb	r2, [r7, #3]
 80093c0:	4611      	mov	r1, r2
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	4798      	blx	r3
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d001      	beq.n	80093d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80093cc:	2303      	movs	r3, #3
 80093ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80093d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80093ea:	6839      	ldr	r1, [r7, #0]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f001 f908 	bl	800a602 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2201      	movs	r2, #1
 80093f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009400:	461a      	mov	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800940e:	f003 031f 	and.w	r3, r3, #31
 8009412:	2b02      	cmp	r3, #2
 8009414:	d01a      	beq.n	800944c <USBD_LL_SetupStage+0x72>
 8009416:	2b02      	cmp	r3, #2
 8009418:	d822      	bhi.n	8009460 <USBD_LL_SetupStage+0x86>
 800941a:	2b00      	cmp	r3, #0
 800941c:	d002      	beq.n	8009424 <USBD_LL_SetupStage+0x4a>
 800941e:	2b01      	cmp	r3, #1
 8009420:	d00a      	beq.n	8009438 <USBD_LL_SetupStage+0x5e>
 8009422:	e01d      	b.n	8009460 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fb5f 	bl	8009af0 <USBD_StdDevReq>
 8009432:	4603      	mov	r3, r0
 8009434:	73fb      	strb	r3, [r7, #15]
      break;
 8009436:	e020      	b.n	800947a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800943e:	4619      	mov	r1, r3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 fbc7 	bl	8009bd4 <USBD_StdItfReq>
 8009446:	4603      	mov	r3, r0
 8009448:	73fb      	strb	r3, [r7, #15]
      break;
 800944a:	e016      	b.n	800947a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009452:	4619      	mov	r1, r3
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fc29 	bl	8009cac <USBD_StdEPReq>
 800945a:	4603      	mov	r3, r0
 800945c:	73fb      	strb	r3, [r7, #15]
      break;
 800945e:	e00c      	b.n	800947a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009466:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800946a:	b2db      	uxtb	r3, r3
 800946c:	4619      	mov	r1, r3
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f001 fdce 	bl	800b010 <USBD_LL_StallEP>
 8009474:	4603      	mov	r3, r0
 8009476:	73fb      	strb	r3, [r7, #15]
      break;
 8009478:	bf00      	nop
  }

  return ret;
 800947a:	7bfb      	ldrb	r3, [r7, #15]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b086      	sub	sp, #24
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	460b      	mov	r3, r1
 800948e:	607a      	str	r2, [r7, #4]
 8009490:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009492:	2300      	movs	r3, #0
 8009494:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009496:	7afb      	ldrb	r3, [r7, #11]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d16e      	bne.n	800957a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80094a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80094aa:	2b03      	cmp	r3, #3
 80094ac:	f040 8098 	bne.w	80095e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	689a      	ldr	r2, [r3, #8]
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d913      	bls.n	80094e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	689a      	ldr	r2, [r3, #8]
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	1ad2      	subs	r2, r2, r3
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	68da      	ldr	r2, [r3, #12]
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	4293      	cmp	r3, r2
 80094d4:	bf28      	it	cs
 80094d6:	4613      	movcs	r3, r2
 80094d8:	461a      	mov	r2, r3
 80094da:	6879      	ldr	r1, [r7, #4]
 80094dc:	68f8      	ldr	r0, [r7, #12]
 80094de:	f001 f984 	bl	800a7ea <USBD_CtlContinueRx>
 80094e2:	e07d      	b.n	80095e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80094ea:	f003 031f 	and.w	r3, r3, #31
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d014      	beq.n	800951c <USBD_LL_DataOutStage+0x98>
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d81d      	bhi.n	8009532 <USBD_LL_DataOutStage+0xae>
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d002      	beq.n	8009500 <USBD_LL_DataOutStage+0x7c>
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d003      	beq.n	8009506 <USBD_LL_DataOutStage+0x82>
 80094fe:	e018      	b.n	8009532 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009500:	2300      	movs	r3, #0
 8009502:	75bb      	strb	r3, [r7, #22]
            break;
 8009504:	e018      	b.n	8009538 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800950c:	b2db      	uxtb	r3, r3
 800950e:	4619      	mov	r1, r3
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f000 fa5e 	bl	80099d2 <USBD_CoreFindIF>
 8009516:	4603      	mov	r3, r0
 8009518:	75bb      	strb	r3, [r7, #22]
            break;
 800951a:	e00d      	b.n	8009538 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009522:	b2db      	uxtb	r3, r3
 8009524:	4619      	mov	r1, r3
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f000 fa60 	bl	80099ec <USBD_CoreFindEP>
 800952c:	4603      	mov	r3, r0
 800952e:	75bb      	strb	r3, [r7, #22]
            break;
 8009530:	e002      	b.n	8009538 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009532:	2300      	movs	r3, #0
 8009534:	75bb      	strb	r3, [r7, #22]
            break;
 8009536:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009538:	7dbb      	ldrb	r3, [r7, #22]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d119      	bne.n	8009572 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009544:	b2db      	uxtb	r3, r3
 8009546:	2b03      	cmp	r3, #3
 8009548:	d113      	bne.n	8009572 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800954a:	7dba      	ldrb	r2, [r7, #22]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	32ae      	adds	r2, #174	; 0xae
 8009550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00b      	beq.n	8009572 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800955a:	7dba      	ldrb	r2, [r7, #22]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009562:	7dba      	ldrb	r2, [r7, #22]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	32ae      	adds	r2, #174	; 0xae
 8009568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f001 f94a 	bl	800a80c <USBD_CtlSendStatus>
 8009578:	e032      	b.n	80095e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800957a:	7afb      	ldrb	r3, [r7, #11]
 800957c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009580:	b2db      	uxtb	r3, r3
 8009582:	4619      	mov	r1, r3
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f000 fa31 	bl	80099ec <USBD_CoreFindEP>
 800958a:	4603      	mov	r3, r0
 800958c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800958e:	7dbb      	ldrb	r3, [r7, #22]
 8009590:	2bff      	cmp	r3, #255	; 0xff
 8009592:	d025      	beq.n	80095e0 <USBD_LL_DataOutStage+0x15c>
 8009594:	7dbb      	ldrb	r3, [r7, #22]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d122      	bne.n	80095e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b03      	cmp	r3, #3
 80095a4:	d117      	bne.n	80095d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80095a6:	7dba      	ldrb	r2, [r7, #22]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	32ae      	adds	r2, #174	; 0xae
 80095ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b0:	699b      	ldr	r3, [r3, #24]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00f      	beq.n	80095d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80095b6:	7dba      	ldrb	r2, [r7, #22]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80095be:	7dba      	ldrb	r2, [r7, #22]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	32ae      	adds	r2, #174	; 0xae
 80095c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	7afa      	ldrb	r2, [r7, #11]
 80095cc:	4611      	mov	r1, r2
 80095ce:	68f8      	ldr	r0, [r7, #12]
 80095d0:	4798      	blx	r3
 80095d2:	4603      	mov	r3, r0
 80095d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80095d6:	7dfb      	ldrb	r3, [r7, #23]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d001      	beq.n	80095e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80095dc:	7dfb      	ldrb	r3, [r7, #23]
 80095de:	e000      	b.n	80095e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3718      	adds	r7, #24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b086      	sub	sp, #24
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	60f8      	str	r0, [r7, #12]
 80095f2:	460b      	mov	r3, r1
 80095f4:	607a      	str	r2, [r7, #4]
 80095f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80095f8:	7afb      	ldrb	r3, [r7, #11]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d16f      	bne.n	80096de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	3314      	adds	r3, #20
 8009602:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800960a:	2b02      	cmp	r3, #2
 800960c:	d15a      	bne.n	80096c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	689a      	ldr	r2, [r3, #8]
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	429a      	cmp	r2, r3
 8009618:	d914      	bls.n	8009644 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	689a      	ldr	r2, [r3, #8]
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	1ad2      	subs	r2, r2, r3
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	461a      	mov	r2, r3
 800962e:	6879      	ldr	r1, [r7, #4]
 8009630:	68f8      	ldr	r0, [r7, #12]
 8009632:	f001 f8ac 	bl	800a78e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009636:	2300      	movs	r3, #0
 8009638:	2200      	movs	r2, #0
 800963a:	2100      	movs	r1, #0
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f001 fd91 	bl	800b164 <USBD_LL_PrepareReceive>
 8009642:	e03f      	b.n	80096c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	68da      	ldr	r2, [r3, #12]
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	429a      	cmp	r2, r3
 800964e:	d11c      	bne.n	800968a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	685a      	ldr	r2, [r3, #4]
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009658:	429a      	cmp	r2, r3
 800965a:	d316      	bcc.n	800968a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	685a      	ldr	r2, [r3, #4]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009666:	429a      	cmp	r2, r3
 8009668:	d20f      	bcs.n	800968a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800966a:	2200      	movs	r2, #0
 800966c:	2100      	movs	r1, #0
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f001 f88d 	bl	800a78e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800967c:	2300      	movs	r3, #0
 800967e:	2200      	movs	r2, #0
 8009680:	2100      	movs	r1, #0
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f001 fd6e 	bl	800b164 <USBD_LL_PrepareReceive>
 8009688:	e01c      	b.n	80096c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009690:	b2db      	uxtb	r3, r3
 8009692:	2b03      	cmp	r3, #3
 8009694:	d10f      	bne.n	80096b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d009      	beq.n	80096b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80096b6:	2180      	movs	r1, #128	; 0x80
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f001 fca9 	bl	800b010 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f001 f8b7 	bl	800a832 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d03a      	beq.n	8009744 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f7ff fe42 	bl	8009358 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80096dc:	e032      	b.n	8009744 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80096de:	7afb      	ldrb	r3, [r7, #11]
 80096e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	4619      	mov	r1, r3
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f000 f97f 	bl	80099ec <USBD_CoreFindEP>
 80096ee:	4603      	mov	r3, r0
 80096f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096f2:	7dfb      	ldrb	r3, [r7, #23]
 80096f4:	2bff      	cmp	r3, #255	; 0xff
 80096f6:	d025      	beq.n	8009744 <USBD_LL_DataInStage+0x15a>
 80096f8:	7dfb      	ldrb	r3, [r7, #23]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d122      	bne.n	8009744 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009704:	b2db      	uxtb	r3, r3
 8009706:	2b03      	cmp	r3, #3
 8009708:	d11c      	bne.n	8009744 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800970a:	7dfa      	ldrb	r2, [r7, #23]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	32ae      	adds	r2, #174	; 0xae
 8009710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009714:	695b      	ldr	r3, [r3, #20]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d014      	beq.n	8009744 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800971a:	7dfa      	ldrb	r2, [r7, #23]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009722:	7dfa      	ldrb	r2, [r7, #23]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	32ae      	adds	r2, #174	; 0xae
 8009728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800972c:	695b      	ldr	r3, [r3, #20]
 800972e:	7afa      	ldrb	r2, [r7, #11]
 8009730:	4611      	mov	r1, r2
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	4798      	blx	r3
 8009736:	4603      	mov	r3, r0
 8009738:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800973a:	7dbb      	ldrb	r3, [r7, #22]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d001      	beq.n	8009744 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009740:	7dbb      	ldrb	r3, [r7, #22]
 8009742:	e000      	b.n	8009746 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3718      	adds	r7, #24
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b084      	sub	sp, #16
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2201      	movs	r2, #1
 800975e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009786:	2b00      	cmp	r3, #0
 8009788:	d014      	beq.n	80097b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00e      	beq.n	80097b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	6852      	ldr	r2, [r2, #4]
 80097a2:	b2d2      	uxtb	r2, r2
 80097a4:	4611      	mov	r1, r2
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	4798      	blx	r3
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d001      	beq.n	80097b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80097b0:	2303      	movs	r3, #3
 80097b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097b4:	2340      	movs	r3, #64	; 0x40
 80097b6:	2200      	movs	r2, #0
 80097b8:	2100      	movs	r1, #0
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f001 fbe3 	bl	800af86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2240      	movs	r2, #64	; 0x40
 80097cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097d0:	2340      	movs	r3, #64	; 0x40
 80097d2:	2200      	movs	r2, #0
 80097d4:	2180      	movs	r1, #128	; 0x80
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f001 fbd5 	bl	800af86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2240      	movs	r2, #64	; 0x40
 80097e6:	621a      	str	r2, [r3, #32]

  return ret;
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80097f2:	b480      	push	{r7}
 80097f4:	b083      	sub	sp, #12
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
 80097fa:	460b      	mov	r3, r1
 80097fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	78fa      	ldrb	r2, [r7, #3]
 8009802:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	370c      	adds	r7, #12
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr

08009812 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009812:	b480      	push	{r7}
 8009814:	b083      	sub	sp, #12
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009820:	b2da      	uxtb	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2204      	movs	r2, #4
 800982c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	370c      	adds	r7, #12
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr

0800983e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800983e:	b480      	push	{r7}
 8009840:	b083      	sub	sp, #12
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800984c:	b2db      	uxtb	r3, r3
 800984e:	2b04      	cmp	r3, #4
 8009850:	d106      	bne.n	8009860 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009858:	b2da      	uxtb	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	370c      	adds	r7, #12
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr

0800986e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b082      	sub	sp, #8
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800987c:	b2db      	uxtb	r3, r3
 800987e:	2b03      	cmp	r3, #3
 8009880:	d110      	bne.n	80098a4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009888:	2b00      	cmp	r3, #0
 800988a:	d00b      	beq.n	80098a4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009892:	69db      	ldr	r3, [r3, #28]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d005      	beq.n	80098a4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800989e:	69db      	ldr	r3, [r3, #28]
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3708      	adds	r7, #8
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b082      	sub	sp, #8
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
 80098b6:	460b      	mov	r3, r1
 80098b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	32ae      	adds	r2, #174	; 0xae
 80098c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d101      	bne.n	80098d0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80098cc:	2303      	movs	r3, #3
 80098ce:	e01c      	b.n	800990a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	2b03      	cmp	r3, #3
 80098da:	d115      	bne.n	8009908 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	32ae      	adds	r2, #174	; 0xae
 80098e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ea:	6a1b      	ldr	r3, [r3, #32]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00b      	beq.n	8009908 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	32ae      	adds	r2, #174	; 0xae
 80098fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098fe:	6a1b      	ldr	r3, [r3, #32]
 8009900:	78fa      	ldrb	r2, [r7, #3]
 8009902:	4611      	mov	r1, r2
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009908:	2300      	movs	r3, #0
}
 800990a:	4618      	mov	r0, r3
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b082      	sub	sp, #8
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	460b      	mov	r3, r1
 800991c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	32ae      	adds	r2, #174	; 0xae
 8009928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d101      	bne.n	8009934 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009930:	2303      	movs	r3, #3
 8009932:	e01c      	b.n	800996e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800993a:	b2db      	uxtb	r3, r3
 800993c:	2b03      	cmp	r3, #3
 800993e:	d115      	bne.n	800996c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	32ae      	adds	r2, #174	; 0xae
 800994a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800994e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009950:	2b00      	cmp	r3, #0
 8009952:	d00b      	beq.n	800996c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	32ae      	adds	r2, #174	; 0xae
 800995e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009964:	78fa      	ldrb	r2, [r7, #3]
 8009966:	4611      	mov	r1, r2
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3708      	adds	r7, #8
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009976:	b480      	push	{r7}
 8009978:	b083      	sub	sp, #12
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009994:	2300      	movs	r3, #0
 8009996:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00e      	beq.n	80099c8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	6852      	ldr	r2, [r2, #4]
 80099b6:	b2d2      	uxtb	r2, r2
 80099b8:	4611      	mov	r1, r2
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	4798      	blx	r3
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d001      	beq.n	80099c8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80099c4:	2303      	movs	r3, #3
 80099c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b083      	sub	sp, #12
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	460b      	mov	r3, r1
 80099dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80099de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	460b      	mov	r3, r1
 80099f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80099f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	370c      	adds	r7, #12
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr

08009a06 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b086      	sub	sp, #24
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
 8009a0e:	460b      	mov	r3, r1
 8009a10:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	885b      	ldrh	r3, [r3, #2]
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d920      	bls.n	8009a70 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009a36:	e013      	b.n	8009a60 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009a38:	f107 030a 	add.w	r3, r7, #10
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	6978      	ldr	r0, [r7, #20]
 8009a40:	f000 f81b 	bl	8009a7a <USBD_GetNextDesc>
 8009a44:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	785b      	ldrb	r3, [r3, #1]
 8009a4a:	2b05      	cmp	r3, #5
 8009a4c:	d108      	bne.n	8009a60 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	789b      	ldrb	r3, [r3, #2]
 8009a56:	78fa      	ldrb	r2, [r7, #3]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d008      	beq.n	8009a6e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	885b      	ldrh	r3, [r3, #2]
 8009a64:	b29a      	uxth	r2, r3
 8009a66:	897b      	ldrh	r3, [r7, #10]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d8e5      	bhi.n	8009a38 <USBD_GetEpDesc+0x32>
 8009a6c:	e000      	b.n	8009a70 <USBD_GetEpDesc+0x6a>
          break;
 8009a6e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009a70:	693b      	ldr	r3, [r7, #16]
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3718      	adds	r7, #24
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009a7a:	b480      	push	{r7}
 8009a7c:	b085      	sub	sp, #20
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
 8009a82:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	881a      	ldrh	r2, [r3, #0]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	4413      	add	r3, r2
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3714      	adds	r7, #20
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b087      	sub	sp, #28
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009ad2:	8a3b      	ldrh	r3, [r7, #16]
 8009ad4:	021b      	lsls	r3, r3, #8
 8009ad6:	b21a      	sxth	r2, r3
 8009ad8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	b21b      	sxth	r3, r3
 8009ae0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009ae2:	89fb      	ldrh	r3, [r7, #14]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	371c      	adds	r7, #28
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009afa:	2300      	movs	r3, #0
 8009afc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b06:	2b40      	cmp	r3, #64	; 0x40
 8009b08:	d005      	beq.n	8009b16 <USBD_StdDevReq+0x26>
 8009b0a:	2b40      	cmp	r3, #64	; 0x40
 8009b0c:	d857      	bhi.n	8009bbe <USBD_StdDevReq+0xce>
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00f      	beq.n	8009b32 <USBD_StdDevReq+0x42>
 8009b12:	2b20      	cmp	r3, #32
 8009b14:	d153      	bne.n	8009bbe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	32ae      	adds	r2, #174	; 0xae
 8009b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	6839      	ldr	r1, [r7, #0]
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	4798      	blx	r3
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b30:	e04a      	b.n	8009bc8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	785b      	ldrb	r3, [r3, #1]
 8009b36:	2b09      	cmp	r3, #9
 8009b38:	d83b      	bhi.n	8009bb2 <USBD_StdDevReq+0xc2>
 8009b3a:	a201      	add	r2, pc, #4	; (adr r2, 8009b40 <USBD_StdDevReq+0x50>)
 8009b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b40:	08009b95 	.word	0x08009b95
 8009b44:	08009ba9 	.word	0x08009ba9
 8009b48:	08009bb3 	.word	0x08009bb3
 8009b4c:	08009b9f 	.word	0x08009b9f
 8009b50:	08009bb3 	.word	0x08009bb3
 8009b54:	08009b73 	.word	0x08009b73
 8009b58:	08009b69 	.word	0x08009b69
 8009b5c:	08009bb3 	.word	0x08009bb3
 8009b60:	08009b8b 	.word	0x08009b8b
 8009b64:	08009b7d 	.word	0x08009b7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009b68:	6839      	ldr	r1, [r7, #0]
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 fa3c 	bl	8009fe8 <USBD_GetDescriptor>
          break;
 8009b70:	e024      	b.n	8009bbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009b72:	6839      	ldr	r1, [r7, #0]
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 fba1 	bl	800a2bc <USBD_SetAddress>
          break;
 8009b7a:	e01f      	b.n	8009bbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009b7c:	6839      	ldr	r1, [r7, #0]
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 fbe0 	bl	800a344 <USBD_SetConfig>
 8009b84:	4603      	mov	r3, r0
 8009b86:	73fb      	strb	r3, [r7, #15]
          break;
 8009b88:	e018      	b.n	8009bbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009b8a:	6839      	ldr	r1, [r7, #0]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fc83 	bl	800a498 <USBD_GetConfig>
          break;
 8009b92:	e013      	b.n	8009bbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009b94:	6839      	ldr	r1, [r7, #0]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 fcb4 	bl	800a504 <USBD_GetStatus>
          break;
 8009b9c:	e00e      	b.n	8009bbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009b9e:	6839      	ldr	r1, [r7, #0]
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 fce3 	bl	800a56c <USBD_SetFeature>
          break;
 8009ba6:	e009      	b.n	8009bbc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009ba8:	6839      	ldr	r1, [r7, #0]
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 fd07 	bl	800a5be <USBD_ClrFeature>
          break;
 8009bb0:	e004      	b.n	8009bbc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009bb2:	6839      	ldr	r1, [r7, #0]
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fd5e 	bl	800a676 <USBD_CtlError>
          break;
 8009bba:	bf00      	nop
      }
      break;
 8009bbc:	e004      	b.n	8009bc8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009bbe:	6839      	ldr	r1, [r7, #0]
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 fd58 	bl	800a676 <USBD_CtlError>
      break;
 8009bc6:	bf00      	nop
  }

  return ret;
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop

08009bd4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bde:	2300      	movs	r3, #0
 8009be0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009bea:	2b40      	cmp	r3, #64	; 0x40
 8009bec:	d005      	beq.n	8009bfa <USBD_StdItfReq+0x26>
 8009bee:	2b40      	cmp	r3, #64	; 0x40
 8009bf0:	d852      	bhi.n	8009c98 <USBD_StdItfReq+0xc4>
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <USBD_StdItfReq+0x26>
 8009bf6:	2b20      	cmp	r3, #32
 8009bf8:	d14e      	bne.n	8009c98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	3b01      	subs	r3, #1
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	d840      	bhi.n	8009c8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	889b      	ldrh	r3, [r3, #4]
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d836      	bhi.n	8009c80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	889b      	ldrh	r3, [r3, #4]
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	4619      	mov	r1, r3
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f7ff fed9 	bl	80099d2 <USBD_CoreFindIF>
 8009c20:	4603      	mov	r3, r0
 8009c22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c24:	7bbb      	ldrb	r3, [r7, #14]
 8009c26:	2bff      	cmp	r3, #255	; 0xff
 8009c28:	d01d      	beq.n	8009c66 <USBD_StdItfReq+0x92>
 8009c2a:	7bbb      	ldrb	r3, [r7, #14]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d11a      	bne.n	8009c66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009c30:	7bba      	ldrb	r2, [r7, #14]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	32ae      	adds	r2, #174	; 0xae
 8009c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00f      	beq.n	8009c60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009c40:	7bba      	ldrb	r2, [r7, #14]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009c48:	7bba      	ldrb	r2, [r7, #14]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	32ae      	adds	r2, #174	; 0xae
 8009c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	6839      	ldr	r1, [r7, #0]
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	4798      	blx	r3
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009c5e:	e004      	b.n	8009c6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009c60:	2303      	movs	r3, #3
 8009c62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009c64:	e001      	b.n	8009c6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009c66:	2303      	movs	r3, #3
 8009c68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	88db      	ldrh	r3, [r3, #6]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d110      	bne.n	8009c94 <USBD_StdItfReq+0xc0>
 8009c72:	7bfb      	ldrb	r3, [r7, #15]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10d      	bne.n	8009c94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 fdc7 	bl	800a80c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009c7e:	e009      	b.n	8009c94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009c80:	6839      	ldr	r1, [r7, #0]
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 fcf7 	bl	800a676 <USBD_CtlError>
          break;
 8009c88:	e004      	b.n	8009c94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009c8a:	6839      	ldr	r1, [r7, #0]
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 fcf2 	bl	800a676 <USBD_CtlError>
          break;
 8009c92:	e000      	b.n	8009c96 <USBD_StdItfReq+0xc2>
          break;
 8009c94:	bf00      	nop
      }
      break;
 8009c96:	e004      	b.n	8009ca2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009c98:	6839      	ldr	r1, [r7, #0]
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 fceb 	bl	800a676 <USBD_CtlError>
      break;
 8009ca0:	bf00      	nop
  }

  return ret;
 8009ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	889b      	ldrh	r3, [r3, #4]
 8009cbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cc8:	2b40      	cmp	r3, #64	; 0x40
 8009cca:	d007      	beq.n	8009cdc <USBD_StdEPReq+0x30>
 8009ccc:	2b40      	cmp	r3, #64	; 0x40
 8009cce:	f200 817f 	bhi.w	8009fd0 <USBD_StdEPReq+0x324>
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d02a      	beq.n	8009d2c <USBD_StdEPReq+0x80>
 8009cd6:	2b20      	cmp	r3, #32
 8009cd8:	f040 817a 	bne.w	8009fd0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009cdc:	7bbb      	ldrb	r3, [r7, #14]
 8009cde:	4619      	mov	r1, r3
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f7ff fe83 	bl	80099ec <USBD_CoreFindEP>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009cea:	7b7b      	ldrb	r3, [r7, #13]
 8009cec:	2bff      	cmp	r3, #255	; 0xff
 8009cee:	f000 8174 	beq.w	8009fda <USBD_StdEPReq+0x32e>
 8009cf2:	7b7b      	ldrb	r3, [r7, #13]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f040 8170 	bne.w	8009fda <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009cfa:	7b7a      	ldrb	r2, [r7, #13]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009d02:	7b7a      	ldrb	r2, [r7, #13]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	32ae      	adds	r2, #174	; 0xae
 8009d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f000 8163 	beq.w	8009fda <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009d14:	7b7a      	ldrb	r2, [r7, #13]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	32ae      	adds	r2, #174	; 0xae
 8009d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	6839      	ldr	r1, [r7, #0]
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	4798      	blx	r3
 8009d26:	4603      	mov	r3, r0
 8009d28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009d2a:	e156      	b.n	8009fda <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	785b      	ldrb	r3, [r3, #1]
 8009d30:	2b03      	cmp	r3, #3
 8009d32:	d008      	beq.n	8009d46 <USBD_StdEPReq+0x9a>
 8009d34:	2b03      	cmp	r3, #3
 8009d36:	f300 8145 	bgt.w	8009fc4 <USBD_StdEPReq+0x318>
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f000 809b 	beq.w	8009e76 <USBD_StdEPReq+0x1ca>
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d03c      	beq.n	8009dbe <USBD_StdEPReq+0x112>
 8009d44:	e13e      	b.n	8009fc4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d002      	beq.n	8009d58 <USBD_StdEPReq+0xac>
 8009d52:	2b03      	cmp	r3, #3
 8009d54:	d016      	beq.n	8009d84 <USBD_StdEPReq+0xd8>
 8009d56:	e02c      	b.n	8009db2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d58:	7bbb      	ldrb	r3, [r7, #14]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00d      	beq.n	8009d7a <USBD_StdEPReq+0xce>
 8009d5e:	7bbb      	ldrb	r3, [r7, #14]
 8009d60:	2b80      	cmp	r3, #128	; 0x80
 8009d62:	d00a      	beq.n	8009d7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d64:	7bbb      	ldrb	r3, [r7, #14]
 8009d66:	4619      	mov	r1, r3
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f001 f951 	bl	800b010 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d6e:	2180      	movs	r1, #128	; 0x80
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f001 f94d 	bl	800b010 <USBD_LL_StallEP>
 8009d76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d78:	e020      	b.n	8009dbc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009d7a:	6839      	ldr	r1, [r7, #0]
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 fc7a 	bl	800a676 <USBD_CtlError>
              break;
 8009d82:	e01b      	b.n	8009dbc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	885b      	ldrh	r3, [r3, #2]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10e      	bne.n	8009daa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009d8c:	7bbb      	ldrb	r3, [r7, #14]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d00b      	beq.n	8009daa <USBD_StdEPReq+0xfe>
 8009d92:	7bbb      	ldrb	r3, [r7, #14]
 8009d94:	2b80      	cmp	r3, #128	; 0x80
 8009d96:	d008      	beq.n	8009daa <USBD_StdEPReq+0xfe>
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	88db      	ldrh	r3, [r3, #6]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d104      	bne.n	8009daa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009da0:	7bbb      	ldrb	r3, [r7, #14]
 8009da2:	4619      	mov	r1, r3
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f001 f933 	bl	800b010 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 fd2e 	bl	800a80c <USBD_CtlSendStatus>

              break;
 8009db0:	e004      	b.n	8009dbc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009db2:	6839      	ldr	r1, [r7, #0]
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 fc5e 	bl	800a676 <USBD_CtlError>
              break;
 8009dba:	bf00      	nop
          }
          break;
 8009dbc:	e107      	b.n	8009fce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	d002      	beq.n	8009dd0 <USBD_StdEPReq+0x124>
 8009dca:	2b03      	cmp	r3, #3
 8009dcc:	d016      	beq.n	8009dfc <USBD_StdEPReq+0x150>
 8009dce:	e04b      	b.n	8009e68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dd0:	7bbb      	ldrb	r3, [r7, #14]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00d      	beq.n	8009df2 <USBD_StdEPReq+0x146>
 8009dd6:	7bbb      	ldrb	r3, [r7, #14]
 8009dd8:	2b80      	cmp	r3, #128	; 0x80
 8009dda:	d00a      	beq.n	8009df2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ddc:	7bbb      	ldrb	r3, [r7, #14]
 8009dde:	4619      	mov	r1, r3
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f001 f915 	bl	800b010 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009de6:	2180      	movs	r1, #128	; 0x80
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f001 f911 	bl	800b010 <USBD_LL_StallEP>
 8009dee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009df0:	e040      	b.n	8009e74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009df2:	6839      	ldr	r1, [r7, #0]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 fc3e 	bl	800a676 <USBD_CtlError>
              break;
 8009dfa:	e03b      	b.n	8009e74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	885b      	ldrh	r3, [r3, #2]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d136      	bne.n	8009e72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009e04:	7bbb      	ldrb	r3, [r7, #14]
 8009e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d004      	beq.n	8009e18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e0e:	7bbb      	ldrb	r3, [r7, #14]
 8009e10:	4619      	mov	r1, r3
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f001 f91b 	bl	800b04e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 fcf7 	bl	800a80c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009e1e:	7bbb      	ldrb	r3, [r7, #14]
 8009e20:	4619      	mov	r1, r3
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f7ff fde2 	bl	80099ec <USBD_CoreFindEP>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e2c:	7b7b      	ldrb	r3, [r7, #13]
 8009e2e:	2bff      	cmp	r3, #255	; 0xff
 8009e30:	d01f      	beq.n	8009e72 <USBD_StdEPReq+0x1c6>
 8009e32:	7b7b      	ldrb	r3, [r7, #13]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d11c      	bne.n	8009e72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009e38:	7b7a      	ldrb	r2, [r7, #13]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009e40:	7b7a      	ldrb	r2, [r7, #13]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	32ae      	adds	r2, #174	; 0xae
 8009e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d010      	beq.n	8009e72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009e50:	7b7a      	ldrb	r2, [r7, #13]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	32ae      	adds	r2, #174	; 0xae
 8009e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	6839      	ldr	r1, [r7, #0]
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	4798      	blx	r3
 8009e62:	4603      	mov	r3, r0
 8009e64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009e66:	e004      	b.n	8009e72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009e68:	6839      	ldr	r1, [r7, #0]
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 fc03 	bl	800a676 <USBD_CtlError>
              break;
 8009e70:	e000      	b.n	8009e74 <USBD_StdEPReq+0x1c8>
              break;
 8009e72:	bf00      	nop
          }
          break;
 8009e74:	e0ab      	b.n	8009fce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d002      	beq.n	8009e88 <USBD_StdEPReq+0x1dc>
 8009e82:	2b03      	cmp	r3, #3
 8009e84:	d032      	beq.n	8009eec <USBD_StdEPReq+0x240>
 8009e86:	e097      	b.n	8009fb8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e88:	7bbb      	ldrb	r3, [r7, #14]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d007      	beq.n	8009e9e <USBD_StdEPReq+0x1f2>
 8009e8e:	7bbb      	ldrb	r3, [r7, #14]
 8009e90:	2b80      	cmp	r3, #128	; 0x80
 8009e92:	d004      	beq.n	8009e9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009e94:	6839      	ldr	r1, [r7, #0]
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 fbed 	bl	800a676 <USBD_CtlError>
                break;
 8009e9c:	e091      	b.n	8009fc2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	da0b      	bge.n	8009ebe <USBD_StdEPReq+0x212>
 8009ea6:	7bbb      	ldrb	r3, [r7, #14]
 8009ea8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009eac:	4613      	mov	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4413      	add	r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	3310      	adds	r3, #16
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	4413      	add	r3, r2
 8009eba:	3304      	adds	r3, #4
 8009ebc:	e00b      	b.n	8009ed6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ebe:	7bbb      	ldrb	r3, [r7, #14]
 8009ec0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4413      	add	r3, r2
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	3304      	adds	r3, #4
 8009ed6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	2200      	movs	r2, #0
 8009edc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	2202      	movs	r2, #2
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 fc37 	bl	800a758 <USBD_CtlSendData>
              break;
 8009eea:	e06a      	b.n	8009fc2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009eec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	da11      	bge.n	8009f18 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009ef4:	7bbb      	ldrb	r3, [r7, #14]
 8009ef6:	f003 020f 	and.w	r2, r3, #15
 8009efa:	6879      	ldr	r1, [r7, #4]
 8009efc:	4613      	mov	r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	4413      	add	r3, r2
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	440b      	add	r3, r1
 8009f06:	3324      	adds	r3, #36	; 0x24
 8009f08:	881b      	ldrh	r3, [r3, #0]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d117      	bne.n	8009f3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009f0e:	6839      	ldr	r1, [r7, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fbb0 	bl	800a676 <USBD_CtlError>
                  break;
 8009f16:	e054      	b.n	8009fc2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f18:	7bbb      	ldrb	r3, [r7, #14]
 8009f1a:	f003 020f 	and.w	r2, r3, #15
 8009f1e:	6879      	ldr	r1, [r7, #4]
 8009f20:	4613      	mov	r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	4413      	add	r3, r2
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	440b      	add	r3, r1
 8009f2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009f2e:	881b      	ldrh	r3, [r3, #0]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d104      	bne.n	8009f3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009f34:	6839      	ldr	r1, [r7, #0]
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 fb9d 	bl	800a676 <USBD_CtlError>
                  break;
 8009f3c:	e041      	b.n	8009fc2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	da0b      	bge.n	8009f5e <USBD_StdEPReq+0x2b2>
 8009f46:	7bbb      	ldrb	r3, [r7, #14]
 8009f48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	4413      	add	r3, r2
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	3310      	adds	r3, #16
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	4413      	add	r3, r2
 8009f5a:	3304      	adds	r3, #4
 8009f5c:	e00b      	b.n	8009f76 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f5e:	7bbb      	ldrb	r3, [r7, #14]
 8009f60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f64:	4613      	mov	r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	4413      	add	r3, r2
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	4413      	add	r3, r2
 8009f74:	3304      	adds	r3, #4
 8009f76:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f78:	7bbb      	ldrb	r3, [r7, #14]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d002      	beq.n	8009f84 <USBD_StdEPReq+0x2d8>
 8009f7e:	7bbb      	ldrb	r3, [r7, #14]
 8009f80:	2b80      	cmp	r3, #128	; 0x80
 8009f82:	d103      	bne.n	8009f8c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	2200      	movs	r2, #0
 8009f88:	601a      	str	r2, [r3, #0]
 8009f8a:	e00e      	b.n	8009faa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009f8c:	7bbb      	ldrb	r3, [r7, #14]
 8009f8e:	4619      	mov	r1, r3
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f001 f87b 	bl	800b08c <USBD_LL_IsStallEP>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d003      	beq.n	8009fa4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	601a      	str	r2, [r3, #0]
 8009fa2:	e002      	b.n	8009faa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	2202      	movs	r2, #2
 8009fae:	4619      	mov	r1, r3
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 fbd1 	bl	800a758 <USBD_CtlSendData>
              break;
 8009fb6:	e004      	b.n	8009fc2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009fb8:	6839      	ldr	r1, [r7, #0]
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 fb5b 	bl	800a676 <USBD_CtlError>
              break;
 8009fc0:	bf00      	nop
          }
          break;
 8009fc2:	e004      	b.n	8009fce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009fc4:	6839      	ldr	r1, [r7, #0]
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 fb55 	bl	800a676 <USBD_CtlError>
          break;
 8009fcc:	bf00      	nop
      }
      break;
 8009fce:	e005      	b.n	8009fdc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009fd0:	6839      	ldr	r1, [r7, #0]
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 fb4f 	bl	800a676 <USBD_CtlError>
      break;
 8009fd8:	e000      	b.n	8009fdc <USBD_StdEPReq+0x330>
      break;
 8009fda:	bf00      	nop
  }

  return ret;
 8009fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
	...

08009fe8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	885b      	ldrh	r3, [r3, #2]
 800a002:	0a1b      	lsrs	r3, r3, #8
 800a004:	b29b      	uxth	r3, r3
 800a006:	3b01      	subs	r3, #1
 800a008:	2b06      	cmp	r3, #6
 800a00a:	f200 8128 	bhi.w	800a25e <USBD_GetDescriptor+0x276>
 800a00e:	a201      	add	r2, pc, #4	; (adr r2, 800a014 <USBD_GetDescriptor+0x2c>)
 800a010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a014:	0800a031 	.word	0x0800a031
 800a018:	0800a049 	.word	0x0800a049
 800a01c:	0800a089 	.word	0x0800a089
 800a020:	0800a25f 	.word	0x0800a25f
 800a024:	0800a25f 	.word	0x0800a25f
 800a028:	0800a1ff 	.word	0x0800a1ff
 800a02c:	0800a22b 	.word	0x0800a22b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	7c12      	ldrb	r2, [r2, #16]
 800a03c:	f107 0108 	add.w	r1, r7, #8
 800a040:	4610      	mov	r0, r2
 800a042:	4798      	blx	r3
 800a044:	60f8      	str	r0, [r7, #12]
      break;
 800a046:	e112      	b.n	800a26e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	7c1b      	ldrb	r3, [r3, #16]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d10d      	bne.n	800a06c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a058:	f107 0208 	add.w	r2, r7, #8
 800a05c:	4610      	mov	r0, r2
 800a05e:	4798      	blx	r3
 800a060:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	3301      	adds	r3, #1
 800a066:	2202      	movs	r2, #2
 800a068:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a06a:	e100      	b.n	800a26e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a074:	f107 0208 	add.w	r2, r7, #8
 800a078:	4610      	mov	r0, r2
 800a07a:	4798      	blx	r3
 800a07c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	3301      	adds	r3, #1
 800a082:	2202      	movs	r2, #2
 800a084:	701a      	strb	r2, [r3, #0]
      break;
 800a086:	e0f2      	b.n	800a26e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	885b      	ldrh	r3, [r3, #2]
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	2b05      	cmp	r3, #5
 800a090:	f200 80ac 	bhi.w	800a1ec <USBD_GetDescriptor+0x204>
 800a094:	a201      	add	r2, pc, #4	; (adr r2, 800a09c <USBD_GetDescriptor+0xb4>)
 800a096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a09a:	bf00      	nop
 800a09c:	0800a0b5 	.word	0x0800a0b5
 800a0a0:	0800a0e9 	.word	0x0800a0e9
 800a0a4:	0800a11d 	.word	0x0800a11d
 800a0a8:	0800a151 	.word	0x0800a151
 800a0ac:	0800a185 	.word	0x0800a185
 800a0b0:	0800a1b9 	.word	0x0800a1b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00b      	beq.n	800a0d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	7c12      	ldrb	r2, [r2, #16]
 800a0cc:	f107 0108 	add.w	r1, r7, #8
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	4798      	blx	r3
 800a0d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0d6:	e091      	b.n	800a1fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0d8:	6839      	ldr	r1, [r7, #0]
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 facb 	bl	800a676 <USBD_CtlError>
            err++;
 800a0e0:	7afb      	ldrb	r3, [r7, #11]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	72fb      	strb	r3, [r7, #11]
          break;
 800a0e6:	e089      	b.n	800a1fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d00b      	beq.n	800a10c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	7c12      	ldrb	r2, [r2, #16]
 800a100:	f107 0108 	add.w	r1, r7, #8
 800a104:	4610      	mov	r0, r2
 800a106:	4798      	blx	r3
 800a108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a10a:	e077      	b.n	800a1fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a10c:	6839      	ldr	r1, [r7, #0]
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 fab1 	bl	800a676 <USBD_CtlError>
            err++;
 800a114:	7afb      	ldrb	r3, [r7, #11]
 800a116:	3301      	adds	r3, #1
 800a118:	72fb      	strb	r3, [r7, #11]
          break;
 800a11a:	e06f      	b.n	800a1fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00b      	beq.n	800a140 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	7c12      	ldrb	r2, [r2, #16]
 800a134:	f107 0108 	add.w	r1, r7, #8
 800a138:	4610      	mov	r0, r2
 800a13a:	4798      	blx	r3
 800a13c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a13e:	e05d      	b.n	800a1fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fa97 	bl	800a676 <USBD_CtlError>
            err++;
 800a148:	7afb      	ldrb	r3, [r7, #11]
 800a14a:	3301      	adds	r3, #1
 800a14c:	72fb      	strb	r3, [r7, #11]
          break;
 800a14e:	e055      	b.n	800a1fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00b      	beq.n	800a174 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	7c12      	ldrb	r2, [r2, #16]
 800a168:	f107 0108 	add.w	r1, r7, #8
 800a16c:	4610      	mov	r0, r2
 800a16e:	4798      	blx	r3
 800a170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a172:	e043      	b.n	800a1fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a174:	6839      	ldr	r1, [r7, #0]
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fa7d 	bl	800a676 <USBD_CtlError>
            err++;
 800a17c:	7afb      	ldrb	r3, [r7, #11]
 800a17e:	3301      	adds	r3, #1
 800a180:	72fb      	strb	r3, [r7, #11]
          break;
 800a182:	e03b      	b.n	800a1fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a18a:	695b      	ldr	r3, [r3, #20]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00b      	beq.n	800a1a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a196:	695b      	ldr	r3, [r3, #20]
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	7c12      	ldrb	r2, [r2, #16]
 800a19c:	f107 0108 	add.w	r1, r7, #8
 800a1a0:	4610      	mov	r0, r2
 800a1a2:	4798      	blx	r3
 800a1a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1a6:	e029      	b.n	800a1fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1a8:	6839      	ldr	r1, [r7, #0]
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fa63 	bl	800a676 <USBD_CtlError>
            err++;
 800a1b0:	7afb      	ldrb	r3, [r7, #11]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a1b6:	e021      	b.n	800a1fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1be:	699b      	ldr	r3, [r3, #24]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00b      	beq.n	800a1dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	7c12      	ldrb	r2, [r2, #16]
 800a1d0:	f107 0108 	add.w	r1, r7, #8
 800a1d4:	4610      	mov	r0, r2
 800a1d6:	4798      	blx	r3
 800a1d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1da:	e00f      	b.n	800a1fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1dc:	6839      	ldr	r1, [r7, #0]
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 fa49 	bl	800a676 <USBD_CtlError>
            err++;
 800a1e4:	7afb      	ldrb	r3, [r7, #11]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	72fb      	strb	r3, [r7, #11]
          break;
 800a1ea:	e007      	b.n	800a1fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a1ec:	6839      	ldr	r1, [r7, #0]
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 fa41 	bl	800a676 <USBD_CtlError>
          err++;
 800a1f4:	7afb      	ldrb	r3, [r7, #11]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a1fa:	bf00      	nop
      }
      break;
 800a1fc:	e037      	b.n	800a26e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	7c1b      	ldrb	r3, [r3, #16]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d109      	bne.n	800a21a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a20c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a20e:	f107 0208 	add.w	r2, r7, #8
 800a212:	4610      	mov	r0, r2
 800a214:	4798      	blx	r3
 800a216:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a218:	e029      	b.n	800a26e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a21a:	6839      	ldr	r1, [r7, #0]
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 fa2a 	bl	800a676 <USBD_CtlError>
        err++;
 800a222:	7afb      	ldrb	r3, [r7, #11]
 800a224:	3301      	adds	r3, #1
 800a226:	72fb      	strb	r3, [r7, #11]
      break;
 800a228:	e021      	b.n	800a26e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	7c1b      	ldrb	r3, [r3, #16]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d10d      	bne.n	800a24e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a23a:	f107 0208 	add.w	r2, r7, #8
 800a23e:	4610      	mov	r0, r2
 800a240:	4798      	blx	r3
 800a242:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	3301      	adds	r3, #1
 800a248:	2207      	movs	r2, #7
 800a24a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a24c:	e00f      	b.n	800a26e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a24e:	6839      	ldr	r1, [r7, #0]
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 fa10 	bl	800a676 <USBD_CtlError>
        err++;
 800a256:	7afb      	ldrb	r3, [r7, #11]
 800a258:	3301      	adds	r3, #1
 800a25a:	72fb      	strb	r3, [r7, #11]
      break;
 800a25c:	e007      	b.n	800a26e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a25e:	6839      	ldr	r1, [r7, #0]
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 fa08 	bl	800a676 <USBD_CtlError>
      err++;
 800a266:	7afb      	ldrb	r3, [r7, #11]
 800a268:	3301      	adds	r3, #1
 800a26a:	72fb      	strb	r3, [r7, #11]
      break;
 800a26c:	bf00      	nop
  }

  if (err != 0U)
 800a26e:	7afb      	ldrb	r3, [r7, #11]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d11e      	bne.n	800a2b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	88db      	ldrh	r3, [r3, #6]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d016      	beq.n	800a2aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a27c:	893b      	ldrh	r3, [r7, #8]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00e      	beq.n	800a2a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	88da      	ldrh	r2, [r3, #6]
 800a286:	893b      	ldrh	r3, [r7, #8]
 800a288:	4293      	cmp	r3, r2
 800a28a:	bf28      	it	cs
 800a28c:	4613      	movcs	r3, r2
 800a28e:	b29b      	uxth	r3, r3
 800a290:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a292:	893b      	ldrh	r3, [r7, #8]
 800a294:	461a      	mov	r2, r3
 800a296:	68f9      	ldr	r1, [r7, #12]
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 fa5d 	bl	800a758 <USBD_CtlSendData>
 800a29e:	e009      	b.n	800a2b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a2a0:	6839      	ldr	r1, [r7, #0]
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 f9e7 	bl	800a676 <USBD_CtlError>
 800a2a8:	e004      	b.n	800a2b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 faae 	bl	800a80c <USBD_CtlSendStatus>
 800a2b0:	e000      	b.n	800a2b4 <USBD_GetDescriptor+0x2cc>
    return;
 800a2b2:	bf00      	nop
  }
}
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop

0800a2bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	889b      	ldrh	r3, [r3, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d131      	bne.n	800a332 <USBD_SetAddress+0x76>
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	88db      	ldrh	r3, [r3, #6]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d12d      	bne.n	800a332 <USBD_SetAddress+0x76>
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	885b      	ldrh	r3, [r3, #2]
 800a2da:	2b7f      	cmp	r3, #127	; 0x7f
 800a2dc:	d829      	bhi.n	800a332 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	885b      	ldrh	r3, [r3, #2]
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	2b03      	cmp	r3, #3
 800a2f4:	d104      	bne.n	800a300 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a2f6:	6839      	ldr	r1, [r7, #0]
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 f9bc 	bl	800a676 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2fe:	e01d      	b.n	800a33c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	7bfa      	ldrb	r2, [r7, #15]
 800a304:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a308:	7bfb      	ldrb	r3, [r7, #15]
 800a30a:	4619      	mov	r1, r3
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 fee9 	bl	800b0e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 fa7a 	bl	800a80c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a318:	7bfb      	ldrb	r3, [r7, #15]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d004      	beq.n	800a328 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2202      	movs	r2, #2
 800a322:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a326:	e009      	b.n	800a33c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2201      	movs	r2, #1
 800a32c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a330:	e004      	b.n	800a33c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a332:	6839      	ldr	r1, [r7, #0]
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 f99e 	bl	800a676 <USBD_CtlError>
  }
}
 800a33a:	bf00      	nop
 800a33c:	bf00      	nop
 800a33e:	3710      	adds	r7, #16
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a34e:	2300      	movs	r3, #0
 800a350:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	885b      	ldrh	r3, [r3, #2]
 800a356:	b2da      	uxtb	r2, r3
 800a358:	4b4e      	ldr	r3, [pc, #312]	; (800a494 <USBD_SetConfig+0x150>)
 800a35a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a35c:	4b4d      	ldr	r3, [pc, #308]	; (800a494 <USBD_SetConfig+0x150>)
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	2b01      	cmp	r3, #1
 800a362:	d905      	bls.n	800a370 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f985 	bl	800a676 <USBD_CtlError>
    return USBD_FAIL;
 800a36c:	2303      	movs	r3, #3
 800a36e:	e08c      	b.n	800a48a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a376:	b2db      	uxtb	r3, r3
 800a378:	2b02      	cmp	r3, #2
 800a37a:	d002      	beq.n	800a382 <USBD_SetConfig+0x3e>
 800a37c:	2b03      	cmp	r3, #3
 800a37e:	d029      	beq.n	800a3d4 <USBD_SetConfig+0x90>
 800a380:	e075      	b.n	800a46e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a382:	4b44      	ldr	r3, [pc, #272]	; (800a494 <USBD_SetConfig+0x150>)
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d020      	beq.n	800a3cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a38a:	4b42      	ldr	r3, [pc, #264]	; (800a494 <USBD_SetConfig+0x150>)
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	461a      	mov	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a394:	4b3f      	ldr	r3, [pc, #252]	; (800a494 <USBD_SetConfig+0x150>)
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	4619      	mov	r1, r3
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f7fe ffe7 	bl	800936e <USBD_SetClassConfig>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d008      	beq.n	800a3bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a3aa:	6839      	ldr	r1, [r7, #0]
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 f962 	bl	800a676 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2202      	movs	r2, #2
 800a3b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a3ba:	e065      	b.n	800a488 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 fa25 	bl	800a80c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2203      	movs	r2, #3
 800a3c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a3ca:	e05d      	b.n	800a488 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 fa1d 	bl	800a80c <USBD_CtlSendStatus>
      break;
 800a3d2:	e059      	b.n	800a488 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a3d4:	4b2f      	ldr	r3, [pc, #188]	; (800a494 <USBD_SetConfig+0x150>)
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d112      	bne.n	800a402 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2202      	movs	r2, #2
 800a3e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a3e4:	4b2b      	ldr	r3, [pc, #172]	; (800a494 <USBD_SetConfig+0x150>)
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a3ee:	4b29      	ldr	r3, [pc, #164]	; (800a494 <USBD_SetConfig+0x150>)
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f7fe ffd6 	bl	80093a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 fa06 	bl	800a80c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a400:	e042      	b.n	800a488 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a402:	4b24      	ldr	r3, [pc, #144]	; (800a494 <USBD_SetConfig+0x150>)
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	461a      	mov	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d02a      	beq.n	800a466 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	b2db      	uxtb	r3, r3
 800a416:	4619      	mov	r1, r3
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f7fe ffc4 	bl	80093a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a41e:	4b1d      	ldr	r3, [pc, #116]	; (800a494 <USBD_SetConfig+0x150>)
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	461a      	mov	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a428:	4b1a      	ldr	r3, [pc, #104]	; (800a494 <USBD_SetConfig+0x150>)
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	4619      	mov	r1, r3
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f7fe ff9d 	bl	800936e <USBD_SetClassConfig>
 800a434:	4603      	mov	r3, r0
 800a436:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a438:	7bfb      	ldrb	r3, [r7, #15]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00f      	beq.n	800a45e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a43e:	6839      	ldr	r1, [r7, #0]
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 f918 	bl	800a676 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	4619      	mov	r1, r3
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f7fe ffa9 	bl	80093a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2202      	movs	r2, #2
 800a458:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a45c:	e014      	b.n	800a488 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 f9d4 	bl	800a80c <USBD_CtlSendStatus>
      break;
 800a464:	e010      	b.n	800a488 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 f9d0 	bl	800a80c <USBD_CtlSendStatus>
      break;
 800a46c:	e00c      	b.n	800a488 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a46e:	6839      	ldr	r1, [r7, #0]
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 f900 	bl	800a676 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a476:	4b07      	ldr	r3, [pc, #28]	; (800a494 <USBD_SetConfig+0x150>)
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	4619      	mov	r1, r3
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f7fe ff92 	bl	80093a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a482:	2303      	movs	r3, #3
 800a484:	73fb      	strb	r3, [r7, #15]
      break;
 800a486:	bf00      	nop
  }

  return ret;
 800a488:	7bfb      	ldrb	r3, [r7, #15]
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	20000688 	.word	0x20000688

0800a498 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	88db      	ldrh	r3, [r3, #6]
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d004      	beq.n	800a4b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a4aa:	6839      	ldr	r1, [r7, #0]
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 f8e2 	bl	800a676 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a4b2:	e023      	b.n	800a4fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	2b02      	cmp	r3, #2
 800a4be:	dc02      	bgt.n	800a4c6 <USBD_GetConfig+0x2e>
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	dc03      	bgt.n	800a4cc <USBD_GetConfig+0x34>
 800a4c4:	e015      	b.n	800a4f2 <USBD_GetConfig+0x5a>
 800a4c6:	2b03      	cmp	r3, #3
 800a4c8:	d00b      	beq.n	800a4e2 <USBD_GetConfig+0x4a>
 800a4ca:	e012      	b.n	800a4f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	3308      	adds	r3, #8
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	4619      	mov	r1, r3
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 f93c 	bl	800a758 <USBD_CtlSendData>
        break;
 800a4e0:	e00c      	b.n	800a4fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	3304      	adds	r3, #4
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 f934 	bl	800a758 <USBD_CtlSendData>
        break;
 800a4f0:	e004      	b.n	800a4fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a4f2:	6839      	ldr	r1, [r7, #0]
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 f8be 	bl	800a676 <USBD_CtlError>
        break;
 800a4fa:	bf00      	nop
}
 800a4fc:	bf00      	nop
 800a4fe:	3708      	adds	r7, #8
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a514:	b2db      	uxtb	r3, r3
 800a516:	3b01      	subs	r3, #1
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d81e      	bhi.n	800a55a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	88db      	ldrh	r3, [r3, #6]
 800a520:	2b02      	cmp	r3, #2
 800a522:	d004      	beq.n	800a52e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f8a5 	bl	800a676 <USBD_CtlError>
        break;
 800a52c:	e01a      	b.n	800a564 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2201      	movs	r2, #1
 800a532:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d005      	beq.n	800a54a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	f043 0202 	orr.w	r2, r3, #2
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	330c      	adds	r3, #12
 800a54e:	2202      	movs	r2, #2
 800a550:	4619      	mov	r1, r3
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 f900 	bl	800a758 <USBD_CtlSendData>
      break;
 800a558:	e004      	b.n	800a564 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a55a:	6839      	ldr	r1, [r7, #0]
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 f88a 	bl	800a676 <USBD_CtlError>
      break;
 800a562:	bf00      	nop
  }
}
 800a564:	bf00      	nop
 800a566:	3708      	adds	r7, #8
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	885b      	ldrh	r3, [r3, #2]
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d107      	bne.n	800a58e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2201      	movs	r2, #1
 800a582:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f940 	bl	800a80c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a58c:	e013      	b.n	800a5b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	885b      	ldrh	r3, [r3, #2]
 800a592:	2b02      	cmp	r3, #2
 800a594:	d10b      	bne.n	800a5ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	889b      	ldrh	r3, [r3, #4]
 800a59a:	0a1b      	lsrs	r3, r3, #8
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	b2da      	uxtb	r2, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 f930 	bl	800a80c <USBD_CtlSendStatus>
}
 800a5ac:	e003      	b.n	800a5b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a5ae:	6839      	ldr	r1, [r7, #0]
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 f860 	bl	800a676 <USBD_CtlError>
}
 800a5b6:	bf00      	nop
 800a5b8:	3708      	adds	r7, #8
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b082      	sub	sp, #8
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
 800a5c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d80b      	bhi.n	800a5ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	885b      	ldrh	r3, [r3, #2]
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d10c      	bne.n	800a5f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 f910 	bl	800a80c <USBD_CtlSendStatus>
      }
      break;
 800a5ec:	e004      	b.n	800a5f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a5ee:	6839      	ldr	r1, [r7, #0]
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 f840 	bl	800a676 <USBD_CtlError>
      break;
 800a5f6:	e000      	b.n	800a5fa <USBD_ClrFeature+0x3c>
      break;
 800a5f8:	bf00      	nop
  }
}
 800a5fa:	bf00      	nop
 800a5fc:	3708      	adds	r7, #8
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b084      	sub	sp, #16
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
 800a60a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	781a      	ldrb	r2, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	3301      	adds	r3, #1
 800a61c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	781a      	ldrb	r2, [r3, #0]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	3301      	adds	r3, #1
 800a62a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f7ff fa41 	bl	8009ab4 <SWAPBYTE>
 800a632:	4603      	mov	r3, r0
 800a634:	461a      	mov	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	3301      	adds	r3, #1
 800a63e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	3301      	adds	r3, #1
 800a644:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	f7ff fa34 	bl	8009ab4 <SWAPBYTE>
 800a64c:	4603      	mov	r3, r0
 800a64e:	461a      	mov	r2, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	3301      	adds	r3, #1
 800a658:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	3301      	adds	r3, #1
 800a65e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	f7ff fa27 	bl	8009ab4 <SWAPBYTE>
 800a666:	4603      	mov	r3, r0
 800a668:	461a      	mov	r2, r3
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	80da      	strh	r2, [r3, #6]
}
 800a66e:	bf00      	nop
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a676:	b580      	push	{r7, lr}
 800a678:	b082      	sub	sp, #8
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
 800a67e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a680:	2180      	movs	r1, #128	; 0x80
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 fcc4 	bl	800b010 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a688:	2100      	movs	r1, #0
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 fcc0 	bl	800b010 <USBD_LL_StallEP>
}
 800a690:	bf00      	nop
 800a692:	3708      	adds	r7, #8
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b086      	sub	sp, #24
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d036      	beq.n	800a71c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a6b2:	6938      	ldr	r0, [r7, #16]
 800a6b4:	f000 f836 	bl	800a724 <USBD_GetLen>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	005b      	lsls	r3, r3, #1
 800a6c0:	b29a      	uxth	r2, r3
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a6c6:	7dfb      	ldrb	r3, [r7, #23]
 800a6c8:	68ba      	ldr	r2, [r7, #8]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	7812      	ldrb	r2, [r2, #0]
 800a6d0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a6d2:	7dfb      	ldrb	r3, [r7, #23]
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a6d8:	7dfb      	ldrb	r3, [r7, #23]
 800a6da:	68ba      	ldr	r2, [r7, #8]
 800a6dc:	4413      	add	r3, r2
 800a6de:	2203      	movs	r2, #3
 800a6e0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a6e2:	7dfb      	ldrb	r3, [r7, #23]
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a6e8:	e013      	b.n	800a712 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a6ea:	7dfb      	ldrb	r3, [r7, #23]
 800a6ec:	68ba      	ldr	r2, [r7, #8]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	693a      	ldr	r2, [r7, #16]
 800a6f2:	7812      	ldrb	r2, [r2, #0]
 800a6f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	613b      	str	r3, [r7, #16]
    idx++;
 800a6fc:	7dfb      	ldrb	r3, [r7, #23]
 800a6fe:	3301      	adds	r3, #1
 800a700:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a702:	7dfb      	ldrb	r3, [r7, #23]
 800a704:	68ba      	ldr	r2, [r7, #8]
 800a706:	4413      	add	r3, r2
 800a708:	2200      	movs	r2, #0
 800a70a:	701a      	strb	r2, [r3, #0]
    idx++;
 800a70c:	7dfb      	ldrb	r3, [r7, #23]
 800a70e:	3301      	adds	r3, #1
 800a710:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d1e7      	bne.n	800a6ea <USBD_GetString+0x52>
 800a71a:	e000      	b.n	800a71e <USBD_GetString+0x86>
    return;
 800a71c:	bf00      	nop
  }
}
 800a71e:	3718      	adds	r7, #24
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a724:	b480      	push	{r7}
 800a726:	b085      	sub	sp, #20
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a72c:	2300      	movs	r3, #0
 800a72e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a734:	e005      	b.n	800a742 <USBD_GetLen+0x1e>
  {
    len++;
 800a736:	7bfb      	ldrb	r3, [r7, #15]
 800a738:	3301      	adds	r3, #1
 800a73a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	3301      	adds	r3, #1
 800a740:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d1f5      	bne.n	800a736 <USBD_GetLen+0x12>
  }

  return len;
 800a74a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3714      	adds	r7, #20
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2202      	movs	r2, #2
 800a768:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	68ba      	ldr	r2, [r7, #8]
 800a77c:	2100      	movs	r1, #0
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f000 fccf 	bl	800b122 <USBD_LL_Transmit>

  return USBD_OK;
 800a784:	2300      	movs	r3, #0
}
 800a786:	4618      	mov	r0, r3
 800a788:	3710      	adds	r7, #16
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b084      	sub	sp, #16
 800a792:	af00      	add	r7, sp, #0
 800a794:	60f8      	str	r0, [r7, #12]
 800a796:	60b9      	str	r1, [r7, #8]
 800a798:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	68ba      	ldr	r2, [r7, #8]
 800a79e:	2100      	movs	r1, #0
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f000 fcbe 	bl	800b122 <USBD_LL_Transmit>

  return USBD_OK;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2203      	movs	r2, #3
 800a7c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	68ba      	ldr	r2, [r7, #8]
 800a7d8:	2100      	movs	r1, #0
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f000 fcc2 	bl	800b164 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b084      	sub	sp, #16
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	60f8      	str	r0, [r7, #12]
 800a7f2:	60b9      	str	r1, [r7, #8]
 800a7f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f000 fcb1 	bl	800b164 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2204      	movs	r2, #4
 800a818:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a81c:	2300      	movs	r3, #0
 800a81e:	2200      	movs	r2, #0
 800a820:	2100      	movs	r1, #0
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fc7d 	bl	800b122 <USBD_LL_Transmit>

  return USBD_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3708      	adds	r7, #8
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}

0800a832 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a832:	b580      	push	{r7, lr}
 800a834:	b082      	sub	sp, #8
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2205      	movs	r2, #5
 800a83e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a842:	2300      	movs	r3, #0
 800a844:	2200      	movs	r2, #0
 800a846:	2100      	movs	r1, #0
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 fc8b 	bl	800b164 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a85c:	2200      	movs	r2, #0
 800a85e:	4912      	ldr	r1, [pc, #72]	; (800a8a8 <MX_USB_DEVICE_Init+0x50>)
 800a860:	4812      	ldr	r0, [pc, #72]	; (800a8ac <MX_USB_DEVICE_Init+0x54>)
 800a862:	f7fe fd07 	bl	8009274 <USBD_Init>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d001      	beq.n	800a870 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a86c:	f7f6 fde8 	bl	8001440 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a870:	490f      	ldr	r1, [pc, #60]	; (800a8b0 <MX_USB_DEVICE_Init+0x58>)
 800a872:	480e      	ldr	r0, [pc, #56]	; (800a8ac <MX_USB_DEVICE_Init+0x54>)
 800a874:	f7fe fd2e 	bl	80092d4 <USBD_RegisterClass>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d001      	beq.n	800a882 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a87e:	f7f6 fddf 	bl	8001440 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a882:	490c      	ldr	r1, [pc, #48]	; (800a8b4 <MX_USB_DEVICE_Init+0x5c>)
 800a884:	4809      	ldr	r0, [pc, #36]	; (800a8ac <MX_USB_DEVICE_Init+0x54>)
 800a886:	f7fe fc65 	bl	8009154 <USBD_CDC_RegisterInterface>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d001      	beq.n	800a894 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a890:	f7f6 fdd6 	bl	8001440 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a894:	4805      	ldr	r0, [pc, #20]	; (800a8ac <MX_USB_DEVICE_Init+0x54>)
 800a896:	f7fe fd53 	bl	8009340 <USBD_Start>
 800a89a:	4603      	mov	r3, r0
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d001      	beq.n	800a8a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a8a0:	f7f6 fdce 	bl	8001440 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a8a4:	bf00      	nop
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	200000ac 	.word	0x200000ac
 800a8ac:	2000068c 	.word	0x2000068c
 800a8b0:	20000018 	.word	0x20000018
 800a8b4:	20000098 	.word	0x20000098

0800a8b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a8bc:	2200      	movs	r2, #0
 800a8be:	4905      	ldr	r1, [pc, #20]	; (800a8d4 <CDC_Init_FS+0x1c>)
 800a8c0:	4805      	ldr	r0, [pc, #20]	; (800a8d8 <CDC_Init_FS+0x20>)
 800a8c2:	f7fe fc61 	bl	8009188 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a8c6:	4905      	ldr	r1, [pc, #20]	; (800a8dc <CDC_Init_FS+0x24>)
 800a8c8:	4803      	ldr	r0, [pc, #12]	; (800a8d8 <CDC_Init_FS+0x20>)
 800a8ca:	f7fe fc7f 	bl	80091cc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a8ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	20001168 	.word	0x20001168
 800a8d8:	2000068c 	.word	0x2000068c
 800a8dc:	20000968 	.word	0x20000968

0800a8e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a8e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	6039      	str	r1, [r7, #0]
 800a8fa:	71fb      	strb	r3, [r7, #7]
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a900:	79fb      	ldrb	r3, [r7, #7]
 800a902:	2b23      	cmp	r3, #35	; 0x23
 800a904:	d84a      	bhi.n	800a99c <CDC_Control_FS+0xac>
 800a906:	a201      	add	r2, pc, #4	; (adr r2, 800a90c <CDC_Control_FS+0x1c>)
 800a908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a90c:	0800a99d 	.word	0x0800a99d
 800a910:	0800a99d 	.word	0x0800a99d
 800a914:	0800a99d 	.word	0x0800a99d
 800a918:	0800a99d 	.word	0x0800a99d
 800a91c:	0800a99d 	.word	0x0800a99d
 800a920:	0800a99d 	.word	0x0800a99d
 800a924:	0800a99d 	.word	0x0800a99d
 800a928:	0800a99d 	.word	0x0800a99d
 800a92c:	0800a99d 	.word	0x0800a99d
 800a930:	0800a99d 	.word	0x0800a99d
 800a934:	0800a99d 	.word	0x0800a99d
 800a938:	0800a99d 	.word	0x0800a99d
 800a93c:	0800a99d 	.word	0x0800a99d
 800a940:	0800a99d 	.word	0x0800a99d
 800a944:	0800a99d 	.word	0x0800a99d
 800a948:	0800a99d 	.word	0x0800a99d
 800a94c:	0800a99d 	.word	0x0800a99d
 800a950:	0800a99d 	.word	0x0800a99d
 800a954:	0800a99d 	.word	0x0800a99d
 800a958:	0800a99d 	.word	0x0800a99d
 800a95c:	0800a99d 	.word	0x0800a99d
 800a960:	0800a99d 	.word	0x0800a99d
 800a964:	0800a99d 	.word	0x0800a99d
 800a968:	0800a99d 	.word	0x0800a99d
 800a96c:	0800a99d 	.word	0x0800a99d
 800a970:	0800a99d 	.word	0x0800a99d
 800a974:	0800a99d 	.word	0x0800a99d
 800a978:	0800a99d 	.word	0x0800a99d
 800a97c:	0800a99d 	.word	0x0800a99d
 800a980:	0800a99d 	.word	0x0800a99d
 800a984:	0800a99d 	.word	0x0800a99d
 800a988:	0800a99d 	.word	0x0800a99d
 800a98c:	0800a99d 	.word	0x0800a99d
 800a990:	0800a99d 	.word	0x0800a99d
 800a994:	0800a99d 	.word	0x0800a99d
 800a998:	0800a99d 	.word	0x0800a99d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a99c:	bf00      	nop
  }

  return (USBD_OK);
 800a99e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a9b6:	6879      	ldr	r1, [r7, #4]
 800a9b8:	4809      	ldr	r0, [pc, #36]	; (800a9e0 <CDC_Receive_FS+0x34>)
 800a9ba:	f7fe fc07 	bl	80091cc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a9be:	4808      	ldr	r0, [pc, #32]	; (800a9e0 <CDC_Receive_FS+0x34>)
 800a9c0:	f7fe fc22 	bl	8009208 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t)*Len;
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	73fb      	strb	r3, [r7, #15]
  memcpy(usbd_buf_recv, Buf, len);
 800a9ca:	7bfb      	ldrb	r3, [r7, #15]
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	6879      	ldr	r1, [r7, #4]
 800a9d0:	4804      	ldr	r0, [pc, #16]	; (800a9e4 <CDC_Receive_FS+0x38>)
 800a9d2:	f000 fc6d 	bl	800b2b0 <memcpy>
  return (USBD_OK);
 800a9d6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	2000068c 	.word	0x2000068c
 800a9e4:	20000330 	.word	0x20000330

0800a9e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b087      	sub	sp, #28
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	4613      	mov	r3, r2
 800a9f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a9fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	371c      	adds	r7, #28
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr
	...

0800aa0c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b083      	sub	sp, #12
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	4603      	mov	r3, r0
 800aa14:	6039      	str	r1, [r7, #0]
 800aa16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	2212      	movs	r2, #18
 800aa1c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aa1e:	4b03      	ldr	r3, [pc, #12]	; (800aa2c <USBD_FS_DeviceDescriptor+0x20>)
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr
 800aa2c:	200000c8 	.word	0x200000c8

0800aa30 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	4603      	mov	r3, r0
 800aa38:	6039      	str	r1, [r7, #0]
 800aa3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	2204      	movs	r2, #4
 800aa40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa42:	4b03      	ldr	r3, [pc, #12]	; (800aa50 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr
 800aa50:	200000dc 	.word	0x200000dc

0800aa54 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	6039      	str	r1, [r7, #0]
 800aa5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa60:	79fb      	ldrb	r3, [r7, #7]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d105      	bne.n	800aa72 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa66:	683a      	ldr	r2, [r7, #0]
 800aa68:	4907      	ldr	r1, [pc, #28]	; (800aa88 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa6a:	4808      	ldr	r0, [pc, #32]	; (800aa8c <USBD_FS_ProductStrDescriptor+0x38>)
 800aa6c:	f7ff fe14 	bl	800a698 <USBD_GetString>
 800aa70:	e004      	b.n	800aa7c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa72:	683a      	ldr	r2, [r7, #0]
 800aa74:	4904      	ldr	r1, [pc, #16]	; (800aa88 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa76:	4805      	ldr	r0, [pc, #20]	; (800aa8c <USBD_FS_ProductStrDescriptor+0x38>)
 800aa78:	f7ff fe0e 	bl	800a698 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa7c:	4b02      	ldr	r3, [pc, #8]	; (800aa88 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	20001968 	.word	0x20001968
 800aa8c:	0800de20 	.word	0x0800de20

0800aa90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	4603      	mov	r3, r0
 800aa98:	6039      	str	r1, [r7, #0]
 800aa9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa9c:	683a      	ldr	r2, [r7, #0]
 800aa9e:	4904      	ldr	r1, [pc, #16]	; (800aab0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aaa0:	4804      	ldr	r0, [pc, #16]	; (800aab4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aaa2:	f7ff fdf9 	bl	800a698 <USBD_GetString>
  return USBD_StrDesc;
 800aaa6:	4b02      	ldr	r3, [pc, #8]	; (800aab0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3708      	adds	r7, #8
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}
 800aab0:	20001968 	.word	0x20001968
 800aab4:	0800de30 	.word	0x0800de30

0800aab8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	4603      	mov	r3, r0
 800aac0:	6039      	str	r1, [r7, #0]
 800aac2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	221a      	movs	r2, #26
 800aac8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aaca:	f000 f843 	bl	800ab54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aace:	4b02      	ldr	r3, [pc, #8]	; (800aad8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3708      	adds	r7, #8
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	200000e0 	.word	0x200000e0

0800aadc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	4603      	mov	r3, r0
 800aae4:	6039      	str	r1, [r7, #0]
 800aae6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aae8:	79fb      	ldrb	r3, [r7, #7]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d105      	bne.n	800aafa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aaee:	683a      	ldr	r2, [r7, #0]
 800aaf0:	4907      	ldr	r1, [pc, #28]	; (800ab10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aaf2:	4808      	ldr	r0, [pc, #32]	; (800ab14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aaf4:	f7ff fdd0 	bl	800a698 <USBD_GetString>
 800aaf8:	e004      	b.n	800ab04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	4904      	ldr	r1, [pc, #16]	; (800ab10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aafe:	4805      	ldr	r0, [pc, #20]	; (800ab14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab00:	f7ff fdca 	bl	800a698 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab04:	4b02      	ldr	r3, [pc, #8]	; (800ab10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3708      	adds	r7, #8
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	20001968 	.word	0x20001968
 800ab14:	0800de44 	.word	0x0800de44

0800ab18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	4603      	mov	r3, r0
 800ab20:	6039      	str	r1, [r7, #0]
 800ab22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab24:	79fb      	ldrb	r3, [r7, #7]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d105      	bne.n	800ab36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab2a:	683a      	ldr	r2, [r7, #0]
 800ab2c:	4907      	ldr	r1, [pc, #28]	; (800ab4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab2e:	4808      	ldr	r0, [pc, #32]	; (800ab50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab30:	f7ff fdb2 	bl	800a698 <USBD_GetString>
 800ab34:	e004      	b.n	800ab40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab36:	683a      	ldr	r2, [r7, #0]
 800ab38:	4904      	ldr	r1, [pc, #16]	; (800ab4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab3a:	4805      	ldr	r0, [pc, #20]	; (800ab50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab3c:	f7ff fdac 	bl	800a698 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab40:	4b02      	ldr	r3, [pc, #8]	; (800ab4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3708      	adds	r7, #8
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	20001968 	.word	0x20001968
 800ab50:	0800de50 	.word	0x0800de50

0800ab54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ab5a:	4b0f      	ldr	r3, [pc, #60]	; (800ab98 <Get_SerialNum+0x44>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ab60:	4b0e      	ldr	r3, [pc, #56]	; (800ab9c <Get_SerialNum+0x48>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ab66:	4b0e      	ldr	r3, [pc, #56]	; (800aba0 <Get_SerialNum+0x4c>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4413      	add	r3, r2
 800ab72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d009      	beq.n	800ab8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ab7a:	2208      	movs	r2, #8
 800ab7c:	4909      	ldr	r1, [pc, #36]	; (800aba4 <Get_SerialNum+0x50>)
 800ab7e:	68f8      	ldr	r0, [r7, #12]
 800ab80:	f000 f814 	bl	800abac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ab84:	2204      	movs	r2, #4
 800ab86:	4908      	ldr	r1, [pc, #32]	; (800aba8 <Get_SerialNum+0x54>)
 800ab88:	68b8      	ldr	r0, [r7, #8]
 800ab8a:	f000 f80f 	bl	800abac <IntToUnicode>
  }
}
 800ab8e:	bf00      	nop
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	1fff7a10 	.word	0x1fff7a10
 800ab9c:	1fff7a14 	.word	0x1fff7a14
 800aba0:	1fff7a18 	.word	0x1fff7a18
 800aba4:	200000e2 	.word	0x200000e2
 800aba8:	200000f2 	.word	0x200000f2

0800abac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800abac:	b480      	push	{r7}
 800abae:	b087      	sub	sp, #28
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	4613      	mov	r3, r2
 800abb8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800abba:	2300      	movs	r3, #0
 800abbc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800abbe:	2300      	movs	r3, #0
 800abc0:	75fb      	strb	r3, [r7, #23]
 800abc2:	e027      	b.n	800ac14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	0f1b      	lsrs	r3, r3, #28
 800abc8:	2b09      	cmp	r3, #9
 800abca:	d80b      	bhi.n	800abe4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	0f1b      	lsrs	r3, r3, #28
 800abd0:	b2da      	uxtb	r2, r3
 800abd2:	7dfb      	ldrb	r3, [r7, #23]
 800abd4:	005b      	lsls	r3, r3, #1
 800abd6:	4619      	mov	r1, r3
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	440b      	add	r3, r1
 800abdc:	3230      	adds	r2, #48	; 0x30
 800abde:	b2d2      	uxtb	r2, r2
 800abe0:	701a      	strb	r2, [r3, #0]
 800abe2:	e00a      	b.n	800abfa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	0f1b      	lsrs	r3, r3, #28
 800abe8:	b2da      	uxtb	r2, r3
 800abea:	7dfb      	ldrb	r3, [r7, #23]
 800abec:	005b      	lsls	r3, r3, #1
 800abee:	4619      	mov	r1, r3
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	440b      	add	r3, r1
 800abf4:	3237      	adds	r2, #55	; 0x37
 800abf6:	b2d2      	uxtb	r2, r2
 800abf8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	011b      	lsls	r3, r3, #4
 800abfe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ac00:	7dfb      	ldrb	r3, [r7, #23]
 800ac02:	005b      	lsls	r3, r3, #1
 800ac04:	3301      	adds	r3, #1
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	4413      	add	r3, r2
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ac0e:	7dfb      	ldrb	r3, [r7, #23]
 800ac10:	3301      	adds	r3, #1
 800ac12:	75fb      	strb	r3, [r7, #23]
 800ac14:	7dfa      	ldrb	r2, [r7, #23]
 800ac16:	79fb      	ldrb	r3, [r7, #7]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d3d3      	bcc.n	800abc4 <IntToUnicode+0x18>
  }
}
 800ac1c:	bf00      	nop
 800ac1e:	bf00      	nop
 800ac20:	371c      	adds	r7, #28
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr
	...

0800ac2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b08a      	sub	sp, #40	; 0x28
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac34:	f107 0314 	add.w	r3, r7, #20
 800ac38:	2200      	movs	r2, #0
 800ac3a:	601a      	str	r2, [r3, #0]
 800ac3c:	605a      	str	r2, [r3, #4]
 800ac3e:	609a      	str	r2, [r3, #8]
 800ac40:	60da      	str	r2, [r3, #12]
 800ac42:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac4c:	d13a      	bne.n	800acc4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac4e:	2300      	movs	r3, #0
 800ac50:	613b      	str	r3, [r7, #16]
 800ac52:	4b1e      	ldr	r3, [pc, #120]	; (800accc <HAL_PCD_MspInit+0xa0>)
 800ac54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac56:	4a1d      	ldr	r2, [pc, #116]	; (800accc <HAL_PCD_MspInit+0xa0>)
 800ac58:	f043 0301 	orr.w	r3, r3, #1
 800ac5c:	6313      	str	r3, [r2, #48]	; 0x30
 800ac5e:	4b1b      	ldr	r3, [pc, #108]	; (800accc <HAL_PCD_MspInit+0xa0>)
 800ac60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac62:	f003 0301 	and.w	r3, r3, #1
 800ac66:	613b      	str	r3, [r7, #16]
 800ac68:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ac6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ac6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac70:	2302      	movs	r3, #2
 800ac72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac74:	2300      	movs	r3, #0
 800ac76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac78:	2303      	movs	r3, #3
 800ac7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ac7c:	230a      	movs	r3, #10
 800ac7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac80:	f107 0314 	add.w	r3, r7, #20
 800ac84:	4619      	mov	r1, r3
 800ac86:	4812      	ldr	r0, [pc, #72]	; (800acd0 <HAL_PCD_MspInit+0xa4>)
 800ac88:	f7f8 fc3c 	bl	8003504 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ac8c:	4b0f      	ldr	r3, [pc, #60]	; (800accc <HAL_PCD_MspInit+0xa0>)
 800ac8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac90:	4a0e      	ldr	r2, [pc, #56]	; (800accc <HAL_PCD_MspInit+0xa0>)
 800ac92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac96:	6353      	str	r3, [r2, #52]	; 0x34
 800ac98:	2300      	movs	r3, #0
 800ac9a:	60fb      	str	r3, [r7, #12]
 800ac9c:	4b0b      	ldr	r3, [pc, #44]	; (800accc <HAL_PCD_MspInit+0xa0>)
 800ac9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aca0:	4a0a      	ldr	r2, [pc, #40]	; (800accc <HAL_PCD_MspInit+0xa0>)
 800aca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aca6:	6453      	str	r3, [r2, #68]	; 0x44
 800aca8:	4b08      	ldr	r3, [pc, #32]	; (800accc <HAL_PCD_MspInit+0xa0>)
 800acaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acb0:	60fb      	str	r3, [r7, #12]
 800acb2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800acb4:	2200      	movs	r2, #0
 800acb6:	2100      	movs	r1, #0
 800acb8:	2043      	movs	r0, #67	; 0x43
 800acba:	f7f8 f87c 	bl	8002db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800acbe:	2043      	movs	r0, #67	; 0x43
 800acc0:	f7f8 f895 	bl	8002dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800acc4:	bf00      	nop
 800acc6:	3728      	adds	r7, #40	; 0x28
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	40023800 	.word	0x40023800
 800acd0:	40020000 	.word	0x40020000

0800acd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ace8:	4619      	mov	r1, r3
 800acea:	4610      	mov	r0, r2
 800acec:	f7fe fb75 	bl	80093da <USBD_LL_SetupStage>
}
 800acf0:	bf00      	nop
 800acf2:	3708      	adds	r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	460b      	mov	r3, r1
 800ad02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ad0a:	78fa      	ldrb	r2, [r7, #3]
 800ad0c:	6879      	ldr	r1, [r7, #4]
 800ad0e:	4613      	mov	r3, r2
 800ad10:	00db      	lsls	r3, r3, #3
 800ad12:	4413      	add	r3, r2
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	440b      	add	r3, r1
 800ad18:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	78fb      	ldrb	r3, [r7, #3]
 800ad20:	4619      	mov	r1, r3
 800ad22:	f7fe fbaf 	bl	8009484 <USBD_LL_DataOutStage>
}
 800ad26:	bf00      	nop
 800ad28:	3708      	adds	r7, #8
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad2e:	b580      	push	{r7, lr}
 800ad30:	b082      	sub	sp, #8
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
 800ad36:	460b      	mov	r3, r1
 800ad38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ad40:	78fa      	ldrb	r2, [r7, #3]
 800ad42:	6879      	ldr	r1, [r7, #4]
 800ad44:	4613      	mov	r3, r2
 800ad46:	00db      	lsls	r3, r3, #3
 800ad48:	4413      	add	r3, r2
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	440b      	add	r3, r1
 800ad4e:	334c      	adds	r3, #76	; 0x4c
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	78fb      	ldrb	r3, [r7, #3]
 800ad54:	4619      	mov	r1, r3
 800ad56:	f7fe fc48 	bl	80095ea <USBD_LL_DataInStage>
}
 800ad5a:	bf00      	nop
 800ad5c:	3708      	adds	r7, #8
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b082      	sub	sp, #8
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7fe fd7c 	bl	800986e <USBD_LL_SOF>
}
 800ad76:	bf00      	nop
 800ad78:	3708      	adds	r7, #8
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b084      	sub	sp, #16
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ad86:	2301      	movs	r3, #1
 800ad88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d102      	bne.n	800ad98 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ad92:	2300      	movs	r3, #0
 800ad94:	73fb      	strb	r3, [r7, #15]
 800ad96:	e008      	b.n	800adaa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	2b02      	cmp	r3, #2
 800ad9e:	d102      	bne.n	800ada6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ada0:	2301      	movs	r3, #1
 800ada2:	73fb      	strb	r3, [r7, #15]
 800ada4:	e001      	b.n	800adaa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ada6:	f7f6 fb4b 	bl	8001440 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800adb0:	7bfa      	ldrb	r2, [r7, #15]
 800adb2:	4611      	mov	r1, r2
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7fe fd1c 	bl	80097f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7fe fcc4 	bl	800974e <USBD_LL_Reset>
}
 800adc6:	bf00      	nop
 800adc8:	3710      	adds	r7, #16
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
	...

0800add0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800adde:	4618      	mov	r0, r3
 800ade0:	f7fe fd17 	bl	8009812 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	6812      	ldr	r2, [r2, #0]
 800adf2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800adf6:	f043 0301 	orr.w	r3, r3, #1
 800adfa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a1b      	ldr	r3, [r3, #32]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d005      	beq.n	800ae10 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae04:	4b04      	ldr	r3, [pc, #16]	; (800ae18 <HAL_PCD_SuspendCallback+0x48>)
 800ae06:	691b      	ldr	r3, [r3, #16]
 800ae08:	4a03      	ldr	r2, [pc, #12]	; (800ae18 <HAL_PCD_SuspendCallback+0x48>)
 800ae0a:	f043 0306 	orr.w	r3, r3, #6
 800ae0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ae10:	bf00      	nop
 800ae12:	3708      	adds	r7, #8
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	e000ed00 	.word	0xe000ed00

0800ae1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7fe fd07 	bl	800983e <USBD_LL_Resume>
}
 800ae30:	bf00      	nop
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	460b      	mov	r3, r1
 800ae42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae4a:	78fa      	ldrb	r2, [r7, #3]
 800ae4c:	4611      	mov	r1, r2
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7fe fd5f 	bl	8009912 <USBD_LL_IsoOUTIncomplete>
}
 800ae54:	bf00      	nop
 800ae56:	3708      	adds	r7, #8
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	460b      	mov	r3, r1
 800ae66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae6e:	78fa      	ldrb	r2, [r7, #3]
 800ae70:	4611      	mov	r1, r2
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fe fd1b 	bl	80098ae <USBD_LL_IsoINIncomplete>
}
 800ae78:	bf00      	nop
 800ae7a:	3708      	adds	r7, #8
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7fe fd71 	bl	8009976 <USBD_LL_DevConnected>
}
 800ae94:	bf00      	nop
 800ae96:	3708      	adds	r7, #8
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7fe fd6e 	bl	800998c <USBD_LL_DevDisconnected>
}
 800aeb0:	bf00      	nop
 800aeb2:	3708      	adds	r7, #8
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d13c      	bne.n	800af42 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800aec8:	4a20      	ldr	r2, [pc, #128]	; (800af4c <USBD_LL_Init+0x94>)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4a1e      	ldr	r2, [pc, #120]	; (800af4c <USBD_LL_Init+0x94>)
 800aed4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aed8:	4b1c      	ldr	r3, [pc, #112]	; (800af4c <USBD_LL_Init+0x94>)
 800aeda:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800aede:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800aee0:	4b1a      	ldr	r3, [pc, #104]	; (800af4c <USBD_LL_Init+0x94>)
 800aee2:	2204      	movs	r2, #4
 800aee4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800aee6:	4b19      	ldr	r3, [pc, #100]	; (800af4c <USBD_LL_Init+0x94>)
 800aee8:	2202      	movs	r2, #2
 800aeea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aeec:	4b17      	ldr	r3, [pc, #92]	; (800af4c <USBD_LL_Init+0x94>)
 800aeee:	2200      	movs	r2, #0
 800aef0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aef2:	4b16      	ldr	r3, [pc, #88]	; (800af4c <USBD_LL_Init+0x94>)
 800aef4:	2202      	movs	r2, #2
 800aef6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aef8:	4b14      	ldr	r3, [pc, #80]	; (800af4c <USBD_LL_Init+0x94>)
 800aefa:	2200      	movs	r2, #0
 800aefc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800aefe:	4b13      	ldr	r3, [pc, #76]	; (800af4c <USBD_LL_Init+0x94>)
 800af00:	2200      	movs	r2, #0
 800af02:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800af04:	4b11      	ldr	r3, [pc, #68]	; (800af4c <USBD_LL_Init+0x94>)
 800af06:	2200      	movs	r2, #0
 800af08:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800af0a:	4b10      	ldr	r3, [pc, #64]	; (800af4c <USBD_LL_Init+0x94>)
 800af0c:	2200      	movs	r2, #0
 800af0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800af10:	4b0e      	ldr	r3, [pc, #56]	; (800af4c <USBD_LL_Init+0x94>)
 800af12:	2200      	movs	r2, #0
 800af14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800af16:	480d      	ldr	r0, [pc, #52]	; (800af4c <USBD_LL_Init+0x94>)
 800af18:	f7f8 fc91 	bl	800383e <HAL_PCD_Init>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d001      	beq.n	800af26 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800af22:	f7f6 fa8d 	bl	8001440 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800af26:	2180      	movs	r1, #128	; 0x80
 800af28:	4808      	ldr	r0, [pc, #32]	; (800af4c <USBD_LL_Init+0x94>)
 800af2a:	f7f9 fee8 	bl	8004cfe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800af2e:	2240      	movs	r2, #64	; 0x40
 800af30:	2100      	movs	r1, #0
 800af32:	4806      	ldr	r0, [pc, #24]	; (800af4c <USBD_LL_Init+0x94>)
 800af34:	f7f9 fe9c 	bl	8004c70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800af38:	2280      	movs	r2, #128	; 0x80
 800af3a:	2101      	movs	r1, #1
 800af3c:	4803      	ldr	r0, [pc, #12]	; (800af4c <USBD_LL_Init+0x94>)
 800af3e:	f7f9 fe97 	bl	8004c70 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800af42:	2300      	movs	r3, #0
}
 800af44:	4618      	mov	r0, r3
 800af46:	3708      	adds	r7, #8
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	20001b68 	.word	0x20001b68

0800af50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af58:	2300      	movs	r3, #0
 800af5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af5c:	2300      	movs	r3, #0
 800af5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af66:	4618      	mov	r0, r3
 800af68:	f7f8 fd86 	bl	8003a78 <HAL_PCD_Start>
 800af6c:	4603      	mov	r3, r0
 800af6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af70:	7bfb      	ldrb	r3, [r7, #15]
 800af72:	4618      	mov	r0, r3
 800af74:	f000 f942 	bl	800b1fc <USBD_Get_USB_Status>
 800af78:	4603      	mov	r3, r0
 800af7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3710      	adds	r7, #16
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800af86:	b580      	push	{r7, lr}
 800af88:	b084      	sub	sp, #16
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
 800af8e:	4608      	mov	r0, r1
 800af90:	4611      	mov	r1, r2
 800af92:	461a      	mov	r2, r3
 800af94:	4603      	mov	r3, r0
 800af96:	70fb      	strb	r3, [r7, #3]
 800af98:	460b      	mov	r3, r1
 800af9a:	70bb      	strb	r3, [r7, #2]
 800af9c:	4613      	mov	r3, r2
 800af9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afa0:	2300      	movs	r3, #0
 800afa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afa4:	2300      	movs	r3, #0
 800afa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800afae:	78bb      	ldrb	r3, [r7, #2]
 800afb0:	883a      	ldrh	r2, [r7, #0]
 800afb2:	78f9      	ldrb	r1, [r7, #3]
 800afb4:	f7f9 fa57 	bl	8004466 <HAL_PCD_EP_Open>
 800afb8:	4603      	mov	r3, r0
 800afba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afbc:	7bfb      	ldrb	r3, [r7, #15]
 800afbe:	4618      	mov	r0, r3
 800afc0:	f000 f91c 	bl	800b1fc <USBD_Get_USB_Status>
 800afc4:	4603      	mov	r3, r0
 800afc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3710      	adds	r7, #16
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}

0800afd2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afd2:	b580      	push	{r7, lr}
 800afd4:	b084      	sub	sp, #16
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
 800afda:	460b      	mov	r3, r1
 800afdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afde:	2300      	movs	r3, #0
 800afe0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afe2:	2300      	movs	r3, #0
 800afe4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800afec:	78fa      	ldrb	r2, [r7, #3]
 800afee:	4611      	mov	r1, r2
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7f9 faa0 	bl	8004536 <HAL_PCD_EP_Close>
 800aff6:	4603      	mov	r3, r0
 800aff8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800affa:	7bfb      	ldrb	r3, [r7, #15]
 800affc:	4618      	mov	r0, r3
 800affe:	f000 f8fd 	bl	800b1fc <USBD_Get_USB_Status>
 800b002:	4603      	mov	r3, r0
 800b004:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b006:	7bbb      	ldrb	r3, [r7, #14]
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3710      	adds	r7, #16
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	460b      	mov	r3, r1
 800b01a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b01c:	2300      	movs	r3, #0
 800b01e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b020:	2300      	movs	r3, #0
 800b022:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b02a:	78fa      	ldrb	r2, [r7, #3]
 800b02c:	4611      	mov	r1, r2
 800b02e:	4618      	mov	r0, r3
 800b030:	f7f9 fb78 	bl	8004724 <HAL_PCD_EP_SetStall>
 800b034:	4603      	mov	r3, r0
 800b036:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b038:	7bfb      	ldrb	r3, [r7, #15]
 800b03a:	4618      	mov	r0, r3
 800b03c:	f000 f8de 	bl	800b1fc <USBD_Get_USB_Status>
 800b040:	4603      	mov	r3, r0
 800b042:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b044:	7bbb      	ldrb	r3, [r7, #14]
}
 800b046:	4618      	mov	r0, r3
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b04e:	b580      	push	{r7, lr}
 800b050:	b084      	sub	sp, #16
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
 800b056:	460b      	mov	r3, r1
 800b058:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b05a:	2300      	movs	r3, #0
 800b05c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b05e:	2300      	movs	r3, #0
 800b060:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b068:	78fa      	ldrb	r2, [r7, #3]
 800b06a:	4611      	mov	r1, r2
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7f9 fbbd 	bl	80047ec <HAL_PCD_EP_ClrStall>
 800b072:	4603      	mov	r3, r0
 800b074:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b076:	7bfb      	ldrb	r3, [r7, #15]
 800b078:	4618      	mov	r0, r3
 800b07a:	f000 f8bf 	bl	800b1fc <USBD_Get_USB_Status>
 800b07e:	4603      	mov	r3, r0
 800b080:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b082:	7bbb      	ldrb	r3, [r7, #14]
}
 800b084:	4618      	mov	r0, r3
 800b086:	3710      	adds	r7, #16
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b085      	sub	sp, #20
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	460b      	mov	r3, r1
 800b096:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b09e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b0a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	da0b      	bge.n	800b0c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b0a8:	78fb      	ldrb	r3, [r7, #3]
 800b0aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0ae:	68f9      	ldr	r1, [r7, #12]
 800b0b0:	4613      	mov	r3, r2
 800b0b2:	00db      	lsls	r3, r3, #3
 800b0b4:	4413      	add	r3, r2
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	440b      	add	r3, r1
 800b0ba:	333e      	adds	r3, #62	; 0x3e
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	e00b      	b.n	800b0d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b0c0:	78fb      	ldrb	r3, [r7, #3]
 800b0c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b0c6:	68f9      	ldr	r1, [r7, #12]
 800b0c8:	4613      	mov	r3, r2
 800b0ca:	00db      	lsls	r3, r3, #3
 800b0cc:	4413      	add	r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	440b      	add	r3, r1
 800b0d2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b0d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3714      	adds	r7, #20
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0fe:	78fa      	ldrb	r2, [r7, #3]
 800b100:	4611      	mov	r1, r2
 800b102:	4618      	mov	r0, r3
 800b104:	f7f9 f98a 	bl	800441c <HAL_PCD_SetAddress>
 800b108:	4603      	mov	r3, r0
 800b10a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b10c:	7bfb      	ldrb	r3, [r7, #15]
 800b10e:	4618      	mov	r0, r3
 800b110:	f000 f874 	bl	800b1fc <USBD_Get_USB_Status>
 800b114:	4603      	mov	r3, r0
 800b116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b118:	7bbb      	ldrb	r3, [r7, #14]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b086      	sub	sp, #24
 800b126:	af00      	add	r7, sp, #0
 800b128:	60f8      	str	r0, [r7, #12]
 800b12a:	607a      	str	r2, [r7, #4]
 800b12c:	603b      	str	r3, [r7, #0]
 800b12e:	460b      	mov	r3, r1
 800b130:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b132:	2300      	movs	r3, #0
 800b134:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b136:	2300      	movs	r3, #0
 800b138:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b140:	7af9      	ldrb	r1, [r7, #11]
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	f7f9 faa3 	bl	8004690 <HAL_PCD_EP_Transmit>
 800b14a:	4603      	mov	r3, r0
 800b14c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b14e:	7dfb      	ldrb	r3, [r7, #23]
 800b150:	4618      	mov	r0, r3
 800b152:	f000 f853 	bl	800b1fc <USBD_Get_USB_Status>
 800b156:	4603      	mov	r3, r0
 800b158:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b15a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3718      	adds	r7, #24
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b086      	sub	sp, #24
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	607a      	str	r2, [r7, #4]
 800b16e:	603b      	str	r3, [r7, #0]
 800b170:	460b      	mov	r3, r1
 800b172:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b174:	2300      	movs	r3, #0
 800b176:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b178:	2300      	movs	r3, #0
 800b17a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b182:	7af9      	ldrb	r1, [r7, #11]
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	f7f9 fa1f 	bl	80045ca <HAL_PCD_EP_Receive>
 800b18c:	4603      	mov	r3, r0
 800b18e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b190:	7dfb      	ldrb	r3, [r7, #23]
 800b192:	4618      	mov	r0, r3
 800b194:	f000 f832 	bl	800b1fc <USBD_Get_USB_Status>
 800b198:	4603      	mov	r3, r0
 800b19a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b19c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3718      	adds	r7, #24
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b082      	sub	sp, #8
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b1b8:	78fa      	ldrb	r2, [r7, #3]
 800b1ba:	4611      	mov	r1, r2
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f7f9 fa4f 	bl	8004660 <HAL_PCD_EP_GetRxCount>
 800b1c2:	4603      	mov	r3, r0
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b1d4:	4b03      	ldr	r3, [pc, #12]	; (800b1e4 <USBD_static_malloc+0x18>)
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	370c      	adds	r7, #12
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	20002074 	.word	0x20002074

0800b1e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]

}
 800b1f0:	bf00      	nop
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b085      	sub	sp, #20
 800b200:	af00      	add	r7, sp, #0
 800b202:	4603      	mov	r3, r0
 800b204:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b206:	2300      	movs	r3, #0
 800b208:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b20a:	79fb      	ldrb	r3, [r7, #7]
 800b20c:	2b03      	cmp	r3, #3
 800b20e:	d817      	bhi.n	800b240 <USBD_Get_USB_Status+0x44>
 800b210:	a201      	add	r2, pc, #4	; (adr r2, 800b218 <USBD_Get_USB_Status+0x1c>)
 800b212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b216:	bf00      	nop
 800b218:	0800b229 	.word	0x0800b229
 800b21c:	0800b22f 	.word	0x0800b22f
 800b220:	0800b235 	.word	0x0800b235
 800b224:	0800b23b 	.word	0x0800b23b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b228:	2300      	movs	r3, #0
 800b22a:	73fb      	strb	r3, [r7, #15]
    break;
 800b22c:	e00b      	b.n	800b246 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b22e:	2303      	movs	r3, #3
 800b230:	73fb      	strb	r3, [r7, #15]
    break;
 800b232:	e008      	b.n	800b246 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b234:	2301      	movs	r3, #1
 800b236:	73fb      	strb	r3, [r7, #15]
    break;
 800b238:	e005      	b.n	800b246 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b23a:	2303      	movs	r3, #3
 800b23c:	73fb      	strb	r3, [r7, #15]
    break;
 800b23e:	e002      	b.n	800b246 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b240:	2303      	movs	r3, #3
 800b242:	73fb      	strb	r3, [r7, #15]
    break;
 800b244:	bf00      	nop
  }
  return usb_status;
 800b246:	7bfb      	ldrb	r3, [r7, #15]
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3714      	adds	r7, #20
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <atoi>:
 800b254:	220a      	movs	r2, #10
 800b256:	2100      	movs	r1, #0
 800b258:	f000 bd2c 	b.w	800bcb4 <strtol>

0800b25c <__errno>:
 800b25c:	4b01      	ldr	r3, [pc, #4]	; (800b264 <__errno+0x8>)
 800b25e:	6818      	ldr	r0, [r3, #0]
 800b260:	4770      	bx	lr
 800b262:	bf00      	nop
 800b264:	200000fc 	.word	0x200000fc

0800b268 <__libc_init_array>:
 800b268:	b570      	push	{r4, r5, r6, lr}
 800b26a:	4d0d      	ldr	r5, [pc, #52]	; (800b2a0 <__libc_init_array+0x38>)
 800b26c:	4c0d      	ldr	r4, [pc, #52]	; (800b2a4 <__libc_init_array+0x3c>)
 800b26e:	1b64      	subs	r4, r4, r5
 800b270:	10a4      	asrs	r4, r4, #2
 800b272:	2600      	movs	r6, #0
 800b274:	42a6      	cmp	r6, r4
 800b276:	d109      	bne.n	800b28c <__libc_init_array+0x24>
 800b278:	4d0b      	ldr	r5, [pc, #44]	; (800b2a8 <__libc_init_array+0x40>)
 800b27a:	4c0c      	ldr	r4, [pc, #48]	; (800b2ac <__libc_init_array+0x44>)
 800b27c:	f002 fdc2 	bl	800de04 <_init>
 800b280:	1b64      	subs	r4, r4, r5
 800b282:	10a4      	asrs	r4, r4, #2
 800b284:	2600      	movs	r6, #0
 800b286:	42a6      	cmp	r6, r4
 800b288:	d105      	bne.n	800b296 <__libc_init_array+0x2e>
 800b28a:	bd70      	pop	{r4, r5, r6, pc}
 800b28c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b290:	4798      	blx	r3
 800b292:	3601      	adds	r6, #1
 800b294:	e7ee      	b.n	800b274 <__libc_init_array+0xc>
 800b296:	f855 3b04 	ldr.w	r3, [r5], #4
 800b29a:	4798      	blx	r3
 800b29c:	3601      	adds	r6, #1
 800b29e:	e7f2      	b.n	800b286 <__libc_init_array+0x1e>
 800b2a0:	0800e264 	.word	0x0800e264
 800b2a4:	0800e264 	.word	0x0800e264
 800b2a8:	0800e264 	.word	0x0800e264
 800b2ac:	0800e268 	.word	0x0800e268

0800b2b0 <memcpy>:
 800b2b0:	440a      	add	r2, r1
 800b2b2:	4291      	cmp	r1, r2
 800b2b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2b8:	d100      	bne.n	800b2bc <memcpy+0xc>
 800b2ba:	4770      	bx	lr
 800b2bc:	b510      	push	{r4, lr}
 800b2be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2c6:	4291      	cmp	r1, r2
 800b2c8:	d1f9      	bne.n	800b2be <memcpy+0xe>
 800b2ca:	bd10      	pop	{r4, pc}

0800b2cc <memset>:
 800b2cc:	4402      	add	r2, r0
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d100      	bne.n	800b2d6 <memset+0xa>
 800b2d4:	4770      	bx	lr
 800b2d6:	f803 1b01 	strb.w	r1, [r3], #1
 800b2da:	e7f9      	b.n	800b2d0 <memset+0x4>

0800b2dc <__cvt>:
 800b2dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2e0:	ec55 4b10 	vmov	r4, r5, d0
 800b2e4:	2d00      	cmp	r5, #0
 800b2e6:	460e      	mov	r6, r1
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	462b      	mov	r3, r5
 800b2ec:	bfbb      	ittet	lt
 800b2ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b2f2:	461d      	movlt	r5, r3
 800b2f4:	2300      	movge	r3, #0
 800b2f6:	232d      	movlt	r3, #45	; 0x2d
 800b2f8:	700b      	strb	r3, [r1, #0]
 800b2fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b300:	4691      	mov	r9, r2
 800b302:	f023 0820 	bic.w	r8, r3, #32
 800b306:	bfbc      	itt	lt
 800b308:	4622      	movlt	r2, r4
 800b30a:	4614      	movlt	r4, r2
 800b30c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b310:	d005      	beq.n	800b31e <__cvt+0x42>
 800b312:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b316:	d100      	bne.n	800b31a <__cvt+0x3e>
 800b318:	3601      	adds	r6, #1
 800b31a:	2102      	movs	r1, #2
 800b31c:	e000      	b.n	800b320 <__cvt+0x44>
 800b31e:	2103      	movs	r1, #3
 800b320:	ab03      	add	r3, sp, #12
 800b322:	9301      	str	r3, [sp, #4]
 800b324:	ab02      	add	r3, sp, #8
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	ec45 4b10 	vmov	d0, r4, r5
 800b32c:	4653      	mov	r3, sl
 800b32e:	4632      	mov	r2, r6
 800b330:	f000 fd56 	bl	800bde0 <_dtoa_r>
 800b334:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b338:	4607      	mov	r7, r0
 800b33a:	d102      	bne.n	800b342 <__cvt+0x66>
 800b33c:	f019 0f01 	tst.w	r9, #1
 800b340:	d022      	beq.n	800b388 <__cvt+0xac>
 800b342:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b346:	eb07 0906 	add.w	r9, r7, r6
 800b34a:	d110      	bne.n	800b36e <__cvt+0x92>
 800b34c:	783b      	ldrb	r3, [r7, #0]
 800b34e:	2b30      	cmp	r3, #48	; 0x30
 800b350:	d10a      	bne.n	800b368 <__cvt+0x8c>
 800b352:	2200      	movs	r2, #0
 800b354:	2300      	movs	r3, #0
 800b356:	4620      	mov	r0, r4
 800b358:	4629      	mov	r1, r5
 800b35a:	f7f5 fbbd 	bl	8000ad8 <__aeabi_dcmpeq>
 800b35e:	b918      	cbnz	r0, 800b368 <__cvt+0x8c>
 800b360:	f1c6 0601 	rsb	r6, r6, #1
 800b364:	f8ca 6000 	str.w	r6, [sl]
 800b368:	f8da 3000 	ldr.w	r3, [sl]
 800b36c:	4499      	add	r9, r3
 800b36e:	2200      	movs	r2, #0
 800b370:	2300      	movs	r3, #0
 800b372:	4620      	mov	r0, r4
 800b374:	4629      	mov	r1, r5
 800b376:	f7f5 fbaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800b37a:	b108      	cbz	r0, 800b380 <__cvt+0xa4>
 800b37c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b380:	2230      	movs	r2, #48	; 0x30
 800b382:	9b03      	ldr	r3, [sp, #12]
 800b384:	454b      	cmp	r3, r9
 800b386:	d307      	bcc.n	800b398 <__cvt+0xbc>
 800b388:	9b03      	ldr	r3, [sp, #12]
 800b38a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b38c:	1bdb      	subs	r3, r3, r7
 800b38e:	4638      	mov	r0, r7
 800b390:	6013      	str	r3, [r2, #0]
 800b392:	b004      	add	sp, #16
 800b394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b398:	1c59      	adds	r1, r3, #1
 800b39a:	9103      	str	r1, [sp, #12]
 800b39c:	701a      	strb	r2, [r3, #0]
 800b39e:	e7f0      	b.n	800b382 <__cvt+0xa6>

0800b3a0 <__exponent>:
 800b3a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2900      	cmp	r1, #0
 800b3a6:	bfb8      	it	lt
 800b3a8:	4249      	neglt	r1, r1
 800b3aa:	f803 2b02 	strb.w	r2, [r3], #2
 800b3ae:	bfb4      	ite	lt
 800b3b0:	222d      	movlt	r2, #45	; 0x2d
 800b3b2:	222b      	movge	r2, #43	; 0x2b
 800b3b4:	2909      	cmp	r1, #9
 800b3b6:	7042      	strb	r2, [r0, #1]
 800b3b8:	dd2a      	ble.n	800b410 <__exponent+0x70>
 800b3ba:	f10d 0407 	add.w	r4, sp, #7
 800b3be:	46a4      	mov	ip, r4
 800b3c0:	270a      	movs	r7, #10
 800b3c2:	46a6      	mov	lr, r4
 800b3c4:	460a      	mov	r2, r1
 800b3c6:	fb91 f6f7 	sdiv	r6, r1, r7
 800b3ca:	fb07 1516 	mls	r5, r7, r6, r1
 800b3ce:	3530      	adds	r5, #48	; 0x30
 800b3d0:	2a63      	cmp	r2, #99	; 0x63
 800b3d2:	f104 34ff 	add.w	r4, r4, #4294967295
 800b3d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b3da:	4631      	mov	r1, r6
 800b3dc:	dcf1      	bgt.n	800b3c2 <__exponent+0x22>
 800b3de:	3130      	adds	r1, #48	; 0x30
 800b3e0:	f1ae 0502 	sub.w	r5, lr, #2
 800b3e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b3e8:	1c44      	adds	r4, r0, #1
 800b3ea:	4629      	mov	r1, r5
 800b3ec:	4561      	cmp	r1, ip
 800b3ee:	d30a      	bcc.n	800b406 <__exponent+0x66>
 800b3f0:	f10d 0209 	add.w	r2, sp, #9
 800b3f4:	eba2 020e 	sub.w	r2, r2, lr
 800b3f8:	4565      	cmp	r5, ip
 800b3fa:	bf88      	it	hi
 800b3fc:	2200      	movhi	r2, #0
 800b3fe:	4413      	add	r3, r2
 800b400:	1a18      	subs	r0, r3, r0
 800b402:	b003      	add	sp, #12
 800b404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b406:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b40a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b40e:	e7ed      	b.n	800b3ec <__exponent+0x4c>
 800b410:	2330      	movs	r3, #48	; 0x30
 800b412:	3130      	adds	r1, #48	; 0x30
 800b414:	7083      	strb	r3, [r0, #2]
 800b416:	70c1      	strb	r1, [r0, #3]
 800b418:	1d03      	adds	r3, r0, #4
 800b41a:	e7f1      	b.n	800b400 <__exponent+0x60>

0800b41c <_printf_float>:
 800b41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b420:	ed2d 8b02 	vpush	{d8}
 800b424:	b08d      	sub	sp, #52	; 0x34
 800b426:	460c      	mov	r4, r1
 800b428:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b42c:	4616      	mov	r6, r2
 800b42e:	461f      	mov	r7, r3
 800b430:	4605      	mov	r5, r0
 800b432:	f001 fac3 	bl	800c9bc <_localeconv_r>
 800b436:	f8d0 a000 	ldr.w	sl, [r0]
 800b43a:	4650      	mov	r0, sl
 800b43c:	f7f4 fed0 	bl	80001e0 <strlen>
 800b440:	2300      	movs	r3, #0
 800b442:	930a      	str	r3, [sp, #40]	; 0x28
 800b444:	6823      	ldr	r3, [r4, #0]
 800b446:	9305      	str	r3, [sp, #20]
 800b448:	f8d8 3000 	ldr.w	r3, [r8]
 800b44c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b450:	3307      	adds	r3, #7
 800b452:	f023 0307 	bic.w	r3, r3, #7
 800b456:	f103 0208 	add.w	r2, r3, #8
 800b45a:	f8c8 2000 	str.w	r2, [r8]
 800b45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b462:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b466:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b46a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b46e:	9307      	str	r3, [sp, #28]
 800b470:	f8cd 8018 	str.w	r8, [sp, #24]
 800b474:	ee08 0a10 	vmov	s16, r0
 800b478:	4b9f      	ldr	r3, [pc, #636]	; (800b6f8 <_printf_float+0x2dc>)
 800b47a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b47e:	f04f 32ff 	mov.w	r2, #4294967295
 800b482:	f7f5 fb5b 	bl	8000b3c <__aeabi_dcmpun>
 800b486:	bb88      	cbnz	r0, 800b4ec <_printf_float+0xd0>
 800b488:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b48c:	4b9a      	ldr	r3, [pc, #616]	; (800b6f8 <_printf_float+0x2dc>)
 800b48e:	f04f 32ff 	mov.w	r2, #4294967295
 800b492:	f7f5 fb35 	bl	8000b00 <__aeabi_dcmple>
 800b496:	bb48      	cbnz	r0, 800b4ec <_printf_float+0xd0>
 800b498:	2200      	movs	r2, #0
 800b49a:	2300      	movs	r3, #0
 800b49c:	4640      	mov	r0, r8
 800b49e:	4649      	mov	r1, r9
 800b4a0:	f7f5 fb24 	bl	8000aec <__aeabi_dcmplt>
 800b4a4:	b110      	cbz	r0, 800b4ac <_printf_float+0x90>
 800b4a6:	232d      	movs	r3, #45	; 0x2d
 800b4a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4ac:	4b93      	ldr	r3, [pc, #588]	; (800b6fc <_printf_float+0x2e0>)
 800b4ae:	4894      	ldr	r0, [pc, #592]	; (800b700 <_printf_float+0x2e4>)
 800b4b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b4b4:	bf94      	ite	ls
 800b4b6:	4698      	movls	r8, r3
 800b4b8:	4680      	movhi	r8, r0
 800b4ba:	2303      	movs	r3, #3
 800b4bc:	6123      	str	r3, [r4, #16]
 800b4be:	9b05      	ldr	r3, [sp, #20]
 800b4c0:	f023 0204 	bic.w	r2, r3, #4
 800b4c4:	6022      	str	r2, [r4, #0]
 800b4c6:	f04f 0900 	mov.w	r9, #0
 800b4ca:	9700      	str	r7, [sp, #0]
 800b4cc:	4633      	mov	r3, r6
 800b4ce:	aa0b      	add	r2, sp, #44	; 0x2c
 800b4d0:	4621      	mov	r1, r4
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	f000 f9d8 	bl	800b888 <_printf_common>
 800b4d8:	3001      	adds	r0, #1
 800b4da:	f040 8090 	bne.w	800b5fe <_printf_float+0x1e2>
 800b4de:	f04f 30ff 	mov.w	r0, #4294967295
 800b4e2:	b00d      	add	sp, #52	; 0x34
 800b4e4:	ecbd 8b02 	vpop	{d8}
 800b4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ec:	4642      	mov	r2, r8
 800b4ee:	464b      	mov	r3, r9
 800b4f0:	4640      	mov	r0, r8
 800b4f2:	4649      	mov	r1, r9
 800b4f4:	f7f5 fb22 	bl	8000b3c <__aeabi_dcmpun>
 800b4f8:	b140      	cbz	r0, 800b50c <_printf_float+0xf0>
 800b4fa:	464b      	mov	r3, r9
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	bfbc      	itt	lt
 800b500:	232d      	movlt	r3, #45	; 0x2d
 800b502:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b506:	487f      	ldr	r0, [pc, #508]	; (800b704 <_printf_float+0x2e8>)
 800b508:	4b7f      	ldr	r3, [pc, #508]	; (800b708 <_printf_float+0x2ec>)
 800b50a:	e7d1      	b.n	800b4b0 <_printf_float+0x94>
 800b50c:	6863      	ldr	r3, [r4, #4]
 800b50e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b512:	9206      	str	r2, [sp, #24]
 800b514:	1c5a      	adds	r2, r3, #1
 800b516:	d13f      	bne.n	800b598 <_printf_float+0x17c>
 800b518:	2306      	movs	r3, #6
 800b51a:	6063      	str	r3, [r4, #4]
 800b51c:	9b05      	ldr	r3, [sp, #20]
 800b51e:	6861      	ldr	r1, [r4, #4]
 800b520:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b524:	2300      	movs	r3, #0
 800b526:	9303      	str	r3, [sp, #12]
 800b528:	ab0a      	add	r3, sp, #40	; 0x28
 800b52a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b52e:	ab09      	add	r3, sp, #36	; 0x24
 800b530:	ec49 8b10 	vmov	d0, r8, r9
 800b534:	9300      	str	r3, [sp, #0]
 800b536:	6022      	str	r2, [r4, #0]
 800b538:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b53c:	4628      	mov	r0, r5
 800b53e:	f7ff fecd 	bl	800b2dc <__cvt>
 800b542:	9b06      	ldr	r3, [sp, #24]
 800b544:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b546:	2b47      	cmp	r3, #71	; 0x47
 800b548:	4680      	mov	r8, r0
 800b54a:	d108      	bne.n	800b55e <_printf_float+0x142>
 800b54c:	1cc8      	adds	r0, r1, #3
 800b54e:	db02      	blt.n	800b556 <_printf_float+0x13a>
 800b550:	6863      	ldr	r3, [r4, #4]
 800b552:	4299      	cmp	r1, r3
 800b554:	dd41      	ble.n	800b5da <_printf_float+0x1be>
 800b556:	f1ab 0b02 	sub.w	fp, fp, #2
 800b55a:	fa5f fb8b 	uxtb.w	fp, fp
 800b55e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b562:	d820      	bhi.n	800b5a6 <_printf_float+0x18a>
 800b564:	3901      	subs	r1, #1
 800b566:	465a      	mov	r2, fp
 800b568:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b56c:	9109      	str	r1, [sp, #36]	; 0x24
 800b56e:	f7ff ff17 	bl	800b3a0 <__exponent>
 800b572:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b574:	1813      	adds	r3, r2, r0
 800b576:	2a01      	cmp	r2, #1
 800b578:	4681      	mov	r9, r0
 800b57a:	6123      	str	r3, [r4, #16]
 800b57c:	dc02      	bgt.n	800b584 <_printf_float+0x168>
 800b57e:	6822      	ldr	r2, [r4, #0]
 800b580:	07d2      	lsls	r2, r2, #31
 800b582:	d501      	bpl.n	800b588 <_printf_float+0x16c>
 800b584:	3301      	adds	r3, #1
 800b586:	6123      	str	r3, [r4, #16]
 800b588:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d09c      	beq.n	800b4ca <_printf_float+0xae>
 800b590:	232d      	movs	r3, #45	; 0x2d
 800b592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b596:	e798      	b.n	800b4ca <_printf_float+0xae>
 800b598:	9a06      	ldr	r2, [sp, #24]
 800b59a:	2a47      	cmp	r2, #71	; 0x47
 800b59c:	d1be      	bne.n	800b51c <_printf_float+0x100>
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d1bc      	bne.n	800b51c <_printf_float+0x100>
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	e7b9      	b.n	800b51a <_printf_float+0xfe>
 800b5a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b5aa:	d118      	bne.n	800b5de <_printf_float+0x1c2>
 800b5ac:	2900      	cmp	r1, #0
 800b5ae:	6863      	ldr	r3, [r4, #4]
 800b5b0:	dd0b      	ble.n	800b5ca <_printf_float+0x1ae>
 800b5b2:	6121      	str	r1, [r4, #16]
 800b5b4:	b913      	cbnz	r3, 800b5bc <_printf_float+0x1a0>
 800b5b6:	6822      	ldr	r2, [r4, #0]
 800b5b8:	07d0      	lsls	r0, r2, #31
 800b5ba:	d502      	bpl.n	800b5c2 <_printf_float+0x1a6>
 800b5bc:	3301      	adds	r3, #1
 800b5be:	440b      	add	r3, r1
 800b5c0:	6123      	str	r3, [r4, #16]
 800b5c2:	65a1      	str	r1, [r4, #88]	; 0x58
 800b5c4:	f04f 0900 	mov.w	r9, #0
 800b5c8:	e7de      	b.n	800b588 <_printf_float+0x16c>
 800b5ca:	b913      	cbnz	r3, 800b5d2 <_printf_float+0x1b6>
 800b5cc:	6822      	ldr	r2, [r4, #0]
 800b5ce:	07d2      	lsls	r2, r2, #31
 800b5d0:	d501      	bpl.n	800b5d6 <_printf_float+0x1ba>
 800b5d2:	3302      	adds	r3, #2
 800b5d4:	e7f4      	b.n	800b5c0 <_printf_float+0x1a4>
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e7f2      	b.n	800b5c0 <_printf_float+0x1a4>
 800b5da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b5de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5e0:	4299      	cmp	r1, r3
 800b5e2:	db05      	blt.n	800b5f0 <_printf_float+0x1d4>
 800b5e4:	6823      	ldr	r3, [r4, #0]
 800b5e6:	6121      	str	r1, [r4, #16]
 800b5e8:	07d8      	lsls	r0, r3, #31
 800b5ea:	d5ea      	bpl.n	800b5c2 <_printf_float+0x1a6>
 800b5ec:	1c4b      	adds	r3, r1, #1
 800b5ee:	e7e7      	b.n	800b5c0 <_printf_float+0x1a4>
 800b5f0:	2900      	cmp	r1, #0
 800b5f2:	bfd4      	ite	le
 800b5f4:	f1c1 0202 	rsble	r2, r1, #2
 800b5f8:	2201      	movgt	r2, #1
 800b5fa:	4413      	add	r3, r2
 800b5fc:	e7e0      	b.n	800b5c0 <_printf_float+0x1a4>
 800b5fe:	6823      	ldr	r3, [r4, #0]
 800b600:	055a      	lsls	r2, r3, #21
 800b602:	d407      	bmi.n	800b614 <_printf_float+0x1f8>
 800b604:	6923      	ldr	r3, [r4, #16]
 800b606:	4642      	mov	r2, r8
 800b608:	4631      	mov	r1, r6
 800b60a:	4628      	mov	r0, r5
 800b60c:	47b8      	blx	r7
 800b60e:	3001      	adds	r0, #1
 800b610:	d12c      	bne.n	800b66c <_printf_float+0x250>
 800b612:	e764      	b.n	800b4de <_printf_float+0xc2>
 800b614:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b618:	f240 80e0 	bls.w	800b7dc <_printf_float+0x3c0>
 800b61c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b620:	2200      	movs	r2, #0
 800b622:	2300      	movs	r3, #0
 800b624:	f7f5 fa58 	bl	8000ad8 <__aeabi_dcmpeq>
 800b628:	2800      	cmp	r0, #0
 800b62a:	d034      	beq.n	800b696 <_printf_float+0x27a>
 800b62c:	4a37      	ldr	r2, [pc, #220]	; (800b70c <_printf_float+0x2f0>)
 800b62e:	2301      	movs	r3, #1
 800b630:	4631      	mov	r1, r6
 800b632:	4628      	mov	r0, r5
 800b634:	47b8      	blx	r7
 800b636:	3001      	adds	r0, #1
 800b638:	f43f af51 	beq.w	800b4de <_printf_float+0xc2>
 800b63c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b640:	429a      	cmp	r2, r3
 800b642:	db02      	blt.n	800b64a <_printf_float+0x22e>
 800b644:	6823      	ldr	r3, [r4, #0]
 800b646:	07d8      	lsls	r0, r3, #31
 800b648:	d510      	bpl.n	800b66c <_printf_float+0x250>
 800b64a:	ee18 3a10 	vmov	r3, s16
 800b64e:	4652      	mov	r2, sl
 800b650:	4631      	mov	r1, r6
 800b652:	4628      	mov	r0, r5
 800b654:	47b8      	blx	r7
 800b656:	3001      	adds	r0, #1
 800b658:	f43f af41 	beq.w	800b4de <_printf_float+0xc2>
 800b65c:	f04f 0800 	mov.w	r8, #0
 800b660:	f104 091a 	add.w	r9, r4, #26
 800b664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b666:	3b01      	subs	r3, #1
 800b668:	4543      	cmp	r3, r8
 800b66a:	dc09      	bgt.n	800b680 <_printf_float+0x264>
 800b66c:	6823      	ldr	r3, [r4, #0]
 800b66e:	079b      	lsls	r3, r3, #30
 800b670:	f100 8105 	bmi.w	800b87e <_printf_float+0x462>
 800b674:	68e0      	ldr	r0, [r4, #12]
 800b676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b678:	4298      	cmp	r0, r3
 800b67a:	bfb8      	it	lt
 800b67c:	4618      	movlt	r0, r3
 800b67e:	e730      	b.n	800b4e2 <_printf_float+0xc6>
 800b680:	2301      	movs	r3, #1
 800b682:	464a      	mov	r2, r9
 800b684:	4631      	mov	r1, r6
 800b686:	4628      	mov	r0, r5
 800b688:	47b8      	blx	r7
 800b68a:	3001      	adds	r0, #1
 800b68c:	f43f af27 	beq.w	800b4de <_printf_float+0xc2>
 800b690:	f108 0801 	add.w	r8, r8, #1
 800b694:	e7e6      	b.n	800b664 <_printf_float+0x248>
 800b696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b698:	2b00      	cmp	r3, #0
 800b69a:	dc39      	bgt.n	800b710 <_printf_float+0x2f4>
 800b69c:	4a1b      	ldr	r2, [pc, #108]	; (800b70c <_printf_float+0x2f0>)
 800b69e:	2301      	movs	r3, #1
 800b6a0:	4631      	mov	r1, r6
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	47b8      	blx	r7
 800b6a6:	3001      	adds	r0, #1
 800b6a8:	f43f af19 	beq.w	800b4de <_printf_float+0xc2>
 800b6ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	d102      	bne.n	800b6ba <_printf_float+0x29e>
 800b6b4:	6823      	ldr	r3, [r4, #0]
 800b6b6:	07d9      	lsls	r1, r3, #31
 800b6b8:	d5d8      	bpl.n	800b66c <_printf_float+0x250>
 800b6ba:	ee18 3a10 	vmov	r3, s16
 800b6be:	4652      	mov	r2, sl
 800b6c0:	4631      	mov	r1, r6
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	47b8      	blx	r7
 800b6c6:	3001      	adds	r0, #1
 800b6c8:	f43f af09 	beq.w	800b4de <_printf_float+0xc2>
 800b6cc:	f04f 0900 	mov.w	r9, #0
 800b6d0:	f104 0a1a 	add.w	sl, r4, #26
 800b6d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6d6:	425b      	negs	r3, r3
 800b6d8:	454b      	cmp	r3, r9
 800b6da:	dc01      	bgt.n	800b6e0 <_printf_float+0x2c4>
 800b6dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6de:	e792      	b.n	800b606 <_printf_float+0x1ea>
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	4652      	mov	r2, sl
 800b6e4:	4631      	mov	r1, r6
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	47b8      	blx	r7
 800b6ea:	3001      	adds	r0, #1
 800b6ec:	f43f aef7 	beq.w	800b4de <_printf_float+0xc2>
 800b6f0:	f109 0901 	add.w	r9, r9, #1
 800b6f4:	e7ee      	b.n	800b6d4 <_printf_float+0x2b8>
 800b6f6:	bf00      	nop
 800b6f8:	7fefffff 	.word	0x7fefffff
 800b6fc:	0800de84 	.word	0x0800de84
 800b700:	0800de88 	.word	0x0800de88
 800b704:	0800de90 	.word	0x0800de90
 800b708:	0800de8c 	.word	0x0800de8c
 800b70c:	0800de94 	.word	0x0800de94
 800b710:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b712:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b714:	429a      	cmp	r2, r3
 800b716:	bfa8      	it	ge
 800b718:	461a      	movge	r2, r3
 800b71a:	2a00      	cmp	r2, #0
 800b71c:	4691      	mov	r9, r2
 800b71e:	dc37      	bgt.n	800b790 <_printf_float+0x374>
 800b720:	f04f 0b00 	mov.w	fp, #0
 800b724:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b728:	f104 021a 	add.w	r2, r4, #26
 800b72c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b72e:	9305      	str	r3, [sp, #20]
 800b730:	eba3 0309 	sub.w	r3, r3, r9
 800b734:	455b      	cmp	r3, fp
 800b736:	dc33      	bgt.n	800b7a0 <_printf_float+0x384>
 800b738:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b73c:	429a      	cmp	r2, r3
 800b73e:	db3b      	blt.n	800b7b8 <_printf_float+0x39c>
 800b740:	6823      	ldr	r3, [r4, #0]
 800b742:	07da      	lsls	r2, r3, #31
 800b744:	d438      	bmi.n	800b7b8 <_printf_float+0x39c>
 800b746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b748:	9a05      	ldr	r2, [sp, #20]
 800b74a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b74c:	1a9a      	subs	r2, r3, r2
 800b74e:	eba3 0901 	sub.w	r9, r3, r1
 800b752:	4591      	cmp	r9, r2
 800b754:	bfa8      	it	ge
 800b756:	4691      	movge	r9, r2
 800b758:	f1b9 0f00 	cmp.w	r9, #0
 800b75c:	dc35      	bgt.n	800b7ca <_printf_float+0x3ae>
 800b75e:	f04f 0800 	mov.w	r8, #0
 800b762:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b766:	f104 0a1a 	add.w	sl, r4, #26
 800b76a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b76e:	1a9b      	subs	r3, r3, r2
 800b770:	eba3 0309 	sub.w	r3, r3, r9
 800b774:	4543      	cmp	r3, r8
 800b776:	f77f af79 	ble.w	800b66c <_printf_float+0x250>
 800b77a:	2301      	movs	r3, #1
 800b77c:	4652      	mov	r2, sl
 800b77e:	4631      	mov	r1, r6
 800b780:	4628      	mov	r0, r5
 800b782:	47b8      	blx	r7
 800b784:	3001      	adds	r0, #1
 800b786:	f43f aeaa 	beq.w	800b4de <_printf_float+0xc2>
 800b78a:	f108 0801 	add.w	r8, r8, #1
 800b78e:	e7ec      	b.n	800b76a <_printf_float+0x34e>
 800b790:	4613      	mov	r3, r2
 800b792:	4631      	mov	r1, r6
 800b794:	4642      	mov	r2, r8
 800b796:	4628      	mov	r0, r5
 800b798:	47b8      	blx	r7
 800b79a:	3001      	adds	r0, #1
 800b79c:	d1c0      	bne.n	800b720 <_printf_float+0x304>
 800b79e:	e69e      	b.n	800b4de <_printf_float+0xc2>
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	4631      	mov	r1, r6
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	9205      	str	r2, [sp, #20]
 800b7a8:	47b8      	blx	r7
 800b7aa:	3001      	adds	r0, #1
 800b7ac:	f43f ae97 	beq.w	800b4de <_printf_float+0xc2>
 800b7b0:	9a05      	ldr	r2, [sp, #20]
 800b7b2:	f10b 0b01 	add.w	fp, fp, #1
 800b7b6:	e7b9      	b.n	800b72c <_printf_float+0x310>
 800b7b8:	ee18 3a10 	vmov	r3, s16
 800b7bc:	4652      	mov	r2, sl
 800b7be:	4631      	mov	r1, r6
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	47b8      	blx	r7
 800b7c4:	3001      	adds	r0, #1
 800b7c6:	d1be      	bne.n	800b746 <_printf_float+0x32a>
 800b7c8:	e689      	b.n	800b4de <_printf_float+0xc2>
 800b7ca:	9a05      	ldr	r2, [sp, #20]
 800b7cc:	464b      	mov	r3, r9
 800b7ce:	4442      	add	r2, r8
 800b7d0:	4631      	mov	r1, r6
 800b7d2:	4628      	mov	r0, r5
 800b7d4:	47b8      	blx	r7
 800b7d6:	3001      	adds	r0, #1
 800b7d8:	d1c1      	bne.n	800b75e <_printf_float+0x342>
 800b7da:	e680      	b.n	800b4de <_printf_float+0xc2>
 800b7dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7de:	2a01      	cmp	r2, #1
 800b7e0:	dc01      	bgt.n	800b7e6 <_printf_float+0x3ca>
 800b7e2:	07db      	lsls	r3, r3, #31
 800b7e4:	d538      	bpl.n	800b858 <_printf_float+0x43c>
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	4642      	mov	r2, r8
 800b7ea:	4631      	mov	r1, r6
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	47b8      	blx	r7
 800b7f0:	3001      	adds	r0, #1
 800b7f2:	f43f ae74 	beq.w	800b4de <_printf_float+0xc2>
 800b7f6:	ee18 3a10 	vmov	r3, s16
 800b7fa:	4652      	mov	r2, sl
 800b7fc:	4631      	mov	r1, r6
 800b7fe:	4628      	mov	r0, r5
 800b800:	47b8      	blx	r7
 800b802:	3001      	adds	r0, #1
 800b804:	f43f ae6b 	beq.w	800b4de <_printf_float+0xc2>
 800b808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b80c:	2200      	movs	r2, #0
 800b80e:	2300      	movs	r3, #0
 800b810:	f7f5 f962 	bl	8000ad8 <__aeabi_dcmpeq>
 800b814:	b9d8      	cbnz	r0, 800b84e <_printf_float+0x432>
 800b816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b818:	f108 0201 	add.w	r2, r8, #1
 800b81c:	3b01      	subs	r3, #1
 800b81e:	4631      	mov	r1, r6
 800b820:	4628      	mov	r0, r5
 800b822:	47b8      	blx	r7
 800b824:	3001      	adds	r0, #1
 800b826:	d10e      	bne.n	800b846 <_printf_float+0x42a>
 800b828:	e659      	b.n	800b4de <_printf_float+0xc2>
 800b82a:	2301      	movs	r3, #1
 800b82c:	4652      	mov	r2, sl
 800b82e:	4631      	mov	r1, r6
 800b830:	4628      	mov	r0, r5
 800b832:	47b8      	blx	r7
 800b834:	3001      	adds	r0, #1
 800b836:	f43f ae52 	beq.w	800b4de <_printf_float+0xc2>
 800b83a:	f108 0801 	add.w	r8, r8, #1
 800b83e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b840:	3b01      	subs	r3, #1
 800b842:	4543      	cmp	r3, r8
 800b844:	dcf1      	bgt.n	800b82a <_printf_float+0x40e>
 800b846:	464b      	mov	r3, r9
 800b848:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b84c:	e6dc      	b.n	800b608 <_printf_float+0x1ec>
 800b84e:	f04f 0800 	mov.w	r8, #0
 800b852:	f104 0a1a 	add.w	sl, r4, #26
 800b856:	e7f2      	b.n	800b83e <_printf_float+0x422>
 800b858:	2301      	movs	r3, #1
 800b85a:	4642      	mov	r2, r8
 800b85c:	e7df      	b.n	800b81e <_printf_float+0x402>
 800b85e:	2301      	movs	r3, #1
 800b860:	464a      	mov	r2, r9
 800b862:	4631      	mov	r1, r6
 800b864:	4628      	mov	r0, r5
 800b866:	47b8      	blx	r7
 800b868:	3001      	adds	r0, #1
 800b86a:	f43f ae38 	beq.w	800b4de <_printf_float+0xc2>
 800b86e:	f108 0801 	add.w	r8, r8, #1
 800b872:	68e3      	ldr	r3, [r4, #12]
 800b874:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b876:	1a5b      	subs	r3, r3, r1
 800b878:	4543      	cmp	r3, r8
 800b87a:	dcf0      	bgt.n	800b85e <_printf_float+0x442>
 800b87c:	e6fa      	b.n	800b674 <_printf_float+0x258>
 800b87e:	f04f 0800 	mov.w	r8, #0
 800b882:	f104 0919 	add.w	r9, r4, #25
 800b886:	e7f4      	b.n	800b872 <_printf_float+0x456>

0800b888 <_printf_common>:
 800b888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b88c:	4616      	mov	r6, r2
 800b88e:	4699      	mov	r9, r3
 800b890:	688a      	ldr	r2, [r1, #8]
 800b892:	690b      	ldr	r3, [r1, #16]
 800b894:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b898:	4293      	cmp	r3, r2
 800b89a:	bfb8      	it	lt
 800b89c:	4613      	movlt	r3, r2
 800b89e:	6033      	str	r3, [r6, #0]
 800b8a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b8a4:	4607      	mov	r7, r0
 800b8a6:	460c      	mov	r4, r1
 800b8a8:	b10a      	cbz	r2, 800b8ae <_printf_common+0x26>
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	6033      	str	r3, [r6, #0]
 800b8ae:	6823      	ldr	r3, [r4, #0]
 800b8b0:	0699      	lsls	r1, r3, #26
 800b8b2:	bf42      	ittt	mi
 800b8b4:	6833      	ldrmi	r3, [r6, #0]
 800b8b6:	3302      	addmi	r3, #2
 800b8b8:	6033      	strmi	r3, [r6, #0]
 800b8ba:	6825      	ldr	r5, [r4, #0]
 800b8bc:	f015 0506 	ands.w	r5, r5, #6
 800b8c0:	d106      	bne.n	800b8d0 <_printf_common+0x48>
 800b8c2:	f104 0a19 	add.w	sl, r4, #25
 800b8c6:	68e3      	ldr	r3, [r4, #12]
 800b8c8:	6832      	ldr	r2, [r6, #0]
 800b8ca:	1a9b      	subs	r3, r3, r2
 800b8cc:	42ab      	cmp	r3, r5
 800b8ce:	dc26      	bgt.n	800b91e <_printf_common+0x96>
 800b8d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b8d4:	1e13      	subs	r3, r2, #0
 800b8d6:	6822      	ldr	r2, [r4, #0]
 800b8d8:	bf18      	it	ne
 800b8da:	2301      	movne	r3, #1
 800b8dc:	0692      	lsls	r2, r2, #26
 800b8de:	d42b      	bmi.n	800b938 <_printf_common+0xb0>
 800b8e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b8e4:	4649      	mov	r1, r9
 800b8e6:	4638      	mov	r0, r7
 800b8e8:	47c0      	blx	r8
 800b8ea:	3001      	adds	r0, #1
 800b8ec:	d01e      	beq.n	800b92c <_printf_common+0xa4>
 800b8ee:	6823      	ldr	r3, [r4, #0]
 800b8f0:	68e5      	ldr	r5, [r4, #12]
 800b8f2:	6832      	ldr	r2, [r6, #0]
 800b8f4:	f003 0306 	and.w	r3, r3, #6
 800b8f8:	2b04      	cmp	r3, #4
 800b8fa:	bf08      	it	eq
 800b8fc:	1aad      	subeq	r5, r5, r2
 800b8fe:	68a3      	ldr	r3, [r4, #8]
 800b900:	6922      	ldr	r2, [r4, #16]
 800b902:	bf0c      	ite	eq
 800b904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b908:	2500      	movne	r5, #0
 800b90a:	4293      	cmp	r3, r2
 800b90c:	bfc4      	itt	gt
 800b90e:	1a9b      	subgt	r3, r3, r2
 800b910:	18ed      	addgt	r5, r5, r3
 800b912:	2600      	movs	r6, #0
 800b914:	341a      	adds	r4, #26
 800b916:	42b5      	cmp	r5, r6
 800b918:	d11a      	bne.n	800b950 <_printf_common+0xc8>
 800b91a:	2000      	movs	r0, #0
 800b91c:	e008      	b.n	800b930 <_printf_common+0xa8>
 800b91e:	2301      	movs	r3, #1
 800b920:	4652      	mov	r2, sl
 800b922:	4649      	mov	r1, r9
 800b924:	4638      	mov	r0, r7
 800b926:	47c0      	blx	r8
 800b928:	3001      	adds	r0, #1
 800b92a:	d103      	bne.n	800b934 <_printf_common+0xac>
 800b92c:	f04f 30ff 	mov.w	r0, #4294967295
 800b930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b934:	3501      	adds	r5, #1
 800b936:	e7c6      	b.n	800b8c6 <_printf_common+0x3e>
 800b938:	18e1      	adds	r1, r4, r3
 800b93a:	1c5a      	adds	r2, r3, #1
 800b93c:	2030      	movs	r0, #48	; 0x30
 800b93e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b942:	4422      	add	r2, r4
 800b944:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b948:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b94c:	3302      	adds	r3, #2
 800b94e:	e7c7      	b.n	800b8e0 <_printf_common+0x58>
 800b950:	2301      	movs	r3, #1
 800b952:	4622      	mov	r2, r4
 800b954:	4649      	mov	r1, r9
 800b956:	4638      	mov	r0, r7
 800b958:	47c0      	blx	r8
 800b95a:	3001      	adds	r0, #1
 800b95c:	d0e6      	beq.n	800b92c <_printf_common+0xa4>
 800b95e:	3601      	adds	r6, #1
 800b960:	e7d9      	b.n	800b916 <_printf_common+0x8e>
	...

0800b964 <_printf_i>:
 800b964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b968:	7e0f      	ldrb	r7, [r1, #24]
 800b96a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b96c:	2f78      	cmp	r7, #120	; 0x78
 800b96e:	4691      	mov	r9, r2
 800b970:	4680      	mov	r8, r0
 800b972:	460c      	mov	r4, r1
 800b974:	469a      	mov	sl, r3
 800b976:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b97a:	d807      	bhi.n	800b98c <_printf_i+0x28>
 800b97c:	2f62      	cmp	r7, #98	; 0x62
 800b97e:	d80a      	bhi.n	800b996 <_printf_i+0x32>
 800b980:	2f00      	cmp	r7, #0
 800b982:	f000 80d8 	beq.w	800bb36 <_printf_i+0x1d2>
 800b986:	2f58      	cmp	r7, #88	; 0x58
 800b988:	f000 80a3 	beq.w	800bad2 <_printf_i+0x16e>
 800b98c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b990:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b994:	e03a      	b.n	800ba0c <_printf_i+0xa8>
 800b996:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b99a:	2b15      	cmp	r3, #21
 800b99c:	d8f6      	bhi.n	800b98c <_printf_i+0x28>
 800b99e:	a101      	add	r1, pc, #4	; (adr r1, 800b9a4 <_printf_i+0x40>)
 800b9a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b9a4:	0800b9fd 	.word	0x0800b9fd
 800b9a8:	0800ba11 	.word	0x0800ba11
 800b9ac:	0800b98d 	.word	0x0800b98d
 800b9b0:	0800b98d 	.word	0x0800b98d
 800b9b4:	0800b98d 	.word	0x0800b98d
 800b9b8:	0800b98d 	.word	0x0800b98d
 800b9bc:	0800ba11 	.word	0x0800ba11
 800b9c0:	0800b98d 	.word	0x0800b98d
 800b9c4:	0800b98d 	.word	0x0800b98d
 800b9c8:	0800b98d 	.word	0x0800b98d
 800b9cc:	0800b98d 	.word	0x0800b98d
 800b9d0:	0800bb1d 	.word	0x0800bb1d
 800b9d4:	0800ba41 	.word	0x0800ba41
 800b9d8:	0800baff 	.word	0x0800baff
 800b9dc:	0800b98d 	.word	0x0800b98d
 800b9e0:	0800b98d 	.word	0x0800b98d
 800b9e4:	0800bb3f 	.word	0x0800bb3f
 800b9e8:	0800b98d 	.word	0x0800b98d
 800b9ec:	0800ba41 	.word	0x0800ba41
 800b9f0:	0800b98d 	.word	0x0800b98d
 800b9f4:	0800b98d 	.word	0x0800b98d
 800b9f8:	0800bb07 	.word	0x0800bb07
 800b9fc:	682b      	ldr	r3, [r5, #0]
 800b9fe:	1d1a      	adds	r2, r3, #4
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	602a      	str	r2, [r5, #0]
 800ba04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	e0a3      	b.n	800bb58 <_printf_i+0x1f4>
 800ba10:	6820      	ldr	r0, [r4, #0]
 800ba12:	6829      	ldr	r1, [r5, #0]
 800ba14:	0606      	lsls	r6, r0, #24
 800ba16:	f101 0304 	add.w	r3, r1, #4
 800ba1a:	d50a      	bpl.n	800ba32 <_printf_i+0xce>
 800ba1c:	680e      	ldr	r6, [r1, #0]
 800ba1e:	602b      	str	r3, [r5, #0]
 800ba20:	2e00      	cmp	r6, #0
 800ba22:	da03      	bge.n	800ba2c <_printf_i+0xc8>
 800ba24:	232d      	movs	r3, #45	; 0x2d
 800ba26:	4276      	negs	r6, r6
 800ba28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba2c:	485e      	ldr	r0, [pc, #376]	; (800bba8 <_printf_i+0x244>)
 800ba2e:	230a      	movs	r3, #10
 800ba30:	e019      	b.n	800ba66 <_printf_i+0x102>
 800ba32:	680e      	ldr	r6, [r1, #0]
 800ba34:	602b      	str	r3, [r5, #0]
 800ba36:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ba3a:	bf18      	it	ne
 800ba3c:	b236      	sxthne	r6, r6
 800ba3e:	e7ef      	b.n	800ba20 <_printf_i+0xbc>
 800ba40:	682b      	ldr	r3, [r5, #0]
 800ba42:	6820      	ldr	r0, [r4, #0]
 800ba44:	1d19      	adds	r1, r3, #4
 800ba46:	6029      	str	r1, [r5, #0]
 800ba48:	0601      	lsls	r1, r0, #24
 800ba4a:	d501      	bpl.n	800ba50 <_printf_i+0xec>
 800ba4c:	681e      	ldr	r6, [r3, #0]
 800ba4e:	e002      	b.n	800ba56 <_printf_i+0xf2>
 800ba50:	0646      	lsls	r6, r0, #25
 800ba52:	d5fb      	bpl.n	800ba4c <_printf_i+0xe8>
 800ba54:	881e      	ldrh	r6, [r3, #0]
 800ba56:	4854      	ldr	r0, [pc, #336]	; (800bba8 <_printf_i+0x244>)
 800ba58:	2f6f      	cmp	r7, #111	; 0x6f
 800ba5a:	bf0c      	ite	eq
 800ba5c:	2308      	moveq	r3, #8
 800ba5e:	230a      	movne	r3, #10
 800ba60:	2100      	movs	r1, #0
 800ba62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba66:	6865      	ldr	r5, [r4, #4]
 800ba68:	60a5      	str	r5, [r4, #8]
 800ba6a:	2d00      	cmp	r5, #0
 800ba6c:	bfa2      	ittt	ge
 800ba6e:	6821      	ldrge	r1, [r4, #0]
 800ba70:	f021 0104 	bicge.w	r1, r1, #4
 800ba74:	6021      	strge	r1, [r4, #0]
 800ba76:	b90e      	cbnz	r6, 800ba7c <_printf_i+0x118>
 800ba78:	2d00      	cmp	r5, #0
 800ba7a:	d04d      	beq.n	800bb18 <_printf_i+0x1b4>
 800ba7c:	4615      	mov	r5, r2
 800ba7e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ba82:	fb03 6711 	mls	r7, r3, r1, r6
 800ba86:	5dc7      	ldrb	r7, [r0, r7]
 800ba88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ba8c:	4637      	mov	r7, r6
 800ba8e:	42bb      	cmp	r3, r7
 800ba90:	460e      	mov	r6, r1
 800ba92:	d9f4      	bls.n	800ba7e <_printf_i+0x11a>
 800ba94:	2b08      	cmp	r3, #8
 800ba96:	d10b      	bne.n	800bab0 <_printf_i+0x14c>
 800ba98:	6823      	ldr	r3, [r4, #0]
 800ba9a:	07de      	lsls	r6, r3, #31
 800ba9c:	d508      	bpl.n	800bab0 <_printf_i+0x14c>
 800ba9e:	6923      	ldr	r3, [r4, #16]
 800baa0:	6861      	ldr	r1, [r4, #4]
 800baa2:	4299      	cmp	r1, r3
 800baa4:	bfde      	ittt	le
 800baa6:	2330      	movle	r3, #48	; 0x30
 800baa8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800baac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bab0:	1b52      	subs	r2, r2, r5
 800bab2:	6122      	str	r2, [r4, #16]
 800bab4:	f8cd a000 	str.w	sl, [sp]
 800bab8:	464b      	mov	r3, r9
 800baba:	aa03      	add	r2, sp, #12
 800babc:	4621      	mov	r1, r4
 800babe:	4640      	mov	r0, r8
 800bac0:	f7ff fee2 	bl	800b888 <_printf_common>
 800bac4:	3001      	adds	r0, #1
 800bac6:	d14c      	bne.n	800bb62 <_printf_i+0x1fe>
 800bac8:	f04f 30ff 	mov.w	r0, #4294967295
 800bacc:	b004      	add	sp, #16
 800bace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bad2:	4835      	ldr	r0, [pc, #212]	; (800bba8 <_printf_i+0x244>)
 800bad4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bad8:	6829      	ldr	r1, [r5, #0]
 800bada:	6823      	ldr	r3, [r4, #0]
 800badc:	f851 6b04 	ldr.w	r6, [r1], #4
 800bae0:	6029      	str	r1, [r5, #0]
 800bae2:	061d      	lsls	r5, r3, #24
 800bae4:	d514      	bpl.n	800bb10 <_printf_i+0x1ac>
 800bae6:	07df      	lsls	r7, r3, #31
 800bae8:	bf44      	itt	mi
 800baea:	f043 0320 	orrmi.w	r3, r3, #32
 800baee:	6023      	strmi	r3, [r4, #0]
 800baf0:	b91e      	cbnz	r6, 800bafa <_printf_i+0x196>
 800baf2:	6823      	ldr	r3, [r4, #0]
 800baf4:	f023 0320 	bic.w	r3, r3, #32
 800baf8:	6023      	str	r3, [r4, #0]
 800bafa:	2310      	movs	r3, #16
 800bafc:	e7b0      	b.n	800ba60 <_printf_i+0xfc>
 800bafe:	6823      	ldr	r3, [r4, #0]
 800bb00:	f043 0320 	orr.w	r3, r3, #32
 800bb04:	6023      	str	r3, [r4, #0]
 800bb06:	2378      	movs	r3, #120	; 0x78
 800bb08:	4828      	ldr	r0, [pc, #160]	; (800bbac <_printf_i+0x248>)
 800bb0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bb0e:	e7e3      	b.n	800bad8 <_printf_i+0x174>
 800bb10:	0659      	lsls	r1, r3, #25
 800bb12:	bf48      	it	mi
 800bb14:	b2b6      	uxthmi	r6, r6
 800bb16:	e7e6      	b.n	800bae6 <_printf_i+0x182>
 800bb18:	4615      	mov	r5, r2
 800bb1a:	e7bb      	b.n	800ba94 <_printf_i+0x130>
 800bb1c:	682b      	ldr	r3, [r5, #0]
 800bb1e:	6826      	ldr	r6, [r4, #0]
 800bb20:	6961      	ldr	r1, [r4, #20]
 800bb22:	1d18      	adds	r0, r3, #4
 800bb24:	6028      	str	r0, [r5, #0]
 800bb26:	0635      	lsls	r5, r6, #24
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	d501      	bpl.n	800bb30 <_printf_i+0x1cc>
 800bb2c:	6019      	str	r1, [r3, #0]
 800bb2e:	e002      	b.n	800bb36 <_printf_i+0x1d2>
 800bb30:	0670      	lsls	r0, r6, #25
 800bb32:	d5fb      	bpl.n	800bb2c <_printf_i+0x1c8>
 800bb34:	8019      	strh	r1, [r3, #0]
 800bb36:	2300      	movs	r3, #0
 800bb38:	6123      	str	r3, [r4, #16]
 800bb3a:	4615      	mov	r5, r2
 800bb3c:	e7ba      	b.n	800bab4 <_printf_i+0x150>
 800bb3e:	682b      	ldr	r3, [r5, #0]
 800bb40:	1d1a      	adds	r2, r3, #4
 800bb42:	602a      	str	r2, [r5, #0]
 800bb44:	681d      	ldr	r5, [r3, #0]
 800bb46:	6862      	ldr	r2, [r4, #4]
 800bb48:	2100      	movs	r1, #0
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	f7f4 fb50 	bl	80001f0 <memchr>
 800bb50:	b108      	cbz	r0, 800bb56 <_printf_i+0x1f2>
 800bb52:	1b40      	subs	r0, r0, r5
 800bb54:	6060      	str	r0, [r4, #4]
 800bb56:	6863      	ldr	r3, [r4, #4]
 800bb58:	6123      	str	r3, [r4, #16]
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb60:	e7a8      	b.n	800bab4 <_printf_i+0x150>
 800bb62:	6923      	ldr	r3, [r4, #16]
 800bb64:	462a      	mov	r2, r5
 800bb66:	4649      	mov	r1, r9
 800bb68:	4640      	mov	r0, r8
 800bb6a:	47d0      	blx	sl
 800bb6c:	3001      	adds	r0, #1
 800bb6e:	d0ab      	beq.n	800bac8 <_printf_i+0x164>
 800bb70:	6823      	ldr	r3, [r4, #0]
 800bb72:	079b      	lsls	r3, r3, #30
 800bb74:	d413      	bmi.n	800bb9e <_printf_i+0x23a>
 800bb76:	68e0      	ldr	r0, [r4, #12]
 800bb78:	9b03      	ldr	r3, [sp, #12]
 800bb7a:	4298      	cmp	r0, r3
 800bb7c:	bfb8      	it	lt
 800bb7e:	4618      	movlt	r0, r3
 800bb80:	e7a4      	b.n	800bacc <_printf_i+0x168>
 800bb82:	2301      	movs	r3, #1
 800bb84:	4632      	mov	r2, r6
 800bb86:	4649      	mov	r1, r9
 800bb88:	4640      	mov	r0, r8
 800bb8a:	47d0      	blx	sl
 800bb8c:	3001      	adds	r0, #1
 800bb8e:	d09b      	beq.n	800bac8 <_printf_i+0x164>
 800bb90:	3501      	adds	r5, #1
 800bb92:	68e3      	ldr	r3, [r4, #12]
 800bb94:	9903      	ldr	r1, [sp, #12]
 800bb96:	1a5b      	subs	r3, r3, r1
 800bb98:	42ab      	cmp	r3, r5
 800bb9a:	dcf2      	bgt.n	800bb82 <_printf_i+0x21e>
 800bb9c:	e7eb      	b.n	800bb76 <_printf_i+0x212>
 800bb9e:	2500      	movs	r5, #0
 800bba0:	f104 0619 	add.w	r6, r4, #25
 800bba4:	e7f5      	b.n	800bb92 <_printf_i+0x22e>
 800bba6:	bf00      	nop
 800bba8:	0800de96 	.word	0x0800de96
 800bbac:	0800dea7 	.word	0x0800dea7

0800bbb0 <_strtol_l.constprop.0>:
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbb6:	d001      	beq.n	800bbbc <_strtol_l.constprop.0+0xc>
 800bbb8:	2b24      	cmp	r3, #36	; 0x24
 800bbba:	d906      	bls.n	800bbca <_strtol_l.constprop.0+0x1a>
 800bbbc:	f7ff fb4e 	bl	800b25c <__errno>
 800bbc0:	2316      	movs	r3, #22
 800bbc2:	6003      	str	r3, [r0, #0]
 800bbc4:	2000      	movs	r0, #0
 800bbc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bcb0 <_strtol_l.constprop.0+0x100>
 800bbce:	460d      	mov	r5, r1
 800bbd0:	462e      	mov	r6, r5
 800bbd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bbd6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bbda:	f017 0708 	ands.w	r7, r7, #8
 800bbde:	d1f7      	bne.n	800bbd0 <_strtol_l.constprop.0+0x20>
 800bbe0:	2c2d      	cmp	r4, #45	; 0x2d
 800bbe2:	d132      	bne.n	800bc4a <_strtol_l.constprop.0+0x9a>
 800bbe4:	782c      	ldrb	r4, [r5, #0]
 800bbe6:	2701      	movs	r7, #1
 800bbe8:	1cb5      	adds	r5, r6, #2
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d05b      	beq.n	800bca6 <_strtol_l.constprop.0+0xf6>
 800bbee:	2b10      	cmp	r3, #16
 800bbf0:	d109      	bne.n	800bc06 <_strtol_l.constprop.0+0x56>
 800bbf2:	2c30      	cmp	r4, #48	; 0x30
 800bbf4:	d107      	bne.n	800bc06 <_strtol_l.constprop.0+0x56>
 800bbf6:	782c      	ldrb	r4, [r5, #0]
 800bbf8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bbfc:	2c58      	cmp	r4, #88	; 0x58
 800bbfe:	d14d      	bne.n	800bc9c <_strtol_l.constprop.0+0xec>
 800bc00:	786c      	ldrb	r4, [r5, #1]
 800bc02:	2310      	movs	r3, #16
 800bc04:	3502      	adds	r5, #2
 800bc06:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bc0a:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc0e:	f04f 0c00 	mov.w	ip, #0
 800bc12:	fbb8 f9f3 	udiv	r9, r8, r3
 800bc16:	4666      	mov	r6, ip
 800bc18:	fb03 8a19 	mls	sl, r3, r9, r8
 800bc1c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bc20:	f1be 0f09 	cmp.w	lr, #9
 800bc24:	d816      	bhi.n	800bc54 <_strtol_l.constprop.0+0xa4>
 800bc26:	4674      	mov	r4, lr
 800bc28:	42a3      	cmp	r3, r4
 800bc2a:	dd24      	ble.n	800bc76 <_strtol_l.constprop.0+0xc6>
 800bc2c:	f1bc 0f00 	cmp.w	ip, #0
 800bc30:	db1e      	blt.n	800bc70 <_strtol_l.constprop.0+0xc0>
 800bc32:	45b1      	cmp	r9, r6
 800bc34:	d31c      	bcc.n	800bc70 <_strtol_l.constprop.0+0xc0>
 800bc36:	d101      	bne.n	800bc3c <_strtol_l.constprop.0+0x8c>
 800bc38:	45a2      	cmp	sl, r4
 800bc3a:	db19      	blt.n	800bc70 <_strtol_l.constprop.0+0xc0>
 800bc3c:	fb06 4603 	mla	r6, r6, r3, r4
 800bc40:	f04f 0c01 	mov.w	ip, #1
 800bc44:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc48:	e7e8      	b.n	800bc1c <_strtol_l.constprop.0+0x6c>
 800bc4a:	2c2b      	cmp	r4, #43	; 0x2b
 800bc4c:	bf04      	itt	eq
 800bc4e:	782c      	ldrbeq	r4, [r5, #0]
 800bc50:	1cb5      	addeq	r5, r6, #2
 800bc52:	e7ca      	b.n	800bbea <_strtol_l.constprop.0+0x3a>
 800bc54:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bc58:	f1be 0f19 	cmp.w	lr, #25
 800bc5c:	d801      	bhi.n	800bc62 <_strtol_l.constprop.0+0xb2>
 800bc5e:	3c37      	subs	r4, #55	; 0x37
 800bc60:	e7e2      	b.n	800bc28 <_strtol_l.constprop.0+0x78>
 800bc62:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bc66:	f1be 0f19 	cmp.w	lr, #25
 800bc6a:	d804      	bhi.n	800bc76 <_strtol_l.constprop.0+0xc6>
 800bc6c:	3c57      	subs	r4, #87	; 0x57
 800bc6e:	e7db      	b.n	800bc28 <_strtol_l.constprop.0+0x78>
 800bc70:	f04f 3cff 	mov.w	ip, #4294967295
 800bc74:	e7e6      	b.n	800bc44 <_strtol_l.constprop.0+0x94>
 800bc76:	f1bc 0f00 	cmp.w	ip, #0
 800bc7a:	da05      	bge.n	800bc88 <_strtol_l.constprop.0+0xd8>
 800bc7c:	2322      	movs	r3, #34	; 0x22
 800bc7e:	6003      	str	r3, [r0, #0]
 800bc80:	4646      	mov	r6, r8
 800bc82:	b942      	cbnz	r2, 800bc96 <_strtol_l.constprop.0+0xe6>
 800bc84:	4630      	mov	r0, r6
 800bc86:	e79e      	b.n	800bbc6 <_strtol_l.constprop.0+0x16>
 800bc88:	b107      	cbz	r7, 800bc8c <_strtol_l.constprop.0+0xdc>
 800bc8a:	4276      	negs	r6, r6
 800bc8c:	2a00      	cmp	r2, #0
 800bc8e:	d0f9      	beq.n	800bc84 <_strtol_l.constprop.0+0xd4>
 800bc90:	f1bc 0f00 	cmp.w	ip, #0
 800bc94:	d000      	beq.n	800bc98 <_strtol_l.constprop.0+0xe8>
 800bc96:	1e69      	subs	r1, r5, #1
 800bc98:	6011      	str	r1, [r2, #0]
 800bc9a:	e7f3      	b.n	800bc84 <_strtol_l.constprop.0+0xd4>
 800bc9c:	2430      	movs	r4, #48	; 0x30
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d1b1      	bne.n	800bc06 <_strtol_l.constprop.0+0x56>
 800bca2:	2308      	movs	r3, #8
 800bca4:	e7af      	b.n	800bc06 <_strtol_l.constprop.0+0x56>
 800bca6:	2c30      	cmp	r4, #48	; 0x30
 800bca8:	d0a5      	beq.n	800bbf6 <_strtol_l.constprop.0+0x46>
 800bcaa:	230a      	movs	r3, #10
 800bcac:	e7ab      	b.n	800bc06 <_strtol_l.constprop.0+0x56>
 800bcae:	bf00      	nop
 800bcb0:	0800deb9 	.word	0x0800deb9

0800bcb4 <strtol>:
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	460a      	mov	r2, r1
 800bcb8:	4601      	mov	r1, r0
 800bcba:	4802      	ldr	r0, [pc, #8]	; (800bcc4 <strtol+0x10>)
 800bcbc:	6800      	ldr	r0, [r0, #0]
 800bcbe:	f7ff bf77 	b.w	800bbb0 <_strtol_l.constprop.0>
 800bcc2:	bf00      	nop
 800bcc4:	200000fc 	.word	0x200000fc

0800bcc8 <quorem>:
 800bcc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bccc:	6903      	ldr	r3, [r0, #16]
 800bcce:	690c      	ldr	r4, [r1, #16]
 800bcd0:	42a3      	cmp	r3, r4
 800bcd2:	4607      	mov	r7, r0
 800bcd4:	f2c0 8081 	blt.w	800bdda <quorem+0x112>
 800bcd8:	3c01      	subs	r4, #1
 800bcda:	f101 0814 	add.w	r8, r1, #20
 800bcde:	f100 0514 	add.w	r5, r0, #20
 800bce2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bce6:	9301      	str	r3, [sp, #4]
 800bce8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bcec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bcf8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bcfc:	fbb2 f6f3 	udiv	r6, r2, r3
 800bd00:	d331      	bcc.n	800bd66 <quorem+0x9e>
 800bd02:	f04f 0e00 	mov.w	lr, #0
 800bd06:	4640      	mov	r0, r8
 800bd08:	46ac      	mov	ip, r5
 800bd0a:	46f2      	mov	sl, lr
 800bd0c:	f850 2b04 	ldr.w	r2, [r0], #4
 800bd10:	b293      	uxth	r3, r2
 800bd12:	fb06 e303 	mla	r3, r6, r3, lr
 800bd16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	ebaa 0303 	sub.w	r3, sl, r3
 800bd20:	f8dc a000 	ldr.w	sl, [ip]
 800bd24:	0c12      	lsrs	r2, r2, #16
 800bd26:	fa13 f38a 	uxtah	r3, r3, sl
 800bd2a:	fb06 e202 	mla	r2, r6, r2, lr
 800bd2e:	9300      	str	r3, [sp, #0]
 800bd30:	9b00      	ldr	r3, [sp, #0]
 800bd32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bd36:	b292      	uxth	r2, r2
 800bd38:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bd3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd40:	f8bd 3000 	ldrh.w	r3, [sp]
 800bd44:	4581      	cmp	r9, r0
 800bd46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd4a:	f84c 3b04 	str.w	r3, [ip], #4
 800bd4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bd52:	d2db      	bcs.n	800bd0c <quorem+0x44>
 800bd54:	f855 300b 	ldr.w	r3, [r5, fp]
 800bd58:	b92b      	cbnz	r3, 800bd66 <quorem+0x9e>
 800bd5a:	9b01      	ldr	r3, [sp, #4]
 800bd5c:	3b04      	subs	r3, #4
 800bd5e:	429d      	cmp	r5, r3
 800bd60:	461a      	mov	r2, r3
 800bd62:	d32e      	bcc.n	800bdc2 <quorem+0xfa>
 800bd64:	613c      	str	r4, [r7, #16]
 800bd66:	4638      	mov	r0, r7
 800bd68:	f001 f8b6 	bl	800ced8 <__mcmp>
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	db24      	blt.n	800bdba <quorem+0xf2>
 800bd70:	3601      	adds	r6, #1
 800bd72:	4628      	mov	r0, r5
 800bd74:	f04f 0c00 	mov.w	ip, #0
 800bd78:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd7c:	f8d0 e000 	ldr.w	lr, [r0]
 800bd80:	b293      	uxth	r3, r2
 800bd82:	ebac 0303 	sub.w	r3, ip, r3
 800bd86:	0c12      	lsrs	r2, r2, #16
 800bd88:	fa13 f38e 	uxtah	r3, r3, lr
 800bd8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bd90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd9a:	45c1      	cmp	r9, r8
 800bd9c:	f840 3b04 	str.w	r3, [r0], #4
 800bda0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bda4:	d2e8      	bcs.n	800bd78 <quorem+0xb0>
 800bda6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bdaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdae:	b922      	cbnz	r2, 800bdba <quorem+0xf2>
 800bdb0:	3b04      	subs	r3, #4
 800bdb2:	429d      	cmp	r5, r3
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	d30a      	bcc.n	800bdce <quorem+0x106>
 800bdb8:	613c      	str	r4, [r7, #16]
 800bdba:	4630      	mov	r0, r6
 800bdbc:	b003      	add	sp, #12
 800bdbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc2:	6812      	ldr	r2, [r2, #0]
 800bdc4:	3b04      	subs	r3, #4
 800bdc6:	2a00      	cmp	r2, #0
 800bdc8:	d1cc      	bne.n	800bd64 <quorem+0x9c>
 800bdca:	3c01      	subs	r4, #1
 800bdcc:	e7c7      	b.n	800bd5e <quorem+0x96>
 800bdce:	6812      	ldr	r2, [r2, #0]
 800bdd0:	3b04      	subs	r3, #4
 800bdd2:	2a00      	cmp	r2, #0
 800bdd4:	d1f0      	bne.n	800bdb8 <quorem+0xf0>
 800bdd6:	3c01      	subs	r4, #1
 800bdd8:	e7eb      	b.n	800bdb2 <quorem+0xea>
 800bdda:	2000      	movs	r0, #0
 800bddc:	e7ee      	b.n	800bdbc <quorem+0xf4>
	...

0800bde0 <_dtoa_r>:
 800bde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde4:	ed2d 8b04 	vpush	{d8-d9}
 800bde8:	ec57 6b10 	vmov	r6, r7, d0
 800bdec:	b093      	sub	sp, #76	; 0x4c
 800bdee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bdf0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bdf4:	9106      	str	r1, [sp, #24]
 800bdf6:	ee10 aa10 	vmov	sl, s0
 800bdfa:	4604      	mov	r4, r0
 800bdfc:	9209      	str	r2, [sp, #36]	; 0x24
 800bdfe:	930c      	str	r3, [sp, #48]	; 0x30
 800be00:	46bb      	mov	fp, r7
 800be02:	b975      	cbnz	r5, 800be22 <_dtoa_r+0x42>
 800be04:	2010      	movs	r0, #16
 800be06:	f000 fddd 	bl	800c9c4 <malloc>
 800be0a:	4602      	mov	r2, r0
 800be0c:	6260      	str	r0, [r4, #36]	; 0x24
 800be0e:	b920      	cbnz	r0, 800be1a <_dtoa_r+0x3a>
 800be10:	4ba7      	ldr	r3, [pc, #668]	; (800c0b0 <_dtoa_r+0x2d0>)
 800be12:	21ea      	movs	r1, #234	; 0xea
 800be14:	48a7      	ldr	r0, [pc, #668]	; (800c0b4 <_dtoa_r+0x2d4>)
 800be16:	f001 fa67 	bl	800d2e8 <__assert_func>
 800be1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800be1e:	6005      	str	r5, [r0, #0]
 800be20:	60c5      	str	r5, [r0, #12]
 800be22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be24:	6819      	ldr	r1, [r3, #0]
 800be26:	b151      	cbz	r1, 800be3e <_dtoa_r+0x5e>
 800be28:	685a      	ldr	r2, [r3, #4]
 800be2a:	604a      	str	r2, [r1, #4]
 800be2c:	2301      	movs	r3, #1
 800be2e:	4093      	lsls	r3, r2
 800be30:	608b      	str	r3, [r1, #8]
 800be32:	4620      	mov	r0, r4
 800be34:	f000 fe0e 	bl	800ca54 <_Bfree>
 800be38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be3a:	2200      	movs	r2, #0
 800be3c:	601a      	str	r2, [r3, #0]
 800be3e:	1e3b      	subs	r3, r7, #0
 800be40:	bfaa      	itet	ge
 800be42:	2300      	movge	r3, #0
 800be44:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800be48:	f8c8 3000 	strge.w	r3, [r8]
 800be4c:	4b9a      	ldr	r3, [pc, #616]	; (800c0b8 <_dtoa_r+0x2d8>)
 800be4e:	bfbc      	itt	lt
 800be50:	2201      	movlt	r2, #1
 800be52:	f8c8 2000 	strlt.w	r2, [r8]
 800be56:	ea33 030b 	bics.w	r3, r3, fp
 800be5a:	d11b      	bne.n	800be94 <_dtoa_r+0xb4>
 800be5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be5e:	f242 730f 	movw	r3, #9999	; 0x270f
 800be62:	6013      	str	r3, [r2, #0]
 800be64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be68:	4333      	orrs	r3, r6
 800be6a:	f000 8592 	beq.w	800c992 <_dtoa_r+0xbb2>
 800be6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be70:	b963      	cbnz	r3, 800be8c <_dtoa_r+0xac>
 800be72:	4b92      	ldr	r3, [pc, #584]	; (800c0bc <_dtoa_r+0x2dc>)
 800be74:	e022      	b.n	800bebc <_dtoa_r+0xdc>
 800be76:	4b92      	ldr	r3, [pc, #584]	; (800c0c0 <_dtoa_r+0x2e0>)
 800be78:	9301      	str	r3, [sp, #4]
 800be7a:	3308      	adds	r3, #8
 800be7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800be7e:	6013      	str	r3, [r2, #0]
 800be80:	9801      	ldr	r0, [sp, #4]
 800be82:	b013      	add	sp, #76	; 0x4c
 800be84:	ecbd 8b04 	vpop	{d8-d9}
 800be88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be8c:	4b8b      	ldr	r3, [pc, #556]	; (800c0bc <_dtoa_r+0x2dc>)
 800be8e:	9301      	str	r3, [sp, #4]
 800be90:	3303      	adds	r3, #3
 800be92:	e7f3      	b.n	800be7c <_dtoa_r+0x9c>
 800be94:	2200      	movs	r2, #0
 800be96:	2300      	movs	r3, #0
 800be98:	4650      	mov	r0, sl
 800be9a:	4659      	mov	r1, fp
 800be9c:	f7f4 fe1c 	bl	8000ad8 <__aeabi_dcmpeq>
 800bea0:	ec4b ab19 	vmov	d9, sl, fp
 800bea4:	4680      	mov	r8, r0
 800bea6:	b158      	cbz	r0, 800bec0 <_dtoa_r+0xe0>
 800bea8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800beaa:	2301      	movs	r3, #1
 800beac:	6013      	str	r3, [r2, #0]
 800beae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	f000 856b 	beq.w	800c98c <_dtoa_r+0xbac>
 800beb6:	4883      	ldr	r0, [pc, #524]	; (800c0c4 <_dtoa_r+0x2e4>)
 800beb8:	6018      	str	r0, [r3, #0]
 800beba:	1e43      	subs	r3, r0, #1
 800bebc:	9301      	str	r3, [sp, #4]
 800bebe:	e7df      	b.n	800be80 <_dtoa_r+0xa0>
 800bec0:	ec4b ab10 	vmov	d0, sl, fp
 800bec4:	aa10      	add	r2, sp, #64	; 0x40
 800bec6:	a911      	add	r1, sp, #68	; 0x44
 800bec8:	4620      	mov	r0, r4
 800beca:	f001 f8ab 	bl	800d024 <__d2b>
 800bece:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bed2:	ee08 0a10 	vmov	s16, r0
 800bed6:	2d00      	cmp	r5, #0
 800bed8:	f000 8084 	beq.w	800bfe4 <_dtoa_r+0x204>
 800bedc:	ee19 3a90 	vmov	r3, s19
 800bee0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bee4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bee8:	4656      	mov	r6, sl
 800beea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800beee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bef2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bef6:	4b74      	ldr	r3, [pc, #464]	; (800c0c8 <_dtoa_r+0x2e8>)
 800bef8:	2200      	movs	r2, #0
 800befa:	4630      	mov	r0, r6
 800befc:	4639      	mov	r1, r7
 800befe:	f7f4 f9cb 	bl	8000298 <__aeabi_dsub>
 800bf02:	a365      	add	r3, pc, #404	; (adr r3, 800c098 <_dtoa_r+0x2b8>)
 800bf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf08:	f7f4 fb7e 	bl	8000608 <__aeabi_dmul>
 800bf0c:	a364      	add	r3, pc, #400	; (adr r3, 800c0a0 <_dtoa_r+0x2c0>)
 800bf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf12:	f7f4 f9c3 	bl	800029c <__adddf3>
 800bf16:	4606      	mov	r6, r0
 800bf18:	4628      	mov	r0, r5
 800bf1a:	460f      	mov	r7, r1
 800bf1c:	f7f4 fb0a 	bl	8000534 <__aeabi_i2d>
 800bf20:	a361      	add	r3, pc, #388	; (adr r3, 800c0a8 <_dtoa_r+0x2c8>)
 800bf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf26:	f7f4 fb6f 	bl	8000608 <__aeabi_dmul>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	4630      	mov	r0, r6
 800bf30:	4639      	mov	r1, r7
 800bf32:	f7f4 f9b3 	bl	800029c <__adddf3>
 800bf36:	4606      	mov	r6, r0
 800bf38:	460f      	mov	r7, r1
 800bf3a:	f7f4 fe15 	bl	8000b68 <__aeabi_d2iz>
 800bf3e:	2200      	movs	r2, #0
 800bf40:	9000      	str	r0, [sp, #0]
 800bf42:	2300      	movs	r3, #0
 800bf44:	4630      	mov	r0, r6
 800bf46:	4639      	mov	r1, r7
 800bf48:	f7f4 fdd0 	bl	8000aec <__aeabi_dcmplt>
 800bf4c:	b150      	cbz	r0, 800bf64 <_dtoa_r+0x184>
 800bf4e:	9800      	ldr	r0, [sp, #0]
 800bf50:	f7f4 faf0 	bl	8000534 <__aeabi_i2d>
 800bf54:	4632      	mov	r2, r6
 800bf56:	463b      	mov	r3, r7
 800bf58:	f7f4 fdbe 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf5c:	b910      	cbnz	r0, 800bf64 <_dtoa_r+0x184>
 800bf5e:	9b00      	ldr	r3, [sp, #0]
 800bf60:	3b01      	subs	r3, #1
 800bf62:	9300      	str	r3, [sp, #0]
 800bf64:	9b00      	ldr	r3, [sp, #0]
 800bf66:	2b16      	cmp	r3, #22
 800bf68:	d85a      	bhi.n	800c020 <_dtoa_r+0x240>
 800bf6a:	9a00      	ldr	r2, [sp, #0]
 800bf6c:	4b57      	ldr	r3, [pc, #348]	; (800c0cc <_dtoa_r+0x2ec>)
 800bf6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf76:	ec51 0b19 	vmov	r0, r1, d9
 800bf7a:	f7f4 fdb7 	bl	8000aec <__aeabi_dcmplt>
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	d050      	beq.n	800c024 <_dtoa_r+0x244>
 800bf82:	9b00      	ldr	r3, [sp, #0]
 800bf84:	3b01      	subs	r3, #1
 800bf86:	9300      	str	r3, [sp, #0]
 800bf88:	2300      	movs	r3, #0
 800bf8a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf8e:	1b5d      	subs	r5, r3, r5
 800bf90:	1e6b      	subs	r3, r5, #1
 800bf92:	9305      	str	r3, [sp, #20]
 800bf94:	bf45      	ittet	mi
 800bf96:	f1c5 0301 	rsbmi	r3, r5, #1
 800bf9a:	9304      	strmi	r3, [sp, #16]
 800bf9c:	2300      	movpl	r3, #0
 800bf9e:	2300      	movmi	r3, #0
 800bfa0:	bf4c      	ite	mi
 800bfa2:	9305      	strmi	r3, [sp, #20]
 800bfa4:	9304      	strpl	r3, [sp, #16]
 800bfa6:	9b00      	ldr	r3, [sp, #0]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	db3d      	blt.n	800c028 <_dtoa_r+0x248>
 800bfac:	9b05      	ldr	r3, [sp, #20]
 800bfae:	9a00      	ldr	r2, [sp, #0]
 800bfb0:	920a      	str	r2, [sp, #40]	; 0x28
 800bfb2:	4413      	add	r3, r2
 800bfb4:	9305      	str	r3, [sp, #20]
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	9307      	str	r3, [sp, #28]
 800bfba:	9b06      	ldr	r3, [sp, #24]
 800bfbc:	2b09      	cmp	r3, #9
 800bfbe:	f200 8089 	bhi.w	800c0d4 <_dtoa_r+0x2f4>
 800bfc2:	2b05      	cmp	r3, #5
 800bfc4:	bfc4      	itt	gt
 800bfc6:	3b04      	subgt	r3, #4
 800bfc8:	9306      	strgt	r3, [sp, #24]
 800bfca:	9b06      	ldr	r3, [sp, #24]
 800bfcc:	f1a3 0302 	sub.w	r3, r3, #2
 800bfd0:	bfcc      	ite	gt
 800bfd2:	2500      	movgt	r5, #0
 800bfd4:	2501      	movle	r5, #1
 800bfd6:	2b03      	cmp	r3, #3
 800bfd8:	f200 8087 	bhi.w	800c0ea <_dtoa_r+0x30a>
 800bfdc:	e8df f003 	tbb	[pc, r3]
 800bfe0:	59383a2d 	.word	0x59383a2d
 800bfe4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bfe8:	441d      	add	r5, r3
 800bfea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bfee:	2b20      	cmp	r3, #32
 800bff0:	bfc1      	itttt	gt
 800bff2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bff6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bffa:	fa0b f303 	lslgt.w	r3, fp, r3
 800bffe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c002:	bfda      	itte	le
 800c004:	f1c3 0320 	rsble	r3, r3, #32
 800c008:	fa06 f003 	lslle.w	r0, r6, r3
 800c00c:	4318      	orrgt	r0, r3
 800c00e:	f7f4 fa81 	bl	8000514 <__aeabi_ui2d>
 800c012:	2301      	movs	r3, #1
 800c014:	4606      	mov	r6, r0
 800c016:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c01a:	3d01      	subs	r5, #1
 800c01c:	930e      	str	r3, [sp, #56]	; 0x38
 800c01e:	e76a      	b.n	800bef6 <_dtoa_r+0x116>
 800c020:	2301      	movs	r3, #1
 800c022:	e7b2      	b.n	800bf8a <_dtoa_r+0x1aa>
 800c024:	900b      	str	r0, [sp, #44]	; 0x2c
 800c026:	e7b1      	b.n	800bf8c <_dtoa_r+0x1ac>
 800c028:	9b04      	ldr	r3, [sp, #16]
 800c02a:	9a00      	ldr	r2, [sp, #0]
 800c02c:	1a9b      	subs	r3, r3, r2
 800c02e:	9304      	str	r3, [sp, #16]
 800c030:	4253      	negs	r3, r2
 800c032:	9307      	str	r3, [sp, #28]
 800c034:	2300      	movs	r3, #0
 800c036:	930a      	str	r3, [sp, #40]	; 0x28
 800c038:	e7bf      	b.n	800bfba <_dtoa_r+0x1da>
 800c03a:	2300      	movs	r3, #0
 800c03c:	9308      	str	r3, [sp, #32]
 800c03e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c040:	2b00      	cmp	r3, #0
 800c042:	dc55      	bgt.n	800c0f0 <_dtoa_r+0x310>
 800c044:	2301      	movs	r3, #1
 800c046:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c04a:	461a      	mov	r2, r3
 800c04c:	9209      	str	r2, [sp, #36]	; 0x24
 800c04e:	e00c      	b.n	800c06a <_dtoa_r+0x28a>
 800c050:	2301      	movs	r3, #1
 800c052:	e7f3      	b.n	800c03c <_dtoa_r+0x25c>
 800c054:	2300      	movs	r3, #0
 800c056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c058:	9308      	str	r3, [sp, #32]
 800c05a:	9b00      	ldr	r3, [sp, #0]
 800c05c:	4413      	add	r3, r2
 800c05e:	9302      	str	r3, [sp, #8]
 800c060:	3301      	adds	r3, #1
 800c062:	2b01      	cmp	r3, #1
 800c064:	9303      	str	r3, [sp, #12]
 800c066:	bfb8      	it	lt
 800c068:	2301      	movlt	r3, #1
 800c06a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c06c:	2200      	movs	r2, #0
 800c06e:	6042      	str	r2, [r0, #4]
 800c070:	2204      	movs	r2, #4
 800c072:	f102 0614 	add.w	r6, r2, #20
 800c076:	429e      	cmp	r6, r3
 800c078:	6841      	ldr	r1, [r0, #4]
 800c07a:	d93d      	bls.n	800c0f8 <_dtoa_r+0x318>
 800c07c:	4620      	mov	r0, r4
 800c07e:	f000 fca9 	bl	800c9d4 <_Balloc>
 800c082:	9001      	str	r0, [sp, #4]
 800c084:	2800      	cmp	r0, #0
 800c086:	d13b      	bne.n	800c100 <_dtoa_r+0x320>
 800c088:	4b11      	ldr	r3, [pc, #68]	; (800c0d0 <_dtoa_r+0x2f0>)
 800c08a:	4602      	mov	r2, r0
 800c08c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c090:	e6c0      	b.n	800be14 <_dtoa_r+0x34>
 800c092:	2301      	movs	r3, #1
 800c094:	e7df      	b.n	800c056 <_dtoa_r+0x276>
 800c096:	bf00      	nop
 800c098:	636f4361 	.word	0x636f4361
 800c09c:	3fd287a7 	.word	0x3fd287a7
 800c0a0:	8b60c8b3 	.word	0x8b60c8b3
 800c0a4:	3fc68a28 	.word	0x3fc68a28
 800c0a8:	509f79fb 	.word	0x509f79fb
 800c0ac:	3fd34413 	.word	0x3fd34413
 800c0b0:	0800dfc6 	.word	0x0800dfc6
 800c0b4:	0800dfdd 	.word	0x0800dfdd
 800c0b8:	7ff00000 	.word	0x7ff00000
 800c0bc:	0800dfc2 	.word	0x0800dfc2
 800c0c0:	0800dfb9 	.word	0x0800dfb9
 800c0c4:	0800de95 	.word	0x0800de95
 800c0c8:	3ff80000 	.word	0x3ff80000
 800c0cc:	0800e0d0 	.word	0x0800e0d0
 800c0d0:	0800e038 	.word	0x0800e038
 800c0d4:	2501      	movs	r5, #1
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	9306      	str	r3, [sp, #24]
 800c0da:	9508      	str	r5, [sp, #32]
 800c0dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c0e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	2312      	movs	r3, #18
 800c0e8:	e7b0      	b.n	800c04c <_dtoa_r+0x26c>
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	9308      	str	r3, [sp, #32]
 800c0ee:	e7f5      	b.n	800c0dc <_dtoa_r+0x2fc>
 800c0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c0f6:	e7b8      	b.n	800c06a <_dtoa_r+0x28a>
 800c0f8:	3101      	adds	r1, #1
 800c0fa:	6041      	str	r1, [r0, #4]
 800c0fc:	0052      	lsls	r2, r2, #1
 800c0fe:	e7b8      	b.n	800c072 <_dtoa_r+0x292>
 800c100:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c102:	9a01      	ldr	r2, [sp, #4]
 800c104:	601a      	str	r2, [r3, #0]
 800c106:	9b03      	ldr	r3, [sp, #12]
 800c108:	2b0e      	cmp	r3, #14
 800c10a:	f200 809d 	bhi.w	800c248 <_dtoa_r+0x468>
 800c10e:	2d00      	cmp	r5, #0
 800c110:	f000 809a 	beq.w	800c248 <_dtoa_r+0x468>
 800c114:	9b00      	ldr	r3, [sp, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	dd32      	ble.n	800c180 <_dtoa_r+0x3a0>
 800c11a:	4ab7      	ldr	r2, [pc, #732]	; (800c3f8 <_dtoa_r+0x618>)
 800c11c:	f003 030f 	and.w	r3, r3, #15
 800c120:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c124:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c128:	9b00      	ldr	r3, [sp, #0]
 800c12a:	05d8      	lsls	r0, r3, #23
 800c12c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c130:	d516      	bpl.n	800c160 <_dtoa_r+0x380>
 800c132:	4bb2      	ldr	r3, [pc, #712]	; (800c3fc <_dtoa_r+0x61c>)
 800c134:	ec51 0b19 	vmov	r0, r1, d9
 800c138:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c13c:	f7f4 fb8e 	bl	800085c <__aeabi_ddiv>
 800c140:	f007 070f 	and.w	r7, r7, #15
 800c144:	4682      	mov	sl, r0
 800c146:	468b      	mov	fp, r1
 800c148:	2503      	movs	r5, #3
 800c14a:	4eac      	ldr	r6, [pc, #688]	; (800c3fc <_dtoa_r+0x61c>)
 800c14c:	b957      	cbnz	r7, 800c164 <_dtoa_r+0x384>
 800c14e:	4642      	mov	r2, r8
 800c150:	464b      	mov	r3, r9
 800c152:	4650      	mov	r0, sl
 800c154:	4659      	mov	r1, fp
 800c156:	f7f4 fb81 	bl	800085c <__aeabi_ddiv>
 800c15a:	4682      	mov	sl, r0
 800c15c:	468b      	mov	fp, r1
 800c15e:	e028      	b.n	800c1b2 <_dtoa_r+0x3d2>
 800c160:	2502      	movs	r5, #2
 800c162:	e7f2      	b.n	800c14a <_dtoa_r+0x36a>
 800c164:	07f9      	lsls	r1, r7, #31
 800c166:	d508      	bpl.n	800c17a <_dtoa_r+0x39a>
 800c168:	4640      	mov	r0, r8
 800c16a:	4649      	mov	r1, r9
 800c16c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c170:	f7f4 fa4a 	bl	8000608 <__aeabi_dmul>
 800c174:	3501      	adds	r5, #1
 800c176:	4680      	mov	r8, r0
 800c178:	4689      	mov	r9, r1
 800c17a:	107f      	asrs	r7, r7, #1
 800c17c:	3608      	adds	r6, #8
 800c17e:	e7e5      	b.n	800c14c <_dtoa_r+0x36c>
 800c180:	f000 809b 	beq.w	800c2ba <_dtoa_r+0x4da>
 800c184:	9b00      	ldr	r3, [sp, #0]
 800c186:	4f9d      	ldr	r7, [pc, #628]	; (800c3fc <_dtoa_r+0x61c>)
 800c188:	425e      	negs	r6, r3
 800c18a:	4b9b      	ldr	r3, [pc, #620]	; (800c3f8 <_dtoa_r+0x618>)
 800c18c:	f006 020f 	and.w	r2, r6, #15
 800c190:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c198:	ec51 0b19 	vmov	r0, r1, d9
 800c19c:	f7f4 fa34 	bl	8000608 <__aeabi_dmul>
 800c1a0:	1136      	asrs	r6, r6, #4
 800c1a2:	4682      	mov	sl, r0
 800c1a4:	468b      	mov	fp, r1
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	2502      	movs	r5, #2
 800c1aa:	2e00      	cmp	r6, #0
 800c1ac:	d17a      	bne.n	800c2a4 <_dtoa_r+0x4c4>
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d1d3      	bne.n	800c15a <_dtoa_r+0x37a>
 800c1b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	f000 8082 	beq.w	800c2be <_dtoa_r+0x4de>
 800c1ba:	4b91      	ldr	r3, [pc, #580]	; (800c400 <_dtoa_r+0x620>)
 800c1bc:	2200      	movs	r2, #0
 800c1be:	4650      	mov	r0, sl
 800c1c0:	4659      	mov	r1, fp
 800c1c2:	f7f4 fc93 	bl	8000aec <__aeabi_dcmplt>
 800c1c6:	2800      	cmp	r0, #0
 800c1c8:	d079      	beq.n	800c2be <_dtoa_r+0x4de>
 800c1ca:	9b03      	ldr	r3, [sp, #12]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d076      	beq.n	800c2be <_dtoa_r+0x4de>
 800c1d0:	9b02      	ldr	r3, [sp, #8]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	dd36      	ble.n	800c244 <_dtoa_r+0x464>
 800c1d6:	9b00      	ldr	r3, [sp, #0]
 800c1d8:	4650      	mov	r0, sl
 800c1da:	4659      	mov	r1, fp
 800c1dc:	1e5f      	subs	r7, r3, #1
 800c1de:	2200      	movs	r2, #0
 800c1e0:	4b88      	ldr	r3, [pc, #544]	; (800c404 <_dtoa_r+0x624>)
 800c1e2:	f7f4 fa11 	bl	8000608 <__aeabi_dmul>
 800c1e6:	9e02      	ldr	r6, [sp, #8]
 800c1e8:	4682      	mov	sl, r0
 800c1ea:	468b      	mov	fp, r1
 800c1ec:	3501      	adds	r5, #1
 800c1ee:	4628      	mov	r0, r5
 800c1f0:	f7f4 f9a0 	bl	8000534 <__aeabi_i2d>
 800c1f4:	4652      	mov	r2, sl
 800c1f6:	465b      	mov	r3, fp
 800c1f8:	f7f4 fa06 	bl	8000608 <__aeabi_dmul>
 800c1fc:	4b82      	ldr	r3, [pc, #520]	; (800c408 <_dtoa_r+0x628>)
 800c1fe:	2200      	movs	r2, #0
 800c200:	f7f4 f84c 	bl	800029c <__adddf3>
 800c204:	46d0      	mov	r8, sl
 800c206:	46d9      	mov	r9, fp
 800c208:	4682      	mov	sl, r0
 800c20a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c20e:	2e00      	cmp	r6, #0
 800c210:	d158      	bne.n	800c2c4 <_dtoa_r+0x4e4>
 800c212:	4b7e      	ldr	r3, [pc, #504]	; (800c40c <_dtoa_r+0x62c>)
 800c214:	2200      	movs	r2, #0
 800c216:	4640      	mov	r0, r8
 800c218:	4649      	mov	r1, r9
 800c21a:	f7f4 f83d 	bl	8000298 <__aeabi_dsub>
 800c21e:	4652      	mov	r2, sl
 800c220:	465b      	mov	r3, fp
 800c222:	4680      	mov	r8, r0
 800c224:	4689      	mov	r9, r1
 800c226:	f7f4 fc7f 	bl	8000b28 <__aeabi_dcmpgt>
 800c22a:	2800      	cmp	r0, #0
 800c22c:	f040 8295 	bne.w	800c75a <_dtoa_r+0x97a>
 800c230:	4652      	mov	r2, sl
 800c232:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c236:	4640      	mov	r0, r8
 800c238:	4649      	mov	r1, r9
 800c23a:	f7f4 fc57 	bl	8000aec <__aeabi_dcmplt>
 800c23e:	2800      	cmp	r0, #0
 800c240:	f040 8289 	bne.w	800c756 <_dtoa_r+0x976>
 800c244:	ec5b ab19 	vmov	sl, fp, d9
 800c248:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	f2c0 8148 	blt.w	800c4e0 <_dtoa_r+0x700>
 800c250:	9a00      	ldr	r2, [sp, #0]
 800c252:	2a0e      	cmp	r2, #14
 800c254:	f300 8144 	bgt.w	800c4e0 <_dtoa_r+0x700>
 800c258:	4b67      	ldr	r3, [pc, #412]	; (800c3f8 <_dtoa_r+0x618>)
 800c25a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c25e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c264:	2b00      	cmp	r3, #0
 800c266:	f280 80d5 	bge.w	800c414 <_dtoa_r+0x634>
 800c26a:	9b03      	ldr	r3, [sp, #12]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	f300 80d1 	bgt.w	800c414 <_dtoa_r+0x634>
 800c272:	f040 826f 	bne.w	800c754 <_dtoa_r+0x974>
 800c276:	4b65      	ldr	r3, [pc, #404]	; (800c40c <_dtoa_r+0x62c>)
 800c278:	2200      	movs	r2, #0
 800c27a:	4640      	mov	r0, r8
 800c27c:	4649      	mov	r1, r9
 800c27e:	f7f4 f9c3 	bl	8000608 <__aeabi_dmul>
 800c282:	4652      	mov	r2, sl
 800c284:	465b      	mov	r3, fp
 800c286:	f7f4 fc45 	bl	8000b14 <__aeabi_dcmpge>
 800c28a:	9e03      	ldr	r6, [sp, #12]
 800c28c:	4637      	mov	r7, r6
 800c28e:	2800      	cmp	r0, #0
 800c290:	f040 8245 	bne.w	800c71e <_dtoa_r+0x93e>
 800c294:	9d01      	ldr	r5, [sp, #4]
 800c296:	2331      	movs	r3, #49	; 0x31
 800c298:	f805 3b01 	strb.w	r3, [r5], #1
 800c29c:	9b00      	ldr	r3, [sp, #0]
 800c29e:	3301      	adds	r3, #1
 800c2a0:	9300      	str	r3, [sp, #0]
 800c2a2:	e240      	b.n	800c726 <_dtoa_r+0x946>
 800c2a4:	07f2      	lsls	r2, r6, #31
 800c2a6:	d505      	bpl.n	800c2b4 <_dtoa_r+0x4d4>
 800c2a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2ac:	f7f4 f9ac 	bl	8000608 <__aeabi_dmul>
 800c2b0:	3501      	adds	r5, #1
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	1076      	asrs	r6, r6, #1
 800c2b6:	3708      	adds	r7, #8
 800c2b8:	e777      	b.n	800c1aa <_dtoa_r+0x3ca>
 800c2ba:	2502      	movs	r5, #2
 800c2bc:	e779      	b.n	800c1b2 <_dtoa_r+0x3d2>
 800c2be:	9f00      	ldr	r7, [sp, #0]
 800c2c0:	9e03      	ldr	r6, [sp, #12]
 800c2c2:	e794      	b.n	800c1ee <_dtoa_r+0x40e>
 800c2c4:	9901      	ldr	r1, [sp, #4]
 800c2c6:	4b4c      	ldr	r3, [pc, #304]	; (800c3f8 <_dtoa_r+0x618>)
 800c2c8:	4431      	add	r1, r6
 800c2ca:	910d      	str	r1, [sp, #52]	; 0x34
 800c2cc:	9908      	ldr	r1, [sp, #32]
 800c2ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c2d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c2d6:	2900      	cmp	r1, #0
 800c2d8:	d043      	beq.n	800c362 <_dtoa_r+0x582>
 800c2da:	494d      	ldr	r1, [pc, #308]	; (800c410 <_dtoa_r+0x630>)
 800c2dc:	2000      	movs	r0, #0
 800c2de:	f7f4 fabd 	bl	800085c <__aeabi_ddiv>
 800c2e2:	4652      	mov	r2, sl
 800c2e4:	465b      	mov	r3, fp
 800c2e6:	f7f3 ffd7 	bl	8000298 <__aeabi_dsub>
 800c2ea:	9d01      	ldr	r5, [sp, #4]
 800c2ec:	4682      	mov	sl, r0
 800c2ee:	468b      	mov	fp, r1
 800c2f0:	4649      	mov	r1, r9
 800c2f2:	4640      	mov	r0, r8
 800c2f4:	f7f4 fc38 	bl	8000b68 <__aeabi_d2iz>
 800c2f8:	4606      	mov	r6, r0
 800c2fa:	f7f4 f91b 	bl	8000534 <__aeabi_i2d>
 800c2fe:	4602      	mov	r2, r0
 800c300:	460b      	mov	r3, r1
 800c302:	4640      	mov	r0, r8
 800c304:	4649      	mov	r1, r9
 800c306:	f7f3 ffc7 	bl	8000298 <__aeabi_dsub>
 800c30a:	3630      	adds	r6, #48	; 0x30
 800c30c:	f805 6b01 	strb.w	r6, [r5], #1
 800c310:	4652      	mov	r2, sl
 800c312:	465b      	mov	r3, fp
 800c314:	4680      	mov	r8, r0
 800c316:	4689      	mov	r9, r1
 800c318:	f7f4 fbe8 	bl	8000aec <__aeabi_dcmplt>
 800c31c:	2800      	cmp	r0, #0
 800c31e:	d163      	bne.n	800c3e8 <_dtoa_r+0x608>
 800c320:	4642      	mov	r2, r8
 800c322:	464b      	mov	r3, r9
 800c324:	4936      	ldr	r1, [pc, #216]	; (800c400 <_dtoa_r+0x620>)
 800c326:	2000      	movs	r0, #0
 800c328:	f7f3 ffb6 	bl	8000298 <__aeabi_dsub>
 800c32c:	4652      	mov	r2, sl
 800c32e:	465b      	mov	r3, fp
 800c330:	f7f4 fbdc 	bl	8000aec <__aeabi_dcmplt>
 800c334:	2800      	cmp	r0, #0
 800c336:	f040 80b5 	bne.w	800c4a4 <_dtoa_r+0x6c4>
 800c33a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c33c:	429d      	cmp	r5, r3
 800c33e:	d081      	beq.n	800c244 <_dtoa_r+0x464>
 800c340:	4b30      	ldr	r3, [pc, #192]	; (800c404 <_dtoa_r+0x624>)
 800c342:	2200      	movs	r2, #0
 800c344:	4650      	mov	r0, sl
 800c346:	4659      	mov	r1, fp
 800c348:	f7f4 f95e 	bl	8000608 <__aeabi_dmul>
 800c34c:	4b2d      	ldr	r3, [pc, #180]	; (800c404 <_dtoa_r+0x624>)
 800c34e:	4682      	mov	sl, r0
 800c350:	468b      	mov	fp, r1
 800c352:	4640      	mov	r0, r8
 800c354:	4649      	mov	r1, r9
 800c356:	2200      	movs	r2, #0
 800c358:	f7f4 f956 	bl	8000608 <__aeabi_dmul>
 800c35c:	4680      	mov	r8, r0
 800c35e:	4689      	mov	r9, r1
 800c360:	e7c6      	b.n	800c2f0 <_dtoa_r+0x510>
 800c362:	4650      	mov	r0, sl
 800c364:	4659      	mov	r1, fp
 800c366:	f7f4 f94f 	bl	8000608 <__aeabi_dmul>
 800c36a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c36c:	9d01      	ldr	r5, [sp, #4]
 800c36e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c370:	4682      	mov	sl, r0
 800c372:	468b      	mov	fp, r1
 800c374:	4649      	mov	r1, r9
 800c376:	4640      	mov	r0, r8
 800c378:	f7f4 fbf6 	bl	8000b68 <__aeabi_d2iz>
 800c37c:	4606      	mov	r6, r0
 800c37e:	f7f4 f8d9 	bl	8000534 <__aeabi_i2d>
 800c382:	3630      	adds	r6, #48	; 0x30
 800c384:	4602      	mov	r2, r0
 800c386:	460b      	mov	r3, r1
 800c388:	4640      	mov	r0, r8
 800c38a:	4649      	mov	r1, r9
 800c38c:	f7f3 ff84 	bl	8000298 <__aeabi_dsub>
 800c390:	f805 6b01 	strb.w	r6, [r5], #1
 800c394:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c396:	429d      	cmp	r5, r3
 800c398:	4680      	mov	r8, r0
 800c39a:	4689      	mov	r9, r1
 800c39c:	f04f 0200 	mov.w	r2, #0
 800c3a0:	d124      	bne.n	800c3ec <_dtoa_r+0x60c>
 800c3a2:	4b1b      	ldr	r3, [pc, #108]	; (800c410 <_dtoa_r+0x630>)
 800c3a4:	4650      	mov	r0, sl
 800c3a6:	4659      	mov	r1, fp
 800c3a8:	f7f3 ff78 	bl	800029c <__adddf3>
 800c3ac:	4602      	mov	r2, r0
 800c3ae:	460b      	mov	r3, r1
 800c3b0:	4640      	mov	r0, r8
 800c3b2:	4649      	mov	r1, r9
 800c3b4:	f7f4 fbb8 	bl	8000b28 <__aeabi_dcmpgt>
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	d173      	bne.n	800c4a4 <_dtoa_r+0x6c4>
 800c3bc:	4652      	mov	r2, sl
 800c3be:	465b      	mov	r3, fp
 800c3c0:	4913      	ldr	r1, [pc, #76]	; (800c410 <_dtoa_r+0x630>)
 800c3c2:	2000      	movs	r0, #0
 800c3c4:	f7f3 ff68 	bl	8000298 <__aeabi_dsub>
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	460b      	mov	r3, r1
 800c3cc:	4640      	mov	r0, r8
 800c3ce:	4649      	mov	r1, r9
 800c3d0:	f7f4 fb8c 	bl	8000aec <__aeabi_dcmplt>
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	f43f af35 	beq.w	800c244 <_dtoa_r+0x464>
 800c3da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c3dc:	1e6b      	subs	r3, r5, #1
 800c3de:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c3e4:	2b30      	cmp	r3, #48	; 0x30
 800c3e6:	d0f8      	beq.n	800c3da <_dtoa_r+0x5fa>
 800c3e8:	9700      	str	r7, [sp, #0]
 800c3ea:	e049      	b.n	800c480 <_dtoa_r+0x6a0>
 800c3ec:	4b05      	ldr	r3, [pc, #20]	; (800c404 <_dtoa_r+0x624>)
 800c3ee:	f7f4 f90b 	bl	8000608 <__aeabi_dmul>
 800c3f2:	4680      	mov	r8, r0
 800c3f4:	4689      	mov	r9, r1
 800c3f6:	e7bd      	b.n	800c374 <_dtoa_r+0x594>
 800c3f8:	0800e0d0 	.word	0x0800e0d0
 800c3fc:	0800e0a8 	.word	0x0800e0a8
 800c400:	3ff00000 	.word	0x3ff00000
 800c404:	40240000 	.word	0x40240000
 800c408:	401c0000 	.word	0x401c0000
 800c40c:	40140000 	.word	0x40140000
 800c410:	3fe00000 	.word	0x3fe00000
 800c414:	9d01      	ldr	r5, [sp, #4]
 800c416:	4656      	mov	r6, sl
 800c418:	465f      	mov	r7, fp
 800c41a:	4642      	mov	r2, r8
 800c41c:	464b      	mov	r3, r9
 800c41e:	4630      	mov	r0, r6
 800c420:	4639      	mov	r1, r7
 800c422:	f7f4 fa1b 	bl	800085c <__aeabi_ddiv>
 800c426:	f7f4 fb9f 	bl	8000b68 <__aeabi_d2iz>
 800c42a:	4682      	mov	sl, r0
 800c42c:	f7f4 f882 	bl	8000534 <__aeabi_i2d>
 800c430:	4642      	mov	r2, r8
 800c432:	464b      	mov	r3, r9
 800c434:	f7f4 f8e8 	bl	8000608 <__aeabi_dmul>
 800c438:	4602      	mov	r2, r0
 800c43a:	460b      	mov	r3, r1
 800c43c:	4630      	mov	r0, r6
 800c43e:	4639      	mov	r1, r7
 800c440:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c444:	f7f3 ff28 	bl	8000298 <__aeabi_dsub>
 800c448:	f805 6b01 	strb.w	r6, [r5], #1
 800c44c:	9e01      	ldr	r6, [sp, #4]
 800c44e:	9f03      	ldr	r7, [sp, #12]
 800c450:	1bae      	subs	r6, r5, r6
 800c452:	42b7      	cmp	r7, r6
 800c454:	4602      	mov	r2, r0
 800c456:	460b      	mov	r3, r1
 800c458:	d135      	bne.n	800c4c6 <_dtoa_r+0x6e6>
 800c45a:	f7f3 ff1f 	bl	800029c <__adddf3>
 800c45e:	4642      	mov	r2, r8
 800c460:	464b      	mov	r3, r9
 800c462:	4606      	mov	r6, r0
 800c464:	460f      	mov	r7, r1
 800c466:	f7f4 fb5f 	bl	8000b28 <__aeabi_dcmpgt>
 800c46a:	b9d0      	cbnz	r0, 800c4a2 <_dtoa_r+0x6c2>
 800c46c:	4642      	mov	r2, r8
 800c46e:	464b      	mov	r3, r9
 800c470:	4630      	mov	r0, r6
 800c472:	4639      	mov	r1, r7
 800c474:	f7f4 fb30 	bl	8000ad8 <__aeabi_dcmpeq>
 800c478:	b110      	cbz	r0, 800c480 <_dtoa_r+0x6a0>
 800c47a:	f01a 0f01 	tst.w	sl, #1
 800c47e:	d110      	bne.n	800c4a2 <_dtoa_r+0x6c2>
 800c480:	4620      	mov	r0, r4
 800c482:	ee18 1a10 	vmov	r1, s16
 800c486:	f000 fae5 	bl	800ca54 <_Bfree>
 800c48a:	2300      	movs	r3, #0
 800c48c:	9800      	ldr	r0, [sp, #0]
 800c48e:	702b      	strb	r3, [r5, #0]
 800c490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c492:	3001      	adds	r0, #1
 800c494:	6018      	str	r0, [r3, #0]
 800c496:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c498:	2b00      	cmp	r3, #0
 800c49a:	f43f acf1 	beq.w	800be80 <_dtoa_r+0xa0>
 800c49e:	601d      	str	r5, [r3, #0]
 800c4a0:	e4ee      	b.n	800be80 <_dtoa_r+0xa0>
 800c4a2:	9f00      	ldr	r7, [sp, #0]
 800c4a4:	462b      	mov	r3, r5
 800c4a6:	461d      	mov	r5, r3
 800c4a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4ac:	2a39      	cmp	r2, #57	; 0x39
 800c4ae:	d106      	bne.n	800c4be <_dtoa_r+0x6de>
 800c4b0:	9a01      	ldr	r2, [sp, #4]
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d1f7      	bne.n	800c4a6 <_dtoa_r+0x6c6>
 800c4b6:	9901      	ldr	r1, [sp, #4]
 800c4b8:	2230      	movs	r2, #48	; 0x30
 800c4ba:	3701      	adds	r7, #1
 800c4bc:	700a      	strb	r2, [r1, #0]
 800c4be:	781a      	ldrb	r2, [r3, #0]
 800c4c0:	3201      	adds	r2, #1
 800c4c2:	701a      	strb	r2, [r3, #0]
 800c4c4:	e790      	b.n	800c3e8 <_dtoa_r+0x608>
 800c4c6:	4ba6      	ldr	r3, [pc, #664]	; (800c760 <_dtoa_r+0x980>)
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	f7f4 f89d 	bl	8000608 <__aeabi_dmul>
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	4606      	mov	r6, r0
 800c4d4:	460f      	mov	r7, r1
 800c4d6:	f7f4 faff 	bl	8000ad8 <__aeabi_dcmpeq>
 800c4da:	2800      	cmp	r0, #0
 800c4dc:	d09d      	beq.n	800c41a <_dtoa_r+0x63a>
 800c4de:	e7cf      	b.n	800c480 <_dtoa_r+0x6a0>
 800c4e0:	9a08      	ldr	r2, [sp, #32]
 800c4e2:	2a00      	cmp	r2, #0
 800c4e4:	f000 80d7 	beq.w	800c696 <_dtoa_r+0x8b6>
 800c4e8:	9a06      	ldr	r2, [sp, #24]
 800c4ea:	2a01      	cmp	r2, #1
 800c4ec:	f300 80ba 	bgt.w	800c664 <_dtoa_r+0x884>
 800c4f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4f2:	2a00      	cmp	r2, #0
 800c4f4:	f000 80b2 	beq.w	800c65c <_dtoa_r+0x87c>
 800c4f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c4fc:	9e07      	ldr	r6, [sp, #28]
 800c4fe:	9d04      	ldr	r5, [sp, #16]
 800c500:	9a04      	ldr	r2, [sp, #16]
 800c502:	441a      	add	r2, r3
 800c504:	9204      	str	r2, [sp, #16]
 800c506:	9a05      	ldr	r2, [sp, #20]
 800c508:	2101      	movs	r1, #1
 800c50a:	441a      	add	r2, r3
 800c50c:	4620      	mov	r0, r4
 800c50e:	9205      	str	r2, [sp, #20]
 800c510:	f000 fb58 	bl	800cbc4 <__i2b>
 800c514:	4607      	mov	r7, r0
 800c516:	2d00      	cmp	r5, #0
 800c518:	dd0c      	ble.n	800c534 <_dtoa_r+0x754>
 800c51a:	9b05      	ldr	r3, [sp, #20]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	dd09      	ble.n	800c534 <_dtoa_r+0x754>
 800c520:	42ab      	cmp	r3, r5
 800c522:	9a04      	ldr	r2, [sp, #16]
 800c524:	bfa8      	it	ge
 800c526:	462b      	movge	r3, r5
 800c528:	1ad2      	subs	r2, r2, r3
 800c52a:	9204      	str	r2, [sp, #16]
 800c52c:	9a05      	ldr	r2, [sp, #20]
 800c52e:	1aed      	subs	r5, r5, r3
 800c530:	1ad3      	subs	r3, r2, r3
 800c532:	9305      	str	r3, [sp, #20]
 800c534:	9b07      	ldr	r3, [sp, #28]
 800c536:	b31b      	cbz	r3, 800c580 <_dtoa_r+0x7a0>
 800c538:	9b08      	ldr	r3, [sp, #32]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	f000 80af 	beq.w	800c69e <_dtoa_r+0x8be>
 800c540:	2e00      	cmp	r6, #0
 800c542:	dd13      	ble.n	800c56c <_dtoa_r+0x78c>
 800c544:	4639      	mov	r1, r7
 800c546:	4632      	mov	r2, r6
 800c548:	4620      	mov	r0, r4
 800c54a:	f000 fbfb 	bl	800cd44 <__pow5mult>
 800c54e:	ee18 2a10 	vmov	r2, s16
 800c552:	4601      	mov	r1, r0
 800c554:	4607      	mov	r7, r0
 800c556:	4620      	mov	r0, r4
 800c558:	f000 fb4a 	bl	800cbf0 <__multiply>
 800c55c:	ee18 1a10 	vmov	r1, s16
 800c560:	4680      	mov	r8, r0
 800c562:	4620      	mov	r0, r4
 800c564:	f000 fa76 	bl	800ca54 <_Bfree>
 800c568:	ee08 8a10 	vmov	s16, r8
 800c56c:	9b07      	ldr	r3, [sp, #28]
 800c56e:	1b9a      	subs	r2, r3, r6
 800c570:	d006      	beq.n	800c580 <_dtoa_r+0x7a0>
 800c572:	ee18 1a10 	vmov	r1, s16
 800c576:	4620      	mov	r0, r4
 800c578:	f000 fbe4 	bl	800cd44 <__pow5mult>
 800c57c:	ee08 0a10 	vmov	s16, r0
 800c580:	2101      	movs	r1, #1
 800c582:	4620      	mov	r0, r4
 800c584:	f000 fb1e 	bl	800cbc4 <__i2b>
 800c588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	4606      	mov	r6, r0
 800c58e:	f340 8088 	ble.w	800c6a2 <_dtoa_r+0x8c2>
 800c592:	461a      	mov	r2, r3
 800c594:	4601      	mov	r1, r0
 800c596:	4620      	mov	r0, r4
 800c598:	f000 fbd4 	bl	800cd44 <__pow5mult>
 800c59c:	9b06      	ldr	r3, [sp, #24]
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	4606      	mov	r6, r0
 800c5a2:	f340 8081 	ble.w	800c6a8 <_dtoa_r+0x8c8>
 800c5a6:	f04f 0800 	mov.w	r8, #0
 800c5aa:	6933      	ldr	r3, [r6, #16]
 800c5ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c5b0:	6918      	ldr	r0, [r3, #16]
 800c5b2:	f000 fab7 	bl	800cb24 <__hi0bits>
 800c5b6:	f1c0 0020 	rsb	r0, r0, #32
 800c5ba:	9b05      	ldr	r3, [sp, #20]
 800c5bc:	4418      	add	r0, r3
 800c5be:	f010 001f 	ands.w	r0, r0, #31
 800c5c2:	f000 8092 	beq.w	800c6ea <_dtoa_r+0x90a>
 800c5c6:	f1c0 0320 	rsb	r3, r0, #32
 800c5ca:	2b04      	cmp	r3, #4
 800c5cc:	f340 808a 	ble.w	800c6e4 <_dtoa_r+0x904>
 800c5d0:	f1c0 001c 	rsb	r0, r0, #28
 800c5d4:	9b04      	ldr	r3, [sp, #16]
 800c5d6:	4403      	add	r3, r0
 800c5d8:	9304      	str	r3, [sp, #16]
 800c5da:	9b05      	ldr	r3, [sp, #20]
 800c5dc:	4403      	add	r3, r0
 800c5de:	4405      	add	r5, r0
 800c5e0:	9305      	str	r3, [sp, #20]
 800c5e2:	9b04      	ldr	r3, [sp, #16]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	dd07      	ble.n	800c5f8 <_dtoa_r+0x818>
 800c5e8:	ee18 1a10 	vmov	r1, s16
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	f000 fc02 	bl	800cdf8 <__lshift>
 800c5f4:	ee08 0a10 	vmov	s16, r0
 800c5f8:	9b05      	ldr	r3, [sp, #20]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	dd05      	ble.n	800c60a <_dtoa_r+0x82a>
 800c5fe:	4631      	mov	r1, r6
 800c600:	461a      	mov	r2, r3
 800c602:	4620      	mov	r0, r4
 800c604:	f000 fbf8 	bl	800cdf8 <__lshift>
 800c608:	4606      	mov	r6, r0
 800c60a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d06e      	beq.n	800c6ee <_dtoa_r+0x90e>
 800c610:	ee18 0a10 	vmov	r0, s16
 800c614:	4631      	mov	r1, r6
 800c616:	f000 fc5f 	bl	800ced8 <__mcmp>
 800c61a:	2800      	cmp	r0, #0
 800c61c:	da67      	bge.n	800c6ee <_dtoa_r+0x90e>
 800c61e:	9b00      	ldr	r3, [sp, #0]
 800c620:	3b01      	subs	r3, #1
 800c622:	ee18 1a10 	vmov	r1, s16
 800c626:	9300      	str	r3, [sp, #0]
 800c628:	220a      	movs	r2, #10
 800c62a:	2300      	movs	r3, #0
 800c62c:	4620      	mov	r0, r4
 800c62e:	f000 fa33 	bl	800ca98 <__multadd>
 800c632:	9b08      	ldr	r3, [sp, #32]
 800c634:	ee08 0a10 	vmov	s16, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	f000 81b1 	beq.w	800c9a0 <_dtoa_r+0xbc0>
 800c63e:	2300      	movs	r3, #0
 800c640:	4639      	mov	r1, r7
 800c642:	220a      	movs	r2, #10
 800c644:	4620      	mov	r0, r4
 800c646:	f000 fa27 	bl	800ca98 <__multadd>
 800c64a:	9b02      	ldr	r3, [sp, #8]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	4607      	mov	r7, r0
 800c650:	f300 808e 	bgt.w	800c770 <_dtoa_r+0x990>
 800c654:	9b06      	ldr	r3, [sp, #24]
 800c656:	2b02      	cmp	r3, #2
 800c658:	dc51      	bgt.n	800c6fe <_dtoa_r+0x91e>
 800c65a:	e089      	b.n	800c770 <_dtoa_r+0x990>
 800c65c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c65e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c662:	e74b      	b.n	800c4fc <_dtoa_r+0x71c>
 800c664:	9b03      	ldr	r3, [sp, #12]
 800c666:	1e5e      	subs	r6, r3, #1
 800c668:	9b07      	ldr	r3, [sp, #28]
 800c66a:	42b3      	cmp	r3, r6
 800c66c:	bfbf      	itttt	lt
 800c66e:	9b07      	ldrlt	r3, [sp, #28]
 800c670:	9607      	strlt	r6, [sp, #28]
 800c672:	1af2      	sublt	r2, r6, r3
 800c674:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c676:	bfb6      	itet	lt
 800c678:	189b      	addlt	r3, r3, r2
 800c67a:	1b9e      	subge	r6, r3, r6
 800c67c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c67e:	9b03      	ldr	r3, [sp, #12]
 800c680:	bfb8      	it	lt
 800c682:	2600      	movlt	r6, #0
 800c684:	2b00      	cmp	r3, #0
 800c686:	bfb7      	itett	lt
 800c688:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c68c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c690:	1a9d      	sublt	r5, r3, r2
 800c692:	2300      	movlt	r3, #0
 800c694:	e734      	b.n	800c500 <_dtoa_r+0x720>
 800c696:	9e07      	ldr	r6, [sp, #28]
 800c698:	9d04      	ldr	r5, [sp, #16]
 800c69a:	9f08      	ldr	r7, [sp, #32]
 800c69c:	e73b      	b.n	800c516 <_dtoa_r+0x736>
 800c69e:	9a07      	ldr	r2, [sp, #28]
 800c6a0:	e767      	b.n	800c572 <_dtoa_r+0x792>
 800c6a2:	9b06      	ldr	r3, [sp, #24]
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	dc18      	bgt.n	800c6da <_dtoa_r+0x8fa>
 800c6a8:	f1ba 0f00 	cmp.w	sl, #0
 800c6ac:	d115      	bne.n	800c6da <_dtoa_r+0x8fa>
 800c6ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c6b2:	b993      	cbnz	r3, 800c6da <_dtoa_r+0x8fa>
 800c6b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c6b8:	0d1b      	lsrs	r3, r3, #20
 800c6ba:	051b      	lsls	r3, r3, #20
 800c6bc:	b183      	cbz	r3, 800c6e0 <_dtoa_r+0x900>
 800c6be:	9b04      	ldr	r3, [sp, #16]
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	9304      	str	r3, [sp, #16]
 800c6c4:	9b05      	ldr	r3, [sp, #20]
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	9305      	str	r3, [sp, #20]
 800c6ca:	f04f 0801 	mov.w	r8, #1
 800c6ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	f47f af6a 	bne.w	800c5aa <_dtoa_r+0x7ca>
 800c6d6:	2001      	movs	r0, #1
 800c6d8:	e76f      	b.n	800c5ba <_dtoa_r+0x7da>
 800c6da:	f04f 0800 	mov.w	r8, #0
 800c6de:	e7f6      	b.n	800c6ce <_dtoa_r+0x8ee>
 800c6e0:	4698      	mov	r8, r3
 800c6e2:	e7f4      	b.n	800c6ce <_dtoa_r+0x8ee>
 800c6e4:	f43f af7d 	beq.w	800c5e2 <_dtoa_r+0x802>
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	301c      	adds	r0, #28
 800c6ec:	e772      	b.n	800c5d4 <_dtoa_r+0x7f4>
 800c6ee:	9b03      	ldr	r3, [sp, #12]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	dc37      	bgt.n	800c764 <_dtoa_r+0x984>
 800c6f4:	9b06      	ldr	r3, [sp, #24]
 800c6f6:	2b02      	cmp	r3, #2
 800c6f8:	dd34      	ble.n	800c764 <_dtoa_r+0x984>
 800c6fa:	9b03      	ldr	r3, [sp, #12]
 800c6fc:	9302      	str	r3, [sp, #8]
 800c6fe:	9b02      	ldr	r3, [sp, #8]
 800c700:	b96b      	cbnz	r3, 800c71e <_dtoa_r+0x93e>
 800c702:	4631      	mov	r1, r6
 800c704:	2205      	movs	r2, #5
 800c706:	4620      	mov	r0, r4
 800c708:	f000 f9c6 	bl	800ca98 <__multadd>
 800c70c:	4601      	mov	r1, r0
 800c70e:	4606      	mov	r6, r0
 800c710:	ee18 0a10 	vmov	r0, s16
 800c714:	f000 fbe0 	bl	800ced8 <__mcmp>
 800c718:	2800      	cmp	r0, #0
 800c71a:	f73f adbb 	bgt.w	800c294 <_dtoa_r+0x4b4>
 800c71e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c720:	9d01      	ldr	r5, [sp, #4]
 800c722:	43db      	mvns	r3, r3
 800c724:	9300      	str	r3, [sp, #0]
 800c726:	f04f 0800 	mov.w	r8, #0
 800c72a:	4631      	mov	r1, r6
 800c72c:	4620      	mov	r0, r4
 800c72e:	f000 f991 	bl	800ca54 <_Bfree>
 800c732:	2f00      	cmp	r7, #0
 800c734:	f43f aea4 	beq.w	800c480 <_dtoa_r+0x6a0>
 800c738:	f1b8 0f00 	cmp.w	r8, #0
 800c73c:	d005      	beq.n	800c74a <_dtoa_r+0x96a>
 800c73e:	45b8      	cmp	r8, r7
 800c740:	d003      	beq.n	800c74a <_dtoa_r+0x96a>
 800c742:	4641      	mov	r1, r8
 800c744:	4620      	mov	r0, r4
 800c746:	f000 f985 	bl	800ca54 <_Bfree>
 800c74a:	4639      	mov	r1, r7
 800c74c:	4620      	mov	r0, r4
 800c74e:	f000 f981 	bl	800ca54 <_Bfree>
 800c752:	e695      	b.n	800c480 <_dtoa_r+0x6a0>
 800c754:	2600      	movs	r6, #0
 800c756:	4637      	mov	r7, r6
 800c758:	e7e1      	b.n	800c71e <_dtoa_r+0x93e>
 800c75a:	9700      	str	r7, [sp, #0]
 800c75c:	4637      	mov	r7, r6
 800c75e:	e599      	b.n	800c294 <_dtoa_r+0x4b4>
 800c760:	40240000 	.word	0x40240000
 800c764:	9b08      	ldr	r3, [sp, #32]
 800c766:	2b00      	cmp	r3, #0
 800c768:	f000 80ca 	beq.w	800c900 <_dtoa_r+0xb20>
 800c76c:	9b03      	ldr	r3, [sp, #12]
 800c76e:	9302      	str	r3, [sp, #8]
 800c770:	2d00      	cmp	r5, #0
 800c772:	dd05      	ble.n	800c780 <_dtoa_r+0x9a0>
 800c774:	4639      	mov	r1, r7
 800c776:	462a      	mov	r2, r5
 800c778:	4620      	mov	r0, r4
 800c77a:	f000 fb3d 	bl	800cdf8 <__lshift>
 800c77e:	4607      	mov	r7, r0
 800c780:	f1b8 0f00 	cmp.w	r8, #0
 800c784:	d05b      	beq.n	800c83e <_dtoa_r+0xa5e>
 800c786:	6879      	ldr	r1, [r7, #4]
 800c788:	4620      	mov	r0, r4
 800c78a:	f000 f923 	bl	800c9d4 <_Balloc>
 800c78e:	4605      	mov	r5, r0
 800c790:	b928      	cbnz	r0, 800c79e <_dtoa_r+0x9be>
 800c792:	4b87      	ldr	r3, [pc, #540]	; (800c9b0 <_dtoa_r+0xbd0>)
 800c794:	4602      	mov	r2, r0
 800c796:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c79a:	f7ff bb3b 	b.w	800be14 <_dtoa_r+0x34>
 800c79e:	693a      	ldr	r2, [r7, #16]
 800c7a0:	3202      	adds	r2, #2
 800c7a2:	0092      	lsls	r2, r2, #2
 800c7a4:	f107 010c 	add.w	r1, r7, #12
 800c7a8:	300c      	adds	r0, #12
 800c7aa:	f7fe fd81 	bl	800b2b0 <memcpy>
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	4629      	mov	r1, r5
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	f000 fb20 	bl	800cdf8 <__lshift>
 800c7b8:	9b01      	ldr	r3, [sp, #4]
 800c7ba:	f103 0901 	add.w	r9, r3, #1
 800c7be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c7c2:	4413      	add	r3, r2
 800c7c4:	9305      	str	r3, [sp, #20]
 800c7c6:	f00a 0301 	and.w	r3, sl, #1
 800c7ca:	46b8      	mov	r8, r7
 800c7cc:	9304      	str	r3, [sp, #16]
 800c7ce:	4607      	mov	r7, r0
 800c7d0:	4631      	mov	r1, r6
 800c7d2:	ee18 0a10 	vmov	r0, s16
 800c7d6:	f7ff fa77 	bl	800bcc8 <quorem>
 800c7da:	4641      	mov	r1, r8
 800c7dc:	9002      	str	r0, [sp, #8]
 800c7de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c7e2:	ee18 0a10 	vmov	r0, s16
 800c7e6:	f000 fb77 	bl	800ced8 <__mcmp>
 800c7ea:	463a      	mov	r2, r7
 800c7ec:	9003      	str	r0, [sp, #12]
 800c7ee:	4631      	mov	r1, r6
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	f000 fb8d 	bl	800cf10 <__mdiff>
 800c7f6:	68c2      	ldr	r2, [r0, #12]
 800c7f8:	f109 3bff 	add.w	fp, r9, #4294967295
 800c7fc:	4605      	mov	r5, r0
 800c7fe:	bb02      	cbnz	r2, 800c842 <_dtoa_r+0xa62>
 800c800:	4601      	mov	r1, r0
 800c802:	ee18 0a10 	vmov	r0, s16
 800c806:	f000 fb67 	bl	800ced8 <__mcmp>
 800c80a:	4602      	mov	r2, r0
 800c80c:	4629      	mov	r1, r5
 800c80e:	4620      	mov	r0, r4
 800c810:	9207      	str	r2, [sp, #28]
 800c812:	f000 f91f 	bl	800ca54 <_Bfree>
 800c816:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c81a:	ea43 0102 	orr.w	r1, r3, r2
 800c81e:	9b04      	ldr	r3, [sp, #16]
 800c820:	430b      	orrs	r3, r1
 800c822:	464d      	mov	r5, r9
 800c824:	d10f      	bne.n	800c846 <_dtoa_r+0xa66>
 800c826:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c82a:	d02a      	beq.n	800c882 <_dtoa_r+0xaa2>
 800c82c:	9b03      	ldr	r3, [sp, #12]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	dd02      	ble.n	800c838 <_dtoa_r+0xa58>
 800c832:	9b02      	ldr	r3, [sp, #8]
 800c834:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c838:	f88b a000 	strb.w	sl, [fp]
 800c83c:	e775      	b.n	800c72a <_dtoa_r+0x94a>
 800c83e:	4638      	mov	r0, r7
 800c840:	e7ba      	b.n	800c7b8 <_dtoa_r+0x9d8>
 800c842:	2201      	movs	r2, #1
 800c844:	e7e2      	b.n	800c80c <_dtoa_r+0xa2c>
 800c846:	9b03      	ldr	r3, [sp, #12]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	db04      	blt.n	800c856 <_dtoa_r+0xa76>
 800c84c:	9906      	ldr	r1, [sp, #24]
 800c84e:	430b      	orrs	r3, r1
 800c850:	9904      	ldr	r1, [sp, #16]
 800c852:	430b      	orrs	r3, r1
 800c854:	d122      	bne.n	800c89c <_dtoa_r+0xabc>
 800c856:	2a00      	cmp	r2, #0
 800c858:	ddee      	ble.n	800c838 <_dtoa_r+0xa58>
 800c85a:	ee18 1a10 	vmov	r1, s16
 800c85e:	2201      	movs	r2, #1
 800c860:	4620      	mov	r0, r4
 800c862:	f000 fac9 	bl	800cdf8 <__lshift>
 800c866:	4631      	mov	r1, r6
 800c868:	ee08 0a10 	vmov	s16, r0
 800c86c:	f000 fb34 	bl	800ced8 <__mcmp>
 800c870:	2800      	cmp	r0, #0
 800c872:	dc03      	bgt.n	800c87c <_dtoa_r+0xa9c>
 800c874:	d1e0      	bne.n	800c838 <_dtoa_r+0xa58>
 800c876:	f01a 0f01 	tst.w	sl, #1
 800c87a:	d0dd      	beq.n	800c838 <_dtoa_r+0xa58>
 800c87c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c880:	d1d7      	bne.n	800c832 <_dtoa_r+0xa52>
 800c882:	2339      	movs	r3, #57	; 0x39
 800c884:	f88b 3000 	strb.w	r3, [fp]
 800c888:	462b      	mov	r3, r5
 800c88a:	461d      	mov	r5, r3
 800c88c:	3b01      	subs	r3, #1
 800c88e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c892:	2a39      	cmp	r2, #57	; 0x39
 800c894:	d071      	beq.n	800c97a <_dtoa_r+0xb9a>
 800c896:	3201      	adds	r2, #1
 800c898:	701a      	strb	r2, [r3, #0]
 800c89a:	e746      	b.n	800c72a <_dtoa_r+0x94a>
 800c89c:	2a00      	cmp	r2, #0
 800c89e:	dd07      	ble.n	800c8b0 <_dtoa_r+0xad0>
 800c8a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c8a4:	d0ed      	beq.n	800c882 <_dtoa_r+0xaa2>
 800c8a6:	f10a 0301 	add.w	r3, sl, #1
 800c8aa:	f88b 3000 	strb.w	r3, [fp]
 800c8ae:	e73c      	b.n	800c72a <_dtoa_r+0x94a>
 800c8b0:	9b05      	ldr	r3, [sp, #20]
 800c8b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c8b6:	4599      	cmp	r9, r3
 800c8b8:	d047      	beq.n	800c94a <_dtoa_r+0xb6a>
 800c8ba:	ee18 1a10 	vmov	r1, s16
 800c8be:	2300      	movs	r3, #0
 800c8c0:	220a      	movs	r2, #10
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	f000 f8e8 	bl	800ca98 <__multadd>
 800c8c8:	45b8      	cmp	r8, r7
 800c8ca:	ee08 0a10 	vmov	s16, r0
 800c8ce:	f04f 0300 	mov.w	r3, #0
 800c8d2:	f04f 020a 	mov.w	r2, #10
 800c8d6:	4641      	mov	r1, r8
 800c8d8:	4620      	mov	r0, r4
 800c8da:	d106      	bne.n	800c8ea <_dtoa_r+0xb0a>
 800c8dc:	f000 f8dc 	bl	800ca98 <__multadd>
 800c8e0:	4680      	mov	r8, r0
 800c8e2:	4607      	mov	r7, r0
 800c8e4:	f109 0901 	add.w	r9, r9, #1
 800c8e8:	e772      	b.n	800c7d0 <_dtoa_r+0x9f0>
 800c8ea:	f000 f8d5 	bl	800ca98 <__multadd>
 800c8ee:	4639      	mov	r1, r7
 800c8f0:	4680      	mov	r8, r0
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	220a      	movs	r2, #10
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	f000 f8ce 	bl	800ca98 <__multadd>
 800c8fc:	4607      	mov	r7, r0
 800c8fe:	e7f1      	b.n	800c8e4 <_dtoa_r+0xb04>
 800c900:	9b03      	ldr	r3, [sp, #12]
 800c902:	9302      	str	r3, [sp, #8]
 800c904:	9d01      	ldr	r5, [sp, #4]
 800c906:	ee18 0a10 	vmov	r0, s16
 800c90a:	4631      	mov	r1, r6
 800c90c:	f7ff f9dc 	bl	800bcc8 <quorem>
 800c910:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c914:	9b01      	ldr	r3, [sp, #4]
 800c916:	f805 ab01 	strb.w	sl, [r5], #1
 800c91a:	1aea      	subs	r2, r5, r3
 800c91c:	9b02      	ldr	r3, [sp, #8]
 800c91e:	4293      	cmp	r3, r2
 800c920:	dd09      	ble.n	800c936 <_dtoa_r+0xb56>
 800c922:	ee18 1a10 	vmov	r1, s16
 800c926:	2300      	movs	r3, #0
 800c928:	220a      	movs	r2, #10
 800c92a:	4620      	mov	r0, r4
 800c92c:	f000 f8b4 	bl	800ca98 <__multadd>
 800c930:	ee08 0a10 	vmov	s16, r0
 800c934:	e7e7      	b.n	800c906 <_dtoa_r+0xb26>
 800c936:	9b02      	ldr	r3, [sp, #8]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	bfc8      	it	gt
 800c93c:	461d      	movgt	r5, r3
 800c93e:	9b01      	ldr	r3, [sp, #4]
 800c940:	bfd8      	it	le
 800c942:	2501      	movle	r5, #1
 800c944:	441d      	add	r5, r3
 800c946:	f04f 0800 	mov.w	r8, #0
 800c94a:	ee18 1a10 	vmov	r1, s16
 800c94e:	2201      	movs	r2, #1
 800c950:	4620      	mov	r0, r4
 800c952:	f000 fa51 	bl	800cdf8 <__lshift>
 800c956:	4631      	mov	r1, r6
 800c958:	ee08 0a10 	vmov	s16, r0
 800c95c:	f000 fabc 	bl	800ced8 <__mcmp>
 800c960:	2800      	cmp	r0, #0
 800c962:	dc91      	bgt.n	800c888 <_dtoa_r+0xaa8>
 800c964:	d102      	bne.n	800c96c <_dtoa_r+0xb8c>
 800c966:	f01a 0f01 	tst.w	sl, #1
 800c96a:	d18d      	bne.n	800c888 <_dtoa_r+0xaa8>
 800c96c:	462b      	mov	r3, r5
 800c96e:	461d      	mov	r5, r3
 800c970:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c974:	2a30      	cmp	r2, #48	; 0x30
 800c976:	d0fa      	beq.n	800c96e <_dtoa_r+0xb8e>
 800c978:	e6d7      	b.n	800c72a <_dtoa_r+0x94a>
 800c97a:	9a01      	ldr	r2, [sp, #4]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d184      	bne.n	800c88a <_dtoa_r+0xaaa>
 800c980:	9b00      	ldr	r3, [sp, #0]
 800c982:	3301      	adds	r3, #1
 800c984:	9300      	str	r3, [sp, #0]
 800c986:	2331      	movs	r3, #49	; 0x31
 800c988:	7013      	strb	r3, [r2, #0]
 800c98a:	e6ce      	b.n	800c72a <_dtoa_r+0x94a>
 800c98c:	4b09      	ldr	r3, [pc, #36]	; (800c9b4 <_dtoa_r+0xbd4>)
 800c98e:	f7ff ba95 	b.w	800bebc <_dtoa_r+0xdc>
 800c992:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c994:	2b00      	cmp	r3, #0
 800c996:	f47f aa6e 	bne.w	800be76 <_dtoa_r+0x96>
 800c99a:	4b07      	ldr	r3, [pc, #28]	; (800c9b8 <_dtoa_r+0xbd8>)
 800c99c:	f7ff ba8e 	b.w	800bebc <_dtoa_r+0xdc>
 800c9a0:	9b02      	ldr	r3, [sp, #8]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	dcae      	bgt.n	800c904 <_dtoa_r+0xb24>
 800c9a6:	9b06      	ldr	r3, [sp, #24]
 800c9a8:	2b02      	cmp	r3, #2
 800c9aa:	f73f aea8 	bgt.w	800c6fe <_dtoa_r+0x91e>
 800c9ae:	e7a9      	b.n	800c904 <_dtoa_r+0xb24>
 800c9b0:	0800e038 	.word	0x0800e038
 800c9b4:	0800de94 	.word	0x0800de94
 800c9b8:	0800dfb9 	.word	0x0800dfb9

0800c9bc <_localeconv_r>:
 800c9bc:	4800      	ldr	r0, [pc, #0]	; (800c9c0 <_localeconv_r+0x4>)
 800c9be:	4770      	bx	lr
 800c9c0:	20000250 	.word	0x20000250

0800c9c4 <malloc>:
 800c9c4:	4b02      	ldr	r3, [pc, #8]	; (800c9d0 <malloc+0xc>)
 800c9c6:	4601      	mov	r1, r0
 800c9c8:	6818      	ldr	r0, [r3, #0]
 800c9ca:	f000 bc09 	b.w	800d1e0 <_malloc_r>
 800c9ce:	bf00      	nop
 800c9d0:	200000fc 	.word	0x200000fc

0800c9d4 <_Balloc>:
 800c9d4:	b570      	push	{r4, r5, r6, lr}
 800c9d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c9d8:	4604      	mov	r4, r0
 800c9da:	460d      	mov	r5, r1
 800c9dc:	b976      	cbnz	r6, 800c9fc <_Balloc+0x28>
 800c9de:	2010      	movs	r0, #16
 800c9e0:	f7ff fff0 	bl	800c9c4 <malloc>
 800c9e4:	4602      	mov	r2, r0
 800c9e6:	6260      	str	r0, [r4, #36]	; 0x24
 800c9e8:	b920      	cbnz	r0, 800c9f4 <_Balloc+0x20>
 800c9ea:	4b18      	ldr	r3, [pc, #96]	; (800ca4c <_Balloc+0x78>)
 800c9ec:	4818      	ldr	r0, [pc, #96]	; (800ca50 <_Balloc+0x7c>)
 800c9ee:	2166      	movs	r1, #102	; 0x66
 800c9f0:	f000 fc7a 	bl	800d2e8 <__assert_func>
 800c9f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9f8:	6006      	str	r6, [r0, #0]
 800c9fa:	60c6      	str	r6, [r0, #12]
 800c9fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c9fe:	68f3      	ldr	r3, [r6, #12]
 800ca00:	b183      	cbz	r3, 800ca24 <_Balloc+0x50>
 800ca02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca04:	68db      	ldr	r3, [r3, #12]
 800ca06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca0a:	b9b8      	cbnz	r0, 800ca3c <_Balloc+0x68>
 800ca0c:	2101      	movs	r1, #1
 800ca0e:	fa01 f605 	lsl.w	r6, r1, r5
 800ca12:	1d72      	adds	r2, r6, #5
 800ca14:	0092      	lsls	r2, r2, #2
 800ca16:	4620      	mov	r0, r4
 800ca18:	f000 fb60 	bl	800d0dc <_calloc_r>
 800ca1c:	b160      	cbz	r0, 800ca38 <_Balloc+0x64>
 800ca1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ca22:	e00e      	b.n	800ca42 <_Balloc+0x6e>
 800ca24:	2221      	movs	r2, #33	; 0x21
 800ca26:	2104      	movs	r1, #4
 800ca28:	4620      	mov	r0, r4
 800ca2a:	f000 fb57 	bl	800d0dc <_calloc_r>
 800ca2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca30:	60f0      	str	r0, [r6, #12]
 800ca32:	68db      	ldr	r3, [r3, #12]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d1e4      	bne.n	800ca02 <_Balloc+0x2e>
 800ca38:	2000      	movs	r0, #0
 800ca3a:	bd70      	pop	{r4, r5, r6, pc}
 800ca3c:	6802      	ldr	r2, [r0, #0]
 800ca3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca42:	2300      	movs	r3, #0
 800ca44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca48:	e7f7      	b.n	800ca3a <_Balloc+0x66>
 800ca4a:	bf00      	nop
 800ca4c:	0800dfc6 	.word	0x0800dfc6
 800ca50:	0800e049 	.word	0x0800e049

0800ca54 <_Bfree>:
 800ca54:	b570      	push	{r4, r5, r6, lr}
 800ca56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ca58:	4605      	mov	r5, r0
 800ca5a:	460c      	mov	r4, r1
 800ca5c:	b976      	cbnz	r6, 800ca7c <_Bfree+0x28>
 800ca5e:	2010      	movs	r0, #16
 800ca60:	f7ff ffb0 	bl	800c9c4 <malloc>
 800ca64:	4602      	mov	r2, r0
 800ca66:	6268      	str	r0, [r5, #36]	; 0x24
 800ca68:	b920      	cbnz	r0, 800ca74 <_Bfree+0x20>
 800ca6a:	4b09      	ldr	r3, [pc, #36]	; (800ca90 <_Bfree+0x3c>)
 800ca6c:	4809      	ldr	r0, [pc, #36]	; (800ca94 <_Bfree+0x40>)
 800ca6e:	218a      	movs	r1, #138	; 0x8a
 800ca70:	f000 fc3a 	bl	800d2e8 <__assert_func>
 800ca74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca78:	6006      	str	r6, [r0, #0]
 800ca7a:	60c6      	str	r6, [r0, #12]
 800ca7c:	b13c      	cbz	r4, 800ca8e <_Bfree+0x3a>
 800ca7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ca80:	6862      	ldr	r2, [r4, #4]
 800ca82:	68db      	ldr	r3, [r3, #12]
 800ca84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca88:	6021      	str	r1, [r4, #0]
 800ca8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ca8e:	bd70      	pop	{r4, r5, r6, pc}
 800ca90:	0800dfc6 	.word	0x0800dfc6
 800ca94:	0800e049 	.word	0x0800e049

0800ca98 <__multadd>:
 800ca98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca9c:	690d      	ldr	r5, [r1, #16]
 800ca9e:	4607      	mov	r7, r0
 800caa0:	460c      	mov	r4, r1
 800caa2:	461e      	mov	r6, r3
 800caa4:	f101 0c14 	add.w	ip, r1, #20
 800caa8:	2000      	movs	r0, #0
 800caaa:	f8dc 3000 	ldr.w	r3, [ip]
 800caae:	b299      	uxth	r1, r3
 800cab0:	fb02 6101 	mla	r1, r2, r1, r6
 800cab4:	0c1e      	lsrs	r6, r3, #16
 800cab6:	0c0b      	lsrs	r3, r1, #16
 800cab8:	fb02 3306 	mla	r3, r2, r6, r3
 800cabc:	b289      	uxth	r1, r1
 800cabe:	3001      	adds	r0, #1
 800cac0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cac4:	4285      	cmp	r5, r0
 800cac6:	f84c 1b04 	str.w	r1, [ip], #4
 800caca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cace:	dcec      	bgt.n	800caaa <__multadd+0x12>
 800cad0:	b30e      	cbz	r6, 800cb16 <__multadd+0x7e>
 800cad2:	68a3      	ldr	r3, [r4, #8]
 800cad4:	42ab      	cmp	r3, r5
 800cad6:	dc19      	bgt.n	800cb0c <__multadd+0x74>
 800cad8:	6861      	ldr	r1, [r4, #4]
 800cada:	4638      	mov	r0, r7
 800cadc:	3101      	adds	r1, #1
 800cade:	f7ff ff79 	bl	800c9d4 <_Balloc>
 800cae2:	4680      	mov	r8, r0
 800cae4:	b928      	cbnz	r0, 800caf2 <__multadd+0x5a>
 800cae6:	4602      	mov	r2, r0
 800cae8:	4b0c      	ldr	r3, [pc, #48]	; (800cb1c <__multadd+0x84>)
 800caea:	480d      	ldr	r0, [pc, #52]	; (800cb20 <__multadd+0x88>)
 800caec:	21b5      	movs	r1, #181	; 0xb5
 800caee:	f000 fbfb 	bl	800d2e8 <__assert_func>
 800caf2:	6922      	ldr	r2, [r4, #16]
 800caf4:	3202      	adds	r2, #2
 800caf6:	f104 010c 	add.w	r1, r4, #12
 800cafa:	0092      	lsls	r2, r2, #2
 800cafc:	300c      	adds	r0, #12
 800cafe:	f7fe fbd7 	bl	800b2b0 <memcpy>
 800cb02:	4621      	mov	r1, r4
 800cb04:	4638      	mov	r0, r7
 800cb06:	f7ff ffa5 	bl	800ca54 <_Bfree>
 800cb0a:	4644      	mov	r4, r8
 800cb0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb10:	3501      	adds	r5, #1
 800cb12:	615e      	str	r6, [r3, #20]
 800cb14:	6125      	str	r5, [r4, #16]
 800cb16:	4620      	mov	r0, r4
 800cb18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb1c:	0800e038 	.word	0x0800e038
 800cb20:	0800e049 	.word	0x0800e049

0800cb24 <__hi0bits>:
 800cb24:	0c03      	lsrs	r3, r0, #16
 800cb26:	041b      	lsls	r3, r3, #16
 800cb28:	b9d3      	cbnz	r3, 800cb60 <__hi0bits+0x3c>
 800cb2a:	0400      	lsls	r0, r0, #16
 800cb2c:	2310      	movs	r3, #16
 800cb2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cb32:	bf04      	itt	eq
 800cb34:	0200      	lsleq	r0, r0, #8
 800cb36:	3308      	addeq	r3, #8
 800cb38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cb3c:	bf04      	itt	eq
 800cb3e:	0100      	lsleq	r0, r0, #4
 800cb40:	3304      	addeq	r3, #4
 800cb42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cb46:	bf04      	itt	eq
 800cb48:	0080      	lsleq	r0, r0, #2
 800cb4a:	3302      	addeq	r3, #2
 800cb4c:	2800      	cmp	r0, #0
 800cb4e:	db05      	blt.n	800cb5c <__hi0bits+0x38>
 800cb50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cb54:	f103 0301 	add.w	r3, r3, #1
 800cb58:	bf08      	it	eq
 800cb5a:	2320      	moveq	r3, #32
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	4770      	bx	lr
 800cb60:	2300      	movs	r3, #0
 800cb62:	e7e4      	b.n	800cb2e <__hi0bits+0xa>

0800cb64 <__lo0bits>:
 800cb64:	6803      	ldr	r3, [r0, #0]
 800cb66:	f013 0207 	ands.w	r2, r3, #7
 800cb6a:	4601      	mov	r1, r0
 800cb6c:	d00b      	beq.n	800cb86 <__lo0bits+0x22>
 800cb6e:	07da      	lsls	r2, r3, #31
 800cb70:	d423      	bmi.n	800cbba <__lo0bits+0x56>
 800cb72:	0798      	lsls	r0, r3, #30
 800cb74:	bf49      	itett	mi
 800cb76:	085b      	lsrmi	r3, r3, #1
 800cb78:	089b      	lsrpl	r3, r3, #2
 800cb7a:	2001      	movmi	r0, #1
 800cb7c:	600b      	strmi	r3, [r1, #0]
 800cb7e:	bf5c      	itt	pl
 800cb80:	600b      	strpl	r3, [r1, #0]
 800cb82:	2002      	movpl	r0, #2
 800cb84:	4770      	bx	lr
 800cb86:	b298      	uxth	r0, r3
 800cb88:	b9a8      	cbnz	r0, 800cbb6 <__lo0bits+0x52>
 800cb8a:	0c1b      	lsrs	r3, r3, #16
 800cb8c:	2010      	movs	r0, #16
 800cb8e:	b2da      	uxtb	r2, r3
 800cb90:	b90a      	cbnz	r2, 800cb96 <__lo0bits+0x32>
 800cb92:	3008      	adds	r0, #8
 800cb94:	0a1b      	lsrs	r3, r3, #8
 800cb96:	071a      	lsls	r2, r3, #28
 800cb98:	bf04      	itt	eq
 800cb9a:	091b      	lsreq	r3, r3, #4
 800cb9c:	3004      	addeq	r0, #4
 800cb9e:	079a      	lsls	r2, r3, #30
 800cba0:	bf04      	itt	eq
 800cba2:	089b      	lsreq	r3, r3, #2
 800cba4:	3002      	addeq	r0, #2
 800cba6:	07da      	lsls	r2, r3, #31
 800cba8:	d403      	bmi.n	800cbb2 <__lo0bits+0x4e>
 800cbaa:	085b      	lsrs	r3, r3, #1
 800cbac:	f100 0001 	add.w	r0, r0, #1
 800cbb0:	d005      	beq.n	800cbbe <__lo0bits+0x5a>
 800cbb2:	600b      	str	r3, [r1, #0]
 800cbb4:	4770      	bx	lr
 800cbb6:	4610      	mov	r0, r2
 800cbb8:	e7e9      	b.n	800cb8e <__lo0bits+0x2a>
 800cbba:	2000      	movs	r0, #0
 800cbbc:	4770      	bx	lr
 800cbbe:	2020      	movs	r0, #32
 800cbc0:	4770      	bx	lr
	...

0800cbc4 <__i2b>:
 800cbc4:	b510      	push	{r4, lr}
 800cbc6:	460c      	mov	r4, r1
 800cbc8:	2101      	movs	r1, #1
 800cbca:	f7ff ff03 	bl	800c9d4 <_Balloc>
 800cbce:	4602      	mov	r2, r0
 800cbd0:	b928      	cbnz	r0, 800cbde <__i2b+0x1a>
 800cbd2:	4b05      	ldr	r3, [pc, #20]	; (800cbe8 <__i2b+0x24>)
 800cbd4:	4805      	ldr	r0, [pc, #20]	; (800cbec <__i2b+0x28>)
 800cbd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cbda:	f000 fb85 	bl	800d2e8 <__assert_func>
 800cbde:	2301      	movs	r3, #1
 800cbe0:	6144      	str	r4, [r0, #20]
 800cbe2:	6103      	str	r3, [r0, #16]
 800cbe4:	bd10      	pop	{r4, pc}
 800cbe6:	bf00      	nop
 800cbe8:	0800e038 	.word	0x0800e038
 800cbec:	0800e049 	.word	0x0800e049

0800cbf0 <__multiply>:
 800cbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf4:	4691      	mov	r9, r2
 800cbf6:	690a      	ldr	r2, [r1, #16]
 800cbf8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	bfb8      	it	lt
 800cc00:	460b      	movlt	r3, r1
 800cc02:	460c      	mov	r4, r1
 800cc04:	bfbc      	itt	lt
 800cc06:	464c      	movlt	r4, r9
 800cc08:	4699      	movlt	r9, r3
 800cc0a:	6927      	ldr	r7, [r4, #16]
 800cc0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cc10:	68a3      	ldr	r3, [r4, #8]
 800cc12:	6861      	ldr	r1, [r4, #4]
 800cc14:	eb07 060a 	add.w	r6, r7, sl
 800cc18:	42b3      	cmp	r3, r6
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	bfb8      	it	lt
 800cc1e:	3101      	addlt	r1, #1
 800cc20:	f7ff fed8 	bl	800c9d4 <_Balloc>
 800cc24:	b930      	cbnz	r0, 800cc34 <__multiply+0x44>
 800cc26:	4602      	mov	r2, r0
 800cc28:	4b44      	ldr	r3, [pc, #272]	; (800cd3c <__multiply+0x14c>)
 800cc2a:	4845      	ldr	r0, [pc, #276]	; (800cd40 <__multiply+0x150>)
 800cc2c:	f240 115d 	movw	r1, #349	; 0x15d
 800cc30:	f000 fb5a 	bl	800d2e8 <__assert_func>
 800cc34:	f100 0514 	add.w	r5, r0, #20
 800cc38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cc3c:	462b      	mov	r3, r5
 800cc3e:	2200      	movs	r2, #0
 800cc40:	4543      	cmp	r3, r8
 800cc42:	d321      	bcc.n	800cc88 <__multiply+0x98>
 800cc44:	f104 0314 	add.w	r3, r4, #20
 800cc48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cc4c:	f109 0314 	add.w	r3, r9, #20
 800cc50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cc54:	9202      	str	r2, [sp, #8]
 800cc56:	1b3a      	subs	r2, r7, r4
 800cc58:	3a15      	subs	r2, #21
 800cc5a:	f022 0203 	bic.w	r2, r2, #3
 800cc5e:	3204      	adds	r2, #4
 800cc60:	f104 0115 	add.w	r1, r4, #21
 800cc64:	428f      	cmp	r7, r1
 800cc66:	bf38      	it	cc
 800cc68:	2204      	movcc	r2, #4
 800cc6a:	9201      	str	r2, [sp, #4]
 800cc6c:	9a02      	ldr	r2, [sp, #8]
 800cc6e:	9303      	str	r3, [sp, #12]
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d80c      	bhi.n	800cc8e <__multiply+0x9e>
 800cc74:	2e00      	cmp	r6, #0
 800cc76:	dd03      	ble.n	800cc80 <__multiply+0x90>
 800cc78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d05a      	beq.n	800cd36 <__multiply+0x146>
 800cc80:	6106      	str	r6, [r0, #16]
 800cc82:	b005      	add	sp, #20
 800cc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc88:	f843 2b04 	str.w	r2, [r3], #4
 800cc8c:	e7d8      	b.n	800cc40 <__multiply+0x50>
 800cc8e:	f8b3 a000 	ldrh.w	sl, [r3]
 800cc92:	f1ba 0f00 	cmp.w	sl, #0
 800cc96:	d024      	beq.n	800cce2 <__multiply+0xf2>
 800cc98:	f104 0e14 	add.w	lr, r4, #20
 800cc9c:	46a9      	mov	r9, r5
 800cc9e:	f04f 0c00 	mov.w	ip, #0
 800cca2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cca6:	f8d9 1000 	ldr.w	r1, [r9]
 800ccaa:	fa1f fb82 	uxth.w	fp, r2
 800ccae:	b289      	uxth	r1, r1
 800ccb0:	fb0a 110b 	mla	r1, sl, fp, r1
 800ccb4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ccb8:	f8d9 2000 	ldr.w	r2, [r9]
 800ccbc:	4461      	add	r1, ip
 800ccbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ccc2:	fb0a c20b 	mla	r2, sl, fp, ip
 800ccc6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ccca:	b289      	uxth	r1, r1
 800cccc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ccd0:	4577      	cmp	r7, lr
 800ccd2:	f849 1b04 	str.w	r1, [r9], #4
 800ccd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ccda:	d8e2      	bhi.n	800cca2 <__multiply+0xb2>
 800ccdc:	9a01      	ldr	r2, [sp, #4]
 800ccde:	f845 c002 	str.w	ip, [r5, r2]
 800cce2:	9a03      	ldr	r2, [sp, #12]
 800cce4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cce8:	3304      	adds	r3, #4
 800ccea:	f1b9 0f00 	cmp.w	r9, #0
 800ccee:	d020      	beq.n	800cd32 <__multiply+0x142>
 800ccf0:	6829      	ldr	r1, [r5, #0]
 800ccf2:	f104 0c14 	add.w	ip, r4, #20
 800ccf6:	46ae      	mov	lr, r5
 800ccf8:	f04f 0a00 	mov.w	sl, #0
 800ccfc:	f8bc b000 	ldrh.w	fp, [ip]
 800cd00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cd04:	fb09 220b 	mla	r2, r9, fp, r2
 800cd08:	4492      	add	sl, r2
 800cd0a:	b289      	uxth	r1, r1
 800cd0c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cd10:	f84e 1b04 	str.w	r1, [lr], #4
 800cd14:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cd18:	f8be 1000 	ldrh.w	r1, [lr]
 800cd1c:	0c12      	lsrs	r2, r2, #16
 800cd1e:	fb09 1102 	mla	r1, r9, r2, r1
 800cd22:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cd26:	4567      	cmp	r7, ip
 800cd28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cd2c:	d8e6      	bhi.n	800ccfc <__multiply+0x10c>
 800cd2e:	9a01      	ldr	r2, [sp, #4]
 800cd30:	50a9      	str	r1, [r5, r2]
 800cd32:	3504      	adds	r5, #4
 800cd34:	e79a      	b.n	800cc6c <__multiply+0x7c>
 800cd36:	3e01      	subs	r6, #1
 800cd38:	e79c      	b.n	800cc74 <__multiply+0x84>
 800cd3a:	bf00      	nop
 800cd3c:	0800e038 	.word	0x0800e038
 800cd40:	0800e049 	.word	0x0800e049

0800cd44 <__pow5mult>:
 800cd44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd48:	4615      	mov	r5, r2
 800cd4a:	f012 0203 	ands.w	r2, r2, #3
 800cd4e:	4606      	mov	r6, r0
 800cd50:	460f      	mov	r7, r1
 800cd52:	d007      	beq.n	800cd64 <__pow5mult+0x20>
 800cd54:	4c25      	ldr	r4, [pc, #148]	; (800cdec <__pow5mult+0xa8>)
 800cd56:	3a01      	subs	r2, #1
 800cd58:	2300      	movs	r3, #0
 800cd5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd5e:	f7ff fe9b 	bl	800ca98 <__multadd>
 800cd62:	4607      	mov	r7, r0
 800cd64:	10ad      	asrs	r5, r5, #2
 800cd66:	d03d      	beq.n	800cde4 <__pow5mult+0xa0>
 800cd68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cd6a:	b97c      	cbnz	r4, 800cd8c <__pow5mult+0x48>
 800cd6c:	2010      	movs	r0, #16
 800cd6e:	f7ff fe29 	bl	800c9c4 <malloc>
 800cd72:	4602      	mov	r2, r0
 800cd74:	6270      	str	r0, [r6, #36]	; 0x24
 800cd76:	b928      	cbnz	r0, 800cd84 <__pow5mult+0x40>
 800cd78:	4b1d      	ldr	r3, [pc, #116]	; (800cdf0 <__pow5mult+0xac>)
 800cd7a:	481e      	ldr	r0, [pc, #120]	; (800cdf4 <__pow5mult+0xb0>)
 800cd7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cd80:	f000 fab2 	bl	800d2e8 <__assert_func>
 800cd84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd88:	6004      	str	r4, [r0, #0]
 800cd8a:	60c4      	str	r4, [r0, #12]
 800cd8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cd90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd94:	b94c      	cbnz	r4, 800cdaa <__pow5mult+0x66>
 800cd96:	f240 2171 	movw	r1, #625	; 0x271
 800cd9a:	4630      	mov	r0, r6
 800cd9c:	f7ff ff12 	bl	800cbc4 <__i2b>
 800cda0:	2300      	movs	r3, #0
 800cda2:	f8c8 0008 	str.w	r0, [r8, #8]
 800cda6:	4604      	mov	r4, r0
 800cda8:	6003      	str	r3, [r0, #0]
 800cdaa:	f04f 0900 	mov.w	r9, #0
 800cdae:	07eb      	lsls	r3, r5, #31
 800cdb0:	d50a      	bpl.n	800cdc8 <__pow5mult+0x84>
 800cdb2:	4639      	mov	r1, r7
 800cdb4:	4622      	mov	r2, r4
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	f7ff ff1a 	bl	800cbf0 <__multiply>
 800cdbc:	4639      	mov	r1, r7
 800cdbe:	4680      	mov	r8, r0
 800cdc0:	4630      	mov	r0, r6
 800cdc2:	f7ff fe47 	bl	800ca54 <_Bfree>
 800cdc6:	4647      	mov	r7, r8
 800cdc8:	106d      	asrs	r5, r5, #1
 800cdca:	d00b      	beq.n	800cde4 <__pow5mult+0xa0>
 800cdcc:	6820      	ldr	r0, [r4, #0]
 800cdce:	b938      	cbnz	r0, 800cde0 <__pow5mult+0x9c>
 800cdd0:	4622      	mov	r2, r4
 800cdd2:	4621      	mov	r1, r4
 800cdd4:	4630      	mov	r0, r6
 800cdd6:	f7ff ff0b 	bl	800cbf0 <__multiply>
 800cdda:	6020      	str	r0, [r4, #0]
 800cddc:	f8c0 9000 	str.w	r9, [r0]
 800cde0:	4604      	mov	r4, r0
 800cde2:	e7e4      	b.n	800cdae <__pow5mult+0x6a>
 800cde4:	4638      	mov	r0, r7
 800cde6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdea:	bf00      	nop
 800cdec:	0800e198 	.word	0x0800e198
 800cdf0:	0800dfc6 	.word	0x0800dfc6
 800cdf4:	0800e049 	.word	0x0800e049

0800cdf8 <__lshift>:
 800cdf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdfc:	460c      	mov	r4, r1
 800cdfe:	6849      	ldr	r1, [r1, #4]
 800ce00:	6923      	ldr	r3, [r4, #16]
 800ce02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ce06:	68a3      	ldr	r3, [r4, #8]
 800ce08:	4607      	mov	r7, r0
 800ce0a:	4691      	mov	r9, r2
 800ce0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ce10:	f108 0601 	add.w	r6, r8, #1
 800ce14:	42b3      	cmp	r3, r6
 800ce16:	db0b      	blt.n	800ce30 <__lshift+0x38>
 800ce18:	4638      	mov	r0, r7
 800ce1a:	f7ff fddb 	bl	800c9d4 <_Balloc>
 800ce1e:	4605      	mov	r5, r0
 800ce20:	b948      	cbnz	r0, 800ce36 <__lshift+0x3e>
 800ce22:	4602      	mov	r2, r0
 800ce24:	4b2a      	ldr	r3, [pc, #168]	; (800ced0 <__lshift+0xd8>)
 800ce26:	482b      	ldr	r0, [pc, #172]	; (800ced4 <__lshift+0xdc>)
 800ce28:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ce2c:	f000 fa5c 	bl	800d2e8 <__assert_func>
 800ce30:	3101      	adds	r1, #1
 800ce32:	005b      	lsls	r3, r3, #1
 800ce34:	e7ee      	b.n	800ce14 <__lshift+0x1c>
 800ce36:	2300      	movs	r3, #0
 800ce38:	f100 0114 	add.w	r1, r0, #20
 800ce3c:	f100 0210 	add.w	r2, r0, #16
 800ce40:	4618      	mov	r0, r3
 800ce42:	4553      	cmp	r3, sl
 800ce44:	db37      	blt.n	800ceb6 <__lshift+0xbe>
 800ce46:	6920      	ldr	r0, [r4, #16]
 800ce48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce4c:	f104 0314 	add.w	r3, r4, #20
 800ce50:	f019 091f 	ands.w	r9, r9, #31
 800ce54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ce5c:	d02f      	beq.n	800cebe <__lshift+0xc6>
 800ce5e:	f1c9 0e20 	rsb	lr, r9, #32
 800ce62:	468a      	mov	sl, r1
 800ce64:	f04f 0c00 	mov.w	ip, #0
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	fa02 f209 	lsl.w	r2, r2, r9
 800ce6e:	ea42 020c 	orr.w	r2, r2, ip
 800ce72:	f84a 2b04 	str.w	r2, [sl], #4
 800ce76:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce7a:	4298      	cmp	r0, r3
 800ce7c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ce80:	d8f2      	bhi.n	800ce68 <__lshift+0x70>
 800ce82:	1b03      	subs	r3, r0, r4
 800ce84:	3b15      	subs	r3, #21
 800ce86:	f023 0303 	bic.w	r3, r3, #3
 800ce8a:	3304      	adds	r3, #4
 800ce8c:	f104 0215 	add.w	r2, r4, #21
 800ce90:	4290      	cmp	r0, r2
 800ce92:	bf38      	it	cc
 800ce94:	2304      	movcc	r3, #4
 800ce96:	f841 c003 	str.w	ip, [r1, r3]
 800ce9a:	f1bc 0f00 	cmp.w	ip, #0
 800ce9e:	d001      	beq.n	800cea4 <__lshift+0xac>
 800cea0:	f108 0602 	add.w	r6, r8, #2
 800cea4:	3e01      	subs	r6, #1
 800cea6:	4638      	mov	r0, r7
 800cea8:	612e      	str	r6, [r5, #16]
 800ceaa:	4621      	mov	r1, r4
 800ceac:	f7ff fdd2 	bl	800ca54 <_Bfree>
 800ceb0:	4628      	mov	r0, r5
 800ceb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceb6:	f842 0f04 	str.w	r0, [r2, #4]!
 800ceba:	3301      	adds	r3, #1
 800cebc:	e7c1      	b.n	800ce42 <__lshift+0x4a>
 800cebe:	3904      	subs	r1, #4
 800cec0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cec4:	f841 2f04 	str.w	r2, [r1, #4]!
 800cec8:	4298      	cmp	r0, r3
 800ceca:	d8f9      	bhi.n	800cec0 <__lshift+0xc8>
 800cecc:	e7ea      	b.n	800cea4 <__lshift+0xac>
 800cece:	bf00      	nop
 800ced0:	0800e038 	.word	0x0800e038
 800ced4:	0800e049 	.word	0x0800e049

0800ced8 <__mcmp>:
 800ced8:	b530      	push	{r4, r5, lr}
 800ceda:	6902      	ldr	r2, [r0, #16]
 800cedc:	690c      	ldr	r4, [r1, #16]
 800cede:	1b12      	subs	r2, r2, r4
 800cee0:	d10e      	bne.n	800cf00 <__mcmp+0x28>
 800cee2:	f100 0314 	add.w	r3, r0, #20
 800cee6:	3114      	adds	r1, #20
 800cee8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ceec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cef0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cef4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cef8:	42a5      	cmp	r5, r4
 800cefa:	d003      	beq.n	800cf04 <__mcmp+0x2c>
 800cefc:	d305      	bcc.n	800cf0a <__mcmp+0x32>
 800cefe:	2201      	movs	r2, #1
 800cf00:	4610      	mov	r0, r2
 800cf02:	bd30      	pop	{r4, r5, pc}
 800cf04:	4283      	cmp	r3, r0
 800cf06:	d3f3      	bcc.n	800cef0 <__mcmp+0x18>
 800cf08:	e7fa      	b.n	800cf00 <__mcmp+0x28>
 800cf0a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf0e:	e7f7      	b.n	800cf00 <__mcmp+0x28>

0800cf10 <__mdiff>:
 800cf10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf14:	460c      	mov	r4, r1
 800cf16:	4606      	mov	r6, r0
 800cf18:	4611      	mov	r1, r2
 800cf1a:	4620      	mov	r0, r4
 800cf1c:	4690      	mov	r8, r2
 800cf1e:	f7ff ffdb 	bl	800ced8 <__mcmp>
 800cf22:	1e05      	subs	r5, r0, #0
 800cf24:	d110      	bne.n	800cf48 <__mdiff+0x38>
 800cf26:	4629      	mov	r1, r5
 800cf28:	4630      	mov	r0, r6
 800cf2a:	f7ff fd53 	bl	800c9d4 <_Balloc>
 800cf2e:	b930      	cbnz	r0, 800cf3e <__mdiff+0x2e>
 800cf30:	4b3a      	ldr	r3, [pc, #232]	; (800d01c <__mdiff+0x10c>)
 800cf32:	4602      	mov	r2, r0
 800cf34:	f240 2132 	movw	r1, #562	; 0x232
 800cf38:	4839      	ldr	r0, [pc, #228]	; (800d020 <__mdiff+0x110>)
 800cf3a:	f000 f9d5 	bl	800d2e8 <__assert_func>
 800cf3e:	2301      	movs	r3, #1
 800cf40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cf44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf48:	bfa4      	itt	ge
 800cf4a:	4643      	movge	r3, r8
 800cf4c:	46a0      	movge	r8, r4
 800cf4e:	4630      	mov	r0, r6
 800cf50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cf54:	bfa6      	itte	ge
 800cf56:	461c      	movge	r4, r3
 800cf58:	2500      	movge	r5, #0
 800cf5a:	2501      	movlt	r5, #1
 800cf5c:	f7ff fd3a 	bl	800c9d4 <_Balloc>
 800cf60:	b920      	cbnz	r0, 800cf6c <__mdiff+0x5c>
 800cf62:	4b2e      	ldr	r3, [pc, #184]	; (800d01c <__mdiff+0x10c>)
 800cf64:	4602      	mov	r2, r0
 800cf66:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cf6a:	e7e5      	b.n	800cf38 <__mdiff+0x28>
 800cf6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cf70:	6926      	ldr	r6, [r4, #16]
 800cf72:	60c5      	str	r5, [r0, #12]
 800cf74:	f104 0914 	add.w	r9, r4, #20
 800cf78:	f108 0514 	add.w	r5, r8, #20
 800cf7c:	f100 0e14 	add.w	lr, r0, #20
 800cf80:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cf84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cf88:	f108 0210 	add.w	r2, r8, #16
 800cf8c:	46f2      	mov	sl, lr
 800cf8e:	2100      	movs	r1, #0
 800cf90:	f859 3b04 	ldr.w	r3, [r9], #4
 800cf94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cf98:	fa1f f883 	uxth.w	r8, r3
 800cf9c:	fa11 f18b 	uxtah	r1, r1, fp
 800cfa0:	0c1b      	lsrs	r3, r3, #16
 800cfa2:	eba1 0808 	sub.w	r8, r1, r8
 800cfa6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cfaa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cfae:	fa1f f888 	uxth.w	r8, r8
 800cfb2:	1419      	asrs	r1, r3, #16
 800cfb4:	454e      	cmp	r6, r9
 800cfb6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cfba:	f84a 3b04 	str.w	r3, [sl], #4
 800cfbe:	d8e7      	bhi.n	800cf90 <__mdiff+0x80>
 800cfc0:	1b33      	subs	r3, r6, r4
 800cfc2:	3b15      	subs	r3, #21
 800cfc4:	f023 0303 	bic.w	r3, r3, #3
 800cfc8:	3304      	adds	r3, #4
 800cfca:	3415      	adds	r4, #21
 800cfcc:	42a6      	cmp	r6, r4
 800cfce:	bf38      	it	cc
 800cfd0:	2304      	movcc	r3, #4
 800cfd2:	441d      	add	r5, r3
 800cfd4:	4473      	add	r3, lr
 800cfd6:	469e      	mov	lr, r3
 800cfd8:	462e      	mov	r6, r5
 800cfda:	4566      	cmp	r6, ip
 800cfdc:	d30e      	bcc.n	800cffc <__mdiff+0xec>
 800cfde:	f10c 0203 	add.w	r2, ip, #3
 800cfe2:	1b52      	subs	r2, r2, r5
 800cfe4:	f022 0203 	bic.w	r2, r2, #3
 800cfe8:	3d03      	subs	r5, #3
 800cfea:	45ac      	cmp	ip, r5
 800cfec:	bf38      	it	cc
 800cfee:	2200      	movcc	r2, #0
 800cff0:	441a      	add	r2, r3
 800cff2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cff6:	b17b      	cbz	r3, 800d018 <__mdiff+0x108>
 800cff8:	6107      	str	r7, [r0, #16]
 800cffa:	e7a3      	b.n	800cf44 <__mdiff+0x34>
 800cffc:	f856 8b04 	ldr.w	r8, [r6], #4
 800d000:	fa11 f288 	uxtah	r2, r1, r8
 800d004:	1414      	asrs	r4, r2, #16
 800d006:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d00a:	b292      	uxth	r2, r2
 800d00c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d010:	f84e 2b04 	str.w	r2, [lr], #4
 800d014:	1421      	asrs	r1, r4, #16
 800d016:	e7e0      	b.n	800cfda <__mdiff+0xca>
 800d018:	3f01      	subs	r7, #1
 800d01a:	e7ea      	b.n	800cff2 <__mdiff+0xe2>
 800d01c:	0800e038 	.word	0x0800e038
 800d020:	0800e049 	.word	0x0800e049

0800d024 <__d2b>:
 800d024:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d028:	4689      	mov	r9, r1
 800d02a:	2101      	movs	r1, #1
 800d02c:	ec57 6b10 	vmov	r6, r7, d0
 800d030:	4690      	mov	r8, r2
 800d032:	f7ff fccf 	bl	800c9d4 <_Balloc>
 800d036:	4604      	mov	r4, r0
 800d038:	b930      	cbnz	r0, 800d048 <__d2b+0x24>
 800d03a:	4602      	mov	r2, r0
 800d03c:	4b25      	ldr	r3, [pc, #148]	; (800d0d4 <__d2b+0xb0>)
 800d03e:	4826      	ldr	r0, [pc, #152]	; (800d0d8 <__d2b+0xb4>)
 800d040:	f240 310a 	movw	r1, #778	; 0x30a
 800d044:	f000 f950 	bl	800d2e8 <__assert_func>
 800d048:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d04c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d050:	bb35      	cbnz	r5, 800d0a0 <__d2b+0x7c>
 800d052:	2e00      	cmp	r6, #0
 800d054:	9301      	str	r3, [sp, #4]
 800d056:	d028      	beq.n	800d0aa <__d2b+0x86>
 800d058:	4668      	mov	r0, sp
 800d05a:	9600      	str	r6, [sp, #0]
 800d05c:	f7ff fd82 	bl	800cb64 <__lo0bits>
 800d060:	9900      	ldr	r1, [sp, #0]
 800d062:	b300      	cbz	r0, 800d0a6 <__d2b+0x82>
 800d064:	9a01      	ldr	r2, [sp, #4]
 800d066:	f1c0 0320 	rsb	r3, r0, #32
 800d06a:	fa02 f303 	lsl.w	r3, r2, r3
 800d06e:	430b      	orrs	r3, r1
 800d070:	40c2      	lsrs	r2, r0
 800d072:	6163      	str	r3, [r4, #20]
 800d074:	9201      	str	r2, [sp, #4]
 800d076:	9b01      	ldr	r3, [sp, #4]
 800d078:	61a3      	str	r3, [r4, #24]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	bf14      	ite	ne
 800d07e:	2202      	movne	r2, #2
 800d080:	2201      	moveq	r2, #1
 800d082:	6122      	str	r2, [r4, #16]
 800d084:	b1d5      	cbz	r5, 800d0bc <__d2b+0x98>
 800d086:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d08a:	4405      	add	r5, r0
 800d08c:	f8c9 5000 	str.w	r5, [r9]
 800d090:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d094:	f8c8 0000 	str.w	r0, [r8]
 800d098:	4620      	mov	r0, r4
 800d09a:	b003      	add	sp, #12
 800d09c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0a4:	e7d5      	b.n	800d052 <__d2b+0x2e>
 800d0a6:	6161      	str	r1, [r4, #20]
 800d0a8:	e7e5      	b.n	800d076 <__d2b+0x52>
 800d0aa:	a801      	add	r0, sp, #4
 800d0ac:	f7ff fd5a 	bl	800cb64 <__lo0bits>
 800d0b0:	9b01      	ldr	r3, [sp, #4]
 800d0b2:	6163      	str	r3, [r4, #20]
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	6122      	str	r2, [r4, #16]
 800d0b8:	3020      	adds	r0, #32
 800d0ba:	e7e3      	b.n	800d084 <__d2b+0x60>
 800d0bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d0c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d0c4:	f8c9 0000 	str.w	r0, [r9]
 800d0c8:	6918      	ldr	r0, [r3, #16]
 800d0ca:	f7ff fd2b 	bl	800cb24 <__hi0bits>
 800d0ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d0d2:	e7df      	b.n	800d094 <__d2b+0x70>
 800d0d4:	0800e038 	.word	0x0800e038
 800d0d8:	0800e049 	.word	0x0800e049

0800d0dc <_calloc_r>:
 800d0dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0de:	fba1 2402 	umull	r2, r4, r1, r2
 800d0e2:	b94c      	cbnz	r4, 800d0f8 <_calloc_r+0x1c>
 800d0e4:	4611      	mov	r1, r2
 800d0e6:	9201      	str	r2, [sp, #4]
 800d0e8:	f000 f87a 	bl	800d1e0 <_malloc_r>
 800d0ec:	9a01      	ldr	r2, [sp, #4]
 800d0ee:	4605      	mov	r5, r0
 800d0f0:	b930      	cbnz	r0, 800d100 <_calloc_r+0x24>
 800d0f2:	4628      	mov	r0, r5
 800d0f4:	b003      	add	sp, #12
 800d0f6:	bd30      	pop	{r4, r5, pc}
 800d0f8:	220c      	movs	r2, #12
 800d0fa:	6002      	str	r2, [r0, #0]
 800d0fc:	2500      	movs	r5, #0
 800d0fe:	e7f8      	b.n	800d0f2 <_calloc_r+0x16>
 800d100:	4621      	mov	r1, r4
 800d102:	f7fe f8e3 	bl	800b2cc <memset>
 800d106:	e7f4      	b.n	800d0f2 <_calloc_r+0x16>

0800d108 <_free_r>:
 800d108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d10a:	2900      	cmp	r1, #0
 800d10c:	d044      	beq.n	800d198 <_free_r+0x90>
 800d10e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d112:	9001      	str	r0, [sp, #4]
 800d114:	2b00      	cmp	r3, #0
 800d116:	f1a1 0404 	sub.w	r4, r1, #4
 800d11a:	bfb8      	it	lt
 800d11c:	18e4      	addlt	r4, r4, r3
 800d11e:	f000 f925 	bl	800d36c <__malloc_lock>
 800d122:	4a1e      	ldr	r2, [pc, #120]	; (800d19c <_free_r+0x94>)
 800d124:	9801      	ldr	r0, [sp, #4]
 800d126:	6813      	ldr	r3, [r2, #0]
 800d128:	b933      	cbnz	r3, 800d138 <_free_r+0x30>
 800d12a:	6063      	str	r3, [r4, #4]
 800d12c:	6014      	str	r4, [r2, #0]
 800d12e:	b003      	add	sp, #12
 800d130:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d134:	f000 b920 	b.w	800d378 <__malloc_unlock>
 800d138:	42a3      	cmp	r3, r4
 800d13a:	d908      	bls.n	800d14e <_free_r+0x46>
 800d13c:	6825      	ldr	r5, [r4, #0]
 800d13e:	1961      	adds	r1, r4, r5
 800d140:	428b      	cmp	r3, r1
 800d142:	bf01      	itttt	eq
 800d144:	6819      	ldreq	r1, [r3, #0]
 800d146:	685b      	ldreq	r3, [r3, #4]
 800d148:	1949      	addeq	r1, r1, r5
 800d14a:	6021      	streq	r1, [r4, #0]
 800d14c:	e7ed      	b.n	800d12a <_free_r+0x22>
 800d14e:	461a      	mov	r2, r3
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	b10b      	cbz	r3, 800d158 <_free_r+0x50>
 800d154:	42a3      	cmp	r3, r4
 800d156:	d9fa      	bls.n	800d14e <_free_r+0x46>
 800d158:	6811      	ldr	r1, [r2, #0]
 800d15a:	1855      	adds	r5, r2, r1
 800d15c:	42a5      	cmp	r5, r4
 800d15e:	d10b      	bne.n	800d178 <_free_r+0x70>
 800d160:	6824      	ldr	r4, [r4, #0]
 800d162:	4421      	add	r1, r4
 800d164:	1854      	adds	r4, r2, r1
 800d166:	42a3      	cmp	r3, r4
 800d168:	6011      	str	r1, [r2, #0]
 800d16a:	d1e0      	bne.n	800d12e <_free_r+0x26>
 800d16c:	681c      	ldr	r4, [r3, #0]
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	6053      	str	r3, [r2, #4]
 800d172:	4421      	add	r1, r4
 800d174:	6011      	str	r1, [r2, #0]
 800d176:	e7da      	b.n	800d12e <_free_r+0x26>
 800d178:	d902      	bls.n	800d180 <_free_r+0x78>
 800d17a:	230c      	movs	r3, #12
 800d17c:	6003      	str	r3, [r0, #0]
 800d17e:	e7d6      	b.n	800d12e <_free_r+0x26>
 800d180:	6825      	ldr	r5, [r4, #0]
 800d182:	1961      	adds	r1, r4, r5
 800d184:	428b      	cmp	r3, r1
 800d186:	bf04      	itt	eq
 800d188:	6819      	ldreq	r1, [r3, #0]
 800d18a:	685b      	ldreq	r3, [r3, #4]
 800d18c:	6063      	str	r3, [r4, #4]
 800d18e:	bf04      	itt	eq
 800d190:	1949      	addeq	r1, r1, r5
 800d192:	6021      	streq	r1, [r4, #0]
 800d194:	6054      	str	r4, [r2, #4]
 800d196:	e7ca      	b.n	800d12e <_free_r+0x26>
 800d198:	b003      	add	sp, #12
 800d19a:	bd30      	pop	{r4, r5, pc}
 800d19c:	20002294 	.word	0x20002294

0800d1a0 <sbrk_aligned>:
 800d1a0:	b570      	push	{r4, r5, r6, lr}
 800d1a2:	4e0e      	ldr	r6, [pc, #56]	; (800d1dc <sbrk_aligned+0x3c>)
 800d1a4:	460c      	mov	r4, r1
 800d1a6:	6831      	ldr	r1, [r6, #0]
 800d1a8:	4605      	mov	r5, r0
 800d1aa:	b911      	cbnz	r1, 800d1b2 <sbrk_aligned+0x12>
 800d1ac:	f000 f88c 	bl	800d2c8 <_sbrk_r>
 800d1b0:	6030      	str	r0, [r6, #0]
 800d1b2:	4621      	mov	r1, r4
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	f000 f887 	bl	800d2c8 <_sbrk_r>
 800d1ba:	1c43      	adds	r3, r0, #1
 800d1bc:	d00a      	beq.n	800d1d4 <sbrk_aligned+0x34>
 800d1be:	1cc4      	adds	r4, r0, #3
 800d1c0:	f024 0403 	bic.w	r4, r4, #3
 800d1c4:	42a0      	cmp	r0, r4
 800d1c6:	d007      	beq.n	800d1d8 <sbrk_aligned+0x38>
 800d1c8:	1a21      	subs	r1, r4, r0
 800d1ca:	4628      	mov	r0, r5
 800d1cc:	f000 f87c 	bl	800d2c8 <_sbrk_r>
 800d1d0:	3001      	adds	r0, #1
 800d1d2:	d101      	bne.n	800d1d8 <sbrk_aligned+0x38>
 800d1d4:	f04f 34ff 	mov.w	r4, #4294967295
 800d1d8:	4620      	mov	r0, r4
 800d1da:	bd70      	pop	{r4, r5, r6, pc}
 800d1dc:	20002298 	.word	0x20002298

0800d1e0 <_malloc_r>:
 800d1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1e4:	1ccd      	adds	r5, r1, #3
 800d1e6:	f025 0503 	bic.w	r5, r5, #3
 800d1ea:	3508      	adds	r5, #8
 800d1ec:	2d0c      	cmp	r5, #12
 800d1ee:	bf38      	it	cc
 800d1f0:	250c      	movcc	r5, #12
 800d1f2:	2d00      	cmp	r5, #0
 800d1f4:	4607      	mov	r7, r0
 800d1f6:	db01      	blt.n	800d1fc <_malloc_r+0x1c>
 800d1f8:	42a9      	cmp	r1, r5
 800d1fa:	d905      	bls.n	800d208 <_malloc_r+0x28>
 800d1fc:	230c      	movs	r3, #12
 800d1fe:	603b      	str	r3, [r7, #0]
 800d200:	2600      	movs	r6, #0
 800d202:	4630      	mov	r0, r6
 800d204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d208:	4e2e      	ldr	r6, [pc, #184]	; (800d2c4 <_malloc_r+0xe4>)
 800d20a:	f000 f8af 	bl	800d36c <__malloc_lock>
 800d20e:	6833      	ldr	r3, [r6, #0]
 800d210:	461c      	mov	r4, r3
 800d212:	bb34      	cbnz	r4, 800d262 <_malloc_r+0x82>
 800d214:	4629      	mov	r1, r5
 800d216:	4638      	mov	r0, r7
 800d218:	f7ff ffc2 	bl	800d1a0 <sbrk_aligned>
 800d21c:	1c43      	adds	r3, r0, #1
 800d21e:	4604      	mov	r4, r0
 800d220:	d14d      	bne.n	800d2be <_malloc_r+0xde>
 800d222:	6834      	ldr	r4, [r6, #0]
 800d224:	4626      	mov	r6, r4
 800d226:	2e00      	cmp	r6, #0
 800d228:	d140      	bne.n	800d2ac <_malloc_r+0xcc>
 800d22a:	6823      	ldr	r3, [r4, #0]
 800d22c:	4631      	mov	r1, r6
 800d22e:	4638      	mov	r0, r7
 800d230:	eb04 0803 	add.w	r8, r4, r3
 800d234:	f000 f848 	bl	800d2c8 <_sbrk_r>
 800d238:	4580      	cmp	r8, r0
 800d23a:	d13a      	bne.n	800d2b2 <_malloc_r+0xd2>
 800d23c:	6821      	ldr	r1, [r4, #0]
 800d23e:	3503      	adds	r5, #3
 800d240:	1a6d      	subs	r5, r5, r1
 800d242:	f025 0503 	bic.w	r5, r5, #3
 800d246:	3508      	adds	r5, #8
 800d248:	2d0c      	cmp	r5, #12
 800d24a:	bf38      	it	cc
 800d24c:	250c      	movcc	r5, #12
 800d24e:	4629      	mov	r1, r5
 800d250:	4638      	mov	r0, r7
 800d252:	f7ff ffa5 	bl	800d1a0 <sbrk_aligned>
 800d256:	3001      	adds	r0, #1
 800d258:	d02b      	beq.n	800d2b2 <_malloc_r+0xd2>
 800d25a:	6823      	ldr	r3, [r4, #0]
 800d25c:	442b      	add	r3, r5
 800d25e:	6023      	str	r3, [r4, #0]
 800d260:	e00e      	b.n	800d280 <_malloc_r+0xa0>
 800d262:	6822      	ldr	r2, [r4, #0]
 800d264:	1b52      	subs	r2, r2, r5
 800d266:	d41e      	bmi.n	800d2a6 <_malloc_r+0xc6>
 800d268:	2a0b      	cmp	r2, #11
 800d26a:	d916      	bls.n	800d29a <_malloc_r+0xba>
 800d26c:	1961      	adds	r1, r4, r5
 800d26e:	42a3      	cmp	r3, r4
 800d270:	6025      	str	r5, [r4, #0]
 800d272:	bf18      	it	ne
 800d274:	6059      	strne	r1, [r3, #4]
 800d276:	6863      	ldr	r3, [r4, #4]
 800d278:	bf08      	it	eq
 800d27a:	6031      	streq	r1, [r6, #0]
 800d27c:	5162      	str	r2, [r4, r5]
 800d27e:	604b      	str	r3, [r1, #4]
 800d280:	4638      	mov	r0, r7
 800d282:	f104 060b 	add.w	r6, r4, #11
 800d286:	f000 f877 	bl	800d378 <__malloc_unlock>
 800d28a:	f026 0607 	bic.w	r6, r6, #7
 800d28e:	1d23      	adds	r3, r4, #4
 800d290:	1af2      	subs	r2, r6, r3
 800d292:	d0b6      	beq.n	800d202 <_malloc_r+0x22>
 800d294:	1b9b      	subs	r3, r3, r6
 800d296:	50a3      	str	r3, [r4, r2]
 800d298:	e7b3      	b.n	800d202 <_malloc_r+0x22>
 800d29a:	6862      	ldr	r2, [r4, #4]
 800d29c:	42a3      	cmp	r3, r4
 800d29e:	bf0c      	ite	eq
 800d2a0:	6032      	streq	r2, [r6, #0]
 800d2a2:	605a      	strne	r2, [r3, #4]
 800d2a4:	e7ec      	b.n	800d280 <_malloc_r+0xa0>
 800d2a6:	4623      	mov	r3, r4
 800d2a8:	6864      	ldr	r4, [r4, #4]
 800d2aa:	e7b2      	b.n	800d212 <_malloc_r+0x32>
 800d2ac:	4634      	mov	r4, r6
 800d2ae:	6876      	ldr	r6, [r6, #4]
 800d2b0:	e7b9      	b.n	800d226 <_malloc_r+0x46>
 800d2b2:	230c      	movs	r3, #12
 800d2b4:	603b      	str	r3, [r7, #0]
 800d2b6:	4638      	mov	r0, r7
 800d2b8:	f000 f85e 	bl	800d378 <__malloc_unlock>
 800d2bc:	e7a1      	b.n	800d202 <_malloc_r+0x22>
 800d2be:	6025      	str	r5, [r4, #0]
 800d2c0:	e7de      	b.n	800d280 <_malloc_r+0xa0>
 800d2c2:	bf00      	nop
 800d2c4:	20002294 	.word	0x20002294

0800d2c8 <_sbrk_r>:
 800d2c8:	b538      	push	{r3, r4, r5, lr}
 800d2ca:	4d06      	ldr	r5, [pc, #24]	; (800d2e4 <_sbrk_r+0x1c>)
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	4604      	mov	r4, r0
 800d2d0:	4608      	mov	r0, r1
 800d2d2:	602b      	str	r3, [r5, #0]
 800d2d4:	f7f4 fd46 	bl	8001d64 <_sbrk>
 800d2d8:	1c43      	adds	r3, r0, #1
 800d2da:	d102      	bne.n	800d2e2 <_sbrk_r+0x1a>
 800d2dc:	682b      	ldr	r3, [r5, #0]
 800d2de:	b103      	cbz	r3, 800d2e2 <_sbrk_r+0x1a>
 800d2e0:	6023      	str	r3, [r4, #0]
 800d2e2:	bd38      	pop	{r3, r4, r5, pc}
 800d2e4:	2000229c 	.word	0x2000229c

0800d2e8 <__assert_func>:
 800d2e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2ea:	4614      	mov	r4, r2
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	4b09      	ldr	r3, [pc, #36]	; (800d314 <__assert_func+0x2c>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	4605      	mov	r5, r0
 800d2f4:	68d8      	ldr	r0, [r3, #12]
 800d2f6:	b14c      	cbz	r4, 800d30c <__assert_func+0x24>
 800d2f8:	4b07      	ldr	r3, [pc, #28]	; (800d318 <__assert_func+0x30>)
 800d2fa:	9100      	str	r1, [sp, #0]
 800d2fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d300:	4906      	ldr	r1, [pc, #24]	; (800d31c <__assert_func+0x34>)
 800d302:	462b      	mov	r3, r5
 800d304:	f000 f80e 	bl	800d324 <fiprintf>
 800d308:	f000 fa64 	bl	800d7d4 <abort>
 800d30c:	4b04      	ldr	r3, [pc, #16]	; (800d320 <__assert_func+0x38>)
 800d30e:	461c      	mov	r4, r3
 800d310:	e7f3      	b.n	800d2fa <__assert_func+0x12>
 800d312:	bf00      	nop
 800d314:	200000fc 	.word	0x200000fc
 800d318:	0800e1a4 	.word	0x0800e1a4
 800d31c:	0800e1b1 	.word	0x0800e1b1
 800d320:	0800e1df 	.word	0x0800e1df

0800d324 <fiprintf>:
 800d324:	b40e      	push	{r1, r2, r3}
 800d326:	b503      	push	{r0, r1, lr}
 800d328:	4601      	mov	r1, r0
 800d32a:	ab03      	add	r3, sp, #12
 800d32c:	4805      	ldr	r0, [pc, #20]	; (800d344 <fiprintf+0x20>)
 800d32e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d332:	6800      	ldr	r0, [r0, #0]
 800d334:	9301      	str	r3, [sp, #4]
 800d336:	f000 f84f 	bl	800d3d8 <_vfiprintf_r>
 800d33a:	b002      	add	sp, #8
 800d33c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d340:	b003      	add	sp, #12
 800d342:	4770      	bx	lr
 800d344:	200000fc 	.word	0x200000fc

0800d348 <__ascii_mbtowc>:
 800d348:	b082      	sub	sp, #8
 800d34a:	b901      	cbnz	r1, 800d34e <__ascii_mbtowc+0x6>
 800d34c:	a901      	add	r1, sp, #4
 800d34e:	b142      	cbz	r2, 800d362 <__ascii_mbtowc+0x1a>
 800d350:	b14b      	cbz	r3, 800d366 <__ascii_mbtowc+0x1e>
 800d352:	7813      	ldrb	r3, [r2, #0]
 800d354:	600b      	str	r3, [r1, #0]
 800d356:	7812      	ldrb	r2, [r2, #0]
 800d358:	1e10      	subs	r0, r2, #0
 800d35a:	bf18      	it	ne
 800d35c:	2001      	movne	r0, #1
 800d35e:	b002      	add	sp, #8
 800d360:	4770      	bx	lr
 800d362:	4610      	mov	r0, r2
 800d364:	e7fb      	b.n	800d35e <__ascii_mbtowc+0x16>
 800d366:	f06f 0001 	mvn.w	r0, #1
 800d36a:	e7f8      	b.n	800d35e <__ascii_mbtowc+0x16>

0800d36c <__malloc_lock>:
 800d36c:	4801      	ldr	r0, [pc, #4]	; (800d374 <__malloc_lock+0x8>)
 800d36e:	f000 bbf1 	b.w	800db54 <__retarget_lock_acquire_recursive>
 800d372:	bf00      	nop
 800d374:	200022a0 	.word	0x200022a0

0800d378 <__malloc_unlock>:
 800d378:	4801      	ldr	r0, [pc, #4]	; (800d380 <__malloc_unlock+0x8>)
 800d37a:	f000 bbec 	b.w	800db56 <__retarget_lock_release_recursive>
 800d37e:	bf00      	nop
 800d380:	200022a0 	.word	0x200022a0

0800d384 <__sfputc_r>:
 800d384:	6893      	ldr	r3, [r2, #8]
 800d386:	3b01      	subs	r3, #1
 800d388:	2b00      	cmp	r3, #0
 800d38a:	b410      	push	{r4}
 800d38c:	6093      	str	r3, [r2, #8]
 800d38e:	da08      	bge.n	800d3a2 <__sfputc_r+0x1e>
 800d390:	6994      	ldr	r4, [r2, #24]
 800d392:	42a3      	cmp	r3, r4
 800d394:	db01      	blt.n	800d39a <__sfputc_r+0x16>
 800d396:	290a      	cmp	r1, #10
 800d398:	d103      	bne.n	800d3a2 <__sfputc_r+0x1e>
 800d39a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d39e:	f000 b94b 	b.w	800d638 <__swbuf_r>
 800d3a2:	6813      	ldr	r3, [r2, #0]
 800d3a4:	1c58      	adds	r0, r3, #1
 800d3a6:	6010      	str	r0, [r2, #0]
 800d3a8:	7019      	strb	r1, [r3, #0]
 800d3aa:	4608      	mov	r0, r1
 800d3ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3b0:	4770      	bx	lr

0800d3b2 <__sfputs_r>:
 800d3b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b4:	4606      	mov	r6, r0
 800d3b6:	460f      	mov	r7, r1
 800d3b8:	4614      	mov	r4, r2
 800d3ba:	18d5      	adds	r5, r2, r3
 800d3bc:	42ac      	cmp	r4, r5
 800d3be:	d101      	bne.n	800d3c4 <__sfputs_r+0x12>
 800d3c0:	2000      	movs	r0, #0
 800d3c2:	e007      	b.n	800d3d4 <__sfputs_r+0x22>
 800d3c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3c8:	463a      	mov	r2, r7
 800d3ca:	4630      	mov	r0, r6
 800d3cc:	f7ff ffda 	bl	800d384 <__sfputc_r>
 800d3d0:	1c43      	adds	r3, r0, #1
 800d3d2:	d1f3      	bne.n	800d3bc <__sfputs_r+0xa>
 800d3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d3d8 <_vfiprintf_r>:
 800d3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3dc:	460d      	mov	r5, r1
 800d3de:	b09d      	sub	sp, #116	; 0x74
 800d3e0:	4614      	mov	r4, r2
 800d3e2:	4698      	mov	r8, r3
 800d3e4:	4606      	mov	r6, r0
 800d3e6:	b118      	cbz	r0, 800d3f0 <_vfiprintf_r+0x18>
 800d3e8:	6983      	ldr	r3, [r0, #24]
 800d3ea:	b90b      	cbnz	r3, 800d3f0 <_vfiprintf_r+0x18>
 800d3ec:	f000 fb14 	bl	800da18 <__sinit>
 800d3f0:	4b89      	ldr	r3, [pc, #548]	; (800d618 <_vfiprintf_r+0x240>)
 800d3f2:	429d      	cmp	r5, r3
 800d3f4:	d11b      	bne.n	800d42e <_vfiprintf_r+0x56>
 800d3f6:	6875      	ldr	r5, [r6, #4]
 800d3f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3fa:	07d9      	lsls	r1, r3, #31
 800d3fc:	d405      	bmi.n	800d40a <_vfiprintf_r+0x32>
 800d3fe:	89ab      	ldrh	r3, [r5, #12]
 800d400:	059a      	lsls	r2, r3, #22
 800d402:	d402      	bmi.n	800d40a <_vfiprintf_r+0x32>
 800d404:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d406:	f000 fba5 	bl	800db54 <__retarget_lock_acquire_recursive>
 800d40a:	89ab      	ldrh	r3, [r5, #12]
 800d40c:	071b      	lsls	r3, r3, #28
 800d40e:	d501      	bpl.n	800d414 <_vfiprintf_r+0x3c>
 800d410:	692b      	ldr	r3, [r5, #16]
 800d412:	b9eb      	cbnz	r3, 800d450 <_vfiprintf_r+0x78>
 800d414:	4629      	mov	r1, r5
 800d416:	4630      	mov	r0, r6
 800d418:	f000 f96e 	bl	800d6f8 <__swsetup_r>
 800d41c:	b1c0      	cbz	r0, 800d450 <_vfiprintf_r+0x78>
 800d41e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d420:	07dc      	lsls	r4, r3, #31
 800d422:	d50e      	bpl.n	800d442 <_vfiprintf_r+0x6a>
 800d424:	f04f 30ff 	mov.w	r0, #4294967295
 800d428:	b01d      	add	sp, #116	; 0x74
 800d42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d42e:	4b7b      	ldr	r3, [pc, #492]	; (800d61c <_vfiprintf_r+0x244>)
 800d430:	429d      	cmp	r5, r3
 800d432:	d101      	bne.n	800d438 <_vfiprintf_r+0x60>
 800d434:	68b5      	ldr	r5, [r6, #8]
 800d436:	e7df      	b.n	800d3f8 <_vfiprintf_r+0x20>
 800d438:	4b79      	ldr	r3, [pc, #484]	; (800d620 <_vfiprintf_r+0x248>)
 800d43a:	429d      	cmp	r5, r3
 800d43c:	bf08      	it	eq
 800d43e:	68f5      	ldreq	r5, [r6, #12]
 800d440:	e7da      	b.n	800d3f8 <_vfiprintf_r+0x20>
 800d442:	89ab      	ldrh	r3, [r5, #12]
 800d444:	0598      	lsls	r0, r3, #22
 800d446:	d4ed      	bmi.n	800d424 <_vfiprintf_r+0x4c>
 800d448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d44a:	f000 fb84 	bl	800db56 <__retarget_lock_release_recursive>
 800d44e:	e7e9      	b.n	800d424 <_vfiprintf_r+0x4c>
 800d450:	2300      	movs	r3, #0
 800d452:	9309      	str	r3, [sp, #36]	; 0x24
 800d454:	2320      	movs	r3, #32
 800d456:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d45a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d45e:	2330      	movs	r3, #48	; 0x30
 800d460:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d624 <_vfiprintf_r+0x24c>
 800d464:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d468:	f04f 0901 	mov.w	r9, #1
 800d46c:	4623      	mov	r3, r4
 800d46e:	469a      	mov	sl, r3
 800d470:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d474:	b10a      	cbz	r2, 800d47a <_vfiprintf_r+0xa2>
 800d476:	2a25      	cmp	r2, #37	; 0x25
 800d478:	d1f9      	bne.n	800d46e <_vfiprintf_r+0x96>
 800d47a:	ebba 0b04 	subs.w	fp, sl, r4
 800d47e:	d00b      	beq.n	800d498 <_vfiprintf_r+0xc0>
 800d480:	465b      	mov	r3, fp
 800d482:	4622      	mov	r2, r4
 800d484:	4629      	mov	r1, r5
 800d486:	4630      	mov	r0, r6
 800d488:	f7ff ff93 	bl	800d3b2 <__sfputs_r>
 800d48c:	3001      	adds	r0, #1
 800d48e:	f000 80aa 	beq.w	800d5e6 <_vfiprintf_r+0x20e>
 800d492:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d494:	445a      	add	r2, fp
 800d496:	9209      	str	r2, [sp, #36]	; 0x24
 800d498:	f89a 3000 	ldrb.w	r3, [sl]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	f000 80a2 	beq.w	800d5e6 <_vfiprintf_r+0x20e>
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4ac:	f10a 0a01 	add.w	sl, sl, #1
 800d4b0:	9304      	str	r3, [sp, #16]
 800d4b2:	9307      	str	r3, [sp, #28]
 800d4b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4b8:	931a      	str	r3, [sp, #104]	; 0x68
 800d4ba:	4654      	mov	r4, sl
 800d4bc:	2205      	movs	r2, #5
 800d4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4c2:	4858      	ldr	r0, [pc, #352]	; (800d624 <_vfiprintf_r+0x24c>)
 800d4c4:	f7f2 fe94 	bl	80001f0 <memchr>
 800d4c8:	9a04      	ldr	r2, [sp, #16]
 800d4ca:	b9d8      	cbnz	r0, 800d504 <_vfiprintf_r+0x12c>
 800d4cc:	06d1      	lsls	r1, r2, #27
 800d4ce:	bf44      	itt	mi
 800d4d0:	2320      	movmi	r3, #32
 800d4d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4d6:	0713      	lsls	r3, r2, #28
 800d4d8:	bf44      	itt	mi
 800d4da:	232b      	movmi	r3, #43	; 0x2b
 800d4dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4e0:	f89a 3000 	ldrb.w	r3, [sl]
 800d4e4:	2b2a      	cmp	r3, #42	; 0x2a
 800d4e6:	d015      	beq.n	800d514 <_vfiprintf_r+0x13c>
 800d4e8:	9a07      	ldr	r2, [sp, #28]
 800d4ea:	4654      	mov	r4, sl
 800d4ec:	2000      	movs	r0, #0
 800d4ee:	f04f 0c0a 	mov.w	ip, #10
 800d4f2:	4621      	mov	r1, r4
 800d4f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4f8:	3b30      	subs	r3, #48	; 0x30
 800d4fa:	2b09      	cmp	r3, #9
 800d4fc:	d94e      	bls.n	800d59c <_vfiprintf_r+0x1c4>
 800d4fe:	b1b0      	cbz	r0, 800d52e <_vfiprintf_r+0x156>
 800d500:	9207      	str	r2, [sp, #28]
 800d502:	e014      	b.n	800d52e <_vfiprintf_r+0x156>
 800d504:	eba0 0308 	sub.w	r3, r0, r8
 800d508:	fa09 f303 	lsl.w	r3, r9, r3
 800d50c:	4313      	orrs	r3, r2
 800d50e:	9304      	str	r3, [sp, #16]
 800d510:	46a2      	mov	sl, r4
 800d512:	e7d2      	b.n	800d4ba <_vfiprintf_r+0xe2>
 800d514:	9b03      	ldr	r3, [sp, #12]
 800d516:	1d19      	adds	r1, r3, #4
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	9103      	str	r1, [sp, #12]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	bfbb      	ittet	lt
 800d520:	425b      	neglt	r3, r3
 800d522:	f042 0202 	orrlt.w	r2, r2, #2
 800d526:	9307      	strge	r3, [sp, #28]
 800d528:	9307      	strlt	r3, [sp, #28]
 800d52a:	bfb8      	it	lt
 800d52c:	9204      	strlt	r2, [sp, #16]
 800d52e:	7823      	ldrb	r3, [r4, #0]
 800d530:	2b2e      	cmp	r3, #46	; 0x2e
 800d532:	d10c      	bne.n	800d54e <_vfiprintf_r+0x176>
 800d534:	7863      	ldrb	r3, [r4, #1]
 800d536:	2b2a      	cmp	r3, #42	; 0x2a
 800d538:	d135      	bne.n	800d5a6 <_vfiprintf_r+0x1ce>
 800d53a:	9b03      	ldr	r3, [sp, #12]
 800d53c:	1d1a      	adds	r2, r3, #4
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	9203      	str	r2, [sp, #12]
 800d542:	2b00      	cmp	r3, #0
 800d544:	bfb8      	it	lt
 800d546:	f04f 33ff 	movlt.w	r3, #4294967295
 800d54a:	3402      	adds	r4, #2
 800d54c:	9305      	str	r3, [sp, #20]
 800d54e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d634 <_vfiprintf_r+0x25c>
 800d552:	7821      	ldrb	r1, [r4, #0]
 800d554:	2203      	movs	r2, #3
 800d556:	4650      	mov	r0, sl
 800d558:	f7f2 fe4a 	bl	80001f0 <memchr>
 800d55c:	b140      	cbz	r0, 800d570 <_vfiprintf_r+0x198>
 800d55e:	2340      	movs	r3, #64	; 0x40
 800d560:	eba0 000a 	sub.w	r0, r0, sl
 800d564:	fa03 f000 	lsl.w	r0, r3, r0
 800d568:	9b04      	ldr	r3, [sp, #16]
 800d56a:	4303      	orrs	r3, r0
 800d56c:	3401      	adds	r4, #1
 800d56e:	9304      	str	r3, [sp, #16]
 800d570:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d574:	482c      	ldr	r0, [pc, #176]	; (800d628 <_vfiprintf_r+0x250>)
 800d576:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d57a:	2206      	movs	r2, #6
 800d57c:	f7f2 fe38 	bl	80001f0 <memchr>
 800d580:	2800      	cmp	r0, #0
 800d582:	d03f      	beq.n	800d604 <_vfiprintf_r+0x22c>
 800d584:	4b29      	ldr	r3, [pc, #164]	; (800d62c <_vfiprintf_r+0x254>)
 800d586:	bb1b      	cbnz	r3, 800d5d0 <_vfiprintf_r+0x1f8>
 800d588:	9b03      	ldr	r3, [sp, #12]
 800d58a:	3307      	adds	r3, #7
 800d58c:	f023 0307 	bic.w	r3, r3, #7
 800d590:	3308      	adds	r3, #8
 800d592:	9303      	str	r3, [sp, #12]
 800d594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d596:	443b      	add	r3, r7
 800d598:	9309      	str	r3, [sp, #36]	; 0x24
 800d59a:	e767      	b.n	800d46c <_vfiprintf_r+0x94>
 800d59c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5a0:	460c      	mov	r4, r1
 800d5a2:	2001      	movs	r0, #1
 800d5a4:	e7a5      	b.n	800d4f2 <_vfiprintf_r+0x11a>
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	3401      	adds	r4, #1
 800d5aa:	9305      	str	r3, [sp, #20]
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	f04f 0c0a 	mov.w	ip, #10
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5b8:	3a30      	subs	r2, #48	; 0x30
 800d5ba:	2a09      	cmp	r2, #9
 800d5bc:	d903      	bls.n	800d5c6 <_vfiprintf_r+0x1ee>
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d0c5      	beq.n	800d54e <_vfiprintf_r+0x176>
 800d5c2:	9105      	str	r1, [sp, #20]
 800d5c4:	e7c3      	b.n	800d54e <_vfiprintf_r+0x176>
 800d5c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	e7f0      	b.n	800d5b2 <_vfiprintf_r+0x1da>
 800d5d0:	ab03      	add	r3, sp, #12
 800d5d2:	9300      	str	r3, [sp, #0]
 800d5d4:	462a      	mov	r2, r5
 800d5d6:	4b16      	ldr	r3, [pc, #88]	; (800d630 <_vfiprintf_r+0x258>)
 800d5d8:	a904      	add	r1, sp, #16
 800d5da:	4630      	mov	r0, r6
 800d5dc:	f7fd ff1e 	bl	800b41c <_printf_float>
 800d5e0:	4607      	mov	r7, r0
 800d5e2:	1c78      	adds	r0, r7, #1
 800d5e4:	d1d6      	bne.n	800d594 <_vfiprintf_r+0x1bc>
 800d5e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5e8:	07d9      	lsls	r1, r3, #31
 800d5ea:	d405      	bmi.n	800d5f8 <_vfiprintf_r+0x220>
 800d5ec:	89ab      	ldrh	r3, [r5, #12]
 800d5ee:	059a      	lsls	r2, r3, #22
 800d5f0:	d402      	bmi.n	800d5f8 <_vfiprintf_r+0x220>
 800d5f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5f4:	f000 faaf 	bl	800db56 <__retarget_lock_release_recursive>
 800d5f8:	89ab      	ldrh	r3, [r5, #12]
 800d5fa:	065b      	lsls	r3, r3, #25
 800d5fc:	f53f af12 	bmi.w	800d424 <_vfiprintf_r+0x4c>
 800d600:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d602:	e711      	b.n	800d428 <_vfiprintf_r+0x50>
 800d604:	ab03      	add	r3, sp, #12
 800d606:	9300      	str	r3, [sp, #0]
 800d608:	462a      	mov	r2, r5
 800d60a:	4b09      	ldr	r3, [pc, #36]	; (800d630 <_vfiprintf_r+0x258>)
 800d60c:	a904      	add	r1, sp, #16
 800d60e:	4630      	mov	r0, r6
 800d610:	f7fe f9a8 	bl	800b964 <_printf_i>
 800d614:	e7e4      	b.n	800d5e0 <_vfiprintf_r+0x208>
 800d616:	bf00      	nop
 800d618:	0800e21c 	.word	0x0800e21c
 800d61c:	0800e23c 	.word	0x0800e23c
 800d620:	0800e1fc 	.word	0x0800e1fc
 800d624:	0800e1ea 	.word	0x0800e1ea
 800d628:	0800e1f4 	.word	0x0800e1f4
 800d62c:	0800b41d 	.word	0x0800b41d
 800d630:	0800d3b3 	.word	0x0800d3b3
 800d634:	0800e1f0 	.word	0x0800e1f0

0800d638 <__swbuf_r>:
 800d638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d63a:	460e      	mov	r6, r1
 800d63c:	4614      	mov	r4, r2
 800d63e:	4605      	mov	r5, r0
 800d640:	b118      	cbz	r0, 800d64a <__swbuf_r+0x12>
 800d642:	6983      	ldr	r3, [r0, #24]
 800d644:	b90b      	cbnz	r3, 800d64a <__swbuf_r+0x12>
 800d646:	f000 f9e7 	bl	800da18 <__sinit>
 800d64a:	4b21      	ldr	r3, [pc, #132]	; (800d6d0 <__swbuf_r+0x98>)
 800d64c:	429c      	cmp	r4, r3
 800d64e:	d12b      	bne.n	800d6a8 <__swbuf_r+0x70>
 800d650:	686c      	ldr	r4, [r5, #4]
 800d652:	69a3      	ldr	r3, [r4, #24]
 800d654:	60a3      	str	r3, [r4, #8]
 800d656:	89a3      	ldrh	r3, [r4, #12]
 800d658:	071a      	lsls	r2, r3, #28
 800d65a:	d52f      	bpl.n	800d6bc <__swbuf_r+0x84>
 800d65c:	6923      	ldr	r3, [r4, #16]
 800d65e:	b36b      	cbz	r3, 800d6bc <__swbuf_r+0x84>
 800d660:	6923      	ldr	r3, [r4, #16]
 800d662:	6820      	ldr	r0, [r4, #0]
 800d664:	1ac0      	subs	r0, r0, r3
 800d666:	6963      	ldr	r3, [r4, #20]
 800d668:	b2f6      	uxtb	r6, r6
 800d66a:	4283      	cmp	r3, r0
 800d66c:	4637      	mov	r7, r6
 800d66e:	dc04      	bgt.n	800d67a <__swbuf_r+0x42>
 800d670:	4621      	mov	r1, r4
 800d672:	4628      	mov	r0, r5
 800d674:	f000 f93c 	bl	800d8f0 <_fflush_r>
 800d678:	bb30      	cbnz	r0, 800d6c8 <__swbuf_r+0x90>
 800d67a:	68a3      	ldr	r3, [r4, #8]
 800d67c:	3b01      	subs	r3, #1
 800d67e:	60a3      	str	r3, [r4, #8]
 800d680:	6823      	ldr	r3, [r4, #0]
 800d682:	1c5a      	adds	r2, r3, #1
 800d684:	6022      	str	r2, [r4, #0]
 800d686:	701e      	strb	r6, [r3, #0]
 800d688:	6963      	ldr	r3, [r4, #20]
 800d68a:	3001      	adds	r0, #1
 800d68c:	4283      	cmp	r3, r0
 800d68e:	d004      	beq.n	800d69a <__swbuf_r+0x62>
 800d690:	89a3      	ldrh	r3, [r4, #12]
 800d692:	07db      	lsls	r3, r3, #31
 800d694:	d506      	bpl.n	800d6a4 <__swbuf_r+0x6c>
 800d696:	2e0a      	cmp	r6, #10
 800d698:	d104      	bne.n	800d6a4 <__swbuf_r+0x6c>
 800d69a:	4621      	mov	r1, r4
 800d69c:	4628      	mov	r0, r5
 800d69e:	f000 f927 	bl	800d8f0 <_fflush_r>
 800d6a2:	b988      	cbnz	r0, 800d6c8 <__swbuf_r+0x90>
 800d6a4:	4638      	mov	r0, r7
 800d6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6a8:	4b0a      	ldr	r3, [pc, #40]	; (800d6d4 <__swbuf_r+0x9c>)
 800d6aa:	429c      	cmp	r4, r3
 800d6ac:	d101      	bne.n	800d6b2 <__swbuf_r+0x7a>
 800d6ae:	68ac      	ldr	r4, [r5, #8]
 800d6b0:	e7cf      	b.n	800d652 <__swbuf_r+0x1a>
 800d6b2:	4b09      	ldr	r3, [pc, #36]	; (800d6d8 <__swbuf_r+0xa0>)
 800d6b4:	429c      	cmp	r4, r3
 800d6b6:	bf08      	it	eq
 800d6b8:	68ec      	ldreq	r4, [r5, #12]
 800d6ba:	e7ca      	b.n	800d652 <__swbuf_r+0x1a>
 800d6bc:	4621      	mov	r1, r4
 800d6be:	4628      	mov	r0, r5
 800d6c0:	f000 f81a 	bl	800d6f8 <__swsetup_r>
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	d0cb      	beq.n	800d660 <__swbuf_r+0x28>
 800d6c8:	f04f 37ff 	mov.w	r7, #4294967295
 800d6cc:	e7ea      	b.n	800d6a4 <__swbuf_r+0x6c>
 800d6ce:	bf00      	nop
 800d6d0:	0800e21c 	.word	0x0800e21c
 800d6d4:	0800e23c 	.word	0x0800e23c
 800d6d8:	0800e1fc 	.word	0x0800e1fc

0800d6dc <__ascii_wctomb>:
 800d6dc:	b149      	cbz	r1, 800d6f2 <__ascii_wctomb+0x16>
 800d6de:	2aff      	cmp	r2, #255	; 0xff
 800d6e0:	bf85      	ittet	hi
 800d6e2:	238a      	movhi	r3, #138	; 0x8a
 800d6e4:	6003      	strhi	r3, [r0, #0]
 800d6e6:	700a      	strbls	r2, [r1, #0]
 800d6e8:	f04f 30ff 	movhi.w	r0, #4294967295
 800d6ec:	bf98      	it	ls
 800d6ee:	2001      	movls	r0, #1
 800d6f0:	4770      	bx	lr
 800d6f2:	4608      	mov	r0, r1
 800d6f4:	4770      	bx	lr
	...

0800d6f8 <__swsetup_r>:
 800d6f8:	4b32      	ldr	r3, [pc, #200]	; (800d7c4 <__swsetup_r+0xcc>)
 800d6fa:	b570      	push	{r4, r5, r6, lr}
 800d6fc:	681d      	ldr	r5, [r3, #0]
 800d6fe:	4606      	mov	r6, r0
 800d700:	460c      	mov	r4, r1
 800d702:	b125      	cbz	r5, 800d70e <__swsetup_r+0x16>
 800d704:	69ab      	ldr	r3, [r5, #24]
 800d706:	b913      	cbnz	r3, 800d70e <__swsetup_r+0x16>
 800d708:	4628      	mov	r0, r5
 800d70a:	f000 f985 	bl	800da18 <__sinit>
 800d70e:	4b2e      	ldr	r3, [pc, #184]	; (800d7c8 <__swsetup_r+0xd0>)
 800d710:	429c      	cmp	r4, r3
 800d712:	d10f      	bne.n	800d734 <__swsetup_r+0x3c>
 800d714:	686c      	ldr	r4, [r5, #4]
 800d716:	89a3      	ldrh	r3, [r4, #12]
 800d718:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d71c:	0719      	lsls	r1, r3, #28
 800d71e:	d42c      	bmi.n	800d77a <__swsetup_r+0x82>
 800d720:	06dd      	lsls	r5, r3, #27
 800d722:	d411      	bmi.n	800d748 <__swsetup_r+0x50>
 800d724:	2309      	movs	r3, #9
 800d726:	6033      	str	r3, [r6, #0]
 800d728:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d72c:	81a3      	strh	r3, [r4, #12]
 800d72e:	f04f 30ff 	mov.w	r0, #4294967295
 800d732:	e03e      	b.n	800d7b2 <__swsetup_r+0xba>
 800d734:	4b25      	ldr	r3, [pc, #148]	; (800d7cc <__swsetup_r+0xd4>)
 800d736:	429c      	cmp	r4, r3
 800d738:	d101      	bne.n	800d73e <__swsetup_r+0x46>
 800d73a:	68ac      	ldr	r4, [r5, #8]
 800d73c:	e7eb      	b.n	800d716 <__swsetup_r+0x1e>
 800d73e:	4b24      	ldr	r3, [pc, #144]	; (800d7d0 <__swsetup_r+0xd8>)
 800d740:	429c      	cmp	r4, r3
 800d742:	bf08      	it	eq
 800d744:	68ec      	ldreq	r4, [r5, #12]
 800d746:	e7e6      	b.n	800d716 <__swsetup_r+0x1e>
 800d748:	0758      	lsls	r0, r3, #29
 800d74a:	d512      	bpl.n	800d772 <__swsetup_r+0x7a>
 800d74c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d74e:	b141      	cbz	r1, 800d762 <__swsetup_r+0x6a>
 800d750:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d754:	4299      	cmp	r1, r3
 800d756:	d002      	beq.n	800d75e <__swsetup_r+0x66>
 800d758:	4630      	mov	r0, r6
 800d75a:	f7ff fcd5 	bl	800d108 <_free_r>
 800d75e:	2300      	movs	r3, #0
 800d760:	6363      	str	r3, [r4, #52]	; 0x34
 800d762:	89a3      	ldrh	r3, [r4, #12]
 800d764:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d768:	81a3      	strh	r3, [r4, #12]
 800d76a:	2300      	movs	r3, #0
 800d76c:	6063      	str	r3, [r4, #4]
 800d76e:	6923      	ldr	r3, [r4, #16]
 800d770:	6023      	str	r3, [r4, #0]
 800d772:	89a3      	ldrh	r3, [r4, #12]
 800d774:	f043 0308 	orr.w	r3, r3, #8
 800d778:	81a3      	strh	r3, [r4, #12]
 800d77a:	6923      	ldr	r3, [r4, #16]
 800d77c:	b94b      	cbnz	r3, 800d792 <__swsetup_r+0x9a>
 800d77e:	89a3      	ldrh	r3, [r4, #12]
 800d780:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d788:	d003      	beq.n	800d792 <__swsetup_r+0x9a>
 800d78a:	4621      	mov	r1, r4
 800d78c:	4630      	mov	r0, r6
 800d78e:	f000 fa09 	bl	800dba4 <__smakebuf_r>
 800d792:	89a0      	ldrh	r0, [r4, #12]
 800d794:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d798:	f010 0301 	ands.w	r3, r0, #1
 800d79c:	d00a      	beq.n	800d7b4 <__swsetup_r+0xbc>
 800d79e:	2300      	movs	r3, #0
 800d7a0:	60a3      	str	r3, [r4, #8]
 800d7a2:	6963      	ldr	r3, [r4, #20]
 800d7a4:	425b      	negs	r3, r3
 800d7a6:	61a3      	str	r3, [r4, #24]
 800d7a8:	6923      	ldr	r3, [r4, #16]
 800d7aa:	b943      	cbnz	r3, 800d7be <__swsetup_r+0xc6>
 800d7ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d7b0:	d1ba      	bne.n	800d728 <__swsetup_r+0x30>
 800d7b2:	bd70      	pop	{r4, r5, r6, pc}
 800d7b4:	0781      	lsls	r1, r0, #30
 800d7b6:	bf58      	it	pl
 800d7b8:	6963      	ldrpl	r3, [r4, #20]
 800d7ba:	60a3      	str	r3, [r4, #8]
 800d7bc:	e7f4      	b.n	800d7a8 <__swsetup_r+0xb0>
 800d7be:	2000      	movs	r0, #0
 800d7c0:	e7f7      	b.n	800d7b2 <__swsetup_r+0xba>
 800d7c2:	bf00      	nop
 800d7c4:	200000fc 	.word	0x200000fc
 800d7c8:	0800e21c 	.word	0x0800e21c
 800d7cc:	0800e23c 	.word	0x0800e23c
 800d7d0:	0800e1fc 	.word	0x0800e1fc

0800d7d4 <abort>:
 800d7d4:	b508      	push	{r3, lr}
 800d7d6:	2006      	movs	r0, #6
 800d7d8:	f000 fa4c 	bl	800dc74 <raise>
 800d7dc:	2001      	movs	r0, #1
 800d7de:	f7f4 fa49 	bl	8001c74 <_exit>
	...

0800d7e4 <__sflush_r>:
 800d7e4:	898a      	ldrh	r2, [r1, #12]
 800d7e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7ea:	4605      	mov	r5, r0
 800d7ec:	0710      	lsls	r0, r2, #28
 800d7ee:	460c      	mov	r4, r1
 800d7f0:	d458      	bmi.n	800d8a4 <__sflush_r+0xc0>
 800d7f2:	684b      	ldr	r3, [r1, #4]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	dc05      	bgt.n	800d804 <__sflush_r+0x20>
 800d7f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	dc02      	bgt.n	800d804 <__sflush_r+0x20>
 800d7fe:	2000      	movs	r0, #0
 800d800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d806:	2e00      	cmp	r6, #0
 800d808:	d0f9      	beq.n	800d7fe <__sflush_r+0x1a>
 800d80a:	2300      	movs	r3, #0
 800d80c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d810:	682f      	ldr	r7, [r5, #0]
 800d812:	602b      	str	r3, [r5, #0]
 800d814:	d032      	beq.n	800d87c <__sflush_r+0x98>
 800d816:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d818:	89a3      	ldrh	r3, [r4, #12]
 800d81a:	075a      	lsls	r2, r3, #29
 800d81c:	d505      	bpl.n	800d82a <__sflush_r+0x46>
 800d81e:	6863      	ldr	r3, [r4, #4]
 800d820:	1ac0      	subs	r0, r0, r3
 800d822:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d824:	b10b      	cbz	r3, 800d82a <__sflush_r+0x46>
 800d826:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d828:	1ac0      	subs	r0, r0, r3
 800d82a:	2300      	movs	r3, #0
 800d82c:	4602      	mov	r2, r0
 800d82e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d830:	6a21      	ldr	r1, [r4, #32]
 800d832:	4628      	mov	r0, r5
 800d834:	47b0      	blx	r6
 800d836:	1c43      	adds	r3, r0, #1
 800d838:	89a3      	ldrh	r3, [r4, #12]
 800d83a:	d106      	bne.n	800d84a <__sflush_r+0x66>
 800d83c:	6829      	ldr	r1, [r5, #0]
 800d83e:	291d      	cmp	r1, #29
 800d840:	d82c      	bhi.n	800d89c <__sflush_r+0xb8>
 800d842:	4a2a      	ldr	r2, [pc, #168]	; (800d8ec <__sflush_r+0x108>)
 800d844:	40ca      	lsrs	r2, r1
 800d846:	07d6      	lsls	r6, r2, #31
 800d848:	d528      	bpl.n	800d89c <__sflush_r+0xb8>
 800d84a:	2200      	movs	r2, #0
 800d84c:	6062      	str	r2, [r4, #4]
 800d84e:	04d9      	lsls	r1, r3, #19
 800d850:	6922      	ldr	r2, [r4, #16]
 800d852:	6022      	str	r2, [r4, #0]
 800d854:	d504      	bpl.n	800d860 <__sflush_r+0x7c>
 800d856:	1c42      	adds	r2, r0, #1
 800d858:	d101      	bne.n	800d85e <__sflush_r+0x7a>
 800d85a:	682b      	ldr	r3, [r5, #0]
 800d85c:	b903      	cbnz	r3, 800d860 <__sflush_r+0x7c>
 800d85e:	6560      	str	r0, [r4, #84]	; 0x54
 800d860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d862:	602f      	str	r7, [r5, #0]
 800d864:	2900      	cmp	r1, #0
 800d866:	d0ca      	beq.n	800d7fe <__sflush_r+0x1a>
 800d868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d86c:	4299      	cmp	r1, r3
 800d86e:	d002      	beq.n	800d876 <__sflush_r+0x92>
 800d870:	4628      	mov	r0, r5
 800d872:	f7ff fc49 	bl	800d108 <_free_r>
 800d876:	2000      	movs	r0, #0
 800d878:	6360      	str	r0, [r4, #52]	; 0x34
 800d87a:	e7c1      	b.n	800d800 <__sflush_r+0x1c>
 800d87c:	6a21      	ldr	r1, [r4, #32]
 800d87e:	2301      	movs	r3, #1
 800d880:	4628      	mov	r0, r5
 800d882:	47b0      	blx	r6
 800d884:	1c41      	adds	r1, r0, #1
 800d886:	d1c7      	bne.n	800d818 <__sflush_r+0x34>
 800d888:	682b      	ldr	r3, [r5, #0]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d0c4      	beq.n	800d818 <__sflush_r+0x34>
 800d88e:	2b1d      	cmp	r3, #29
 800d890:	d001      	beq.n	800d896 <__sflush_r+0xb2>
 800d892:	2b16      	cmp	r3, #22
 800d894:	d101      	bne.n	800d89a <__sflush_r+0xb6>
 800d896:	602f      	str	r7, [r5, #0]
 800d898:	e7b1      	b.n	800d7fe <__sflush_r+0x1a>
 800d89a:	89a3      	ldrh	r3, [r4, #12]
 800d89c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8a0:	81a3      	strh	r3, [r4, #12]
 800d8a2:	e7ad      	b.n	800d800 <__sflush_r+0x1c>
 800d8a4:	690f      	ldr	r7, [r1, #16]
 800d8a6:	2f00      	cmp	r7, #0
 800d8a8:	d0a9      	beq.n	800d7fe <__sflush_r+0x1a>
 800d8aa:	0793      	lsls	r3, r2, #30
 800d8ac:	680e      	ldr	r6, [r1, #0]
 800d8ae:	bf08      	it	eq
 800d8b0:	694b      	ldreq	r3, [r1, #20]
 800d8b2:	600f      	str	r7, [r1, #0]
 800d8b4:	bf18      	it	ne
 800d8b6:	2300      	movne	r3, #0
 800d8b8:	eba6 0807 	sub.w	r8, r6, r7
 800d8bc:	608b      	str	r3, [r1, #8]
 800d8be:	f1b8 0f00 	cmp.w	r8, #0
 800d8c2:	dd9c      	ble.n	800d7fe <__sflush_r+0x1a>
 800d8c4:	6a21      	ldr	r1, [r4, #32]
 800d8c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d8c8:	4643      	mov	r3, r8
 800d8ca:	463a      	mov	r2, r7
 800d8cc:	4628      	mov	r0, r5
 800d8ce:	47b0      	blx	r6
 800d8d0:	2800      	cmp	r0, #0
 800d8d2:	dc06      	bgt.n	800d8e2 <__sflush_r+0xfe>
 800d8d4:	89a3      	ldrh	r3, [r4, #12]
 800d8d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8da:	81a3      	strh	r3, [r4, #12]
 800d8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d8e0:	e78e      	b.n	800d800 <__sflush_r+0x1c>
 800d8e2:	4407      	add	r7, r0
 800d8e4:	eba8 0800 	sub.w	r8, r8, r0
 800d8e8:	e7e9      	b.n	800d8be <__sflush_r+0xda>
 800d8ea:	bf00      	nop
 800d8ec:	20400001 	.word	0x20400001

0800d8f0 <_fflush_r>:
 800d8f0:	b538      	push	{r3, r4, r5, lr}
 800d8f2:	690b      	ldr	r3, [r1, #16]
 800d8f4:	4605      	mov	r5, r0
 800d8f6:	460c      	mov	r4, r1
 800d8f8:	b913      	cbnz	r3, 800d900 <_fflush_r+0x10>
 800d8fa:	2500      	movs	r5, #0
 800d8fc:	4628      	mov	r0, r5
 800d8fe:	bd38      	pop	{r3, r4, r5, pc}
 800d900:	b118      	cbz	r0, 800d90a <_fflush_r+0x1a>
 800d902:	6983      	ldr	r3, [r0, #24]
 800d904:	b90b      	cbnz	r3, 800d90a <_fflush_r+0x1a>
 800d906:	f000 f887 	bl	800da18 <__sinit>
 800d90a:	4b14      	ldr	r3, [pc, #80]	; (800d95c <_fflush_r+0x6c>)
 800d90c:	429c      	cmp	r4, r3
 800d90e:	d11b      	bne.n	800d948 <_fflush_r+0x58>
 800d910:	686c      	ldr	r4, [r5, #4]
 800d912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d0ef      	beq.n	800d8fa <_fflush_r+0xa>
 800d91a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d91c:	07d0      	lsls	r0, r2, #31
 800d91e:	d404      	bmi.n	800d92a <_fflush_r+0x3a>
 800d920:	0599      	lsls	r1, r3, #22
 800d922:	d402      	bmi.n	800d92a <_fflush_r+0x3a>
 800d924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d926:	f000 f915 	bl	800db54 <__retarget_lock_acquire_recursive>
 800d92a:	4628      	mov	r0, r5
 800d92c:	4621      	mov	r1, r4
 800d92e:	f7ff ff59 	bl	800d7e4 <__sflush_r>
 800d932:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d934:	07da      	lsls	r2, r3, #31
 800d936:	4605      	mov	r5, r0
 800d938:	d4e0      	bmi.n	800d8fc <_fflush_r+0xc>
 800d93a:	89a3      	ldrh	r3, [r4, #12]
 800d93c:	059b      	lsls	r3, r3, #22
 800d93e:	d4dd      	bmi.n	800d8fc <_fflush_r+0xc>
 800d940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d942:	f000 f908 	bl	800db56 <__retarget_lock_release_recursive>
 800d946:	e7d9      	b.n	800d8fc <_fflush_r+0xc>
 800d948:	4b05      	ldr	r3, [pc, #20]	; (800d960 <_fflush_r+0x70>)
 800d94a:	429c      	cmp	r4, r3
 800d94c:	d101      	bne.n	800d952 <_fflush_r+0x62>
 800d94e:	68ac      	ldr	r4, [r5, #8]
 800d950:	e7df      	b.n	800d912 <_fflush_r+0x22>
 800d952:	4b04      	ldr	r3, [pc, #16]	; (800d964 <_fflush_r+0x74>)
 800d954:	429c      	cmp	r4, r3
 800d956:	bf08      	it	eq
 800d958:	68ec      	ldreq	r4, [r5, #12]
 800d95a:	e7da      	b.n	800d912 <_fflush_r+0x22>
 800d95c:	0800e21c 	.word	0x0800e21c
 800d960:	0800e23c 	.word	0x0800e23c
 800d964:	0800e1fc 	.word	0x0800e1fc

0800d968 <std>:
 800d968:	2300      	movs	r3, #0
 800d96a:	b510      	push	{r4, lr}
 800d96c:	4604      	mov	r4, r0
 800d96e:	e9c0 3300 	strd	r3, r3, [r0]
 800d972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d976:	6083      	str	r3, [r0, #8]
 800d978:	8181      	strh	r1, [r0, #12]
 800d97a:	6643      	str	r3, [r0, #100]	; 0x64
 800d97c:	81c2      	strh	r2, [r0, #14]
 800d97e:	6183      	str	r3, [r0, #24]
 800d980:	4619      	mov	r1, r3
 800d982:	2208      	movs	r2, #8
 800d984:	305c      	adds	r0, #92	; 0x5c
 800d986:	f7fd fca1 	bl	800b2cc <memset>
 800d98a:	4b05      	ldr	r3, [pc, #20]	; (800d9a0 <std+0x38>)
 800d98c:	6263      	str	r3, [r4, #36]	; 0x24
 800d98e:	4b05      	ldr	r3, [pc, #20]	; (800d9a4 <std+0x3c>)
 800d990:	62a3      	str	r3, [r4, #40]	; 0x28
 800d992:	4b05      	ldr	r3, [pc, #20]	; (800d9a8 <std+0x40>)
 800d994:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d996:	4b05      	ldr	r3, [pc, #20]	; (800d9ac <std+0x44>)
 800d998:	6224      	str	r4, [r4, #32]
 800d99a:	6323      	str	r3, [r4, #48]	; 0x30
 800d99c:	bd10      	pop	{r4, pc}
 800d99e:	bf00      	nop
 800d9a0:	0800dcad 	.word	0x0800dcad
 800d9a4:	0800dccf 	.word	0x0800dccf
 800d9a8:	0800dd07 	.word	0x0800dd07
 800d9ac:	0800dd2b 	.word	0x0800dd2b

0800d9b0 <_cleanup_r>:
 800d9b0:	4901      	ldr	r1, [pc, #4]	; (800d9b8 <_cleanup_r+0x8>)
 800d9b2:	f000 b8af 	b.w	800db14 <_fwalk_reent>
 800d9b6:	bf00      	nop
 800d9b8:	0800d8f1 	.word	0x0800d8f1

0800d9bc <__sfmoreglue>:
 800d9bc:	b570      	push	{r4, r5, r6, lr}
 800d9be:	2268      	movs	r2, #104	; 0x68
 800d9c0:	1e4d      	subs	r5, r1, #1
 800d9c2:	4355      	muls	r5, r2
 800d9c4:	460e      	mov	r6, r1
 800d9c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d9ca:	f7ff fc09 	bl	800d1e0 <_malloc_r>
 800d9ce:	4604      	mov	r4, r0
 800d9d0:	b140      	cbz	r0, 800d9e4 <__sfmoreglue+0x28>
 800d9d2:	2100      	movs	r1, #0
 800d9d4:	e9c0 1600 	strd	r1, r6, [r0]
 800d9d8:	300c      	adds	r0, #12
 800d9da:	60a0      	str	r0, [r4, #8]
 800d9dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d9e0:	f7fd fc74 	bl	800b2cc <memset>
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	bd70      	pop	{r4, r5, r6, pc}

0800d9e8 <__sfp_lock_acquire>:
 800d9e8:	4801      	ldr	r0, [pc, #4]	; (800d9f0 <__sfp_lock_acquire+0x8>)
 800d9ea:	f000 b8b3 	b.w	800db54 <__retarget_lock_acquire_recursive>
 800d9ee:	bf00      	nop
 800d9f0:	200022a1 	.word	0x200022a1

0800d9f4 <__sfp_lock_release>:
 800d9f4:	4801      	ldr	r0, [pc, #4]	; (800d9fc <__sfp_lock_release+0x8>)
 800d9f6:	f000 b8ae 	b.w	800db56 <__retarget_lock_release_recursive>
 800d9fa:	bf00      	nop
 800d9fc:	200022a1 	.word	0x200022a1

0800da00 <__sinit_lock_acquire>:
 800da00:	4801      	ldr	r0, [pc, #4]	; (800da08 <__sinit_lock_acquire+0x8>)
 800da02:	f000 b8a7 	b.w	800db54 <__retarget_lock_acquire_recursive>
 800da06:	bf00      	nop
 800da08:	200022a2 	.word	0x200022a2

0800da0c <__sinit_lock_release>:
 800da0c:	4801      	ldr	r0, [pc, #4]	; (800da14 <__sinit_lock_release+0x8>)
 800da0e:	f000 b8a2 	b.w	800db56 <__retarget_lock_release_recursive>
 800da12:	bf00      	nop
 800da14:	200022a2 	.word	0x200022a2

0800da18 <__sinit>:
 800da18:	b510      	push	{r4, lr}
 800da1a:	4604      	mov	r4, r0
 800da1c:	f7ff fff0 	bl	800da00 <__sinit_lock_acquire>
 800da20:	69a3      	ldr	r3, [r4, #24]
 800da22:	b11b      	cbz	r3, 800da2c <__sinit+0x14>
 800da24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da28:	f7ff bff0 	b.w	800da0c <__sinit_lock_release>
 800da2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800da30:	6523      	str	r3, [r4, #80]	; 0x50
 800da32:	4b13      	ldr	r3, [pc, #76]	; (800da80 <__sinit+0x68>)
 800da34:	4a13      	ldr	r2, [pc, #76]	; (800da84 <__sinit+0x6c>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	62a2      	str	r2, [r4, #40]	; 0x28
 800da3a:	42a3      	cmp	r3, r4
 800da3c:	bf04      	itt	eq
 800da3e:	2301      	moveq	r3, #1
 800da40:	61a3      	streq	r3, [r4, #24]
 800da42:	4620      	mov	r0, r4
 800da44:	f000 f820 	bl	800da88 <__sfp>
 800da48:	6060      	str	r0, [r4, #4]
 800da4a:	4620      	mov	r0, r4
 800da4c:	f000 f81c 	bl	800da88 <__sfp>
 800da50:	60a0      	str	r0, [r4, #8]
 800da52:	4620      	mov	r0, r4
 800da54:	f000 f818 	bl	800da88 <__sfp>
 800da58:	2200      	movs	r2, #0
 800da5a:	60e0      	str	r0, [r4, #12]
 800da5c:	2104      	movs	r1, #4
 800da5e:	6860      	ldr	r0, [r4, #4]
 800da60:	f7ff ff82 	bl	800d968 <std>
 800da64:	68a0      	ldr	r0, [r4, #8]
 800da66:	2201      	movs	r2, #1
 800da68:	2109      	movs	r1, #9
 800da6a:	f7ff ff7d 	bl	800d968 <std>
 800da6e:	68e0      	ldr	r0, [r4, #12]
 800da70:	2202      	movs	r2, #2
 800da72:	2112      	movs	r1, #18
 800da74:	f7ff ff78 	bl	800d968 <std>
 800da78:	2301      	movs	r3, #1
 800da7a:	61a3      	str	r3, [r4, #24]
 800da7c:	e7d2      	b.n	800da24 <__sinit+0xc>
 800da7e:	bf00      	nop
 800da80:	0800de80 	.word	0x0800de80
 800da84:	0800d9b1 	.word	0x0800d9b1

0800da88 <__sfp>:
 800da88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da8a:	4607      	mov	r7, r0
 800da8c:	f7ff ffac 	bl	800d9e8 <__sfp_lock_acquire>
 800da90:	4b1e      	ldr	r3, [pc, #120]	; (800db0c <__sfp+0x84>)
 800da92:	681e      	ldr	r6, [r3, #0]
 800da94:	69b3      	ldr	r3, [r6, #24]
 800da96:	b913      	cbnz	r3, 800da9e <__sfp+0x16>
 800da98:	4630      	mov	r0, r6
 800da9a:	f7ff ffbd 	bl	800da18 <__sinit>
 800da9e:	3648      	adds	r6, #72	; 0x48
 800daa0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800daa4:	3b01      	subs	r3, #1
 800daa6:	d503      	bpl.n	800dab0 <__sfp+0x28>
 800daa8:	6833      	ldr	r3, [r6, #0]
 800daaa:	b30b      	cbz	r3, 800daf0 <__sfp+0x68>
 800daac:	6836      	ldr	r6, [r6, #0]
 800daae:	e7f7      	b.n	800daa0 <__sfp+0x18>
 800dab0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dab4:	b9d5      	cbnz	r5, 800daec <__sfp+0x64>
 800dab6:	4b16      	ldr	r3, [pc, #88]	; (800db10 <__sfp+0x88>)
 800dab8:	60e3      	str	r3, [r4, #12]
 800daba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dabe:	6665      	str	r5, [r4, #100]	; 0x64
 800dac0:	f000 f847 	bl	800db52 <__retarget_lock_init_recursive>
 800dac4:	f7ff ff96 	bl	800d9f4 <__sfp_lock_release>
 800dac8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dacc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dad0:	6025      	str	r5, [r4, #0]
 800dad2:	61a5      	str	r5, [r4, #24]
 800dad4:	2208      	movs	r2, #8
 800dad6:	4629      	mov	r1, r5
 800dad8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dadc:	f7fd fbf6 	bl	800b2cc <memset>
 800dae0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dae4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dae8:	4620      	mov	r0, r4
 800daea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daec:	3468      	adds	r4, #104	; 0x68
 800daee:	e7d9      	b.n	800daa4 <__sfp+0x1c>
 800daf0:	2104      	movs	r1, #4
 800daf2:	4638      	mov	r0, r7
 800daf4:	f7ff ff62 	bl	800d9bc <__sfmoreglue>
 800daf8:	4604      	mov	r4, r0
 800dafa:	6030      	str	r0, [r6, #0]
 800dafc:	2800      	cmp	r0, #0
 800dafe:	d1d5      	bne.n	800daac <__sfp+0x24>
 800db00:	f7ff ff78 	bl	800d9f4 <__sfp_lock_release>
 800db04:	230c      	movs	r3, #12
 800db06:	603b      	str	r3, [r7, #0]
 800db08:	e7ee      	b.n	800dae8 <__sfp+0x60>
 800db0a:	bf00      	nop
 800db0c:	0800de80 	.word	0x0800de80
 800db10:	ffff0001 	.word	0xffff0001

0800db14 <_fwalk_reent>:
 800db14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db18:	4606      	mov	r6, r0
 800db1a:	4688      	mov	r8, r1
 800db1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800db20:	2700      	movs	r7, #0
 800db22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db26:	f1b9 0901 	subs.w	r9, r9, #1
 800db2a:	d505      	bpl.n	800db38 <_fwalk_reent+0x24>
 800db2c:	6824      	ldr	r4, [r4, #0]
 800db2e:	2c00      	cmp	r4, #0
 800db30:	d1f7      	bne.n	800db22 <_fwalk_reent+0xe>
 800db32:	4638      	mov	r0, r7
 800db34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db38:	89ab      	ldrh	r3, [r5, #12]
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d907      	bls.n	800db4e <_fwalk_reent+0x3a>
 800db3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db42:	3301      	adds	r3, #1
 800db44:	d003      	beq.n	800db4e <_fwalk_reent+0x3a>
 800db46:	4629      	mov	r1, r5
 800db48:	4630      	mov	r0, r6
 800db4a:	47c0      	blx	r8
 800db4c:	4307      	orrs	r7, r0
 800db4e:	3568      	adds	r5, #104	; 0x68
 800db50:	e7e9      	b.n	800db26 <_fwalk_reent+0x12>

0800db52 <__retarget_lock_init_recursive>:
 800db52:	4770      	bx	lr

0800db54 <__retarget_lock_acquire_recursive>:
 800db54:	4770      	bx	lr

0800db56 <__retarget_lock_release_recursive>:
 800db56:	4770      	bx	lr

0800db58 <__swhatbuf_r>:
 800db58:	b570      	push	{r4, r5, r6, lr}
 800db5a:	460e      	mov	r6, r1
 800db5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db60:	2900      	cmp	r1, #0
 800db62:	b096      	sub	sp, #88	; 0x58
 800db64:	4614      	mov	r4, r2
 800db66:	461d      	mov	r5, r3
 800db68:	da08      	bge.n	800db7c <__swhatbuf_r+0x24>
 800db6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800db6e:	2200      	movs	r2, #0
 800db70:	602a      	str	r2, [r5, #0]
 800db72:	061a      	lsls	r2, r3, #24
 800db74:	d410      	bmi.n	800db98 <__swhatbuf_r+0x40>
 800db76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db7a:	e00e      	b.n	800db9a <__swhatbuf_r+0x42>
 800db7c:	466a      	mov	r2, sp
 800db7e:	f000 f8fb 	bl	800dd78 <_fstat_r>
 800db82:	2800      	cmp	r0, #0
 800db84:	dbf1      	blt.n	800db6a <__swhatbuf_r+0x12>
 800db86:	9a01      	ldr	r2, [sp, #4]
 800db88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800db8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800db90:	425a      	negs	r2, r3
 800db92:	415a      	adcs	r2, r3
 800db94:	602a      	str	r2, [r5, #0]
 800db96:	e7ee      	b.n	800db76 <__swhatbuf_r+0x1e>
 800db98:	2340      	movs	r3, #64	; 0x40
 800db9a:	2000      	movs	r0, #0
 800db9c:	6023      	str	r3, [r4, #0]
 800db9e:	b016      	add	sp, #88	; 0x58
 800dba0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dba4 <__smakebuf_r>:
 800dba4:	898b      	ldrh	r3, [r1, #12]
 800dba6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dba8:	079d      	lsls	r5, r3, #30
 800dbaa:	4606      	mov	r6, r0
 800dbac:	460c      	mov	r4, r1
 800dbae:	d507      	bpl.n	800dbc0 <__smakebuf_r+0x1c>
 800dbb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dbb4:	6023      	str	r3, [r4, #0]
 800dbb6:	6123      	str	r3, [r4, #16]
 800dbb8:	2301      	movs	r3, #1
 800dbba:	6163      	str	r3, [r4, #20]
 800dbbc:	b002      	add	sp, #8
 800dbbe:	bd70      	pop	{r4, r5, r6, pc}
 800dbc0:	ab01      	add	r3, sp, #4
 800dbc2:	466a      	mov	r2, sp
 800dbc4:	f7ff ffc8 	bl	800db58 <__swhatbuf_r>
 800dbc8:	9900      	ldr	r1, [sp, #0]
 800dbca:	4605      	mov	r5, r0
 800dbcc:	4630      	mov	r0, r6
 800dbce:	f7ff fb07 	bl	800d1e0 <_malloc_r>
 800dbd2:	b948      	cbnz	r0, 800dbe8 <__smakebuf_r+0x44>
 800dbd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbd8:	059a      	lsls	r2, r3, #22
 800dbda:	d4ef      	bmi.n	800dbbc <__smakebuf_r+0x18>
 800dbdc:	f023 0303 	bic.w	r3, r3, #3
 800dbe0:	f043 0302 	orr.w	r3, r3, #2
 800dbe4:	81a3      	strh	r3, [r4, #12]
 800dbe6:	e7e3      	b.n	800dbb0 <__smakebuf_r+0xc>
 800dbe8:	4b0d      	ldr	r3, [pc, #52]	; (800dc20 <__smakebuf_r+0x7c>)
 800dbea:	62b3      	str	r3, [r6, #40]	; 0x28
 800dbec:	89a3      	ldrh	r3, [r4, #12]
 800dbee:	6020      	str	r0, [r4, #0]
 800dbf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbf4:	81a3      	strh	r3, [r4, #12]
 800dbf6:	9b00      	ldr	r3, [sp, #0]
 800dbf8:	6163      	str	r3, [r4, #20]
 800dbfa:	9b01      	ldr	r3, [sp, #4]
 800dbfc:	6120      	str	r0, [r4, #16]
 800dbfe:	b15b      	cbz	r3, 800dc18 <__smakebuf_r+0x74>
 800dc00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc04:	4630      	mov	r0, r6
 800dc06:	f000 f8c9 	bl	800dd9c <_isatty_r>
 800dc0a:	b128      	cbz	r0, 800dc18 <__smakebuf_r+0x74>
 800dc0c:	89a3      	ldrh	r3, [r4, #12]
 800dc0e:	f023 0303 	bic.w	r3, r3, #3
 800dc12:	f043 0301 	orr.w	r3, r3, #1
 800dc16:	81a3      	strh	r3, [r4, #12]
 800dc18:	89a0      	ldrh	r0, [r4, #12]
 800dc1a:	4305      	orrs	r5, r0
 800dc1c:	81a5      	strh	r5, [r4, #12]
 800dc1e:	e7cd      	b.n	800dbbc <__smakebuf_r+0x18>
 800dc20:	0800d9b1 	.word	0x0800d9b1

0800dc24 <_raise_r>:
 800dc24:	291f      	cmp	r1, #31
 800dc26:	b538      	push	{r3, r4, r5, lr}
 800dc28:	4604      	mov	r4, r0
 800dc2a:	460d      	mov	r5, r1
 800dc2c:	d904      	bls.n	800dc38 <_raise_r+0x14>
 800dc2e:	2316      	movs	r3, #22
 800dc30:	6003      	str	r3, [r0, #0]
 800dc32:	f04f 30ff 	mov.w	r0, #4294967295
 800dc36:	bd38      	pop	{r3, r4, r5, pc}
 800dc38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dc3a:	b112      	cbz	r2, 800dc42 <_raise_r+0x1e>
 800dc3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc40:	b94b      	cbnz	r3, 800dc56 <_raise_r+0x32>
 800dc42:	4620      	mov	r0, r4
 800dc44:	f000 f830 	bl	800dca8 <_getpid_r>
 800dc48:	462a      	mov	r2, r5
 800dc4a:	4601      	mov	r1, r0
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc52:	f000 b817 	b.w	800dc84 <_kill_r>
 800dc56:	2b01      	cmp	r3, #1
 800dc58:	d00a      	beq.n	800dc70 <_raise_r+0x4c>
 800dc5a:	1c59      	adds	r1, r3, #1
 800dc5c:	d103      	bne.n	800dc66 <_raise_r+0x42>
 800dc5e:	2316      	movs	r3, #22
 800dc60:	6003      	str	r3, [r0, #0]
 800dc62:	2001      	movs	r0, #1
 800dc64:	e7e7      	b.n	800dc36 <_raise_r+0x12>
 800dc66:	2400      	movs	r4, #0
 800dc68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc6c:	4628      	mov	r0, r5
 800dc6e:	4798      	blx	r3
 800dc70:	2000      	movs	r0, #0
 800dc72:	e7e0      	b.n	800dc36 <_raise_r+0x12>

0800dc74 <raise>:
 800dc74:	4b02      	ldr	r3, [pc, #8]	; (800dc80 <raise+0xc>)
 800dc76:	4601      	mov	r1, r0
 800dc78:	6818      	ldr	r0, [r3, #0]
 800dc7a:	f7ff bfd3 	b.w	800dc24 <_raise_r>
 800dc7e:	bf00      	nop
 800dc80:	200000fc 	.word	0x200000fc

0800dc84 <_kill_r>:
 800dc84:	b538      	push	{r3, r4, r5, lr}
 800dc86:	4d07      	ldr	r5, [pc, #28]	; (800dca4 <_kill_r+0x20>)
 800dc88:	2300      	movs	r3, #0
 800dc8a:	4604      	mov	r4, r0
 800dc8c:	4608      	mov	r0, r1
 800dc8e:	4611      	mov	r1, r2
 800dc90:	602b      	str	r3, [r5, #0]
 800dc92:	f7f3 ffdf 	bl	8001c54 <_kill>
 800dc96:	1c43      	adds	r3, r0, #1
 800dc98:	d102      	bne.n	800dca0 <_kill_r+0x1c>
 800dc9a:	682b      	ldr	r3, [r5, #0]
 800dc9c:	b103      	cbz	r3, 800dca0 <_kill_r+0x1c>
 800dc9e:	6023      	str	r3, [r4, #0]
 800dca0:	bd38      	pop	{r3, r4, r5, pc}
 800dca2:	bf00      	nop
 800dca4:	2000229c 	.word	0x2000229c

0800dca8 <_getpid_r>:
 800dca8:	f7f3 bfcc 	b.w	8001c44 <_getpid>

0800dcac <__sread>:
 800dcac:	b510      	push	{r4, lr}
 800dcae:	460c      	mov	r4, r1
 800dcb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcb4:	f000 f894 	bl	800dde0 <_read_r>
 800dcb8:	2800      	cmp	r0, #0
 800dcba:	bfab      	itete	ge
 800dcbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dcbe:	89a3      	ldrhlt	r3, [r4, #12]
 800dcc0:	181b      	addge	r3, r3, r0
 800dcc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dcc6:	bfac      	ite	ge
 800dcc8:	6563      	strge	r3, [r4, #84]	; 0x54
 800dcca:	81a3      	strhlt	r3, [r4, #12]
 800dccc:	bd10      	pop	{r4, pc}

0800dcce <__swrite>:
 800dcce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcd2:	461f      	mov	r7, r3
 800dcd4:	898b      	ldrh	r3, [r1, #12]
 800dcd6:	05db      	lsls	r3, r3, #23
 800dcd8:	4605      	mov	r5, r0
 800dcda:	460c      	mov	r4, r1
 800dcdc:	4616      	mov	r6, r2
 800dcde:	d505      	bpl.n	800dcec <__swrite+0x1e>
 800dce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dce4:	2302      	movs	r3, #2
 800dce6:	2200      	movs	r2, #0
 800dce8:	f000 f868 	bl	800ddbc <_lseek_r>
 800dcec:	89a3      	ldrh	r3, [r4, #12]
 800dcee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dcf6:	81a3      	strh	r3, [r4, #12]
 800dcf8:	4632      	mov	r2, r6
 800dcfa:	463b      	mov	r3, r7
 800dcfc:	4628      	mov	r0, r5
 800dcfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd02:	f000 b817 	b.w	800dd34 <_write_r>

0800dd06 <__sseek>:
 800dd06:	b510      	push	{r4, lr}
 800dd08:	460c      	mov	r4, r1
 800dd0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd0e:	f000 f855 	bl	800ddbc <_lseek_r>
 800dd12:	1c43      	adds	r3, r0, #1
 800dd14:	89a3      	ldrh	r3, [r4, #12]
 800dd16:	bf15      	itete	ne
 800dd18:	6560      	strne	r0, [r4, #84]	; 0x54
 800dd1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dd1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dd22:	81a3      	strheq	r3, [r4, #12]
 800dd24:	bf18      	it	ne
 800dd26:	81a3      	strhne	r3, [r4, #12]
 800dd28:	bd10      	pop	{r4, pc}

0800dd2a <__sclose>:
 800dd2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd2e:	f000 b813 	b.w	800dd58 <_close_r>
	...

0800dd34 <_write_r>:
 800dd34:	b538      	push	{r3, r4, r5, lr}
 800dd36:	4d07      	ldr	r5, [pc, #28]	; (800dd54 <_write_r+0x20>)
 800dd38:	4604      	mov	r4, r0
 800dd3a:	4608      	mov	r0, r1
 800dd3c:	4611      	mov	r1, r2
 800dd3e:	2200      	movs	r2, #0
 800dd40:	602a      	str	r2, [r5, #0]
 800dd42:	461a      	mov	r2, r3
 800dd44:	f7f3 ffbd 	bl	8001cc2 <_write>
 800dd48:	1c43      	adds	r3, r0, #1
 800dd4a:	d102      	bne.n	800dd52 <_write_r+0x1e>
 800dd4c:	682b      	ldr	r3, [r5, #0]
 800dd4e:	b103      	cbz	r3, 800dd52 <_write_r+0x1e>
 800dd50:	6023      	str	r3, [r4, #0]
 800dd52:	bd38      	pop	{r3, r4, r5, pc}
 800dd54:	2000229c 	.word	0x2000229c

0800dd58 <_close_r>:
 800dd58:	b538      	push	{r3, r4, r5, lr}
 800dd5a:	4d06      	ldr	r5, [pc, #24]	; (800dd74 <_close_r+0x1c>)
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	4604      	mov	r4, r0
 800dd60:	4608      	mov	r0, r1
 800dd62:	602b      	str	r3, [r5, #0]
 800dd64:	f7f3 ffc9 	bl	8001cfa <_close>
 800dd68:	1c43      	adds	r3, r0, #1
 800dd6a:	d102      	bne.n	800dd72 <_close_r+0x1a>
 800dd6c:	682b      	ldr	r3, [r5, #0]
 800dd6e:	b103      	cbz	r3, 800dd72 <_close_r+0x1a>
 800dd70:	6023      	str	r3, [r4, #0]
 800dd72:	bd38      	pop	{r3, r4, r5, pc}
 800dd74:	2000229c 	.word	0x2000229c

0800dd78 <_fstat_r>:
 800dd78:	b538      	push	{r3, r4, r5, lr}
 800dd7a:	4d07      	ldr	r5, [pc, #28]	; (800dd98 <_fstat_r+0x20>)
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	4604      	mov	r4, r0
 800dd80:	4608      	mov	r0, r1
 800dd82:	4611      	mov	r1, r2
 800dd84:	602b      	str	r3, [r5, #0]
 800dd86:	f7f3 ffc4 	bl	8001d12 <_fstat>
 800dd8a:	1c43      	adds	r3, r0, #1
 800dd8c:	d102      	bne.n	800dd94 <_fstat_r+0x1c>
 800dd8e:	682b      	ldr	r3, [r5, #0]
 800dd90:	b103      	cbz	r3, 800dd94 <_fstat_r+0x1c>
 800dd92:	6023      	str	r3, [r4, #0]
 800dd94:	bd38      	pop	{r3, r4, r5, pc}
 800dd96:	bf00      	nop
 800dd98:	2000229c 	.word	0x2000229c

0800dd9c <_isatty_r>:
 800dd9c:	b538      	push	{r3, r4, r5, lr}
 800dd9e:	4d06      	ldr	r5, [pc, #24]	; (800ddb8 <_isatty_r+0x1c>)
 800dda0:	2300      	movs	r3, #0
 800dda2:	4604      	mov	r4, r0
 800dda4:	4608      	mov	r0, r1
 800dda6:	602b      	str	r3, [r5, #0]
 800dda8:	f7f3 ffc3 	bl	8001d32 <_isatty>
 800ddac:	1c43      	adds	r3, r0, #1
 800ddae:	d102      	bne.n	800ddb6 <_isatty_r+0x1a>
 800ddb0:	682b      	ldr	r3, [r5, #0]
 800ddb2:	b103      	cbz	r3, 800ddb6 <_isatty_r+0x1a>
 800ddb4:	6023      	str	r3, [r4, #0]
 800ddb6:	bd38      	pop	{r3, r4, r5, pc}
 800ddb8:	2000229c 	.word	0x2000229c

0800ddbc <_lseek_r>:
 800ddbc:	b538      	push	{r3, r4, r5, lr}
 800ddbe:	4d07      	ldr	r5, [pc, #28]	; (800dddc <_lseek_r+0x20>)
 800ddc0:	4604      	mov	r4, r0
 800ddc2:	4608      	mov	r0, r1
 800ddc4:	4611      	mov	r1, r2
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	602a      	str	r2, [r5, #0]
 800ddca:	461a      	mov	r2, r3
 800ddcc:	f7f3 ffbc 	bl	8001d48 <_lseek>
 800ddd0:	1c43      	adds	r3, r0, #1
 800ddd2:	d102      	bne.n	800ddda <_lseek_r+0x1e>
 800ddd4:	682b      	ldr	r3, [r5, #0]
 800ddd6:	b103      	cbz	r3, 800ddda <_lseek_r+0x1e>
 800ddd8:	6023      	str	r3, [r4, #0]
 800ddda:	bd38      	pop	{r3, r4, r5, pc}
 800dddc:	2000229c 	.word	0x2000229c

0800dde0 <_read_r>:
 800dde0:	b538      	push	{r3, r4, r5, lr}
 800dde2:	4d07      	ldr	r5, [pc, #28]	; (800de00 <_read_r+0x20>)
 800dde4:	4604      	mov	r4, r0
 800dde6:	4608      	mov	r0, r1
 800dde8:	4611      	mov	r1, r2
 800ddea:	2200      	movs	r2, #0
 800ddec:	602a      	str	r2, [r5, #0]
 800ddee:	461a      	mov	r2, r3
 800ddf0:	f7f3 ff4a 	bl	8001c88 <_read>
 800ddf4:	1c43      	adds	r3, r0, #1
 800ddf6:	d102      	bne.n	800ddfe <_read_r+0x1e>
 800ddf8:	682b      	ldr	r3, [r5, #0]
 800ddfa:	b103      	cbz	r3, 800ddfe <_read_r+0x1e>
 800ddfc:	6023      	str	r3, [r4, #0]
 800ddfe:	bd38      	pop	{r3, r4, r5, pc}
 800de00:	2000229c 	.word	0x2000229c

0800de04 <_init>:
 800de04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de06:	bf00      	nop
 800de08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de0a:	bc08      	pop	{r3}
 800de0c:	469e      	mov	lr, r3
 800de0e:	4770      	bx	lr

0800de10 <_fini>:
 800de10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de12:	bf00      	nop
 800de14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de16:	bc08      	pop	{r3}
 800de18:	469e      	mov	lr, r3
 800de1a:	4770      	bx	lr
